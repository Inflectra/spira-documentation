{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Spira Platform Documentation Documentation version This site was last updated for version 6.3.0.1 of SpiraTest, SpiraTeam, and SpiraPlan This documentation is for the entire Spira suite of products: SpiraTest, SpiraTeam, SpiraPlan, and all relevant addons and extensions. Use the menu on the left to navigate to the different documentation pages. On each page the navigation on the right helps you move around the section of that specific page Please send comments and questions to: Technical Publications Inflectra Corporation 8121 Georgia Ave, Suite 504 Silver Spring, MD 20910-4957 U.S.A. support@inflectra.com","title":"Spira Platform Documentation"},{"location":"#spira-platform-documentation","text":"Documentation version This site was last updated for version 6.3.0.1 of SpiraTest, SpiraTeam, and SpiraPlan This documentation is for the entire Spira suite of products: SpiraTest, SpiraTeam, SpiraPlan, and all relevant addons and extensions. Use the menu on the left to navigate to the different documentation pages. On each page the navigation on the right helps you move around the section of that specific page Please send comments and questions to: Technical Publications Inflectra Corporation 8121 Georgia Ave, Suite 504 Silver Spring, MD 20910-4957 U.S.A. support@inflectra.com","title":"Spira Platform Documentation"},{"location":"About/introduction-to-spira/","text":"Introduction to Spira The Spira\u2122 family of applications from Inflectra\u00ae are a powerful set of tools that help you manage your software lifecycle. SpiraTest\u00ae is our powerful and easy to use requirements, test and defect management system, ideal for quality assurance teams. SpiraTeam\u00ae is our integrated Application Lifecycle Management (ALM) system that manages your product's requirements, releases, test cases, issues and tasks in one unified environment. SpiraPlan\u00ae expands on the features in SpiraTeam\u00ae to provide a complete Enterprise Agile Planning\u00ae solution that lets you manage risks, products, programs and the entire organization with ease. Quality Assurance Quality Assurance is a key component of the Software Development Life-Cycle (SDLC), which needs to be integrated into the planning and management of a program or product from its inception. Too often though, QA is implemented as Quality Control - whereby testing that the required functionality works as expected, is performed at the end, when it is most costly to make corrections and changes. To manage QA across a product from day one, it is imperative that the original requirements are documented together with the use-cases that validate the desired functionality. These use-cases then form the basis of the test scripts that can be executed to validate that the functionality has been correctly built, and that the requirements have been satisfied. During the execution of these test scripts, failures may occur, which are recorded as incidents - either to be fixed or documented depending on the severity. Typically, these activities require people to use at least three different types of software: Requirements Management Test Script Management Defect / Issue / Bug Tracking However, this stove-piped approach has many limitations and drawbacks, most importantly the fact that there is no traceability between the different artifacts. How can the product manager know that all the requirements have been tested? Conversely, how can the developer know which test script was responsible for a recorded bug -- needed to accurately reproduce the issue? Product Management As described in the Agile Manifesto, traditional waterfall software methodologies and lifecycles have failed to delivery products on-time and on-budget. In addition, many systems built this way will fail to provide the expected business value as there is no ability to quickly refine the requirements as the product progresses. Consequently, software development has been transformed with these new ideas and concepts, with new agile methodologies such as Scrum, and Kanban becoming common. However, the traditional tools of product management - requirements specifications, high level product plans, GANTT charts, white-board schedules and top-down task management - are too cumbersome and not well suited.","title":"Introduction to Spira"},{"location":"About/introduction-to-spira/#introduction-to-spira","text":"The Spira\u2122 family of applications from Inflectra\u00ae are a powerful set of tools that help you manage your software lifecycle. SpiraTest\u00ae is our powerful and easy to use requirements, test and defect management system, ideal for quality assurance teams. SpiraTeam\u00ae is our integrated Application Lifecycle Management (ALM) system that manages your product's requirements, releases, test cases, issues and tasks in one unified environment. SpiraPlan\u00ae expands on the features in SpiraTeam\u00ae to provide a complete Enterprise Agile Planning\u00ae solution that lets you manage risks, products, programs and the entire organization with ease.","title":"Introduction to Spira"},{"location":"About/introduction-to-spira/#quality-assurance","text":"Quality Assurance is a key component of the Software Development Life-Cycle (SDLC), which needs to be integrated into the planning and management of a program or product from its inception. Too often though, QA is implemented as Quality Control - whereby testing that the required functionality works as expected, is performed at the end, when it is most costly to make corrections and changes. To manage QA across a product from day one, it is imperative that the original requirements are documented together with the use-cases that validate the desired functionality. These use-cases then form the basis of the test scripts that can be executed to validate that the functionality has been correctly built, and that the requirements have been satisfied. During the execution of these test scripts, failures may occur, which are recorded as incidents - either to be fixed or documented depending on the severity. Typically, these activities require people to use at least three different types of software: Requirements Management Test Script Management Defect / Issue / Bug Tracking However, this stove-piped approach has many limitations and drawbacks, most importantly the fact that there is no traceability between the different artifacts. How can the product manager know that all the requirements have been tested? Conversely, how can the developer know which test script was responsible for a recorded bug -- needed to accurately reproduce the issue?","title":"Quality Assurance"},{"location":"About/introduction-to-spira/#product-management","text":"As described in the Agile Manifesto, traditional waterfall software methodologies and lifecycles have failed to delivery products on-time and on-budget. In addition, many systems built this way will fail to provide the expected business value as there is no ability to quickly refine the requirements as the product progresses. Consequently, software development has been transformed with these new ideas and concepts, with new agile methodologies such as Scrum, and Kanban becoming common. However, the traditional tools of product management - requirements specifications, high level product plans, GANTT charts, white-board schedules and top-down task management - are too cumbersome and not well suited.","title":"Product Management"},{"location":"About/legal-notices/","text":"Legal Notices This publication is provided as is without warranty of any kind, either express or implied, including, but not limited to, the implied warranties of merchantability, fitness for a particular purpose, or non-infringement. This publication could include technical inaccuracies or typographical errors. Changes are periodically added to the information contained herein; these changes will be incorporated in new editions of the publication. Inflectra Corporation may make improvements and/or changes in the product(s) and/or program(s) and/or service(s) described in this publication at any time. The sections in this guide that discuss internet web security are provided as suggestions and guidelines. Internet security is constantly evolving field, and our suggestions are no substitute for an up-to-date understanding of the vulnerabilities inherent in deploying internet or web applications, and Inflectra cannot be held liable for any losses due to breaches of security, compromise of data or other cyber-attacks that may result from following our recommendations. The section of the manual that describes modifying the Windows System Registry (\"Registry\") should only be attempted by experienced Windows administrators who are familiar with its organization and contents. Inflectra \u00ae cannot be held liable for any losses due to damage to the system registry made by inexperienced personnel. Spira\u2122, TaraVault \u00ae , SpiraPlan \u00ae , SpiraTeam \u00ae , SpiraTest \u00ae and Inflectra \u00ae are either trademarks or registered trademarks of Inflectra Corporation in the United States of America and other countries. Microsoft \u00ae , Windows \u00ae , Explorer \u00ae , Microsoft Project \u00ae and Visual SourceSafe \u00ae are registered trademarks of Microsoft Corporation. Subversion \u00ae is a registered trademark of Collabnet, Inc. iOS, iPod, iPad and iPhone are registered trademarks of Apple Corporation, Android\u00ae is a registered trademark of Google Corporation, and Kindle Fire\u00ae is a registered trademark of Amazon LLC. All other trademarks and product names are property of their respective holders.","title":"Legal Notices"},{"location":"About/legal-notices/#legal-notices","text":"This publication is provided as is without warranty of any kind, either express or implied, including, but not limited to, the implied warranties of merchantability, fitness for a particular purpose, or non-infringement. This publication could include technical inaccuracies or typographical errors. Changes are periodically added to the information contained herein; these changes will be incorporated in new editions of the publication. Inflectra Corporation may make improvements and/or changes in the product(s) and/or program(s) and/or service(s) described in this publication at any time. The sections in this guide that discuss internet web security are provided as suggestions and guidelines. Internet security is constantly evolving field, and our suggestions are no substitute for an up-to-date understanding of the vulnerabilities inherent in deploying internet or web applications, and Inflectra cannot be held liable for any losses due to breaches of security, compromise of data or other cyber-attacks that may result from following our recommendations. The section of the manual that describes modifying the Windows System Registry (\"Registry\") should only be attempted by experienced Windows administrators who are familiar with its organization and contents. Inflectra \u00ae cannot be held liable for any losses due to damage to the system registry made by inexperienced personnel. Spira\u2122, TaraVault \u00ae , SpiraPlan \u00ae , SpiraTeam \u00ae , SpiraTest \u00ae and Inflectra \u00ae are either trademarks or registered trademarks of Inflectra Corporation in the United States of America and other countries. Microsoft \u00ae , Windows \u00ae , Explorer \u00ae , Microsoft Project \u00ae and Visual SourceSafe \u00ae are registered trademarks of Microsoft Corporation. Subversion \u00ae is a registered trademark of Collabnet, Inc. iOS, iPod, iPad and iPhone are registered trademarks of Apple Corporation, Android\u00ae is a registered trademark of Google Corporation, and Kindle Fire\u00ae is a registered trademark of Amazon LLC. All other trademarks and product names are property of their respective holders.","title":"Legal Notices"},{"location":"About/release-notes-v5/","text":"Release Notes for Spira v5 Version 5.4.0.4 (June 2018) Summary Security and Performance improvements : enforced password expiration and restrictions, requirements management module now 400% faster New artifact icons : more contemporary, visually striking, with a modular consistent design New Features and Fixes Exploratory testing: associated incidents are not shown during test execution- [IN:4461] Exploratory test containing a link to another test case: upon saving, the link is removed.- [IN:4466] Saving Automation info with error gives concurrency error.- [IN:4563] Sorting of test run sections in reports incorrect- [IN:4638] Edit button appears on some association tabs where it should not.- [IN:4640] Allow Source Code Sidebar to be Expandable- [IN:4649] Parameters Pop-up Window Can;t be Dragged & Dropped- [IN:4650] Test execution page jitters and shakes at specific screen and page height combinations- [IN:4651] Ability to require users to change password at certain intervals [RQ:35] Improvements to TaraVault [RQ:2170] Version 5.4 (February 2018) Summary TaraVault unlimited for all SpiraTeam and SpiraPlan cloud users : To celebrate the start of a new decade, our cloud source code management solution, TaraVault, is now included at no extra charge, for all the users and repositories and branches you want. Improvements to filters : Update your filters and shared filters easily. Create filters that also include information about which columns you have visible, their sort, order, and width. This is a great way for saving specific \u201cviews\u201d you and your teams need. Improved navigation between folders and hierarchies : Each folder now has its own unique url, so you can share links to specific folders with your team. For requirements, releases, and all artifacts with folders new clickable breadcrumbs making it easy to go straight to an artifact\u2019s parent. New features Document Management Remove document popup- [RQ:1867] live reloading: document details page- [RQ:2099] Program Management Add a project-group level incident list page for programs- [RQ:1896] Program-view of Planning > Releases- [RQ:2165] Project Management Add incident-only planning board- [RQ:1911] Add Task-only planning board- [RQ:1913] Ability to Split a User Story (requirement)- [RQ:2160] Live reloading on the release > build page- [RQ:2161] Implement Bulk Edit permission- [RQ:2169] Reporting Custom SQL widget for graphs- [RQ:2173] Add graphs to list pages and changing release list- [RQ:2175] Bug fixes and enhancements Need to prevent a test being executed if it has test cases in an invalid status for execution- [IN:4387] Duplicate Source Code Revision Session IDs in v5.3.04+- [IN:4458] Preview tab on Document Details breaks for XML documents!- [IN:4182] Instant Messenger Post as Comments function doesn't work- [IN:4288] Test set total estimated duration does not refresh if individual test case est dur is changed- [IN:4316] Extend the length of data sync password column in DB. It gets truncated too easily- [IN:4331] Foreign Key Exception error when cloning a test step from the test step details screen- [IN:4335] Error displayed when you try and import test steps from root folder- [IN:4343] Release execution status not updated when test runs are deleted or edited.- [IN:4349] Document detail page: with Modify Owned permission, save button is never enabled- [IN:4351] Exploratory Test Execution throws fault exception error in SpiraTest / team if user does not have view access to tasks- [IN:4356] Test Set Status Widget includes deleted Test Sets- [IN:4363] Exception removing a parameter from a test case if it is used in any test configuration- [IN:4384] Moving iteration should update test coverage but it does not.- [IN:4463] Rich text fields created using API can contain script tags which are not filtered out on fields without CKEditor- [IN:4468] No cross-association displayed in TESTCASE dedicated sub-tab- [IN:4475] On first load of attachments tab, the wrong documents are loaded briefly- [IN:4478] Exploratory testing: When run from \"My Assigned Test Cases\" test case doesn't go into exploratory mode- [IN:4506] Split requirement dialog has a place to specify owner but it does not get used- [IN:4510] Subscribe to a Document- [IN:2488] Change Test case copy to place copy below, rather than above, the copied test case- [IN:2570] Excel 2003 reports show blank effort as zeros and incorrectly show effort as percentages- [IN:2797] Version Control - Date sorting appears to put dates \"in the future\" at the bottom of the list (when sorting descending)- [IN:3003] Source Code Revisions page: problems with filtering and sorting- [IN:3194] Check to see if Attachment Description still has XSS vulnerability in Spira 5.0- [IN:3357] Error appears on release details page and the list of builds is not shown, under certain circumstances.- [IN:3692] Project Group Planning Board: should omit requirements from inactive projects- [IN:3798] Planning board issues (intermittent; related to changing display options)- [IN:3869] Planning Board filtering by deleted release breaks page- [IN:4032] Planning Board: \"By Person\" views have some issues with the effort numbers- [IN:4061] With Modify Owned permission for incidents, remove attachment is disabled.- [IN:4080] Document detail page: followers list is missing- [IN:4272] With incident modify owned, user can add attachment to incident they don't own- [IN:4297] Test execution, table view: New incident pop-up needs styling update- [IN:4306] Do not prefix the name with \"Copy of\" when copy/paste to a different folder- [IN:4309] When running test set, test case/run actual duration is incorrect under certain circumstances- [IN:4327] Project Home dashboard: two widgets don't refresh when change from a specific release to all releases- [IN:4333] Project Group planning board: new option has appeared but does not work- [IN:4455] Email notifications do not use a set reply-to address- [IN:4459] Exploratory testing: add ability to paste test step actual result and description into task description - [IN:4465] Exploratory testing, creating tasks: task description not always saved- [IN:4490] For default developer role, Testing -> Configurations menu item leads to error- [IN:4495] Right after saving a new incident, remove attachment doesn't work.- [IN:4098] Test Run Details - test step Full Screen - add scroll bars- [IN:4319] Disable all status result buttons (pass, fail) once clicked, until success is returned- [IN:4454]","title":"Release Notes for v5"},{"location":"About/release-notes-v5/#release-notes-for-spira-v5","text":"","title":"Release Notes for Spira v5"},{"location":"About/release-notes-v5/#version-5404-june-2018","text":"Summary Security and Performance improvements : enforced password expiration and restrictions, requirements management module now 400% faster New artifact icons : more contemporary, visually striking, with a modular consistent design New Features and Fixes Exploratory testing: associated incidents are not shown during test execution- [IN:4461] Exploratory test containing a link to another test case: upon saving, the link is removed.- [IN:4466] Saving Automation info with error gives concurrency error.- [IN:4563] Sorting of test run sections in reports incorrect- [IN:4638] Edit button appears on some association tabs where it should not.- [IN:4640] Allow Source Code Sidebar to be Expandable- [IN:4649] Parameters Pop-up Window Can;t be Dragged & Dropped- [IN:4650] Test execution page jitters and shakes at specific screen and page height combinations- [IN:4651] Ability to require users to change password at certain intervals [RQ:35] Improvements to TaraVault [RQ:2170]","title":"Version 5.4.0.4 (June 2018)"},{"location":"About/release-notes-v5/#version-54-february-2018","text":"Summary TaraVault unlimited for all SpiraTeam and SpiraPlan cloud users : To celebrate the start of a new decade, our cloud source code management solution, TaraVault, is now included at no extra charge, for all the users and repositories and branches you want. Improvements to filters : Update your filters and shared filters easily. Create filters that also include information about which columns you have visible, their sort, order, and width. This is a great way for saving specific \u201cviews\u201d you and your teams need. Improved navigation between folders and hierarchies : Each folder now has its own unique url, so you can share links to specific folders with your team. For requirements, releases, and all artifacts with folders new clickable breadcrumbs making it easy to go straight to an artifact\u2019s parent. New features Document Management Remove document popup- [RQ:1867] live reloading: document details page- [RQ:2099] Program Management Add a project-group level incident list page for programs- [RQ:1896] Program-view of Planning > Releases- [RQ:2165] Project Management Add incident-only planning board- [RQ:1911] Add Task-only planning board- [RQ:1913] Ability to Split a User Story (requirement)- [RQ:2160] Live reloading on the release > build page- [RQ:2161] Implement Bulk Edit permission- [RQ:2169] Reporting Custom SQL widget for graphs- [RQ:2173] Add graphs to list pages and changing release list- [RQ:2175] Bug fixes and enhancements Need to prevent a test being executed if it has test cases in an invalid status for execution- [IN:4387] Duplicate Source Code Revision Session IDs in v5.3.04+- [IN:4458] Preview tab on Document Details breaks for XML documents!- [IN:4182] Instant Messenger Post as Comments function doesn't work- [IN:4288] Test set total estimated duration does not refresh if individual test case est dur is changed- [IN:4316] Extend the length of data sync password column in DB. It gets truncated too easily- [IN:4331] Foreign Key Exception error when cloning a test step from the test step details screen- [IN:4335] Error displayed when you try and import test steps from root folder- [IN:4343] Release execution status not updated when test runs are deleted or edited.- [IN:4349] Document detail page: with Modify Owned permission, save button is never enabled- [IN:4351] Exploratory Test Execution throws fault exception error in SpiraTest / team if user does not have view access to tasks- [IN:4356] Test Set Status Widget includes deleted Test Sets- [IN:4363] Exception removing a parameter from a test case if it is used in any test configuration- [IN:4384] Moving iteration should update test coverage but it does not.- [IN:4463] Rich text fields created using API can contain script tags which are not filtered out on fields without CKEditor- [IN:4468] No cross-association displayed in TESTCASE dedicated sub-tab- [IN:4475] On first load of attachments tab, the wrong documents are loaded briefly- [IN:4478] Exploratory testing: When run from \"My Assigned Test Cases\" test case doesn't go into exploratory mode- [IN:4506] Split requirement dialog has a place to specify owner but it does not get used- [IN:4510] Subscribe to a Document- [IN:2488] Change Test case copy to place copy below, rather than above, the copied test case- [IN:2570] Excel 2003 reports show blank effort as zeros and incorrectly show effort as percentages- [IN:2797] Version Control - Date sorting appears to put dates \"in the future\" at the bottom of the list (when sorting descending)- [IN:3003] Source Code Revisions page: problems with filtering and sorting- [IN:3194] Check to see if Attachment Description still has XSS vulnerability in Spira 5.0- [IN:3357] Error appears on release details page and the list of builds is not shown, under certain circumstances.- [IN:3692] Project Group Planning Board: should omit requirements from inactive projects- [IN:3798] Planning board issues (intermittent; related to changing display options)- [IN:3869] Planning Board filtering by deleted release breaks page- [IN:4032] Planning Board: \"By Person\" views have some issues with the effort numbers- [IN:4061] With Modify Owned permission for incidents, remove attachment is disabled.- [IN:4080] Document detail page: followers list is missing- [IN:4272] With incident modify owned, user can add attachment to incident they don't own- [IN:4297] Test execution, table view: New incident pop-up needs styling update- [IN:4306] Do not prefix the name with \"Copy of\" when copy/paste to a different folder- [IN:4309] When running test set, test case/run actual duration is incorrect under certain circumstances- [IN:4327] Project Home dashboard: two widgets don't refresh when change from a specific release to all releases- [IN:4333] Project Group planning board: new option has appeared but does not work- [IN:4455] Email notifications do not use a set reply-to address- [IN:4459] Exploratory testing: add ability to paste test step actual result and description into task description - [IN:4465] Exploratory testing, creating tasks: task description not always saved- [IN:4490] For default developer role, Testing -> Configurations menu item leads to error- [IN:4495] Right after saving a new incident, remove attachment doesn't work.- [IN:4098] Test Run Details - test step Full Screen - add scroll bars- [IN:4319] Disable all status result buttons (pass, fail) once clicked, until success is returned- [IN:4454]","title":"Version 5.4 (February 2018)"},{"location":"About/release-notes-v6/","text":"Release Notes for Spira v6 Version 6.3.0.1 (February 2020) Bug fixes and performance improvements Input boxes in grids should be full when in edit mode on grids with resizable columns [IN:5376] Artifacts with folders can create new items in wrong folder when loading the list page via the url [IN:5388] Planning boards do not always show all items for a parent release when viewing a sprint [IN:5392] Data Sync encryption does not support FIPS mode [IN:5396] Version 6.3 (January 2020) Summary TaraVault unlimited for all SpiraTeam and SpiraPlan cloud users : To celebrate the start of a new decade, our cloud source code management solution, TaraVault, is now included at no extra charge, for all the users and repositories and branches you want. Improvements to filters : Update your filters and shared filters easily. Create filters that also include information about which columns you have visible, their sort, order, and width. This is a great way for saving specific \u201cviews\u201d you and your teams need. Improved navigation between folders and hierarchies : Each folder now has its own unique url, so you can share links to specific folders with your team. For requirements, releases, and all artifacts with folders new clickable breadcrumbs making it easy to go straight to an artifact\u2019s parent. New features Replace file upload with newer control on artifact detail pages and document list page [RQ:2359] TaraVault licensing has no restrictions [RQ:2530] Improvements to Convert Incident to Requirement feature [RQ:2600] Breadcrumbs on artifact details page are clickable so you can navigate up hierarchy for an artifact [RQ:2651] Allow for urls that link to folders on a list page [RQ:2640] Can save a filter & column arrangement combination as a \"view\" [RQ:2642] The ability to update a saved filter [RQ:2652] Spira 6.3 Installer Tasks [RQ:2671] Bug fixes and enhancements Add tooltip to shared filter that shows the username of the filter creator [IN:4904] The ability to update a saved filter [IN:5048] Admin: User Edit page could potentially show TaraVault DataGrid on Self-Hosted [IN:5133] Test set and test run custom fields using lists do not sync up correctly if multiple fields use the same list [IN:5156] TaraVault product config page \"Edit Users\" button broken [IN:5195] Program Incidents & Releases sometimes displays object reference issue [IN:5264] Null Reference thrown if Security Settings nulled out in Admin Page [IN:5268] Improve performance of requirement test and task coverage calculations [IN:5294] Product admins can delete shared filters from the product homepage Shared Searches widget [IN:5303] Automation host filters cannot be retrieved [IN:5320] On association tabs permission checks are not carried out to hide buttons to create new artifact X from artifact Y [IN:5344] Expanders and collapsers on Reports Config page broken [IN:5355] Version 6.2.2 (December 2019) Summary SpiraTeam and SpiraPlan cloud users can use any source code provider : In addition to our source code provider, TaraVault, cloud customers can choose to use any Git or Subversion provider they wish. Bug fixes and UI improvements : The improvements include better access to the sidebars on all main pages, and improved search in dropdowns. Bug fixes and enhancements Build detail page: need ability to collapse description section, or confine it within a scrollable box [IN:4300] Detect and notify the user when they attempt to run a test set with a blank configuration [IN:4655] Html and body tags from rich text fields are not stripped out when rendered outside of CK editors [IN:4666] Cloning workflows does not copy digital signature settings correctly [IN:4674] Administration > Project > Project Associations: cross project artifact dropdown does not show selected artifacts [IN:4881] Accented characters in some grids do not display correctly [IN:4965] Notifications for risks: many fields are blank in the email; warning about exposure [IN:4967] \"Source Code\" link under Project Admin Menu bounces back to Project Admin Home [IN:5073] Cannot delete Document with Comment [IN:5082] Folder Name on Test Case List not decoding HTML [IN:5123] Test Case Details: Can Link a Test Case to itself [IN:5131] For rich text custom properties, long custom property name overlaps the field itself [IN:5148] Product delete fails sometimes with a TaraVault foreign key error [IN:5181] Sortable grids add new item erroneously after just adding a new item and clicking buttons like refresh [IN:5192] My Assigned Requirements widget shows numbers for the 6 new statuses [IN:5213] Fix sidebars on list and details pages to the top of the page so they are always visible [IN:5214] Test Execution Page Leave Button no functionality when on a test case not owned [IN:5218] Custom Props of type list: default values are saved but not shown in the admin UI [IN:5224] Export buttons on Requirements list page are set for release permissions, not requirement permissions [IN:5240] User profile page: clicking username copies rss token not username [IN:5243] Search in dropdowns for anywhere in the values, not just at the start [IN:5244] Task board: error occurs when creating a new task with certain settings [IN:5258] Error not shown in association panel when the server throws an error message [IN:5276] Limit the rows displayed on the product dashboard grids [IN:5277] Improve the UI for the Modal Dialog Boxes when creating Custom Reports [IN:5293] Security fix for user first or last name containing code [IN:5295] Version 6.2.1 (October 2019) Summary Enhanced product template management : Users can migrate a product from one template to another. This will help you consolidate your templates and streamline your administration more easily. New features Project Template Migration Wizard implemented [RQ:2489] Installer tasks for cloud and download [RQ:2598] Bug fixes and enhancements Admin manual: Add info about Product Admin Home and Template Admin Home pages [IN:5020] Requirement - Tasks grid can display timezone based exception when certain dates are null [IN:5061] RSS Token on user profile and admin user/edit should be blurred like for TaraVault [IN:5072] Standalone database did not upgrade from 5.4 to 6.x [IN:5127] When a custom ESQL custom graph has no data, it will display a bad error message [IN:5129] Test set detail page: test case section reflects execution status on list page [IN:5132] Need to reduce some of the erroneous events that get logged [IN:5169] Name in global nav shows HTML encoded characters for non latin characters [IN:5173] Data Sync Project Mappings Confusion since 6.0 [IN:5187] The Assigned Tasks/Requirements/Pending Runs widget shows too many items [IN:5196] Markierungen is not correct German translation for tags [IN:5197] Folder edit buttons are misaligned in version 6.2.0.1 (regression due to fix for Chrome 76) [IN:5198] Installer: v620 installer forgot one needed DELETE clause [IN:5201] Add Test Set API to allow parallel distributed execution [IN:5203] Performance issue when you have lots of test cases with links/parameters [IN:5204] Documentation link is bad for admin > User Details Edit [IN:5207] Installer can timeout when running a specific part of an upgrade [IN:5209] Version 6.2.0.1 (September 2019) Bug fixes Temporary fix to manage a bug introduced in the latest Chrome browser version Version 6.2 (August 2019) Summary Additional Requirement List Views (SpiraTeam and SpiraPlan only) : In addition to the current hierarchical list view of requirements, additional views will make it easier for users to work with requirements in ways that work for them at the time. Improved Risk Associations (SpiraPlan only) : Now you can add links between risks to and from other risks, as well as incidents, test cases, and requirements. New features MindMapping requirements functionality [RQ:1708] Additional Task Board View (tasks by Requirement) [RQ:2357] Documentation links take you to new online documentation system [RQ:2587] Requirements list view: document view [RQ:2537] Requirements list view: sortable grid [RQ:2538] Task Board - add by requirement view [RQ:2550] Release Details - show requirement points [RQ:2551] Rename Package to Epic [RQ:2555] Risks has an association panel and can link to risks, tests, requirements, and incidents [RQ:2556] Upgrade jQuery to 2.2.4 [RQ:2568] Requirements 'mind map' view [RQ:2571] Requirements use case diagram [RQ:2572] Bug fixes and enhancements Admin Product Membership: error when click save, if All Active is selected and there are inactive members [IN:5109] Project Membership table can have bad entries [IN:5165] License Key does not allow FIPS 140-2 compliance.. [IN:3305] Details pages are missing grey background on type/status area [IN:5088] Certain new v6 API calls are not CORS enabled [IN:5094] Getting system error on Admin -> Edit User page [IN:5160] SpiraTest: some tabs are visible to admins but should not be [IN:5163] Installer: Upgrade from v6.0 to v6.1 leaves no Foreign Keys [IN:5167] On Product Membership page, system error occurs when deleting a member [IN:5180] Allow tasks to be associated to test cases directly [IN:2990] Online help: section 8.1 about the task list progress column is incomplete [IN:4460] Html and body tags from rich text fields are not stripped out when rendered outside of CK editors [IN:4666] New/Clone product: test type 'is exploratory' flag is not copied over from original template [IN:5080] CKeditors on dark mode on live instances do not switch font color correctly [IN:5093] Viewing source code of a rich text editor in dark mode does not work [IN:5102] Installer - v600 upgrade code forgetting to put NOT NULL on a few columns. [IN:5104] Installer: Backup Block Size could throw error. [IN:5108] Some status colors are incorrect for dark and light themes [IN:5111] Installer: Two Columns upgraded to not match Clean Install [IN:5114] Installer: Race condition in Upgrading certain versions [IN:5115] Add ranking labels to planning board detailed view [IN:5121] Force admin to enter product name before product is deleted [IN:5147] Documentation: formatting problem in two topics: Incident Board and Task Board [IN:5157] Project Data Tool: Correct Requirements inserts wrong Requirement Type [IN:5159] Unable to expand section 11 of the Online User Guide [IN:4626] Product Home, Req Incident Count widget: problem with requirement icons (either missing or huge, depending on browser) [IN:5063] Version 6.1.0.1 (July 2019) Bug fixes Navigation bar does not properly restrict access to artifacts by Spira version [IN:5092] Improves dark mode and fixes details pages missing grey background on type/status area in the header [IN:5088] Version 6.1 (July 2019) Summary Dark Mode : The application follows the color scheme you use in your operating system, or you can set it manually. Dark mode makes every part of the application easier on the eyes and look more gorgeous than ever. Improvements to Administration : With easier filtering and more intuitive controls for key pages like tables and managing workflow permissions, administration is now more user friendly than ever. Version 6 of our SOAP and REST APIs : Our existing APIs are as compatible as they can be with version 6 of SpiraPlan. The new API version will allow access to new features, such as those from templates. New features Enable beta dark color mode for modern browsers [RQ:2557] Add new 6.0 API for existing calls [RQ:2308] All workflow status field permissions are set with radio buttons not checkboxes [RQ:2408] Change the artifacts that create an initial item to use a blank name v.s. \"New Artifact\" [RQ:2498] Admin type, priority, and status pages can be filtered in the same way as components [RQ:2502] Add new API functions for template management [RQ:2542] Can filter admin users and product membership lists by all or active only [RQ:2548] Planning Boards: Hide Statuses that have no transition to them or from them for RQs and TKs [RQ:2549] Bug fixes and enhancements Issues with inactive products and templates [IN:5045] Activating old project changes its assigned template [IN:5046] Project role artifact view permissions are being applied, when current user has sys admin permission [IN:4140] Test Set Status Widget includes deleted Test Sets [IN:4363] Permission error: Attachment of a Test run can be deleted with only create permission [IN:4784] API to POST artifacts causes problems on servers east of GMT [IN:4785] Document_RetrieveFolders call dies [IN:4868] Add friendlier error when deleting a test case parameter that is in use [IN:4915] Add ability to clone a product/project in different ways [IN:4945] Workspace dropdown includes inactive templates [IN:4983] Test execution initial screen: cannot proceed after getting a prompt to fill in a required custom field [IN:4999] Test execution: pause button does nothing [IN:5012] Error on Product Admin Dashboard [IN:5021] Installer: Null Reference check missing in PreReq check [IN:5081] Support change/remove user membership for a project using 6.0 API [IN:4107] Add ability to specify/change project group with API [IN:4108] User defined start page not properly remembered on refresh/login [IN:4966] On revision detail page, the link \"Back to Revision List\" is incorrect [IN:4974] SpiraPlan: risk default values and sample data contain a misspelling [IN:4976] Test configuration detail page: entries do not appear unless you refresh the page [IN:4978] For TaraVault users, admin menu for product settings has incorrect label [IN:4995] Project Home: All Pending Test Runs, change permissions for reassign and delete buttons [IN:4998] Test execution: in table view, Pass All button does not work at first [IN:5016] Tree view wraps and obscures long names - eg on adding an existing attachment [IN:5036] Screen images not correctly sized on test run details page [IN:5037] Installer: Upgrade overwrites existing 'DataSync' config file. [IN:5040] Blank space is shown where the main nav bar should be, under certain circumstances involving an inactive template [IN:5062] Test configuration detail page: remove button does not work [IN:4979] Test execution: table view, image button has no label [IN:5015] Admin Project History list has Revert and Purge All too close together [IN:5039] Risk Details: 'Empty' name watermark doesn't match other Details Screens [IN:5068] Installer: Not properly entering DataSyncConfig config tokens. [IN:5075] Version 6.0.0.3 (May 2019) Bug fixes Displaying reports shows error (SpiraTest only) [IN:5000] Null error when saving a test from Rapise into Spira 6.0.0.2 [IN:5004] On premise installer fixes Version 6.0 (April 2019) Summary Enterprise Risk Management [SpiraPlan only] : Risks have their own types, statuses, workflows, and mitigations. New reports for risks, as well as charts and a risk cube have been added. Changes to certain names in the system : Projects are now called Products; Project Groups are now Programs; and Iterations are now Sprints. Better manage your products (projects) with templates : Templates now control many aspects of a product (such as notifications, workflows, custom fields), and can control many products at once. Each existing product from 5.4 will have its own template. Every new product can have its own template or be managed by an existing template. New customizations at the template level : Requirement, Test Case, Document, and Task types are customizable. Documents can now be managed using workflows to allow you to control versioning and check-ins. Notifications now apply to products in a template and no longer the same system wide. Improve navigation and new administration user interface : New login screens and a completely reworked navigation menu in the application make using SpiraPlan easier than ever. Navigation is more mobile friendly and intuitive. Administration menus are now only ever one click away. New features Risk Administration (Project Template) Edit Risk Statuses [RQ:2417] Edit Risk Types [RQ:2418] Edit Risk Impacts [RQ:2419] Edit Risk Probabilities [RQ:2420] Notifications for risks are customizable and get sent out properly [RQ:2488] Edit Risk Workflows [RQ:2421] Risks Top open risks [RQ:2430] Risk List Page sidebar donut chart [RQ:2492] Risk List Page [RQ:2411] Risk Details page displays standard risk fields inc. exposure [RQ:2422] Display risk custom properties [RQ:2423] Risk Mitigations [RQ:2424] Risk Details page Tasks tab [RQ:2425] Risk Details page Discussions / comments [RQ:2427] My Assigned Risks [RQ:2428] Assigned Risks RSS feed [RQ:2429] Project Home Risk Widget / risk cube [RQ:2431] Risk summary report [RQ:2434] Risk detailed report [RQ:2435] Project Templates [RQ:1703] Workflows for documents, plus check-in/out/review [RQ:1930] Switch licensing to annual vs. perpetual [RQ:2306] Database Refactoring/Changes for future functionality [RQ:2174] UI: redesign login pages [RQ:2307] Cross app navigation is intuitive, quick, and clear [RQ:2351] UI: replace gif/png icons with svgs [RQ:2352] Customizable fields for non-incidents [RQ:2309] Refactoring URL structure for existing Admin pages [RQ:2360] New System Administration Home Page [RQ:2362] New Project Admin Home Page [RQ:2365] Add Active flag to Data Sync Plugins [RQ:2366] Updates to program naming [RQ:2368] Make additional fields customizable [RQ:2369] Add database design for BDD support [RQ:2381] Administrators and owners navigation is streamlined and consistent throughout the app [RQ:2390] Users can see My Assigned Documents on the My Page [RQ:2398] Can add and view comments on the document details page, consistent with the workflow [RQ:2399] New installer for 6.0 [RQ:2400] Onboarding framework gives quick info to new and to upgrading users [RQ:2401] Project Template Migration Wizard - disable ability to change template on a product [RQ:2402] Remove Change Projects Button in Admin [RQ:2403] Additional standard statuses for requirements, tasks and test cases [RQ:2409] Change \"project\" to \"product\" in the UI to better align with users' real business need [RQ:2455] Switch history tracker to use new MEANING field [RQ:2484] API backwards compatibility to make v\u00be/5 work with templates [RQ:2490] Template Admin Home Page [RQ:2491] Database support for multiple approvers [RQ:2503] Bug fixes and enhancements System Administration - Add/Edit Users: German translation for \"Locked Out\" misleading [IN:2230] security issue when having 2 projects open in browser tabs [IN:2651] Limited view role can access source code pages when should not be able to [IN:4754] When a test case is created from a requirement, it lacks the default test step. [IN:3499] Default task notification template does not include the task name [IN:3584] System Error when trying to display the detail page for some Project History Changes [IN:4691] The 'Loading / Activity' notification is nice, but off-screen. [IN:4876] A general system admin should be added as an owner when they create a new template/program/product [IN:4911] Administration > Projects > Project Associations: limit the list of artifact types for selection [IN:4553] Can click on artifact id field on details page to copy to clipboard [IN:4793] Can't easily blank out a previously populated Actual Result in normal test execution [IN:4802]","title":"Release Notes for v6"},{"location":"About/release-notes-v6/#release-notes-for-spira-v6","text":"","title":"Release Notes for Spira v6"},{"location":"About/release-notes-v6/#version-6301-february-2020","text":"Bug fixes and performance improvements Input boxes in grids should be full when in edit mode on grids with resizable columns [IN:5376] Artifacts with folders can create new items in wrong folder when loading the list page via the url [IN:5388] Planning boards do not always show all items for a parent release when viewing a sprint [IN:5392] Data Sync encryption does not support FIPS mode [IN:5396]","title":"Version 6.3.0.1 (February 2020)"},{"location":"About/release-notes-v6/#version-63-january-2020","text":"Summary TaraVault unlimited for all SpiraTeam and SpiraPlan cloud users : To celebrate the start of a new decade, our cloud source code management solution, TaraVault, is now included at no extra charge, for all the users and repositories and branches you want. Improvements to filters : Update your filters and shared filters easily. Create filters that also include information about which columns you have visible, their sort, order, and width. This is a great way for saving specific \u201cviews\u201d you and your teams need. Improved navigation between folders and hierarchies : Each folder now has its own unique url, so you can share links to specific folders with your team. For requirements, releases, and all artifacts with folders new clickable breadcrumbs making it easy to go straight to an artifact\u2019s parent. New features Replace file upload with newer control on artifact detail pages and document list page [RQ:2359] TaraVault licensing has no restrictions [RQ:2530] Improvements to Convert Incident to Requirement feature [RQ:2600] Breadcrumbs on artifact details page are clickable so you can navigate up hierarchy for an artifact [RQ:2651] Allow for urls that link to folders on a list page [RQ:2640] Can save a filter & column arrangement combination as a \"view\" [RQ:2642] The ability to update a saved filter [RQ:2652] Spira 6.3 Installer Tasks [RQ:2671] Bug fixes and enhancements Add tooltip to shared filter that shows the username of the filter creator [IN:4904] The ability to update a saved filter [IN:5048] Admin: User Edit page could potentially show TaraVault DataGrid on Self-Hosted [IN:5133] Test set and test run custom fields using lists do not sync up correctly if multiple fields use the same list [IN:5156] TaraVault product config page \"Edit Users\" button broken [IN:5195] Program Incidents & Releases sometimes displays object reference issue [IN:5264] Null Reference thrown if Security Settings nulled out in Admin Page [IN:5268] Improve performance of requirement test and task coverage calculations [IN:5294] Product admins can delete shared filters from the product homepage Shared Searches widget [IN:5303] Automation host filters cannot be retrieved [IN:5320] On association tabs permission checks are not carried out to hide buttons to create new artifact X from artifact Y [IN:5344] Expanders and collapsers on Reports Config page broken [IN:5355]","title":"Version 6.3 (January 2020)"},{"location":"About/release-notes-v6/#version-622-december-2019","text":"Summary SpiraTeam and SpiraPlan cloud users can use any source code provider : In addition to our source code provider, TaraVault, cloud customers can choose to use any Git or Subversion provider they wish. Bug fixes and UI improvements : The improvements include better access to the sidebars on all main pages, and improved search in dropdowns. Bug fixes and enhancements Build detail page: need ability to collapse description section, or confine it within a scrollable box [IN:4300] Detect and notify the user when they attempt to run a test set with a blank configuration [IN:4655] Html and body tags from rich text fields are not stripped out when rendered outside of CK editors [IN:4666] Cloning workflows does not copy digital signature settings correctly [IN:4674] Administration > Project > Project Associations: cross project artifact dropdown does not show selected artifacts [IN:4881] Accented characters in some grids do not display correctly [IN:4965] Notifications for risks: many fields are blank in the email; warning about exposure [IN:4967] \"Source Code\" link under Project Admin Menu bounces back to Project Admin Home [IN:5073] Cannot delete Document with Comment [IN:5082] Folder Name on Test Case List not decoding HTML [IN:5123] Test Case Details: Can Link a Test Case to itself [IN:5131] For rich text custom properties, long custom property name overlaps the field itself [IN:5148] Product delete fails sometimes with a TaraVault foreign key error [IN:5181] Sortable grids add new item erroneously after just adding a new item and clicking buttons like refresh [IN:5192] My Assigned Requirements widget shows numbers for the 6 new statuses [IN:5213] Fix sidebars on list and details pages to the top of the page so they are always visible [IN:5214] Test Execution Page Leave Button no functionality when on a test case not owned [IN:5218] Custom Props of type list: default values are saved but not shown in the admin UI [IN:5224] Export buttons on Requirements list page are set for release permissions, not requirement permissions [IN:5240] User profile page: clicking username copies rss token not username [IN:5243] Search in dropdowns for anywhere in the values, not just at the start [IN:5244] Task board: error occurs when creating a new task with certain settings [IN:5258] Error not shown in association panel when the server throws an error message [IN:5276] Limit the rows displayed on the product dashboard grids [IN:5277] Improve the UI for the Modal Dialog Boxes when creating Custom Reports [IN:5293] Security fix for user first or last name containing code [IN:5295]","title":"Version 6.2.2 (December 2019)"},{"location":"About/release-notes-v6/#version-621-october-2019","text":"Summary Enhanced product template management : Users can migrate a product from one template to another. This will help you consolidate your templates and streamline your administration more easily. New features Project Template Migration Wizard implemented [RQ:2489] Installer tasks for cloud and download [RQ:2598] Bug fixes and enhancements Admin manual: Add info about Product Admin Home and Template Admin Home pages [IN:5020] Requirement - Tasks grid can display timezone based exception when certain dates are null [IN:5061] RSS Token on user profile and admin user/edit should be blurred like for TaraVault [IN:5072] Standalone database did not upgrade from 5.4 to 6.x [IN:5127] When a custom ESQL custom graph has no data, it will display a bad error message [IN:5129] Test set detail page: test case section reflects execution status on list page [IN:5132] Need to reduce some of the erroneous events that get logged [IN:5169] Name in global nav shows HTML encoded characters for non latin characters [IN:5173] Data Sync Project Mappings Confusion since 6.0 [IN:5187] The Assigned Tasks/Requirements/Pending Runs widget shows too many items [IN:5196] Markierungen is not correct German translation for tags [IN:5197] Folder edit buttons are misaligned in version 6.2.0.1 (regression due to fix for Chrome 76) [IN:5198] Installer: v620 installer forgot one needed DELETE clause [IN:5201] Add Test Set API to allow parallel distributed execution [IN:5203] Performance issue when you have lots of test cases with links/parameters [IN:5204] Documentation link is bad for admin > User Details Edit [IN:5207] Installer can timeout when running a specific part of an upgrade [IN:5209]","title":"Version 6.2.1 (October 2019)"},{"location":"About/release-notes-v6/#version-6201-september-2019","text":"Bug fixes Temporary fix to manage a bug introduced in the latest Chrome browser version","title":"Version 6.2.0.1 (September 2019)"},{"location":"About/release-notes-v6/#version-62-august-2019","text":"Summary Additional Requirement List Views (SpiraTeam and SpiraPlan only) : In addition to the current hierarchical list view of requirements, additional views will make it easier for users to work with requirements in ways that work for them at the time. Improved Risk Associations (SpiraPlan only) : Now you can add links between risks to and from other risks, as well as incidents, test cases, and requirements. New features MindMapping requirements functionality [RQ:1708] Additional Task Board View (tasks by Requirement) [RQ:2357] Documentation links take you to new online documentation system [RQ:2587] Requirements list view: document view [RQ:2537] Requirements list view: sortable grid [RQ:2538] Task Board - add by requirement view [RQ:2550] Release Details - show requirement points [RQ:2551] Rename Package to Epic [RQ:2555] Risks has an association panel and can link to risks, tests, requirements, and incidents [RQ:2556] Upgrade jQuery to 2.2.4 [RQ:2568] Requirements 'mind map' view [RQ:2571] Requirements use case diagram [RQ:2572] Bug fixes and enhancements Admin Product Membership: error when click save, if All Active is selected and there are inactive members [IN:5109] Project Membership table can have bad entries [IN:5165] License Key does not allow FIPS 140-2 compliance.. [IN:3305] Details pages are missing grey background on type/status area [IN:5088] Certain new v6 API calls are not CORS enabled [IN:5094] Getting system error on Admin -> Edit User page [IN:5160] SpiraTest: some tabs are visible to admins but should not be [IN:5163] Installer: Upgrade from v6.0 to v6.1 leaves no Foreign Keys [IN:5167] On Product Membership page, system error occurs when deleting a member [IN:5180] Allow tasks to be associated to test cases directly [IN:2990] Online help: section 8.1 about the task list progress column is incomplete [IN:4460] Html and body tags from rich text fields are not stripped out when rendered outside of CK editors [IN:4666] New/Clone product: test type 'is exploratory' flag is not copied over from original template [IN:5080] CKeditors on dark mode on live instances do not switch font color correctly [IN:5093] Viewing source code of a rich text editor in dark mode does not work [IN:5102] Installer - v600 upgrade code forgetting to put NOT NULL on a few columns. [IN:5104] Installer: Backup Block Size could throw error. [IN:5108] Some status colors are incorrect for dark and light themes [IN:5111] Installer: Two Columns upgraded to not match Clean Install [IN:5114] Installer: Race condition in Upgrading certain versions [IN:5115] Add ranking labels to planning board detailed view [IN:5121] Force admin to enter product name before product is deleted [IN:5147] Documentation: formatting problem in two topics: Incident Board and Task Board [IN:5157] Project Data Tool: Correct Requirements inserts wrong Requirement Type [IN:5159] Unable to expand section 11 of the Online User Guide [IN:4626] Product Home, Req Incident Count widget: problem with requirement icons (either missing or huge, depending on browser) [IN:5063]","title":"Version 6.2 (August 2019)"},{"location":"About/release-notes-v6/#version-6101-july-2019","text":"Bug fixes Navigation bar does not properly restrict access to artifacts by Spira version [IN:5092] Improves dark mode and fixes details pages missing grey background on type/status area in the header [IN:5088]","title":"Version 6.1.0.1 (July 2019)"},{"location":"About/release-notes-v6/#version-61-july-2019","text":"Summary Dark Mode : The application follows the color scheme you use in your operating system, or you can set it manually. Dark mode makes every part of the application easier on the eyes and look more gorgeous than ever. Improvements to Administration : With easier filtering and more intuitive controls for key pages like tables and managing workflow permissions, administration is now more user friendly than ever. Version 6 of our SOAP and REST APIs : Our existing APIs are as compatible as they can be with version 6 of SpiraPlan. The new API version will allow access to new features, such as those from templates. New features Enable beta dark color mode for modern browsers [RQ:2557] Add new 6.0 API for existing calls [RQ:2308] All workflow status field permissions are set with radio buttons not checkboxes [RQ:2408] Change the artifacts that create an initial item to use a blank name v.s. \"New Artifact\" [RQ:2498] Admin type, priority, and status pages can be filtered in the same way as components [RQ:2502] Add new API functions for template management [RQ:2542] Can filter admin users and product membership lists by all or active only [RQ:2548] Planning Boards: Hide Statuses that have no transition to them or from them for RQs and TKs [RQ:2549] Bug fixes and enhancements Issues with inactive products and templates [IN:5045] Activating old project changes its assigned template [IN:5046] Project role artifact view permissions are being applied, when current user has sys admin permission [IN:4140] Test Set Status Widget includes deleted Test Sets [IN:4363] Permission error: Attachment of a Test run can be deleted with only create permission [IN:4784] API to POST artifacts causes problems on servers east of GMT [IN:4785] Document_RetrieveFolders call dies [IN:4868] Add friendlier error when deleting a test case parameter that is in use [IN:4915] Add ability to clone a product/project in different ways [IN:4945] Workspace dropdown includes inactive templates [IN:4983] Test execution initial screen: cannot proceed after getting a prompt to fill in a required custom field [IN:4999] Test execution: pause button does nothing [IN:5012] Error on Product Admin Dashboard [IN:5021] Installer: Null Reference check missing in PreReq check [IN:5081] Support change/remove user membership for a project using 6.0 API [IN:4107] Add ability to specify/change project group with API [IN:4108] User defined start page not properly remembered on refresh/login [IN:4966] On revision detail page, the link \"Back to Revision List\" is incorrect [IN:4974] SpiraPlan: risk default values and sample data contain a misspelling [IN:4976] Test configuration detail page: entries do not appear unless you refresh the page [IN:4978] For TaraVault users, admin menu for product settings has incorrect label [IN:4995] Project Home: All Pending Test Runs, change permissions for reassign and delete buttons [IN:4998] Test execution: in table view, Pass All button does not work at first [IN:5016] Tree view wraps and obscures long names - eg on adding an existing attachment [IN:5036] Screen images not correctly sized on test run details page [IN:5037] Installer: Upgrade overwrites existing 'DataSync' config file. [IN:5040] Blank space is shown where the main nav bar should be, under certain circumstances involving an inactive template [IN:5062] Test configuration detail page: remove button does not work [IN:4979] Test execution: table view, image button has no label [IN:5015] Admin Project History list has Revert and Purge All too close together [IN:5039] Risk Details: 'Empty' name watermark doesn't match other Details Screens [IN:5068] Installer: Not properly entering DataSyncConfig config tokens. [IN:5075]","title":"Version 6.1 (July 2019)"},{"location":"About/release-notes-v6/#version-6003-may-2019","text":"Bug fixes Displaying reports shows error (SpiraTest only) [IN:5000] Null error when saving a test from Rapise into Spira 6.0.0.2 [IN:5004] On premise installer fixes","title":"Version 6.0.0.3 (May 2019)"},{"location":"About/release-notes-v6/#version-60-april-2019","text":"Summary Enterprise Risk Management [SpiraPlan only] : Risks have their own types, statuses, workflows, and mitigations. New reports for risks, as well as charts and a risk cube have been added. Changes to certain names in the system : Projects are now called Products; Project Groups are now Programs; and Iterations are now Sprints. Better manage your products (projects) with templates : Templates now control many aspects of a product (such as notifications, workflows, custom fields), and can control many products at once. Each existing product from 5.4 will have its own template. Every new product can have its own template or be managed by an existing template. New customizations at the template level : Requirement, Test Case, Document, and Task types are customizable. Documents can now be managed using workflows to allow you to control versioning and check-ins. Notifications now apply to products in a template and no longer the same system wide. Improve navigation and new administration user interface : New login screens and a completely reworked navigation menu in the application make using SpiraPlan easier than ever. Navigation is more mobile friendly and intuitive. Administration menus are now only ever one click away. New features Risk Administration (Project Template) Edit Risk Statuses [RQ:2417] Edit Risk Types [RQ:2418] Edit Risk Impacts [RQ:2419] Edit Risk Probabilities [RQ:2420] Notifications for risks are customizable and get sent out properly [RQ:2488] Edit Risk Workflows [RQ:2421] Risks Top open risks [RQ:2430] Risk List Page sidebar donut chart [RQ:2492] Risk List Page [RQ:2411] Risk Details page displays standard risk fields inc. exposure [RQ:2422] Display risk custom properties [RQ:2423] Risk Mitigations [RQ:2424] Risk Details page Tasks tab [RQ:2425] Risk Details page Discussions / comments [RQ:2427] My Assigned Risks [RQ:2428] Assigned Risks RSS feed [RQ:2429] Project Home Risk Widget / risk cube [RQ:2431] Risk summary report [RQ:2434] Risk detailed report [RQ:2435] Project Templates [RQ:1703] Workflows for documents, plus check-in/out/review [RQ:1930] Switch licensing to annual vs. perpetual [RQ:2306] Database Refactoring/Changes for future functionality [RQ:2174] UI: redesign login pages [RQ:2307] Cross app navigation is intuitive, quick, and clear [RQ:2351] UI: replace gif/png icons with svgs [RQ:2352] Customizable fields for non-incidents [RQ:2309] Refactoring URL structure for existing Admin pages [RQ:2360] New System Administration Home Page [RQ:2362] New Project Admin Home Page [RQ:2365] Add Active flag to Data Sync Plugins [RQ:2366] Updates to program naming [RQ:2368] Make additional fields customizable [RQ:2369] Add database design for BDD support [RQ:2381] Administrators and owners navigation is streamlined and consistent throughout the app [RQ:2390] Users can see My Assigned Documents on the My Page [RQ:2398] Can add and view comments on the document details page, consistent with the workflow [RQ:2399] New installer for 6.0 [RQ:2400] Onboarding framework gives quick info to new and to upgrading users [RQ:2401] Project Template Migration Wizard - disable ability to change template on a product [RQ:2402] Remove Change Projects Button in Admin [RQ:2403] Additional standard statuses for requirements, tasks and test cases [RQ:2409] Change \"project\" to \"product\" in the UI to better align with users' real business need [RQ:2455] Switch history tracker to use new MEANING field [RQ:2484] API backwards compatibility to make v\u00be/5 work with templates [RQ:2490] Template Admin Home Page [RQ:2491] Database support for multiple approvers [RQ:2503] Bug fixes and enhancements System Administration - Add/Edit Users: German translation for \"Locked Out\" misleading [IN:2230] security issue when having 2 projects open in browser tabs [IN:2651] Limited view role can access source code pages when should not be able to [IN:4754] When a test case is created from a requirement, it lacks the default test step. [IN:3499] Default task notification template does not include the task name [IN:3584] System Error when trying to display the detail page for some Project History Changes [IN:4691] The 'Loading / Activity' notification is nice, but off-screen. [IN:4876] A general system admin should be added as an owner when they create a new template/program/product [IN:4911] Administration > Projects > Project Associations: limit the list of artifact types for selection [IN:4553] Can click on artifact id field on details page to copy to clipboard [IN:4793] Can't easily blank out a previously populated Actual Result in normal test execution [IN:4802]","title":"Version 6.0 (April 2019)"},{"location":"Build-Server-Integration/Atlassian-Bamboo/","text":"Atlassian Bamboo This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Atlassian's Bamboo continuous integration build servers. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam v4.0 or later and a working installation of Bamboo v 5.0 or later. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v4.0. Overview Bamboo provides continuous integration services for software development, in any programming language using any build tool. It is a server-based system running that supports a variety of different version control systems. It supports SCM tools including CVS, Subversion, and Git, and can execute Apache Ant and Apache Maven based projects as well as arbitrary shell scripts and Tomcat. When you use the SpiraTeam Add-on for Bamboo, it will allow you to associate each Bamboo project and plan with a corresponding project/release in SpiraTeam. Then, each time Bamboo creates a new build, a new build artifact will be created in SpiraTeam. Each build in SpiraTeam will be automatically linked to the incidents fixed, tasks implemented, requirements developed and source code revisions committed. Installing the SpiraTeam Add-on for Bamboo Go to the Inflectra website and open up the page that lists the various downloads available for SpiraTeam ( http://www.inflectra.com/SpiraTeam/Downloads.aspx ). Listed on this page will be the SpiraTeam Add-on for Bamboo. Right-click on this link and save the .zip file to your local computer. Inside this .zip file will be a .jar file, extract the .jar file and save to a local folder on your system. After that, go to Bamboo Administration. You will need Bamboo administrator privileges to access this configuration page. Under Add-ons, click on the Manage Add-ons link and then on Upload Add-on on the left: After that, click on Browse and select the .jar file extracted from the .zip archive downloaded from the Inflectra website. Then, click on Update . After the installation of the SpiraTeam Add-on, you should see a welcome screen: You will then be able to see the SpiraTeam Add-on in the User Installed Add-ons list : Setting-Up the SpiraTeam Bamboo Add-on Now that the add-on has been installed, you need to configure the settings for integration with SpiraTeam. To do this, go to the Project you want to communicate with SpiraTeam, and under the plan you want to receive notifications, click on Edit ( icon). In the Plan Configuration screen, go to the Notifications tab and click on Add Notification: In the Add a new notification pop-up, select the appropriate event you want to receive notifications, and in the Recipient type box, select SpiraTeam : After that, you will see some new fields to fill, they are: URL - It is the URL you use to access your instance of SpiraTeam; User Name : Your SpiraTeam user name; Password : Your SpiraTeam password; Project ID -- The numeric ID of the SpiraTeam Project that the Build belongs to. (e.g. for Project PR00001 just enter 1) Release Version Number -- The version number of the SpiraTeam Release/Iteration that the Build belongs to. (e.g. for Release RL0004 with version number 1.0.0.0 you'd enter just 1.0.0.0) After filling this boxes with appropriate information, click on Add button. Bamboo will then try to connect to the SpiraTeam Server, and check the Project/Release provided info. Once it validates your information, the connection settings will be saved. In case of error, follow the instructions on-screen and try again. Viewing the Build Results in SpiraTeam Now that you have associated your Bamboo Project and Plan with a specific SpiraTeam project and release/iteration, you can use Bamboo to manage your software builds and have the results of the build be reported back into SpiraTeam. For example when the 'Plan1' build of TestProject 1 illustrated in the figure bellow is executed, it will report in Bamboo: The corresponding build entry will also be created in SpiraTeam under the specified project and release/iteration: If you have configured your Project Home to include the list of recent builds, the build information will also be displayed on the Project Home dashboard: Clicking on either of the hyperlinks will allow you to navigate to the Build details page inside SpiraTeam: This page will display the status (success / failure) and details of the build (imported from the Bamboo Console Output) together with a list of the associated incidents, test runs and source code revisions. The following section will explain how to use your Source Code Management (SCM) system to take advantage of the SpiraTeam add-on and automatically link incidents and source code revisions to the build information. Working with Source Code Changesets When your developers commit changes to your application's source into the SCM repository, they should make sure to link the commit to the appropriate artifacts in SpiraTeam. For example they may want to record that the revision fixes a specific incident or implements a specific feature (requirement). Linking an artifact is very simple. All the developer needs to do is enter the artifact token in the following format: [PREFIX:ID] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and tasks are \" TK \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect the tokens and will include links to them under the Associations tab for each revision detail in SpiraTeam. Inside SpiraTeam, the system will use the same information to automatically link the list of associated revisions to the build record: If the commit message contains Incident tokens, the add-on will also automatically link those incidents to the appropriate build: Similarly when you view the list of incidents inside SpiraTeam you will now be able to sort and filter the list by the associated build: Congratulations! You are now able to use SpiraTeam and Bamboo to be able to manage your builds and have the build status integrated into your SpiraTeam project dashboard. Scheduling Test Sets Upon Successful Builds One additional feature of the integration with SpiraTest and SpiraTeam (hereafter just SpiraTest) is the ability to have SpiraTest automatically schedule the execution of a test set whenever a build passes. To do that, make sure the Test Set is associated with the SpiraTest release or iteration that is being built and then set the Schedule on Build field to \"Yes\" and optionally enter in the delay (after the build succeeds) that you want the test set to be scheduled for: This means that you don't need to separately manage your build schedule in Bamboo and your test automation schedule in SpiraTest.","title":"Atlassian Bamboo"},{"location":"Build-Server-Integration/Atlassian-Bamboo/#atlassian-bamboo","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Atlassian's Bamboo continuous integration build servers. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam v4.0 or later and a working installation of Bamboo v 5.0 or later. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v4.0.","title":"Atlassian Bamboo"},{"location":"Build-Server-Integration/Atlassian-Bamboo/#overview","text":"Bamboo provides continuous integration services for software development, in any programming language using any build tool. It is a server-based system running that supports a variety of different version control systems. It supports SCM tools including CVS, Subversion, and Git, and can execute Apache Ant and Apache Maven based projects as well as arbitrary shell scripts and Tomcat. When you use the SpiraTeam Add-on for Bamboo, it will allow you to associate each Bamboo project and plan with a corresponding project/release in SpiraTeam. Then, each time Bamboo creates a new build, a new build artifact will be created in SpiraTeam. Each build in SpiraTeam will be automatically linked to the incidents fixed, tasks implemented, requirements developed and source code revisions committed.","title":"Overview"},{"location":"Build-Server-Integration/Atlassian-Bamboo/#installing-the-spirateam-add-on-for-bamboo","text":"Go to the Inflectra website and open up the page that lists the various downloads available for SpiraTeam ( http://www.inflectra.com/SpiraTeam/Downloads.aspx ). Listed on this page will be the SpiraTeam Add-on for Bamboo. Right-click on this link and save the .zip file to your local computer. Inside this .zip file will be a .jar file, extract the .jar file and save to a local folder on your system. After that, go to Bamboo Administration. You will need Bamboo administrator privileges to access this configuration page. Under Add-ons, click on the Manage Add-ons link and then on Upload Add-on on the left: After that, click on Browse and select the .jar file extracted from the .zip archive downloaded from the Inflectra website. Then, click on Update . After the installation of the SpiraTeam Add-on, you should see a welcome screen:","title":"Installing the SpiraTeam Add-on for Bamboo"},{"location":"Build-Server-Integration/Atlassian-Bamboo/#you-will-then-be-able-to-see-the-spirateam-add-on-in-the-user-installed-add-ons-list","text":"","title":"You will then be able to see the SpiraTeam Add-on in the User Installed Add-ons list :"},{"location":"Build-Server-Integration/Atlassian-Bamboo/#setting-up-the-spirateam-bamboo-add-on","text":"Now that the add-on has been installed, you need to configure the settings for integration with SpiraTeam. To do this, go to the Project you want to communicate with SpiraTeam, and under the plan you want to receive notifications, click on Edit ( icon). In the Plan Configuration screen, go to the Notifications tab and click on Add Notification: In the Add a new notification pop-up, select the appropriate event you want to receive notifications, and in the Recipient type box, select SpiraTeam : After that, you will see some new fields to fill, they are: URL - It is the URL you use to access your instance of SpiraTeam; User Name : Your SpiraTeam user name; Password : Your SpiraTeam password; Project ID -- The numeric ID of the SpiraTeam Project that the Build belongs to. (e.g. for Project PR00001 just enter 1) Release Version Number -- The version number of the SpiraTeam Release/Iteration that the Build belongs to. (e.g. for Release RL0004 with version number 1.0.0.0 you'd enter just 1.0.0.0) After filling this boxes with appropriate information, click on Add button. Bamboo will then try to connect to the SpiraTeam Server, and check the Project/Release provided info. Once it validates your information, the connection settings will be saved. In case of error, follow the instructions on-screen and try again.","title":"Setting-Up the SpiraTeam Bamboo Add-on"},{"location":"Build-Server-Integration/Atlassian-Bamboo/#viewing-the-build-results-in-spirateam","text":"Now that you have associated your Bamboo Project and Plan with a specific SpiraTeam project and release/iteration, you can use Bamboo to manage your software builds and have the results of the build be reported back into SpiraTeam. For example when the 'Plan1' build of TestProject 1 illustrated in the figure bellow is executed, it will report in Bamboo: The corresponding build entry will also be created in SpiraTeam under the specified project and release/iteration: If you have configured your Project Home to include the list of recent builds, the build information will also be displayed on the Project Home dashboard: Clicking on either of the hyperlinks will allow you to navigate to the Build details page inside SpiraTeam: This page will display the status (success / failure) and details of the build (imported from the Bamboo Console Output) together with a list of the associated incidents, test runs and source code revisions. The following section will explain how to use your Source Code Management (SCM) system to take advantage of the SpiraTeam add-on and automatically link incidents and source code revisions to the build information.","title":"Viewing the Build Results in SpiraTeam"},{"location":"Build-Server-Integration/Atlassian-Bamboo/#working-with-source-code-changesets","text":"When your developers commit changes to your application's source into the SCM repository, they should make sure to link the commit to the appropriate artifacts in SpiraTeam. For example they may want to record that the revision fixes a specific incident or implements a specific feature (requirement). Linking an artifact is very simple. All the developer needs to do is enter the artifact token in the following format: [PREFIX:ID] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and tasks are \" TK \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect the tokens and will include links to them under the Associations tab for each revision detail in SpiraTeam. Inside SpiraTeam, the system will use the same information to automatically link the list of associated revisions to the build record: If the commit message contains Incident tokens, the add-on will also automatically link those incidents to the appropriate build: Similarly when you view the list of incidents inside SpiraTeam you will now be able to sort and filter the list by the associated build: Congratulations! You are now able to use SpiraTeam and Bamboo to be able to manage your builds and have the build status integrated into your SpiraTeam project dashboard.","title":"Working with Source Code Changesets"},{"location":"Build-Server-Integration/Atlassian-Bamboo/#scheduling-test-sets-upon-successful-builds","text":"One additional feature of the integration with SpiraTest and SpiraTeam (hereafter just SpiraTest) is the ability to have SpiraTest automatically schedule the execution of a test set whenever a build passes. To do that, make sure the Test Set is associated with the SpiraTest release or iteration that is being built and then set the Schedule on Build field to \"Yes\" and optionally enter in the delay (after the build succeeds) that you want the test set to be scheduled for: This means that you don't need to separately manage your build schedule in Bamboo and your test automation schedule in SpiraTest.","title":"Scheduling Test Sets Upon Successful Builds"},{"location":"Build-Server-Integration/Jenkins--Hudson/","text":"Jenkins / Hudson This section outlines how to use SpiraTest, SpiraTeam or SpiraPlan (hereafter referred to as SpiraPlan in conjunction with either the Jenkins or Hudson (hereafter referred to as Jenkins) continuous integration build servers. It assumes that you already have a working installation of SpiraTest, SpiraTeam or SpiraPlan v3.2 or later and a working installation of Jenkins/Hudson v2.7.3 or later. If you have an earlier version of SpiraPlan, you will need to upgrade to at least v3.2, and if you have any earlier version of Jenkins you will also need to upgrade it too. Note: this integration is only available for Jenkins Freestyle Project items Overview Jenkins provides continuous integration services for software development, primarily in the Java programming language. It is a server-based system running in a servlet container such as Apache Tomcat. It supports SCM tools including CVS, Subversion, Git, Mercurial, Perforce and Clearcase, and can execute Apache Ant and Apache Maven based projects as well as arbitrary shell scripts and Windows batch commands. When you use the SpiraPlan plugin for Jenkins, it will allow you to associate each Jenkins project with a corresponding project and release in SpiraPlan. Then, each time Jenkins creates a new build, a new build artifact will be created in SpiraPlan. Each build in SpiraPlan will be automatically linked to the incidents fixed, source code revisions committed, and any SpiraPlan tokens in the Jenkins changelog will be parsed and turned into SpiraPlan artifact hyperlinks. Installing the SpiraPlan Plug-in for Jenkins The plug-in for SpiraPlan is available through the Jenkins Plugin Manager under the Available tab. Use the filter on the right of the screen to narrow down the plugins listed by typing spira. Check off Spira Importer and use the install that is best for your environment. The Installing Plugins screen will show you the progress of the install. After Jenkins has restarted, connect to your Jenkins server. Setting-Up the SpiraPlan Jenkins Plug-in Now that the plugin has been installed, you need to go back to the Jenkins homepage and click on the \"Manage Jenkins\" hyperlink followed by the \"Configure System\" hyperlink. This will bring up the main Jenkins configuration page. Scroll down to find the \" Spira Integeration \" section: Enter in the URL you use to access your instance of SpiraPlan, together with a valid username and password . Once you have entered the values, click on the [Test Connection] button to verify that Jenkins can connect to SpiraPlan successfully. Once it has connected successfully, click the [Save] button at the bottom of the screen to save your connection settings. Configuring a Jenkins Job Now that you have setup the global SpiraPlan settings in Jenkins, next you need make a new item in Jenkins to associate each of your Jenkins Jobs with their corresponding SpiraPlan Product and Release/Sprint. To do this, go to the Jenkins Home Page and click in the upper left on New Item. In the new Item page enter a meaningful name for the job and select Freestyle project. At the bottom left of the page click the OK button. Scroll down in the Build Triggers page to the Build Environment Section. Under the section \" Build Environment \" select the checkbox marked \" Enable Spira Integration \". That will display the SpiraPlan configuration panel for this job: Now you need to enter the following values: Product ID -- The numeric ID of the SpiraPlan Product that the Build belongs to. (e.g. for Product PR1 enter \"1\") Release Version Number -- The active version number of the SpiraPlan Release/Sprint that the Build belongs to. (e.g. for Release RL4 with version number 1.0.0.0 you'd enter \"1.0.0.0\") Once you have entered in the Product ID and Release version number, click the [Verify Release] button and the plugin will connect to SpiraPlan and verify that the product exists, that the release/sprint is currently active, that the specified release/sprint exists in the product, and that the current user can connect to that product. Once it has verified successfully, click the [Save] button at the bottom of the screen to save your Job configuration settings. You are now ready to use Jenkins with SpiraPlan. Viewing the Build Results in SpiraPlan Now that you have associated your Jenkins job with a specific SpiraPlan product and active release/sprint, you can now use Jenkins to manage your software builds and have the results of the build be reported back into SpiraPlan. For example when the 'Build JUnit' job illustrated in the previous section is executed, it will report back the following result in Jenkins: The corresponding build entry will also be created in SpiraPlan under the specified product and release/sprint: If you have configured your Product Home to include the list of recent builds, the build information will also be displayed on the Project Home dashboard: Clicking on either of the hyperlinks will allow you to navigate to the Build details page inside SpiraPlan: This page will display the status (success / failure) and details of the build (from the Jenkins Console Output) together with a list of the associated incidents, test runs and source code revisions. The following section will explain how to use your Source Code Management (SCM) system to take advantage of the Spira Importer plugin and automatically link incidents and source code revisions to the build information. Working with Source Code Changesets When your developers commit changes to your application's source into the SCM repository, they should make sure to link the commit to the appropriate artifacts in SpiraPlan. For example they may want to record that the revision fixes a specific incident or implements a specific feature (requirement). Linking an artifact is very simple. All the developer needs to do is enter the artifact token in the following format: [PREFIX:ID] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraPlan, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and tasks are \" TK \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraPlan will automatically detect the tokens and will include links to them under the Associations tab for each revision detail in SpiraPlan. In addition, when Jenkins creates the next build (that includes this revision), the plugin will automatically parse the revision message and convert the tokens into hyperlinks to the corresponding SpiraPlan artifact. That way, when developers view the build changelog in Jenkins, it will automatically include links to the SpiraPlan items: Meanwhile, inside SpiraPlan, the system will use the same information to automatically link the list of associated revisions to the build record: If the commit message contains Incident tokens, the plugin will also automatically link those incidents to the appropriate build: Similarly when you view the list of incidents inside SpiraPlan you will now be able to sort and filter the list by the associated build: Congratulations! You are now able to use SpiraPlan and Jenkins to be able to manage your builds and have the build status integrated into your SpiraPlan project dashboard. Scheduling Test Sets Upon Successful Builds One additional feature of the integration with SpiraTest, SpiaTeam, and SpiraPlan (hereafter just SpiraPlan) is the ability to have SpiraPlan automatically schedule the execution of a test set whenever a build passes. To do that, make sure the Test Set is associated with the SpiraPlan release or sprint that is being built and then set the Schedule on Build field to \"Yes\" and optionally enter in the delay (after the build succeeds) that you want the test set to be scheduled for: This means that you don't need to separately manage your build schedule in Jenkins and your test automation schedule in SpiraTest.","title":"Jenkins/Hudson"},{"location":"Build-Server-Integration/Jenkins--Hudson/#jenkins-hudson","text":"This section outlines how to use SpiraTest, SpiraTeam or SpiraPlan (hereafter referred to as SpiraPlan in conjunction with either the Jenkins or Hudson (hereafter referred to as Jenkins) continuous integration build servers. It assumes that you already have a working installation of SpiraTest, SpiraTeam or SpiraPlan v3.2 or later and a working installation of Jenkins/Hudson v2.7.3 or later. If you have an earlier version of SpiraPlan, you will need to upgrade to at least v3.2, and if you have any earlier version of Jenkins you will also need to upgrade it too. Note: this integration is only available for Jenkins Freestyle Project items","title":"Jenkins / Hudson"},{"location":"Build-Server-Integration/Jenkins--Hudson/#overview","text":"Jenkins provides continuous integration services for software development, primarily in the Java programming language. It is a server-based system running in a servlet container such as Apache Tomcat. It supports SCM tools including CVS, Subversion, Git, Mercurial, Perforce and Clearcase, and can execute Apache Ant and Apache Maven based projects as well as arbitrary shell scripts and Windows batch commands. When you use the SpiraPlan plugin for Jenkins, it will allow you to associate each Jenkins project with a corresponding project and release in SpiraPlan. Then, each time Jenkins creates a new build, a new build artifact will be created in SpiraPlan. Each build in SpiraPlan will be automatically linked to the incidents fixed, source code revisions committed, and any SpiraPlan tokens in the Jenkins changelog will be parsed and turned into SpiraPlan artifact hyperlinks.","title":"Overview"},{"location":"Build-Server-Integration/Jenkins--Hudson/#installing-the-spiraplan-plug-in-for-jenkins","text":"The plug-in for SpiraPlan is available through the Jenkins Plugin Manager under the Available tab. Use the filter on the right of the screen to narrow down the plugins listed by typing spira. Check off Spira Importer and use the install that is best for your environment. The Installing Plugins screen will show you the progress of the install. After Jenkins has restarted, connect to your Jenkins server.","title":"Installing the SpiraPlan Plug-in for Jenkins"},{"location":"Build-Server-Integration/Jenkins--Hudson/#setting-up-the-spiraplan-jenkins-plug-in","text":"Now that the plugin has been installed, you need to go back to the Jenkins homepage and click on the \"Manage Jenkins\" hyperlink followed by the \"Configure System\" hyperlink. This will bring up the main Jenkins configuration page. Scroll down to find the \" Spira Integeration \" section: Enter in the URL you use to access your instance of SpiraPlan, together with a valid username and password . Once you have entered the values, click on the [Test Connection] button to verify that Jenkins can connect to SpiraPlan successfully. Once it has connected successfully, click the [Save] button at the bottom of the screen to save your connection settings.","title":"Setting-Up the SpiraPlan Jenkins Plug-in"},{"location":"Build-Server-Integration/Jenkins--Hudson/#configuring-a-jenkins-job","text":"Now that you have setup the global SpiraPlan settings in Jenkins, next you need make a new item in Jenkins to associate each of your Jenkins Jobs with their corresponding SpiraPlan Product and Release/Sprint. To do this, go to the Jenkins Home Page and click in the upper left on New Item. In the new Item page enter a meaningful name for the job and select Freestyle project. At the bottom left of the page click the OK button. Scroll down in the Build Triggers page to the Build Environment Section. Under the section \" Build Environment \" select the checkbox marked \" Enable Spira Integration \". That will display the SpiraPlan configuration panel for this job: Now you need to enter the following values: Product ID -- The numeric ID of the SpiraPlan Product that the Build belongs to. (e.g. for Product PR1 enter \"1\") Release Version Number -- The active version number of the SpiraPlan Release/Sprint that the Build belongs to. (e.g. for Release RL4 with version number 1.0.0.0 you'd enter \"1.0.0.0\") Once you have entered in the Product ID and Release version number, click the [Verify Release] button and the plugin will connect to SpiraPlan and verify that the product exists, that the release/sprint is currently active, that the specified release/sprint exists in the product, and that the current user can connect to that product. Once it has verified successfully, click the [Save] button at the bottom of the screen to save your Job configuration settings. You are now ready to use Jenkins with SpiraPlan.","title":"Configuring a Jenkins Job"},{"location":"Build-Server-Integration/Jenkins--Hudson/#viewing-the-build-results-in-spiraplan","text":"Now that you have associated your Jenkins job with a specific SpiraPlan product and active release/sprint, you can now use Jenkins to manage your software builds and have the results of the build be reported back into SpiraPlan. For example when the 'Build JUnit' job illustrated in the previous section is executed, it will report back the following result in Jenkins: The corresponding build entry will also be created in SpiraPlan under the specified product and release/sprint: If you have configured your Product Home to include the list of recent builds, the build information will also be displayed on the Project Home dashboard: Clicking on either of the hyperlinks will allow you to navigate to the Build details page inside SpiraPlan: This page will display the status (success / failure) and details of the build (from the Jenkins Console Output) together with a list of the associated incidents, test runs and source code revisions. The following section will explain how to use your Source Code Management (SCM) system to take advantage of the Spira Importer plugin and automatically link incidents and source code revisions to the build information.","title":"Viewing the Build Results in SpiraPlan"},{"location":"Build-Server-Integration/Jenkins--Hudson/#working-with-source-code-changesets","text":"When your developers commit changes to your application's source into the SCM repository, they should make sure to link the commit to the appropriate artifacts in SpiraPlan. For example they may want to record that the revision fixes a specific incident or implements a specific feature (requirement). Linking an artifact is very simple. All the developer needs to do is enter the artifact token in the following format: [PREFIX:ID] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraPlan, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and tasks are \" TK \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraPlan will automatically detect the tokens and will include links to them under the Associations tab for each revision detail in SpiraPlan. In addition, when Jenkins creates the next build (that includes this revision), the plugin will automatically parse the revision message and convert the tokens into hyperlinks to the corresponding SpiraPlan artifact. That way, when developers view the build changelog in Jenkins, it will automatically include links to the SpiraPlan items: Meanwhile, inside SpiraPlan, the system will use the same information to automatically link the list of associated revisions to the build record: If the commit message contains Incident tokens, the plugin will also automatically link those incidents to the appropriate build: Similarly when you view the list of incidents inside SpiraPlan you will now be able to sort and filter the list by the associated build: Congratulations! You are now able to use SpiraPlan and Jenkins to be able to manage your builds and have the build status integrated into your SpiraPlan project dashboard.","title":"Working with Source Code Changesets"},{"location":"Build-Server-Integration/Jenkins--Hudson/#scheduling-test-sets-upon-successful-builds","text":"One additional feature of the integration with SpiraTest, SpiaTeam, and SpiraPlan (hereafter just SpiraPlan) is the ability to have SpiraPlan automatically schedule the execution of a test set whenever a build passes. To do that, make sure the Test Set is associated with the SpiraPlan release or sprint that is being built and then set the Schedule on Build field to \"Yes\" and optionally enter in the delay (after the build succeeds) that you want the test set to be scheduled for: This means that you don't need to separately manage your build schedule in Jenkins and your test automation schedule in SpiraTest.","title":"Scheduling Test Sets Upon Successful Builds"},{"location":"Build-Server-Integration/JetBrains-TeamCity/","text":"JetBrains TeamCity This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the JetBrains' TeamCity continuous integration build servers. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam v4.0 or later and a working installation of TeamCity v9.0.4 or later. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v4.0. Overview TeamCity provides continuous integration services for software development, primarily in the Java programming language. It is a server-based system running that supports a variety of different version control systems and build runners. It supports SCM tools including CVS, Subversion, Git, Mercurial, Perforce and Borland StarTeam, and can execute Apache Ant and Apache Maven based projects as well as arbitrary shell scripts and Windows batch commands. When you use the SpiraTeam Plug-In for TeamCity, it will allow you to associate each TeamCity project with a corresponding project and release in SpiraTeam. Then, each time TeamCity creates a new build, a new build artifact will be created in SpiraTeam. Each build in SpiraTeam will be automatically linked to the incidents fixed, tasks implemented, requirements developed and source code revisions committed. Installing the SpiraTeam Plug-in for TeamCity Go to the Inflectra website and open up the page that lists the various downloads available for SpiraTeam ( http://www.inflectra.com/SpiraTeam/Downloads.aspx ). Listed on this page will be the SpiraTeam Plug-In for TeamCity. Right-click on this link and save the Zip compressed folder to the TeamCity's Plug-In directory ( $TEAMCITY_USER_HOME/plugins ). After that, restart TeamCity for the plugin to take effect. It's also possible to install the Plug-In through the user interface of TeamCity via Administration > Plugins List > Upload Plugin Zip, choosing the zip-file from your file-system: Do not forget to restart TeamCity for the plugin to take effect. Once TeamCity has restarted, you can see the SpiraTeam Plug-In listed as one of the installed plugins: Setting-Up the SpiraTeam TeamCity Plug-in Now that the plugin has been installed, you need to configure the Global Settings for integration with SpiraTeam. To do this, go to Administration > Spira Global Settings: You will need TeamCity administrator privileges to access this configuration page. Once in the Spira Global Settings page, enter in the URL you use to access your instance of SpiraTeam, together with a valid username and password . Once you have entered the values, click on the [Save] button. TeamCity will then verify if it can connect to SpiraTeam successfully. Once it has connected successfully, your connection settings will be saved. In case of error, follow the instructions on-screen and try again. After setting the global configurations appropriately, you will need to enable the notifications in TeamCity. To do this, go to My Settings & Tools, that can be accessed through clicking your TeamCity username (top right). Once there, in the General tab, inside the Watched Builds and Notifications box, find the Spira Notifier for TeamCity section, and click in Edit : Once in the page, click in Add new Rule . Then, inside the Send notification when section, select the events you want TeamCity notify SpiraTeam: After selecting your preferences, click in the Save button. Configuring a TeamCity Project Now that you have setup the Global SpiraTeam and Notifications settings in TeamCity, next you need to associate each of your TeamCity Projects with their corresponding SpiraTeam Project and Release/Iteration. To do this, click on the name of a project and then click on the \"Spira Project Configuration\" tab for that Project: In this page you can check the URL of the SpiraTeam Server. If it is wrong, you can change it in the Spira Global Settings menu . It is also possible to check the Project ID associated with the project in TeamCity. This information can be useful for debugging/checking reasons. To associate a TeamCity Project with a SpiraTeam Project, enter the following values: Project ID -- The numeric ID of the SpiraTeam Project that the Build belongs to. (e.g. for Project PR00001 just enter 1) Release Version Number -- The version number of the SpiraTeam Release/Iteration that the Build belongs to. (e.g. for Release RL0004 with version number 1.0.0.0 you'd enter just 1.0.0.0) Once you have entered in the Project ID and Release version number, click the [Save] button and the plugin will connect to SpiraTeam and verify that the project exists, that the current user can connect to that project, and that the specified release/iteration exists in the project. Once it has verified successfully, it will save your Project configuration settings. In case of error, follow the instructions on-screen and try again. You are now ready to use TeamCity with SpiraTeam. Viewing the Build Results in SpiraTeam Now that you have associated your TeamCity Project with a specific SpiraTeam project and release/ iteration, you can now use TeamCity to manage your software builds and have the results of the build be reported back into SpiraTeam. For example when the 'BuildConfigTest' build of Project 1 illustrated in the figure bellow is executed, it will report in TeamCity: The corresponding build entry will also be created in SpiraTeam under the specified project and release/iteration: If you have configured your Project Home to include the list of recent builds, the build information will also be displayed on the Project Home dashboard: Clicking on either of the hyperlinks will allow you to navigate to the Build details page inside SpiraTeam: This page will display the status (success / failure) and details of the build (imported from the TeamCity Console Output) together with a list of the associated incidents, test runs and source code revisions. The following section will explain how to use your Source Code Management (SCM) system to take advantage of the SpiraTeam plugin and automatically link incidents and source code revisions to the build information. Working with Source Code Changesets When your developers commit changes to your application's source into the SCM repository, they should make sure to link the commit to the appropriate artifacts in SpiraTeam. For example they may want to record that the revision fixes a specific incident or implements a specific feature (requirement). Linking an artifact is very simple. All the developer needs to do is enter the artifact token in the following format: [PREFIX:ID] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and tasks are \" TK \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect the tokens and will include links to them under the Associations tab for each revision detail in SpiraTeam. Inside SpiraTeam, the system will use the same information to automatically link the list of associated revisions to the build record: If the commit message contains Incident tokens, the plugin will also automatically link those incidents to the appropriate build: Similarly when you view the list of incidents inside SpiraTeam you will now be able to sort and filter the list by the associated build: Congratulations! You are now able to use SpiraTeam and TeamCity to be able to manage your builds and have the build status integrated into your SpiraTeam project dashboard. Scheduling Test Sets Upon Successful Builds One additional feature of the integration with SpiraTest and SpiraTeam (hereafter just SpiraTest) is the ability to have SpiraTest automatically schedule the execution of a test set whenever a build passes. To do that, make sure the Test Set is associated with the SpiraTest release or iteration that is being built and then set the Schedule on Build field to \"Yes\" and optionally enter in the delay (after the build succeeds) that you want the test set to be scheduled for: This means that you don't need to separately manage your build schedule in Jenkins and your test automation schedule in TeamCity.","title":"JetBrains TeamCity"},{"location":"Build-Server-Integration/JetBrains-TeamCity/#jetbrains-teamcity","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the JetBrains' TeamCity continuous integration build servers. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam v4.0 or later and a working installation of TeamCity v9.0.4 or later. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v4.0.","title":"JetBrains TeamCity"},{"location":"Build-Server-Integration/JetBrains-TeamCity/#overview","text":"TeamCity provides continuous integration services for software development, primarily in the Java programming language. It is a server-based system running that supports a variety of different version control systems and build runners. It supports SCM tools including CVS, Subversion, Git, Mercurial, Perforce and Borland StarTeam, and can execute Apache Ant and Apache Maven based projects as well as arbitrary shell scripts and Windows batch commands. When you use the SpiraTeam Plug-In for TeamCity, it will allow you to associate each TeamCity project with a corresponding project and release in SpiraTeam. Then, each time TeamCity creates a new build, a new build artifact will be created in SpiraTeam. Each build in SpiraTeam will be automatically linked to the incidents fixed, tasks implemented, requirements developed and source code revisions committed.","title":"Overview"},{"location":"Build-Server-Integration/JetBrains-TeamCity/#installing-the-spirateam-plug-in-for-teamcity","text":"Go to the Inflectra website and open up the page that lists the various downloads available for SpiraTeam ( http://www.inflectra.com/SpiraTeam/Downloads.aspx ). Listed on this page will be the SpiraTeam Plug-In for TeamCity. Right-click on this link and save the Zip compressed folder to the TeamCity's Plug-In directory ( $TEAMCITY_USER_HOME/plugins ). After that, restart TeamCity for the plugin to take effect. It's also possible to install the Plug-In through the user interface of TeamCity via Administration > Plugins List > Upload Plugin Zip, choosing the zip-file from your file-system: Do not forget to restart TeamCity for the plugin to take effect. Once TeamCity has restarted, you can see the SpiraTeam Plug-In listed as one of the installed plugins:","title":"Installing the SpiraTeam Plug-in for TeamCity"},{"location":"Build-Server-Integration/JetBrains-TeamCity/#setting-up-the-spirateam-teamcity-plug-in","text":"Now that the plugin has been installed, you need to configure the Global Settings for integration with SpiraTeam. To do this, go to Administration > Spira Global Settings: You will need TeamCity administrator privileges to access this configuration page. Once in the Spira Global Settings page, enter in the URL you use to access your instance of SpiraTeam, together with a valid username and password . Once you have entered the values, click on the [Save] button. TeamCity will then verify if it can connect to SpiraTeam successfully. Once it has connected successfully, your connection settings will be saved. In case of error, follow the instructions on-screen and try again. After setting the global configurations appropriately, you will need to enable the notifications in TeamCity. To do this, go to My Settings & Tools, that can be accessed through clicking your TeamCity username (top right). Once there, in the General tab, inside the Watched Builds and Notifications box, find the Spira Notifier for TeamCity section, and click in Edit : Once in the page, click in Add new Rule . Then, inside the Send notification when section, select the events you want TeamCity notify SpiraTeam: After selecting your preferences, click in the Save button.","title":"Setting-Up the SpiraTeam TeamCity Plug-in"},{"location":"Build-Server-Integration/JetBrains-TeamCity/#configuring-a-teamcity-project","text":"Now that you have setup the Global SpiraTeam and Notifications settings in TeamCity, next you need to associate each of your TeamCity Projects with their corresponding SpiraTeam Project and Release/Iteration. To do this, click on the name of a project and then click on the \"Spira Project Configuration\" tab for that Project: In this page you can check the URL of the SpiraTeam Server. If it is wrong, you can change it in the Spira Global Settings menu . It is also possible to check the Project ID associated with the project in TeamCity. This information can be useful for debugging/checking reasons. To associate a TeamCity Project with a SpiraTeam Project, enter the following values: Project ID -- The numeric ID of the SpiraTeam Project that the Build belongs to. (e.g. for Project PR00001 just enter 1) Release Version Number -- The version number of the SpiraTeam Release/Iteration that the Build belongs to. (e.g. for Release RL0004 with version number 1.0.0.0 you'd enter just 1.0.0.0) Once you have entered in the Project ID and Release version number, click the [Save] button and the plugin will connect to SpiraTeam and verify that the project exists, that the current user can connect to that project, and that the specified release/iteration exists in the project. Once it has verified successfully, it will save your Project configuration settings. In case of error, follow the instructions on-screen and try again. You are now ready to use TeamCity with SpiraTeam.","title":"Configuring a TeamCity Project"},{"location":"Build-Server-Integration/JetBrains-TeamCity/#viewing-the-build-results-in-spirateam","text":"Now that you have associated your TeamCity Project with a specific SpiraTeam project and release/ iteration, you can now use TeamCity to manage your software builds and have the results of the build be reported back into SpiraTeam. For example when the 'BuildConfigTest' build of Project 1 illustrated in the figure bellow is executed, it will report in TeamCity: The corresponding build entry will also be created in SpiraTeam under the specified project and release/iteration: If you have configured your Project Home to include the list of recent builds, the build information will also be displayed on the Project Home dashboard: Clicking on either of the hyperlinks will allow you to navigate to the Build details page inside SpiraTeam: This page will display the status (success / failure) and details of the build (imported from the TeamCity Console Output) together with a list of the associated incidents, test runs and source code revisions. The following section will explain how to use your Source Code Management (SCM) system to take advantage of the SpiraTeam plugin and automatically link incidents and source code revisions to the build information.","title":"Viewing the Build Results in SpiraTeam"},{"location":"Build-Server-Integration/JetBrains-TeamCity/#working-with-source-code-changesets","text":"When your developers commit changes to your application's source into the SCM repository, they should make sure to link the commit to the appropriate artifacts in SpiraTeam. For example they may want to record that the revision fixes a specific incident or implements a specific feature (requirement). Linking an artifact is very simple. All the developer needs to do is enter the artifact token in the following format: [PREFIX:ID] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and tasks are \" TK \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect the tokens and will include links to them under the Associations tab for each revision detail in SpiraTeam. Inside SpiraTeam, the system will use the same information to automatically link the list of associated revisions to the build record: If the commit message contains Incident tokens, the plugin will also automatically link those incidents to the appropriate build: Similarly when you view the list of incidents inside SpiraTeam you will now be able to sort and filter the list by the associated build: Congratulations! You are now able to use SpiraTeam and TeamCity to be able to manage your builds and have the build status integrated into your SpiraTeam project dashboard.","title":"Working with Source Code Changesets"},{"location":"Build-Server-Integration/JetBrains-TeamCity/#scheduling-test-sets-upon-successful-builds","text":"One additional feature of the integration with SpiraTest and SpiraTeam (hereafter just SpiraTest) is the ability to have SpiraTest automatically schedule the execution of a test set whenever a build passes. To do that, make sure the Test Set is associated with the SpiraTest release or iteration that is being built and then set the Schedule on Build field to \"Yes\" and optionally enter in the delay (after the build succeeds) that you want the test set to be scheduled for: This means that you don't need to separately manage your build schedule in Jenkins and your test automation schedule in TeamCity.","title":"Scheduling Test Sets Upon Successful Builds"},{"location":"Build-Server-Integration/Microsoft-Azure-DevOps-Pipelines/","text":"Microsoft Azure DevOps Pipelines This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraPlan) in conjunction with Microsoft's Azure DevOps continuous integration platform called Azure DevOps Pipelines . It assumes that you already have a working installation of SpiraPlan v5.0 or later and have already setup Microsoft Azure DevOps Pipelines. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v5.0. Overview Microsoft Azure DevOps provides tools for managing the entire application lifecycle, including source code management, reporting, automated builds, testing and release capabilities, for example. It supports version control using either its native TFS source code management system or Git. SpiraTeam has version control plugins for both TFS native and TFS with Git source code management options. When you use the Spira Build Server Extension for Azure DevOps, it will allow you to associate different Azure DevOps projects with a corresponding project and release in SpiraPlan. Then, each time a DevOps pipeline creates a new build, a new build artifact will be created in SpiraPlan. Each build in SpiraTeam will be automatically linked to the incidents fixed, tasks implemented, requirements developed and source code revisions committed. Installing the SpiraTeam Build Plug-in for Azure DevOps Go to the Inflectra website and open up the page that lists the various downloads available for SpiraTeam ( http://www.inflectra.com/SpiraTeam/Downloads.aspx ). Listed on this page will be the Azure DevOps Pipeline Plug-In. When you click on the link on this page, it will take you to the Azure DevOps Marketplace, where you can install the Spira extension into your DevOps instance: After that, the plugin will be available in your instance of Azure DevOps. Authenticating with Spira In DevOps, open the project you would like to have builds sync with Spira. Go to Project Settings > Pipelines > Service Connections Under Service connections, click the \"New service connection\" button and click \"SpiraPlan Configuration.\" Under connection name, put something helpful like SpiraPlan Fred Bloggs For SpiraPlan URL put the 'root' directory of your Spira instance, not including the end slash. For username, put the username you use to sign-in to Spira. For RSS Token, go to your user profile page in Spira, enable RSS Feeds and copy the token into DevOps. Now verify the connection by clicking \"Verify connection,\" if you entered everything correctly, you're good to go! Adding the Spira Build Task Now in the pipeline you would like to add Spira support to, open the pipeline's YAML file and in the assistant to the right, search \"Spira\" and select \"Export data to Spira\" Select the service connection name you put in earlier, enter the ID of the project in Spira you would like your results sent to, the ID of the release you would like the builds to be associated with, and the base url of your DevOps instance (like https://dev.azure.com/fabrikam or https://fabrikam.visualstudio.com ) The other fields are used internally by the plugin and should be left as-is - DO NOT CHANGE THEM. Click \"Add\" and add the condition: succeededOrFailed() above inputs in the YAML snippet. This makes sure that the Spira task can access the current build status. Now move the spira-build-task YAML Snippet to the end of the file so that it's executed last. This will make sure that the final result of the build gets recorded in Spira. Here is an example YAML file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 trigger : - master pool : vmImage : 'ubuntu-latest' steps : - task : NodeTool@0 inputs : versionSpec : '10.x' displayName : 'Install Node.js' - script : | npm install npm test displayName : 'npm install and test' - task : PublishTestResults@2 condition : succeededOrFailed() inputs : testRunner : JUnit testResultsFiles : '**/junitresults-*.xml' - task : spira-build-task@0 condition : succeededOrFailed() inputs : connectedService : 'SpiraPlan Fred Bloggs' project : '2' releaseId : '20' baseUrl : 'https://dev.azure.com/inflectra' buildNumber : '$(Build.BuildNumber)' buildStatus : '$(Agent.JobStatus)' buildId : '$(Build.BuildId)' sourceVersion : '$(Build.SourceVersion)' projectName : '$(System.TeamProject)' If everything had been configured correctly a new build in DevOps will create a new build in Spira! Viewing the Build Results in SpiraTeam Now that you have associated your Azure DevOps pipeline with a specific SpiraTeam project and release/ iteration, you can now use Azure DevOps to manage your software builds and have the results of the build be reported back into SpiraPlan. For example, when a DevOps Pipeline runs, it will report in Azure DevOps something like the following: The corresponding build entry will also be created in SpiraPlan under the specified project and release/iteration: If you have configured your Project Home to include the list of recent builds, the build information will also be displayed on the Project Home dashboard: Clicking on either of the hyperlinks will allow you to navigate to the Build details page inside SpiraTeam: This page will display the status (success / failure) and details of the build. Congratulations! You are now able to use SpiraPlan and Azure DevOps to be able to manage your builds and have the build status integrated into your SpiraPlan project dashboard. Scheduling Test Sets Upon Successful Builds One additional feature of the integration with SpiraPlan is the ability to have SpiraPlan automatically schedule the execution of a test set whenever a build passes. To do that, make sure the Test Set is associated with the SpiraPlan release or iteration that is being built and then set the Schedule on Build field to \"Yes\" and optionally enter in the delay (after the build succeeds) that you want the test set to be scheduled for: This means that you don't need to separately manage your build schedule in Azure DevOps and your test automation schedule in SpiraPlan.","title":"Azure DevOps Pipelines"},{"location":"Build-Server-Integration/Microsoft-Azure-DevOps-Pipelines/#microsoft-azure-devops-pipelines","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraPlan) in conjunction with Microsoft's Azure DevOps continuous integration platform called Azure DevOps Pipelines . It assumes that you already have a working installation of SpiraPlan v5.0 or later and have already setup Microsoft Azure DevOps Pipelines. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v5.0.","title":"Microsoft Azure DevOps Pipelines"},{"location":"Build-Server-Integration/Microsoft-Azure-DevOps-Pipelines/#overview","text":"Microsoft Azure DevOps provides tools for managing the entire application lifecycle, including source code management, reporting, automated builds, testing and release capabilities, for example. It supports version control using either its native TFS source code management system or Git. SpiraTeam has version control plugins for both TFS native and TFS with Git source code management options. When you use the Spira Build Server Extension for Azure DevOps, it will allow you to associate different Azure DevOps projects with a corresponding project and release in SpiraPlan. Then, each time a DevOps pipeline creates a new build, a new build artifact will be created in SpiraPlan. Each build in SpiraTeam will be automatically linked to the incidents fixed, tasks implemented, requirements developed and source code revisions committed.","title":"Overview"},{"location":"Build-Server-Integration/Microsoft-Azure-DevOps-Pipelines/#installing-the-spirateam-build-plug-in-for-azure-devops","text":"Go to the Inflectra website and open up the page that lists the various downloads available for SpiraTeam ( http://www.inflectra.com/SpiraTeam/Downloads.aspx ). Listed on this page will be the Azure DevOps Pipeline Plug-In. When you click on the link on this page, it will take you to the Azure DevOps Marketplace, where you can install the Spira extension into your DevOps instance: After that, the plugin will be available in your instance of Azure DevOps.","title":"Installing the SpiraTeam Build Plug-in for Azure DevOps"},{"location":"Build-Server-Integration/Microsoft-Azure-DevOps-Pipelines/#authenticating-with-spira","text":"In DevOps, open the project you would like to have builds sync with Spira. Go to Project Settings > Pipelines > Service Connections Under Service connections, click the \"New service connection\" button and click \"SpiraPlan Configuration.\" Under connection name, put something helpful like SpiraPlan Fred Bloggs For SpiraPlan URL put the 'root' directory of your Spira instance, not including the end slash. For username, put the username you use to sign-in to Spira. For RSS Token, go to your user profile page in Spira, enable RSS Feeds and copy the token into DevOps. Now verify the connection by clicking \"Verify connection,\" if you entered everything correctly, you're good to go!","title":"Authenticating with Spira"},{"location":"Build-Server-Integration/Microsoft-Azure-DevOps-Pipelines/#adding-the-spira-build-task","text":"Now in the pipeline you would like to add Spira support to, open the pipeline's YAML file and in the assistant to the right, search \"Spira\" and select \"Export data to Spira\" Select the service connection name you put in earlier, enter the ID of the project in Spira you would like your results sent to, the ID of the release you would like the builds to be associated with, and the base url of your DevOps instance (like https://dev.azure.com/fabrikam or https://fabrikam.visualstudio.com ) The other fields are used internally by the plugin and should be left as-is - DO NOT CHANGE THEM. Click \"Add\" and add the condition: succeededOrFailed() above inputs in the YAML snippet. This makes sure that the Spira task can access the current build status. Now move the spira-build-task YAML Snippet to the end of the file so that it's executed last. This will make sure that the final result of the build gets recorded in Spira. Here is an example YAML file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 trigger : - master pool : vmImage : 'ubuntu-latest' steps : - task : NodeTool@0 inputs : versionSpec : '10.x' displayName : 'Install Node.js' - script : | npm install npm test displayName : 'npm install and test' - task : PublishTestResults@2 condition : succeededOrFailed() inputs : testRunner : JUnit testResultsFiles : '**/junitresults-*.xml' - task : spira-build-task@0 condition : succeededOrFailed() inputs : connectedService : 'SpiraPlan Fred Bloggs' project : '2' releaseId : '20' baseUrl : 'https://dev.azure.com/inflectra' buildNumber : '$(Build.BuildNumber)' buildStatus : '$(Agent.JobStatus)' buildId : '$(Build.BuildId)' sourceVersion : '$(Build.SourceVersion)' projectName : '$(System.TeamProject)' If everything had been configured correctly a new build in DevOps will create a new build in Spira!","title":"Adding the Spira Build Task"},{"location":"Build-Server-Integration/Microsoft-Azure-DevOps-Pipelines/#viewing-the-build-results-in-spirateam","text":"Now that you have associated your Azure DevOps pipeline with a specific SpiraTeam project and release/ iteration, you can now use Azure DevOps to manage your software builds and have the results of the build be reported back into SpiraPlan. For example, when a DevOps Pipeline runs, it will report in Azure DevOps something like the following: The corresponding build entry will also be created in SpiraPlan under the specified project and release/iteration: If you have configured your Project Home to include the list of recent builds, the build information will also be displayed on the Project Home dashboard: Clicking on either of the hyperlinks will allow you to navigate to the Build details page inside SpiraTeam: This page will display the status (success / failure) and details of the build. Congratulations! You are now able to use SpiraPlan and Azure DevOps to be able to manage your builds and have the build status integrated into your SpiraPlan project dashboard.","title":"Viewing the Build Results in SpiraTeam"},{"location":"Build-Server-Integration/Microsoft-Azure-DevOps-Pipelines/#scheduling-test-sets-upon-successful-builds","text":"One additional feature of the integration with SpiraPlan is the ability to have SpiraPlan automatically schedule the execution of a test set whenever a build passes. To do that, make sure the Test Set is associated with the SpiraPlan release or iteration that is being built and then set the Schedule on Build field to \"Yes\" and optionally enter in the delay (after the build succeeds) that you want the test set to be scheduled for: This means that you don't need to separately manage your build schedule in Azure DevOps and your test automation schedule in SpiraPlan.","title":"Scheduling Test Sets Upon Successful Builds"},{"location":"Email-Integration/Configuring-the-Email-Integration-Service/","text":"Configuring the Email Integration Service Once you have completed the installation, you can configure the email integration service by going to Start > Program Files > Inflectra SpiraTeam > Tools > Email Integration which will bring up the management interface. Connecting to the SpiraTeam Server The first tab lets you specify the SpiraTeam instances that the email integration service will connect to. To add a new SpiraTeam server, click on the green Add (+) icon to switch the screen to allow you to enter a new server: You need to enter the following information: Server URL - The URL to SpiraTeam server Account Login - The account login that will be used to connect to SpiraTeam. It needs to be a user with the \"administrator\" role. Account Password - This is the password for the account Click the \"Test\" button to verify the connection. Once it has passed, click the Save icon to save the new SpiraTeam server information. To modify an existing SpiraTeam server instance, just click on its name in the server list. To delete a server, select its name in the server list and click the Delete icon (X). Once you have entered all the SpiraTeam instances that you will be connecting to, click the \"Next\" button to move to the next tab and configure the mail server integration. 3.2. Connecting to the POP3 Mail Server The \"POP3 Accounts\" tab displays a list of all the configured mail servers: Initially it will be empty, so just click the Add (+) icon to add a new mail server: You need to enter the following information: Account Email -- This should be the email address that will be polled for new support emails. Mail Server -- This should be the fully-qualified name or IP address of your POP3 mail server. Port -- This is the port that your mail server expects incoming POP3 requests to use. The default for unencrypted POP3 requests is 110 and the default for SSL encrypted POP3 requests is 995. Use SSL -- You should check this option if your mail server requires a secure SSL connection. Login/Password -- You should enter the login/password for the mail server that allows reading of inbound messages for the email address specified above. Remove Messages -- Checking this option will make the email integration service remove the email messages from in the Inbox of the user's email account. We recommend leaving this unchecked when first using the service. Once you are happy that the integration is correctly handling spam and not ignoring correct messages, you can check this option to prevent the email inbox getting too large. Attach Message -- Checking this option will attach the original email message to the new help desk ticket created in SpiraTeam as well as populating the ticket with the contents of the message. This is useful when debugging a new installation but typically would be unchecked during normal operation. Application Server -- You should specify the instance of SpiraTeam that this email account will be linked to. Default Project -- When creating new incidents, this will be the default project that the new incident will be created in, unless the Match Content option is selected below. For any incoming email that has an artifact token (For example: [IN:45] for Incident #45, or [RQ:912] for Requirement #912), and the user's email is registered to a user in that project, then the email will be imported as a comment to that artifact. RegEx Match Content -- Checking this option will allow the email integration service to do a name match in the body of the email for possible project names instead of just relying on the \"default project\". For example if your email contains \"Project1\" in the message text it will be routed to Product1 in SpiraTeam. Items looked for are Project tokens ([PR:##]), and then the Project name in the subject line of the email and the text of the email. Configuring the Advanced Settings Once you have finished configuring the SpiraTeam server instances and POP3 mail accounts, you can click on the \"Advanced Settings\" tab to setup special rules that prevent emails from specific accounts being processed as well as allow the email integration service to look for special mail headers and subject tokens that might indicate bulk / spam messages that should be ignored. You can configure the following settings: Enable Trace Logging -- When this option is checked, the email integration service will log information messages to the Windows Application Event Log on the machine running the integration service. This is useful when first deploying the system or when you are encountering issues and Inflectra support personnel have asked you switch on trace logging to aid in support. For normal use we recommend turning this setting off to avoid too many messages being logged in the Event Log. Minutes Between Polls -- This setting specifies the interval (in minutes) between each time the email integration service attempts to retrieve new email messages from the email server. Ignore Addresses -- In this section you can add a list of any email addresses that you want to ignore and not use for creating new SpiraTeam help desk tickets. If there are any known senders or internal email accounts, you should add them in this section. In addition, there are two other sub-tabs to the Advanced Settings tab that provide configuration options: The \"Ignore Headers\" section allows you to specify any email message headers that if present in an email message will be ignored by the email integration service. Note : Right now, the importer will only check the presence of a header, not its contents . As long as the header exists, even if it's value is null, the message will not be imported. The \"Ignore Keywords\" section allows you to specify any keywords/phrases that if present in the subject-line or body of an email message will be ignored by the email integration service. Some mail servers that have built-in SPAM detection systems will automatically add SPAM-HIGH, SPAM-MEDIUM, SPAM-LOW to the subject line (for example).","title":"Configuring"},{"location":"Email-Integration/Configuring-the-Email-Integration-Service/#configuring-the-email-integration-service","text":"Once you have completed the installation, you can configure the email integration service by going to Start > Program Files > Inflectra SpiraTeam > Tools > Email Integration which will bring up the management interface.","title":"Configuring the Email Integration Service"},{"location":"Email-Integration/Configuring-the-Email-Integration-Service/#connecting-to-the-spirateam-server","text":"The first tab lets you specify the SpiraTeam instances that the email integration service will connect to. To add a new SpiraTeam server, click on the green Add (+) icon to switch the screen to allow you to enter a new server: You need to enter the following information: Server URL - The URL to SpiraTeam server Account Login - The account login that will be used to connect to SpiraTeam. It needs to be a user with the \"administrator\" role. Account Password - This is the password for the account Click the \"Test\" button to verify the connection. Once it has passed, click the Save icon to save the new SpiraTeam server information. To modify an existing SpiraTeam server instance, just click on its name in the server list. To delete a server, select its name in the server list and click the Delete icon (X). Once you have entered all the SpiraTeam instances that you will be connecting to, click the \"Next\" button to move to the next tab and configure the mail server integration. 3.2. Connecting to the POP3 Mail Server The \"POP3 Accounts\" tab displays a list of all the configured mail servers: Initially it will be empty, so just click the Add (+) icon to add a new mail server: You need to enter the following information: Account Email -- This should be the email address that will be polled for new support emails. Mail Server -- This should be the fully-qualified name or IP address of your POP3 mail server. Port -- This is the port that your mail server expects incoming POP3 requests to use. The default for unencrypted POP3 requests is 110 and the default for SSL encrypted POP3 requests is 995. Use SSL -- You should check this option if your mail server requires a secure SSL connection. Login/Password -- You should enter the login/password for the mail server that allows reading of inbound messages for the email address specified above. Remove Messages -- Checking this option will make the email integration service remove the email messages from in the Inbox of the user's email account. We recommend leaving this unchecked when first using the service. Once you are happy that the integration is correctly handling spam and not ignoring correct messages, you can check this option to prevent the email inbox getting too large. Attach Message -- Checking this option will attach the original email message to the new help desk ticket created in SpiraTeam as well as populating the ticket with the contents of the message. This is useful when debugging a new installation but typically would be unchecked during normal operation. Application Server -- You should specify the instance of SpiraTeam that this email account will be linked to. Default Project -- When creating new incidents, this will be the default project that the new incident will be created in, unless the Match Content option is selected below. For any incoming email that has an artifact token (For example: [IN:45] for Incident #45, or [RQ:912] for Requirement #912), and the user's email is registered to a user in that project, then the email will be imported as a comment to that artifact. RegEx Match Content -- Checking this option will allow the email integration service to do a name match in the body of the email for possible project names instead of just relying on the \"default project\". For example if your email contains \"Project1\" in the message text it will be routed to Product1 in SpiraTeam. Items looked for are Project tokens ([PR:##]), and then the Project name in the subject line of the email and the text of the email.","title":"Connecting to the SpiraTeam Server"},{"location":"Email-Integration/Configuring-the-Email-Integration-Service/#configuring-the-advanced-settings","text":"Once you have finished configuring the SpiraTeam server instances and POP3 mail accounts, you can click on the \"Advanced Settings\" tab to setup special rules that prevent emails from specific accounts being processed as well as allow the email integration service to look for special mail headers and subject tokens that might indicate bulk / spam messages that should be ignored. You can configure the following settings: Enable Trace Logging -- When this option is checked, the email integration service will log information messages to the Windows Application Event Log on the machine running the integration service. This is useful when first deploying the system or when you are encountering issues and Inflectra support personnel have asked you switch on trace logging to aid in support. For normal use we recommend turning this setting off to avoid too many messages being logged in the Event Log. Minutes Between Polls -- This setting specifies the interval (in minutes) between each time the email integration service attempts to retrieve new email messages from the email server. Ignore Addresses -- In this section you can add a list of any email addresses that you want to ignore and not use for creating new SpiraTeam help desk tickets. If there are any known senders or internal email accounts, you should add them in this section. In addition, there are two other sub-tabs to the Advanced Settings tab that provide configuration options: The \"Ignore Headers\" section allows you to specify any email message headers that if present in an email message will be ignored by the email integration service. Note : Right now, the importer will only check the presence of a header, not its contents . As long as the header exists, even if it's value is null, the message will not be imported. The \"Ignore Keywords\" section allows you to specify any keywords/phrases that if present in the subject-line or body of an email message will be ignored by the email integration service. Some mail servers that have built-in SPAM detection systems will automatically add SPAM-HIGH, SPAM-MEDIUM, SPAM-LOW to the subject line (for example).","title":"Configuring the Advanced Settings"},{"location":"Email-Integration/Installing-the-Email-Integration-Service/","text":"Installing the Email Integration Service This section outlines how to install the SpiraTeam email integration service onto your environment. Depending on your environment you can install the email integration service on: Your SpiraTeam application server Your corporate mail server A separate workstation that can connect to both SpiraTeam and your mail server If your SpiraTeam installation is installed on-premise, then you can use options (1), (2) or (3), if your SpiraTeam installation is hosted by Inflectra as a Software as a Service (SaaS) subscription then you'd need to use either option (2) or (3). Once you have downloaded the SpiraTeam email integration installation package (InflectraEmailIntegration.msi) from the Inflectra website you should download it onto the appropriate computer and double-click on it to run the Windows installer package: You should click on the \"Next\" button, read the End User License Agreement, check the box that you agree with its terms and then click the \"Next\" button. This brings up the installation location page: You should choose the appropriate place to install the email integration service and then click \"Next\". On the next screen click the \"Install\" button and it will complete the software installation. Once the installation has completed, you will see the following new service listed in the Control Panel > Administrative Tools > Windows Services section: The service should be listed to run in Automatic mode and should already be started. Note: This email integration service is able to integrate with both KronoDesk and SpiraTeam from Inflectra, however the focus of this guide is the integration with SpiraTest, SpiraPlan and SpiraTeam (hereafter SpiraTeam) only.","title":"Installing"},{"location":"Email-Integration/Installing-the-Email-Integration-Service/#installing-the-email-integration-service","text":"This section outlines how to install the SpiraTeam email integration service onto your environment. Depending on your environment you can install the email integration service on: Your SpiraTeam application server Your corporate mail server A separate workstation that can connect to both SpiraTeam and your mail server If your SpiraTeam installation is installed on-premise, then you can use options (1), (2) or (3), if your SpiraTeam installation is hosted by Inflectra as a Software as a Service (SaaS) subscription then you'd need to use either option (2) or (3). Once you have downloaded the SpiraTeam email integration installation package (InflectraEmailIntegration.msi) from the Inflectra website you should download it onto the appropriate computer and double-click on it to run the Windows installer package: You should click on the \"Next\" button, read the End User License Agreement, check the box that you agree with its terms and then click the \"Next\" button. This brings up the installation location page: You should choose the appropriate place to install the email integration service and then click \"Next\". On the next screen click the \"Install\" button and it will complete the software installation. Once the installation has completed, you will see the following new service listed in the Control Panel > Administrative Tools > Windows Services section: The service should be listed to run in Automatic mode and should already be started. Note: This email integration service is able to integrate with both KronoDesk and SpiraTeam from Inflectra, however the focus of this guide is the integration with SpiraTest, SpiraPlan and SpiraTeam (hereafter SpiraTeam) only.","title":"Installing the Email Integration Service"},{"location":"Email-Integration/Using-the-Email-Integration-Service-with-SpiraTeam/","text":"Using the Email Integration Service with SpiraTeam Once you have the email integration service configured, we recommend that you initially clear the Windows Application Log on the machine. This will allow you to quickly see any errors that occur due to misconfiguration. The event viewer can be found in Control Panel > Administrative Tools > Event Viewer. Once you have the email integration enabled and running, any users that email in a support ticket to one of the \"watched\" email addresses will experience the following process: The user emails incident.logger@mycompany.com with an incident to create. The contents (including attachments) of the email will be parsed by the email integration service. The application will look for tokens to decide if it should be inserted in the default project or another user-specified project. The sender's email address will be queried to make sure that the user has access to create incident in the selected project. (If not, the system will then check the user's permissions for the default project.) If the user has permission, the new incident is created. The user will receive an automated email from the system letting them know that the incident was created: SpiraTeam Incident \"Need New Security Settings updated in Documentation\" in project \"Project1\" has been changed. Please log into SpiraTeam to view this Incident's details. https://localhost/spirateam/6/Incident/2196.aspx The user will not be subscribed to the ticket unless the user falls under normal Workflow Notification or Event Notification settings. Any time the user gets a notification email from the server, they can reply to the email -- leaving the token in the subject line unaltered -- and their reply will be put into the ticket as a new comment. It's important that -- if enabled in the SpiraTeam application -- the separator line is not altered, and the reply is kept above the line. Any test under that line will not be imported. (If the separator line is altered, or the option is disabled in the SpiraTeam administration, then the entire email, including quotes and reply text, will be inserted.)","title":"Using"},{"location":"Email-Integration/Using-the-Email-Integration-Service-with-SpiraTeam/#using-the-email-integration-service-with-spirateam","text":"Once you have the email integration service configured, we recommend that you initially clear the Windows Application Log on the machine. This will allow you to quickly see any errors that occur due to misconfiguration. The event viewer can be found in Control Panel > Administrative Tools > Event Viewer. Once you have the email integration enabled and running, any users that email in a support ticket to one of the \"watched\" email addresses will experience the following process: The user emails incident.logger@mycompany.com with an incident to create. The contents (including attachments) of the email will be parsed by the email integration service. The application will look for tokens to decide if it should be inserted in the default project or another user-specified project. The sender's email address will be queried to make sure that the user has access to create incident in the selected project. (If not, the system will then check the user's permissions for the default project.) If the user has permission, the new incident is created. The user will receive an automated email from the system letting them know that the incident was created: SpiraTeam Incident \"Need New Security Settings updated in Documentation\" in project \"Project1\" has been changed. Please log into SpiraTeam to view this Incident's details. https://localhost/spirateam/6/Incident/2196.aspx The user will not be subscribed to the ticket unless the user falls under normal Workflow Notification or Event Notification settings. Any time the user gets a notification email from the server, they can reply to the email -- leaving the token in the subject line unaltered -- and their reply will be put into the ticket as a new comment. It's important that -- if enabled in the SpiraTeam application -- the separator line is not altered, and the reply is kept above the line. Any test under that line will not be imported. (If the separator line is altered, or the option is disabled in the SpiraTeam administration, then the entire email, including quotes and reply text, will be inserted.)","title":"Using the Email Integration Service with SpiraTeam"},{"location":"External-Bug-Tracking-Integration/Setting-up-Data-Synchronization/","text":"Setting up Data Synchronization This section outlines the general data synchronization configuration to use any of the supported bug trackers with SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as Spira). \u25ba Please read this section first, before performing the configuration steps specific to your bug-tracker. The built-in data-synchronization service that comes with Spira, allows the quality assurance team to manage their requirements and test cases in Spira, execute their test runs, and then have the new defects/bugs generated during the run be automatically loaded into an external bug-tracker. Once the incidents are loaded into the external bug-tracker, the development team can then manage the lifecycle of these defects/bugs in their chosen tool, and have the status changes be reflected back in Spira. In addition, any issues logged directly into the external bug-tracker will get imported into Spira as either new incidents or new requirements (depending on their type) so that they can be used as part of the planning and testing lifecycle. There are three possible deployment options for the Spira data synchronization: You have both Spira and the External Bug Tracker cloud-hosted You have Spira installed on-premise (External Bug Tracker can be either) You have Spira cloud-hosted, but the External Bug Tracker installed on-premise We shall provide the configuration steps for each option: Spira & External Tool Cloud Hosted When you sign up for Spira as a cloud-hosted subscription, you have the option of including the Spira DataSync service as an add-on feature to the subscription: Make sure you include the 'Spira DataSync' add-on with your subscription. Once your subscription is provisioned, you will be able to configure the connection to Spira by going to your secure Customer Area on our website: Click on the 'Configure' button associated with the Spira-DataSync addon row: Enter a login and password that can connect to your Spira instance. This user needs to be a member of the project(s) that will be synchronized with the external bug-tracker and needs to have at least Incident create/modify/view permissions and Release create/modify/view permissions in these projects. Click on the 'Test' button to verify the credentials, and once they validate, make sure the 'Active' flag is checked and then click 'Save'. You have now configured the synchronization. You should now see a list of the plugins currently configured in your Spira instance: If you click on any of the 'Manage' buttons you will be taken to your Spira instance where you can complete the plugin configuration: The steps for configuring each plugin are specific to each external bug-tracking tool. Please refer to the appropriate section in this document for the tool you are using. Spira Installed On-Premise With Spira installed on-premise, there is a built-in Windows\u00ae service that is installed with Spira that is not running by default, but is available for data-synchronization. The steps that need to be performed to configure integration are as follows: Download appropriate plug-in for Spira from our website Configure the DataSync Service Start the service and proceed to the plugin specific section of this manual Download the Data-Sync Plug-In Go to the Inflectra website and open up the page that lists the various downloads available for Spira ( http://www.inflectra.com/SpiraTeam/Downloads.aspx ). Listed on this page will be the data-synchronization plug-In for your desired bug-tracking tool. Right-click on this link and save the Zip compressed folder to the hard-drive of the server where Spira is installed. Open up the compressed folder and extract the DLL assembly files and place them in the C:\\Program Files (x86)\\SpiraTeam\\Bin folder (it may be SpiraTest or SpiraPlan depending on which product you're running). This folder should already contain the DataSyncService.exe and DataSyncService.exe.config files that are the primary files used for managing the data synchronization between Spira and other systems. Configuring the Synchronization Service To configure the integration service, please open up the DataSyncService.exe.config file located in C:\\Program Files (x86)\\SpiraTeam\\Bin with a text editor such as Notepad. Once open, it should look like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <configSections> <sectionGroup name= \"applicationSettings\" type= \"System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" > <section name= \"Inflectra.SpiraTest.DataSyncService.Properties.Settings\" type= \"System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" requirePermission= \"false\" /> </sectionGroup> </configSections> <applicationSettings> <Inflectra.SpiraTest.DataSyncService.Properties.Settings> <setting name= \"PollingInterval\" serializeAs= \"String\" > <value> 600000 </value> </setting> <setting name= \"WebServiceUrl\" serializeAs= \"String\" > <value> http://localhost/SpiraTeam </value> </setting> <setting name= \"Login\" serializeAs= \"String\" > <value> fredbloggs </value> </setting> <setting name= \"Password\" serializeAs= \"String\" > <value> fredbloggs </value> </setting> <setting name= \"EventLogSource\" serializeAs= \"String\" > <value> SpiraTeam Data Sync Service </value> </setting> <setting name= \"TraceLogging\" serializeAs= \"String\" > <value> False </value> </setting> </Inflectra.SpiraTest.DataSyncService.Properties.Settings> </applicationSettings> </configuration> The sections that need to be verified and possibly changed are the values for the following 4 setting XML tags above. name=\"PollingInterval\" name=\"WebServiceUrl\" name=\"Login\" name=\"Password\" For each of these, check the following information: The polling interval allows you to specify how frequently the data-synchronization service will ask Spira and the external system for new data updates. The value is specified in milliseconds and we recommend a value no smaller than 5 minutes (i.e. 300,000ms). The larger the number, the longer it will take for data to be synchronized, but the lower the network and server overhead. The base URL to your instance Spira. It is typically of the form http://<server name>/SpiraTeam. Make sure that when you enter this URL on a browser on the server itself, the application login page appears. A valid login name and password to your instance of Spira. This user needs to be a member of the project(s) that will be synchronized with the external bug-tracker and needs to have at least Incident create/modify/view permissions and Release create/modify/view permissions in these projects. Once you have made these changes, please refer to the section in this document that covers the specific bug-tracking tool you will be integrating with. Note: If you are using the MS-TFS plugin on premise, you will also need to switch over your IIS application pool running Spira to \"Enable 32-bit Applications. You will also need to download the recompiled 32-bit version of the DataSyncService.exe application from our support knowledge base - KB14 - Using SpiraTeam Data Synchronization with TFS on a 64-bit system . Starting the Data-Synchronization Service When Spira is installed, a Windows Service -- SpiraTeam Data Sync Service -- is installed along with the web application. However to avoid wasting system resources, this service is initially set to run manually. To ensure continued synchronization of SpiraTeam with the external tool, we recommend starting the service and setting its startup-type to Automatic. To make these changes, open up the Windows Control Panel, click on the \"Administrative Tools\" link, and then choose the Services option. This will bring up the Windows Service control panel: Click on the 'SpiraTeam Data Sync Service' entry and click on the link to start the service. Then right-click the service entry and choose the option to set the startup type to 'Automatic'. This will ensure that synchronization continues after a reboot of the server. Spira Cloud Hosted, External Tool On-Premise The Desktop Data Synchronization utility (hereafter referred to as the \"Desktop DataSync\") is a standalone utility than can be used to run the various Data Synchronization PlugIns without a server installation of Spira. This is useful where you have your SpiraTeam instance cloud hosted, but the external tool is locally installed behind your firewall. Installation To obtain the Desktop DataSync, go to the Inflectra website and under the \"Downloads and Add-Ons\" section you will find a Windows Installation (MSI) package that will install the Desktop DataSync onto your computer. The installer will install both a 64-bit version of the Desktop Data Sync and a 32-bit version. You should use the 64-bit version for all plugins except the Microsoft TFS plugin which will require the 32-bit version. Next you need to download the appropriate plug-in(s) for the various bug-trackers (as described in the appropriate section of this document) and place the assemblies (DLL files) into the same folder that contains the DesktopDataSync.exe application. Usage Once you have downloaded and installed the application and appropriate plug-ins, go to Start > Programs > Inflectra > Desktop DataSync to launch the application. This will bring up the main options window of the application: You should then enter the URL, login and password to your Spira installation and click [Test]. Assuming that this information is correct, you will see a confirmation message: Now you should complete the configuation by setting the Polling Interval (how often the utility will synchronize data between Spira and the external system) and whether Trace Logging is enabled (useful when verifying your data mapping, but will fill up the application log, so leave unchecked for production use). Then click the [Update] button to save your settings or [Start] to save your settings and start synchronization immediately. Once the Options window closes, the application will remain active in the system tray of your computer: You can then use the right-click context menu to start synchronization, stop synchronization, view the status (if synchronization is running) or exit the application altogether. During synchronization, any errors will be logged to the Windows Application Event Log and you can use those logs to diagnose any issues connecting to the external bug-tracker or any data mapping configuration changes that need to be made.","title":"Setup"},{"location":"External-Bug-Tracking-Integration/Setting-up-Data-Synchronization/#setting-up-data-synchronization","text":"This section outlines the general data synchronization configuration to use any of the supported bug trackers with SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as Spira). \u25ba Please read this section first, before performing the configuration steps specific to your bug-tracker. The built-in data-synchronization service that comes with Spira, allows the quality assurance team to manage their requirements and test cases in Spira, execute their test runs, and then have the new defects/bugs generated during the run be automatically loaded into an external bug-tracker. Once the incidents are loaded into the external bug-tracker, the development team can then manage the lifecycle of these defects/bugs in their chosen tool, and have the status changes be reflected back in Spira. In addition, any issues logged directly into the external bug-tracker will get imported into Spira as either new incidents or new requirements (depending on their type) so that they can be used as part of the planning and testing lifecycle. There are three possible deployment options for the Spira data synchronization: You have both Spira and the External Bug Tracker cloud-hosted You have Spira installed on-premise (External Bug Tracker can be either) You have Spira cloud-hosted, but the External Bug Tracker installed on-premise We shall provide the configuration steps for each option:","title":"Setting up Data Synchronization"},{"location":"External-Bug-Tracking-Integration/Setting-up-Data-Synchronization/#spira-external-tool-cloud-hosted","text":"When you sign up for Spira as a cloud-hosted subscription, you have the option of including the Spira DataSync service as an add-on feature to the subscription: Make sure you include the 'Spira DataSync' add-on with your subscription. Once your subscription is provisioned, you will be able to configure the connection to Spira by going to your secure Customer Area on our website: Click on the 'Configure' button associated with the Spira-DataSync addon row: Enter a login and password that can connect to your Spira instance. This user needs to be a member of the project(s) that will be synchronized with the external bug-tracker and needs to have at least Incident create/modify/view permissions and Release create/modify/view permissions in these projects. Click on the 'Test' button to verify the credentials, and once they validate, make sure the 'Active' flag is checked and then click 'Save'. You have now configured the synchronization. You should now see a list of the plugins currently configured in your Spira instance: If you click on any of the 'Manage' buttons you will be taken to your Spira instance where you can complete the plugin configuration: The steps for configuring each plugin are specific to each external bug-tracking tool. Please refer to the appropriate section in this document for the tool you are using.","title":"Spira &amp; External Tool Cloud Hosted"},{"location":"External-Bug-Tracking-Integration/Setting-up-Data-Synchronization/#spira-installed-on-premise","text":"With Spira installed on-premise, there is a built-in Windows\u00ae service that is installed with Spira that is not running by default, but is available for data-synchronization. The steps that need to be performed to configure integration are as follows: Download appropriate plug-in for Spira from our website Configure the DataSync Service Start the service and proceed to the plugin specific section of this manual","title":"Spira Installed On-Premise"},{"location":"External-Bug-Tracking-Integration/Setting-up-Data-Synchronization/#download-the-data-sync-plug-in","text":"Go to the Inflectra website and open up the page that lists the various downloads available for Spira ( http://www.inflectra.com/SpiraTeam/Downloads.aspx ). Listed on this page will be the data-synchronization plug-In for your desired bug-tracking tool. Right-click on this link and save the Zip compressed folder to the hard-drive of the server where Spira is installed. Open up the compressed folder and extract the DLL assembly files and place them in the C:\\Program Files (x86)\\SpiraTeam\\Bin folder (it may be SpiraTest or SpiraPlan depending on which product you're running). This folder should already contain the DataSyncService.exe and DataSyncService.exe.config files that are the primary files used for managing the data synchronization between Spira and other systems.","title":"Download the Data-Sync Plug-In"},{"location":"External-Bug-Tracking-Integration/Setting-up-Data-Synchronization/#configuring-the-synchronization-service","text":"To configure the integration service, please open up the DataSyncService.exe.config file located in C:\\Program Files (x86)\\SpiraTeam\\Bin with a text editor such as Notepad. Once open, it should look like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <configSections> <sectionGroup name= \"applicationSettings\" type= \"System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" > <section name= \"Inflectra.SpiraTest.DataSyncService.Properties.Settings\" type= \"System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" requirePermission= \"false\" /> </sectionGroup> </configSections> <applicationSettings> <Inflectra.SpiraTest.DataSyncService.Properties.Settings> <setting name= \"PollingInterval\" serializeAs= \"String\" > <value> 600000 </value> </setting> <setting name= \"WebServiceUrl\" serializeAs= \"String\" > <value> http://localhost/SpiraTeam </value> </setting> <setting name= \"Login\" serializeAs= \"String\" > <value> fredbloggs </value> </setting> <setting name= \"Password\" serializeAs= \"String\" > <value> fredbloggs </value> </setting> <setting name= \"EventLogSource\" serializeAs= \"String\" > <value> SpiraTeam Data Sync Service </value> </setting> <setting name= \"TraceLogging\" serializeAs= \"String\" > <value> False </value> </setting> </Inflectra.SpiraTest.DataSyncService.Properties.Settings> </applicationSettings> </configuration> The sections that need to be verified and possibly changed are the values for the following 4 setting XML tags above. name=\"PollingInterval\" name=\"WebServiceUrl\" name=\"Login\" name=\"Password\" For each of these, check the following information: The polling interval allows you to specify how frequently the data-synchronization service will ask Spira and the external system for new data updates. The value is specified in milliseconds and we recommend a value no smaller than 5 minutes (i.e. 300,000ms). The larger the number, the longer it will take for data to be synchronized, but the lower the network and server overhead. The base URL to your instance Spira. It is typically of the form http://<server name>/SpiraTeam. Make sure that when you enter this URL on a browser on the server itself, the application login page appears. A valid login name and password to your instance of Spira. This user needs to be a member of the project(s) that will be synchronized with the external bug-tracker and needs to have at least Incident create/modify/view permissions and Release create/modify/view permissions in these projects. Once you have made these changes, please refer to the section in this document that covers the specific bug-tracking tool you will be integrating with. Note: If you are using the MS-TFS plugin on premise, you will also need to switch over your IIS application pool running Spira to \"Enable 32-bit Applications. You will also need to download the recompiled 32-bit version of the DataSyncService.exe application from our support knowledge base - KB14 - Using SpiraTeam Data Synchronization with TFS on a 64-bit system .","title":"Configuring the Synchronization Service"},{"location":"External-Bug-Tracking-Integration/Setting-up-Data-Synchronization/#starting-the-data-synchronization-service","text":"When Spira is installed, a Windows Service -- SpiraTeam Data Sync Service -- is installed along with the web application. However to avoid wasting system resources, this service is initially set to run manually. To ensure continued synchronization of SpiraTeam with the external tool, we recommend starting the service and setting its startup-type to Automatic. To make these changes, open up the Windows Control Panel, click on the \"Administrative Tools\" link, and then choose the Services option. This will bring up the Windows Service control panel: Click on the 'SpiraTeam Data Sync Service' entry and click on the link to start the service. Then right-click the service entry and choose the option to set the startup type to 'Automatic'. This will ensure that synchronization continues after a reboot of the server.","title":"Starting the Data-Synchronization Service"},{"location":"External-Bug-Tracking-Integration/Setting-up-Data-Synchronization/#spira-cloud-hosted-external-tool-on-premise","text":"The Desktop Data Synchronization utility (hereafter referred to as the \"Desktop DataSync\") is a standalone utility than can be used to run the various Data Synchronization PlugIns without a server installation of Spira. This is useful where you have your SpiraTeam instance cloud hosted, but the external tool is locally installed behind your firewall.","title":"Spira Cloud Hosted, External Tool On-Premise"},{"location":"External-Bug-Tracking-Integration/Setting-up-Data-Synchronization/#installation","text":"To obtain the Desktop DataSync, go to the Inflectra website and under the \"Downloads and Add-Ons\" section you will find a Windows Installation (MSI) package that will install the Desktop DataSync onto your computer. The installer will install both a 64-bit version of the Desktop Data Sync and a 32-bit version. You should use the 64-bit version for all plugins except the Microsoft TFS plugin which will require the 32-bit version. Next you need to download the appropriate plug-in(s) for the various bug-trackers (as described in the appropriate section of this document) and place the assemblies (DLL files) into the same folder that contains the DesktopDataSync.exe application.","title":"Installation"},{"location":"External-Bug-Tracking-Integration/Setting-up-Data-Synchronization/#usage","text":"Once you have downloaded and installed the application and appropriate plug-ins, go to Start > Programs > Inflectra > Desktop DataSync to launch the application. This will bring up the main options window of the application: You should then enter the URL, login and password to your Spira installation and click [Test]. Assuming that this information is correct, you will see a confirmation message: Now you should complete the configuation by setting the Polling Interval (how often the utility will synchronize data between Spira and the external system) and whether Trace Logging is enabled (useful when verifying your data mapping, but will fill up the application log, so leave unchecked for production use). Then click the [Update] button to save your settings or [Start] to save your settings and start synchronization immediately. Once the Options window closes, the application will remain active in the system tray of your computer: You can then use the right-click context menu to start synchronization, stop synchronization, view the status (if synchronization is running) or exit the application altogether. During synchronization, any errors will be logged to the Windows Application Event Log and you can use those logs to diagnose any issues connecting to the external bug-tracker or any data mapping configuration changes that need to be made.","title":"Usage"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-Axosoft-14+/","text":"Using Spira with Axosoft 14+ This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Axosoft defect tracking system (formerly known as OnTime). The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into Axosoft. Once the incidents are loaded into Axosoft as defects, the development team can then manage the lifecycle of these defects in Axosoft, and have the status changes in Axosoft be reflected back in SpiraTeam. STOP! Please make sure you have first read the Instructions in Setup before proceeding! Configuring the Plug-In This section outlines how to configure the integration service to export incidents into Axosoft and pick up subsequent status changes in Axosoft and have them update SpiraTeam. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam v4.0 or later and a working installation of Axosoft 14 or later (either hosted in the cloud or on-premise). If you have an earlier version of SpiraTeam, you will need to upgrade to at least v4.0 before trying to integrate with Axosoft. The steps that need to be performed to configure integration with Axosoft are as follows: Enable the REST API in Axosoft Setup the plug-in in SpiraTeam to point to the correct instance of Axosoft Configure the data field mappings between SpiraTeam and Axosoft Start synchronization and verify data transfer Enable the REST API in Axosoft First you will need to login to your instance of Axosoft and click on Tools > System Options. Then click on the 'Axosoft API Settings' section: Check the box to 'Enable API' and then click on the [Manage API Keys] button: On this screen you will need to enter the name of the application you are creating an API key for (e.g. \"Spira\") and then record the following two pieces of information: Client ID Client Secret You will need these later on. Then click Save. The Axosoft Client Secret is a long hash that will be of the form: ykk8WD3eYfMJ6WbV1HtkutJv_w9jS2ah1tSbwqs-408Gp0_cPh5wTnjwfqPLN3-_oCSHPVG5tpFkETHBgxUBKbXaTzzVqYtKC9_S Configuring the Plug-In The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the Axosoft server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for AxosoftDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the Axosoft Data-Synchronization plug-in: You need to fill out the following fields for the Axosoft Plug-in to operate correctly: Name -- this needs to be set to AxosoftDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the AxosoftDataSync.dll file for any reason, then you need to change the name here to match. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the full URL to Axosoft. This is typically something like: https://mysite.axosoft.com . Login -- this should be set to the login that you use to access Axosoft through its web interface Password -- this should be set to the password that you use to access Axosoft through its web interface Time Offset -- normally this should be set to zero, but if you find that defects being changed in Axosoft are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Auto-Map Users -- This changes the way that the plugin maps users in SpiraTeam to those in Axosoft: **Auto-Map = True **With this setting, all users in SpiraTeam need to have the same username as those in Axosoft. If this is the case then you do not need to perform the user-mapping task outlined in Configuring the User Mapping . This is a big time-saver if you can guarantee that all usernames are the same in both systems. **Auto-Map = False **With this setting, users in SpiraTeam and Axosoft are free to have different usernames because you specify the corresponding Axosoft login for each user as outlined in Configuring the User Mapping . Custom 01 -- This should contain the Client ID value from the Axosoft API Key screen Custom 02 -- This should contain the Axosoft Client Secret that you obtained from the Axosoft API Key Screen. Custom 03-05 -- these are not currently used by the Axosoft data-sync plug-in and can be left blank. Configuring the Data Mapping Next, you need to configure the data mapping between SpiraTeam and Axosoft. This allows the various projects, users, releases, incident statuses, priorities, severities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Open\" incident in SpiraTeam is the same as an \"Open\" defect in Axosoft (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below: Configuring the Project Mapping From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the Axosoft plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with Axosoft, you need to enter: External Key -- This should be set to the name of the project token in Axosoft: If you have a sub-project, you need to include both the parent and sub-project names separated by a forward slash (/), e.g. MyProject/SubProject1. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project. Configuring the User Mapping (This section can be skipped if you enabled the 'AutoMap Users' option earlier). To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing defects in Axosoft: You will notice that in the Data Mapping tab for the user is a list of all the configured data-synchronization plug-ins. In the text box next to the Axosoft Data-Sync plug-in you need to enter the Login Name for this username in Axosoft. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in Axosoft. Click [Update] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems. Configuring the Release Mapping When the data-synchronization service runs, when it comes across a release/iteration in SpiraTeam that it has not seen before, it will create a corresponding Release in Axosoft. Similarly if it comes across a new Release in Axosoft that it has not seen before, it will create a new Release in SpiraTeam. Therefore when using both systems together, it is recommended that you only enter new Releases in one system and let the data-synchronization service add them to the other system. To see this mapping, inside SpiraTeam, navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties configured for Releases, you will see an additional text property called \" AxosoftDataSync ID \" that is used to store the mapped external identifier for the equivalent Version in Axosoft. Configuring the Standard Field Mapping Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the AxosoftDataSync plug-in entry: From this screen, you need to click on Priority, Severity and Status in turn to configure their values (Axosoft doesn't support different defect types): a) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching Axosoft defect status names for each one. You can map multiple SpiraTeam fields to the same Axosoft fields (e.g. New and Open in SpiraTeam are both equivalent to Open in Axosoft), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Axosoft > SpiraTeam). We recommend that you always point the New and Open statuses inside SpiraTeam to point to the \"Open\" status inside Axosoft and make Open in SpiraTeam the Primary status of the two. This is recommended so that as new incidents in SpiraTeam get synched over to Axosoft, they will get switched to the Open status in Axosoft which will then be synched back to \"Open\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with Axosoft and those that haven't. Note: The Axosoft external key needs to exactly match the display name of the status inside Axosoft. If you change the name of a status in Axosoft, you'll need to update the value in the data-mapping configuration as well. b) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching Axosoft priority name for each one. You can map multiple SpiraTeam fields to the same Axosoft fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Axosoft > SpiraTeam). Note: The Axosoft external key needs to exactly match the display name of the priority inside Axosoft. If you change the name of a priority in Axosoft, you'll need to update the value in the data-mapping configuration as well. c) Incident Severity Click on the \"Severity\" hyperlink under Incident Standard Fields to bring up the Incident severity mapping configuration screen: The table lists each of the incident severities available in SpiraTeam and provides you with the ability to enter the matching Axosoft severity name for each one. You can map multiple SpiraTeam fields to the same Axosoft fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Axosoft > SpiraTeam). Note: The Axosoft external key needs to exactly match the display name of the severity inside Axosoft. If you change the name of a severity in Axosoft, you'll need to update the value in the data-mapping configuration as well. Configuring the Custom Property Mapping Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in Axosoft and also for custom properties in SpiraTeam that are used to map to standard fields in Axosoft (currently only Replication Procedures) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for. We will consider the three different types of mapping that you might want to enter: a) Scalar Custom Properties This refers to custom properties that have a simple user-entered value and don't need to have their specific options mapped between SpiraTeam and Axosoft. All of the custom property types except List and Multi-List fall into this category (e.g. Text, Date, User, Boolean, Decimal, Integer, etc.) Click on the hyperlink of the text custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For text custom properties there will be no values listed in the lower half of the screen. You need to lookup the display name of the custom field in Axosoft that matches this custom property in SpiraTeam. Once you have entered the id of the custom field, click [Update]. b) List Custom Properties Click on the hyperlink of the list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For list custom properties there will be a textbox for both the custom field itself and a mapping table for each of the custom property values that need to be mapped: First you need to lookup the display name of the custom field in Axosoft that matches this custom property in SpiraTeam. This should be entered in the 'External Key' field below the name of the custom property. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the full name of the custom field value as specified in Axosoft. Once you have updated the various mapping sections, you are now ready to use the service. Using SpiraTeam with Axosoft Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into Axosoft and vice versa. At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any defects with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with Axosoft on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTeam, defects found should be logged through the 'Add Incident' option as normal. Developers can log new defects into either SpiraTeam or Axosoft. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam At this point, the incident should not be acted upon inside SpiraTeam, and all data changes to the defect should be made inside Axosoft. To enforce this, you can modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with Axosoft after that point. As the defect progresses through the Axosoft workflow, changes to the status, priority, severity, and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTeam using the test cases managed by SpiraTeam and the incidents managed on behalf of SpiraTeam inside Axosoft.","title":"Axosoft"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-Axosoft-14+/#using-spira-with-axosoft-14","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Axosoft defect tracking system (formerly known as OnTime). The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into Axosoft. Once the incidents are loaded into Axosoft as defects, the development team can then manage the lifecycle of these defects in Axosoft, and have the status changes in Axosoft be reflected back in SpiraTeam. STOP! Please make sure you have first read the Instructions in Setup before proceeding!","title":"Using Spira with Axosoft 14+"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-Axosoft-14+/#configuring-the-plug-in","text":"This section outlines how to configure the integration service to export incidents into Axosoft and pick up subsequent status changes in Axosoft and have them update SpiraTeam. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam v4.0 or later and a working installation of Axosoft 14 or later (either hosted in the cloud or on-premise). If you have an earlier version of SpiraTeam, you will need to upgrade to at least v4.0 before trying to integrate with Axosoft. The steps that need to be performed to configure integration with Axosoft are as follows: Enable the REST API in Axosoft Setup the plug-in in SpiraTeam to point to the correct instance of Axosoft Configure the data field mappings between SpiraTeam and Axosoft Start synchronization and verify data transfer","title":"Configuring the Plug-In"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-Axosoft-14+/#enable-the-rest-api-in-axosoft","text":"First you will need to login to your instance of Axosoft and click on Tools > System Options. Then click on the 'Axosoft API Settings' section: Check the box to 'Enable API' and then click on the [Manage API Keys] button: On this screen you will need to enter the name of the application you are creating an API key for (e.g. \"Spira\") and then record the following two pieces of information: Client ID Client Secret You will need these later on. Then click Save. The Axosoft Client Secret is a long hash that will be of the form: ykk8WD3eYfMJ6WbV1HtkutJv_w9jS2ah1tSbwqs-408Gp0_cPh5wTnjwfqPLN3-_oCSHPVG5tpFkETHBgxUBKbXaTzzVqYtKC9_S","title":"Enable the REST API in Axosoft"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-Axosoft-14+/#configuring-the-plug-in_1","text":"The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the Axosoft server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for AxosoftDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the Axosoft Data-Synchronization plug-in: You need to fill out the following fields for the Axosoft Plug-in to operate correctly: Name -- this needs to be set to AxosoftDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the AxosoftDataSync.dll file for any reason, then you need to change the name here to match. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the full URL to Axosoft. This is typically something like: https://mysite.axosoft.com . Login -- this should be set to the login that you use to access Axosoft through its web interface Password -- this should be set to the password that you use to access Axosoft through its web interface Time Offset -- normally this should be set to zero, but if you find that defects being changed in Axosoft are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Auto-Map Users -- This changes the way that the plugin maps users in SpiraTeam to those in Axosoft: **Auto-Map = True **With this setting, all users in SpiraTeam need to have the same username as those in Axosoft. If this is the case then you do not need to perform the user-mapping task outlined in Configuring the User Mapping . This is a big time-saver if you can guarantee that all usernames are the same in both systems. **Auto-Map = False **With this setting, users in SpiraTeam and Axosoft are free to have different usernames because you specify the corresponding Axosoft login for each user as outlined in Configuring the User Mapping . Custom 01 -- This should contain the Client ID value from the Axosoft API Key screen Custom 02 -- This should contain the Axosoft Client Secret that you obtained from the Axosoft API Key Screen. Custom 03-05 -- these are not currently used by the Axosoft data-sync plug-in and can be left blank.","title":"Configuring the Plug-In"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-Axosoft-14+/#configuring-the-data-mapping","text":"Next, you need to configure the data mapping between SpiraTeam and Axosoft. This allows the various projects, users, releases, incident statuses, priorities, severities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Open\" incident in SpiraTeam is the same as an \"Open\" defect in Axosoft (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below:","title":"Configuring the Data Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-Axosoft-14+/#configuring-the-project-mapping","text":"From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the Axosoft plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with Axosoft, you need to enter: External Key -- This should be set to the name of the project token in Axosoft: If you have a sub-project, you need to include both the parent and sub-project names separated by a forward slash (/), e.g. MyProject/SubProject1. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project.","title":"Configuring the Project Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-Axosoft-14+/#configuring-the-user-mapping","text":"(This section can be skipped if you enabled the 'AutoMap Users' option earlier). To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing defects in Axosoft: You will notice that in the Data Mapping tab for the user is a list of all the configured data-synchronization plug-ins. In the text box next to the Axosoft Data-Sync plug-in you need to enter the Login Name for this username in Axosoft. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in Axosoft. Click [Update] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems.","title":"Configuring the User Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-Axosoft-14+/#configuring-the-release-mapping","text":"When the data-synchronization service runs, when it comes across a release/iteration in SpiraTeam that it has not seen before, it will create a corresponding Release in Axosoft. Similarly if it comes across a new Release in Axosoft that it has not seen before, it will create a new Release in SpiraTeam. Therefore when using both systems together, it is recommended that you only enter new Releases in one system and let the data-synchronization service add them to the other system. To see this mapping, inside SpiraTeam, navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties configured for Releases, you will see an additional text property called \" AxosoftDataSync ID \" that is used to store the mapped external identifier for the equivalent Version in Axosoft.","title":"Configuring the Release Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-Axosoft-14+/#configuring-the-standard-field-mapping","text":"Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the AxosoftDataSync plug-in entry: From this screen, you need to click on Priority, Severity and Status in turn to configure their values (Axosoft doesn't support different defect types): a) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching Axosoft defect status names for each one. You can map multiple SpiraTeam fields to the same Axosoft fields (e.g. New and Open in SpiraTeam are both equivalent to Open in Axosoft), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Axosoft > SpiraTeam). We recommend that you always point the New and Open statuses inside SpiraTeam to point to the \"Open\" status inside Axosoft and make Open in SpiraTeam the Primary status of the two. This is recommended so that as new incidents in SpiraTeam get synched over to Axosoft, they will get switched to the Open status in Axosoft which will then be synched back to \"Open\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with Axosoft and those that haven't. Note: The Axosoft external key needs to exactly match the display name of the status inside Axosoft. If you change the name of a status in Axosoft, you'll need to update the value in the data-mapping configuration as well. b) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching Axosoft priority name for each one. You can map multiple SpiraTeam fields to the same Axosoft fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Axosoft > SpiraTeam). Note: The Axosoft external key needs to exactly match the display name of the priority inside Axosoft. If you change the name of a priority in Axosoft, you'll need to update the value in the data-mapping configuration as well. c) Incident Severity Click on the \"Severity\" hyperlink under Incident Standard Fields to bring up the Incident severity mapping configuration screen: The table lists each of the incident severities available in SpiraTeam and provides you with the ability to enter the matching Axosoft severity name for each one. You can map multiple SpiraTeam fields to the same Axosoft fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Axosoft > SpiraTeam). Note: The Axosoft external key needs to exactly match the display name of the severity inside Axosoft. If you change the name of a severity in Axosoft, you'll need to update the value in the data-mapping configuration as well.","title":"Configuring the Standard Field Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-Axosoft-14+/#configuring-the-custom-property-mapping","text":"Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in Axosoft and also for custom properties in SpiraTeam that are used to map to standard fields in Axosoft (currently only Replication Procedures) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for. We will consider the three different types of mapping that you might want to enter: a) Scalar Custom Properties This refers to custom properties that have a simple user-entered value and don't need to have their specific options mapped between SpiraTeam and Axosoft. All of the custom property types except List and Multi-List fall into this category (e.g. Text, Date, User, Boolean, Decimal, Integer, etc.) Click on the hyperlink of the text custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For text custom properties there will be no values listed in the lower half of the screen. You need to lookup the display name of the custom field in Axosoft that matches this custom property in SpiraTeam. Once you have entered the id of the custom field, click [Update]. b) List Custom Properties Click on the hyperlink of the list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For list custom properties there will be a textbox for both the custom field itself and a mapping table for each of the custom property values that need to be mapped: First you need to lookup the display name of the custom field in Axosoft that matches this custom property in SpiraTeam. This should be entered in the 'External Key' field below the name of the custom property. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the full name of the custom field value as specified in Axosoft. Once you have updated the various mapping sections, you are now ready to use the service.","title":"Configuring the Custom Property Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-Axosoft-14+/#using-spirateam-with-axosoft","text":"Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into Axosoft and vice versa. At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any defects with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with Axosoft on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTeam, defects found should be logged through the 'Add Incident' option as normal. Developers can log new defects into either SpiraTeam or Axosoft. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam At this point, the incident should not be acted upon inside SpiraTeam, and all data changes to the defect should be made inside Axosoft. To enforce this, you can modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with Axosoft after that point. As the defect progresses through the Axosoft workflow, changes to the status, priority, severity, and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTeam using the test cases managed by SpiraTeam and the incidents managed on behalf of SpiraTeam inside Axosoft.","title":"Using SpiraTeam with Axosoft"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-GitHub/","text":"Using Spira with GitHub This section outlines how to use SpiraTest, SpiraTeam or SpiraPlan (hereafter referred to as SpiraPlan) in conjunction with the GitHub integrated issue tracker. STOP! Please make sure you have first read the Instructions in Setup before proceeding! The GitHub issue tracker is a simple and lightweight tool used to track problems with an associated git repository. The built-in integration service enables two-way syncing of new incidents, new comments, statuses, and releases (milestones). Configuring the Integration Service This section outlines how to set up the integration service between GitHub and SpiraPlan. It assumes that you already have a working installation of SpiraPlan and a GitHub repository with an issue tracker. To setup the service, you must be logged into SpiraPlan as a user with System-Administrator level privileges. Inside SpiraPlan, go to the Administration page and navigate to the Integration > Data Synchronization webpage. Check that you don't already have a Plug-In called \"GitHubDataSync\", as shown below: If you already have a plug-in called GitHub Data Sync , please click on its \"edit\" button, otherwise please click the \"Add\" button to create a new plug-in: You need to fill out the following fields for the GitHub Data Sync plugin to work properly: Name -- This needs to be set to GitHubDataSync Caption -- This is the display name of the plug-in, generally something generic like \"GitHub\" would work, but you should change it if you will be syncing with multiple GitHub projects. Description -- The description of what you're using the plug-in for. This field is entirely optional and is not used by the system in any way. Connection Info -- The location of your GitHub account, removing the actual repository name. For example, if you have a repository such as https://github.com/octocat/Hello-World , you would simply enter \" octocat \" as the connection info. We will enter the repository name later when we setup the project mappings. Login -- Your GitHub username Password -- A GitHub personal access token with the \"public_repo\" permission. You can create a new one at https://github.com/settings/tokens Time Offset -- This should be set to 0, but if you find that changes are not being synced, try increasing the value to tell the plugin to offset timestamps Custom 01 -- For on-premise GitHub Enterprise installations only, please enter the name of your server (e.g. http://myserver ), if left blank, the data synchronization will assume you are using the cloud URL for GitHub ( https://www.github.com ) The rest of the fields should be left blank. Once all those fields have been filled out, click the \"Add\" or \"Save\" button to save your changes. Configuring Project Mappings For this step, please ensure that you are in the SpiraPlan project you would like to sync with GitHub. For this example, the project is called \"GitHub Data Sync.\" Click on the \"View Project Mappings\" button for GitHub Data Sync. You need to fill out the following fields to sync correctly: External Key -- The name of your GitHub repository. In the example above, where the URL in GitLab was https://github.com/octocat/Hello-World , you would simply enter \"Hello-World\" for this setting. Active -- Set this to yes so that the Data Sync plug-in knows to synchronize with this project. Now click the \"Status\" button within the \"Incident\" section to map the Incident statuses together. The purpose of this is so that the GitHub Data Sync plug-in knows what the equivalent status is in GitHub for an incident status in SpiraPlan. You must map every status in the system. Descriptions of the field are below: External Key -- Either open or closed , which are the only two statuses in GitHub Primary -- You must have exactly one primary key for open and one for closed . This is what status the plug-in should set the incident in SpiraPlan to when the status in GitHub changes. Click \"Save\" and assuming everything was done correctly, the plug-in should work. Start your Data Sync service and verify that issues in GitHub appear inside SpiraPlan. Note that the Data Sync service is not running constantly, so it may take some time for changes to materialize. Congratulations, you have just integrated your Spira instance with GitHub's integrated issue tracker!","title":"GitHub"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-GitHub/#using-spira-with-github","text":"This section outlines how to use SpiraTest, SpiraTeam or SpiraPlan (hereafter referred to as SpiraPlan) in conjunction with the GitHub integrated issue tracker. STOP! Please make sure you have first read the Instructions in Setup before proceeding! The GitHub issue tracker is a simple and lightweight tool used to track problems with an associated git repository. The built-in integration service enables two-way syncing of new incidents, new comments, statuses, and releases (milestones).","title":"Using Spira with GitHub"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-GitHub/#configuring-the-integration-service","text":"This section outlines how to set up the integration service between GitHub and SpiraPlan. It assumes that you already have a working installation of SpiraPlan and a GitHub repository with an issue tracker. To setup the service, you must be logged into SpiraPlan as a user with System-Administrator level privileges. Inside SpiraPlan, go to the Administration page and navigate to the Integration > Data Synchronization webpage. Check that you don't already have a Plug-In called \"GitHubDataSync\", as shown below: If you already have a plug-in called GitHub Data Sync , please click on its \"edit\" button, otherwise please click the \"Add\" button to create a new plug-in: You need to fill out the following fields for the GitHub Data Sync plugin to work properly: Name -- This needs to be set to GitHubDataSync Caption -- This is the display name of the plug-in, generally something generic like \"GitHub\" would work, but you should change it if you will be syncing with multiple GitHub projects. Description -- The description of what you're using the plug-in for. This field is entirely optional and is not used by the system in any way. Connection Info -- The location of your GitHub account, removing the actual repository name. For example, if you have a repository such as https://github.com/octocat/Hello-World , you would simply enter \" octocat \" as the connection info. We will enter the repository name later when we setup the project mappings. Login -- Your GitHub username Password -- A GitHub personal access token with the \"public_repo\" permission. You can create a new one at https://github.com/settings/tokens Time Offset -- This should be set to 0, but if you find that changes are not being synced, try increasing the value to tell the plugin to offset timestamps Custom 01 -- For on-premise GitHub Enterprise installations only, please enter the name of your server (e.g. http://myserver ), if left blank, the data synchronization will assume you are using the cloud URL for GitHub ( https://www.github.com ) The rest of the fields should be left blank. Once all those fields have been filled out, click the \"Add\" or \"Save\" button to save your changes.","title":"Configuring the Integration Service"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-GitHub/#configuring-project-mappings","text":"For this step, please ensure that you are in the SpiraPlan project you would like to sync with GitHub. For this example, the project is called \"GitHub Data Sync.\" Click on the \"View Project Mappings\" button for GitHub Data Sync. You need to fill out the following fields to sync correctly: External Key -- The name of your GitHub repository. In the example above, where the URL in GitLab was https://github.com/octocat/Hello-World , you would simply enter \"Hello-World\" for this setting. Active -- Set this to yes so that the Data Sync plug-in knows to synchronize with this project. Now click the \"Status\" button within the \"Incident\" section to map the Incident statuses together. The purpose of this is so that the GitHub Data Sync plug-in knows what the equivalent status is in GitHub for an incident status in SpiraPlan. You must map every status in the system. Descriptions of the field are below: External Key -- Either open or closed , which are the only two statuses in GitHub Primary -- You must have exactly one primary key for open and one for closed . This is what status the plug-in should set the incident in SpiraPlan to when the status in GitHub changes. Click \"Save\" and assuming everything was done correctly, the plug-in should work. Start your Data Sync service and verify that issues in GitHub appear inside SpiraPlan. Note that the Data Sync service is not running constantly, so it may take some time for changes to materialize. Congratulations, you have just integrated your Spira instance with GitHub's integrated issue tracker!","title":"Configuring Project Mappings"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-GitLab/","text":"Using Spira with GitLab This section outlines how to use SpiraTest, SpiraTeam or SpiraPlan (hereafter referred to as SpiraPlan) in conjunction with the GitLab integrated issue tracker. STOP! Please make sure you have first read the Instructions in Setup before proceeding! The GitLab issue tracker is a simple and lightweight tool used to track problems with an associated git repository. The built-in integration service enables two-way syncing of new incidents, new comments, statuses, and releases (milestones). Configuring the Integration Service This section outlines how to set up the integration service between GitLab and SpiraPlan. It assumes that you already have a working installation of SpiraPlan and a GitLab repository with an issue tracker. To setup the service, you must be logged into SpiraPlan as a user with System-Administrator level privileges. Inside SpiraPlan, go to the Administration page and navigate to the Integration > Data Synchronization webpage. Check that you don't already have a Plug-In called \"GitLabDataSync\", as shown below: If you already have a plug-in called GitLabDataSync , please click on its \"edit\" button, otherwise please click the \"Add\" button to create a new plug-in: Now fill out this configuration page as follows: You need to fill out the following fields for the GitLab Data Sync plugin to work properly: Name -- This needs to be set to GitLabDataSync Caption -- This is the display name of the plug-in, generally something generic like \"GitLab\" would work, but you should change it if you will be syncing with multiple GitLab projects. Description -- The description of what you're using the plug-in for. This field is entirely optional and is not used by the system in any way. Connection Info -- The location of your GitLab account, removing the actual repository name. For example, if you have a repository such as https://gitlab.com/gitlab-examples/velociraptor , you would simply enter \"gitlab-examples\" as the connection info. We will enter the repository name later when we setup the project mappings. Login -- Your GitLab username Password -- A GitLab personal access token with the \"api\" permission. You can create a new one at https://gitlab.com/profile/personal_access_tokens Time Offset -- This should be set to 0, but if you find that changes are not being synced, try increasing the value to tell the plugin to offset timestamps Custom 01 -- For on-premise GitLab installations only, please enter the name of your server (e.g. http://myserver ), if left blank, the data synchronization will assume you are using the cloud URL for GitLab ( https://www.gitlab.com ) The rest of the fields should be left blank. Once all those fields have been filled out, click the \"Add\" or \"Save\" button to save your changes. Configuring Project Mappings For this step, please ensure that you are in the SpiraPlan project you would like to sync with GitLab. For this example, the project is called \"GitLab Data Sync.\" Click on the \"View Project Mappings\" button for GitLab Data Sync. You need to fill out the following fields to sync correctly: External Key -- The name of your GitLab repository. In the example above, where the URL in GitLab was https://gitlab.com/gitlab-examples/velociraptor , you would simply enter \"velociraptor\" for this setting. Active -- Set this to yes so that the Data Sync plug-in knows to synchronize with this project. Configuring the Incident Status Mapping Now click the \"Status\" button within the \"Incident\" section to map the Incident statuses together. The purpose of this is so that the GitLab Data Sync plug-in knows what the equivalent status is in GitLab for an incident status in SpiraPlan. You must map every status in the system. Descriptions of the field are below: External Key -- Either opened or closed , which are the only two statuses in GitLab Primary -- You must have exactly one primary key for opened and one for closed . This is what status the plug-in should set the incident in SpiraPlan to when the status in GitLab changes. Configuring the User Mapping To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in GitLab: Click on the 'Data Mapping' tab to list all the configured data-synchronization plug-ins for this user. In the text box next to the GitLab Data-Sync plug-in you need to enter the login for this username in GitLab. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in GitLab. Click [Save] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems. If you have set the \"Auto-Map Users\" option in the GitLab plugin, you can skip this section completely. Configuring the Release Mapping When the data-synchronization service runs, when it comes across a release/iteration in SpiraTeam that it has not seen before, it will create a corresponding \"Milesone\" in GitLab. Similarly, if it comes across a new Milestone in GitLab that it has not seen before, it will create a new Release in SpiraTeam. Therefore, when using both systems together, it is recommended that you only enter new Releases/Milestones in one system and let the data-synchronization service add them to the other system. However, you may start out with the situation where you already have pre-existing Releases / Milestones in both systems that you need to associate in the data-mapping. If you don't do this, you may find that duplicates get created when you first enable the data-synchronization service. Therefore, for any Releases/Iterations that already exist in BOTH systems please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties, you will see an additional text property called \" GitLab ID \" that is used to store the mapped external identifier for the equivalent Milestone in GitLab. You need to locate the ID of the equivalent version in GitLab, enter it into this text-box and click [Save]. You should now repeat for all the other pre-existing releases. Using the Data Synchronization Assuming everything was done correctly, the plug-in should start working. Start your Data Sync service and verify that issues in GitLab appear inside SpiraPlan. Note that the Data Sync service is not running constantly, so it may take some time for changes to materialize. Congratulations, you have just integrated your Spira instance with GitLab's integrated issue tracker!","title":"GitLab"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-GitLab/#using-spira-with-gitlab","text":"This section outlines how to use SpiraTest, SpiraTeam or SpiraPlan (hereafter referred to as SpiraPlan) in conjunction with the GitLab integrated issue tracker. STOP! Please make sure you have first read the Instructions in Setup before proceeding! The GitLab issue tracker is a simple and lightweight tool used to track problems with an associated git repository. The built-in integration service enables two-way syncing of new incidents, new comments, statuses, and releases (milestones).","title":"Using Spira with GitLab"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-GitLab/#configuring-the-integration-service","text":"This section outlines how to set up the integration service between GitLab and SpiraPlan. It assumes that you already have a working installation of SpiraPlan and a GitLab repository with an issue tracker. To setup the service, you must be logged into SpiraPlan as a user with System-Administrator level privileges. Inside SpiraPlan, go to the Administration page and navigate to the Integration > Data Synchronization webpage. Check that you don't already have a Plug-In called \"GitLabDataSync\", as shown below: If you already have a plug-in called GitLabDataSync , please click on its \"edit\" button, otherwise please click the \"Add\" button to create a new plug-in: Now fill out this configuration page as follows: You need to fill out the following fields for the GitLab Data Sync plugin to work properly: Name -- This needs to be set to GitLabDataSync Caption -- This is the display name of the plug-in, generally something generic like \"GitLab\" would work, but you should change it if you will be syncing with multiple GitLab projects. Description -- The description of what you're using the plug-in for. This field is entirely optional and is not used by the system in any way. Connection Info -- The location of your GitLab account, removing the actual repository name. For example, if you have a repository such as https://gitlab.com/gitlab-examples/velociraptor , you would simply enter \"gitlab-examples\" as the connection info. We will enter the repository name later when we setup the project mappings. Login -- Your GitLab username Password -- A GitLab personal access token with the \"api\" permission. You can create a new one at https://gitlab.com/profile/personal_access_tokens Time Offset -- This should be set to 0, but if you find that changes are not being synced, try increasing the value to tell the plugin to offset timestamps Custom 01 -- For on-premise GitLab installations only, please enter the name of your server (e.g. http://myserver ), if left blank, the data synchronization will assume you are using the cloud URL for GitLab ( https://www.gitlab.com ) The rest of the fields should be left blank. Once all those fields have been filled out, click the \"Add\" or \"Save\" button to save your changes.","title":"Configuring the Integration Service"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-GitLab/#configuring-project-mappings","text":"For this step, please ensure that you are in the SpiraPlan project you would like to sync with GitLab. For this example, the project is called \"GitLab Data Sync.\" Click on the \"View Project Mappings\" button for GitLab Data Sync. You need to fill out the following fields to sync correctly: External Key -- The name of your GitLab repository. In the example above, where the URL in GitLab was https://gitlab.com/gitlab-examples/velociraptor , you would simply enter \"velociraptor\" for this setting. Active -- Set this to yes so that the Data Sync plug-in knows to synchronize with this project.","title":"Configuring Project Mappings"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-GitLab/#configuring-the-incident-status-mapping","text":"Now click the \"Status\" button within the \"Incident\" section to map the Incident statuses together. The purpose of this is so that the GitLab Data Sync plug-in knows what the equivalent status is in GitLab for an incident status in SpiraPlan. You must map every status in the system. Descriptions of the field are below: External Key -- Either opened or closed , which are the only two statuses in GitLab Primary -- You must have exactly one primary key for opened and one for closed . This is what status the plug-in should set the incident in SpiraPlan to when the status in GitLab changes.","title":"Configuring the Incident Status Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-GitLab/#configuring-the-user-mapping","text":"To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in GitLab: Click on the 'Data Mapping' tab to list all the configured data-synchronization plug-ins for this user. In the text box next to the GitLab Data-Sync plug-in you need to enter the login for this username in GitLab. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in GitLab. Click [Save] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems. If you have set the \"Auto-Map Users\" option in the GitLab plugin, you can skip this section completely.","title":"Configuring the User Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-GitLab/#configuring-the-release-mapping","text":"When the data-synchronization service runs, when it comes across a release/iteration in SpiraTeam that it has not seen before, it will create a corresponding \"Milesone\" in GitLab. Similarly, if it comes across a new Milestone in GitLab that it has not seen before, it will create a new Release in SpiraTeam. Therefore, when using both systems together, it is recommended that you only enter new Releases/Milestones in one system and let the data-synchronization service add them to the other system. However, you may start out with the situation where you already have pre-existing Releases / Milestones in both systems that you need to associate in the data-mapping. If you don't do this, you may find that duplicates get created when you first enable the data-synchronization service. Therefore, for any Releases/Iterations that already exist in BOTH systems please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties, you will see an additional text property called \" GitLab ID \" that is used to store the mapped external identifier for the equivalent Milestone in GitLab. You need to locate the ID of the equivalent version in GitLab, enter it into this text-box and click [Save]. You should now repeat for all the other pre-existing releases.","title":"Configuring the Release Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-GitLab/#using-the-data-synchronization","text":"Assuming everything was done correctly, the plug-in should start working. Start your Data Sync service and verify that issues in GitLab appear inside SpiraPlan. Note that the Data Sync service is not running constantly, so it may take some time for changes to materialize. Congratulations, you have just integrated your Spira instance with GitLab's integrated issue tracker!","title":"Using the Data Synchronization"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-OnTime-11/","text":"Using Spira with OnTime 11 This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the OnTime 11+ defect tracking system from AxoSoft. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into OnTime. Once the incidents are loaded into OnTime as defects, the development team can then manage the lifecycle of these defects in OnTime, and have the status changes in OnTime be reflected back in SpiraTeam. Note: This section refers to integrating with the older SOAP API that was available in AxoSoft OnTime 11 (2010). This API was removed from AxoSoft OnTime in 2012 and we recommend you use the AxoSoft OnTime 14 Plugin instead that is described in section 10 above if you are using OnTime 14 or later. \u25ba Note: The OnTime11 Plug-In is Not Available on the Inflectra Cloud-Based DataSync Service. Configuring the Integration Service This section outlines how to configure the integration service to export incidents into OnTime and pick up subsequent status changes in OnTime and have them update SpiraTeam. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam v2.3 or later and a working installation of OnTime 2010 or later. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v2.3 before trying to integrate with OnTime. The steps that need to be performed to configure integration with OnTime are as follows: Install and configure the OnTime SDK if you have not already done so Download the OnTime11 Data-Sync plug-in for SpiraTeam from our website Setup the plug-in in SpiraTeam to point to the correct instance of OnTime Configure the data field mappings between SpiraTeam and OnTime Start the service and verify data transfer Install and Configure the OnTime SDK The API for accessing OnTime remotely is a separate download from the main OnTime application, and should be downloaded and installed from AxoSoft's website onto your OnTime server. It typically adds a separate IIS virtual directory (e.g. http://servername/OnTimeSdk) to the existing OnTime virtual directory (e.g. http://servername/OnTime ). Please make sure you have both virtual directories listed in IIS before continuing. Once you have installed the OnTime SDK, you need to navigate to the location that it was installed (typically C:\\inetpub\\wwwroot\\OnTimeSdk) and open up the Web.Config file in Notepad and locate the \" appSettings \" part of the file: 1 2 3 4 5 6 <appSettings> <add key= \"ConnectionString\" value= \"server=SERVER;database=OnTime;uid=USER;pwd=PASSWORD;\" /> <add key= \"SecurityToken\" value= \"{66ACD352-16C0-4485-8498-8C461BE7CE44}\" /> <add key= \"WebServicesUser\" value= \"1\" /> <add key= \"EnableDataCache\" value= \"False\" /> </appSettings> You need to make sure that you fill out the ConnectionString that points to the Microsoft SQL Server database that OnTime is connecting to. Also for the SecurityToken field you need to generate a new GUID and add it to the file. This security token will be used by SpiraTeam when it connects to the OnTime API. Once you have made the necessary changes, save the file. Download the OnTime Plug-In Go to the Inflectra website and open up the page that lists the various downloads available for SpiraTeam ( http://www.inflectra.com/SpiraTeam/Downloads.aspx ). Listed on this page will be the OnTime11 Plug-In for SpiraTeam. Right-click on this link and save the Zip compressed folder to the hard-drive of the server where SpiraTeam is installed. Open up the compressed folder and extract the OnTimeDataSync.dll file and place it in the C:\\Program Files\\SpiraTeam\\Bin folder (it may be SpiraTest or SpiraPlan depending on which product you're running). This folder should already contain the DataSyncService.exe and DataSyncService.exe.config files that are the primary files used for managing the data synchronization between SpiraTeam and other systems. If you do not have an on-premise installation of SpiraTeam, but instead are using a hosted subscription provided by Inflectra (or a third party company) you will not have access to the DataSyncService background service. In such situations, you should use the Desktop DataSync application instead. This application is described in Appendix 1 and can be used instead of the server-based DataSyncService. Configuring the Service To configure the integration service, please open up the DataSyncService.exe.config file located in C:\\Program Files\\SpiraTeam\\Bin with a text editor such as Notepad. Once open, it should look like: ``xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <configSections> <sectionGroup name=\"applicationSettings\" type=\"System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" > <section name=\"Inflectra.SpiraTest.DataSyncService.Properties.Settings\" type=\"System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" requirePermission=\"false\" /> </sectionGroup> </configSections> <applicationSettings> <Inflectra.SpiraTest.DataSyncService.Properties.Settings> <setting name=\"PollingInterval\" serializeAs=\"String\"> <value>600000</value> </setting> <setting name=\"WebServiceUrl\" serializeAs=\"String\"> <value> http://localhost/SpiraTeam </value> </setting> <setting name=\"Login\" serializeAs=\"String\"> <value>fredbloggs</value> </setting> <setting name=\"Password\" serializeAs=\"String\"> <value>fredbloggs</value> </setting> <setting name=\"EventLogSource\" serializeAs=\"String\"> <value>SpiraTeam Data Sync Service</value> </setting> <setting name=\"TraceLogging\" serializeAs=\"String\"> <value>False</value> </setting> </Inflectra.SpiraTest.DataSyncService.Properties.Settings> </applicationSettings> </configuration> ``` The sections that need to be verified and possibly changed are marked in yellow above. You need to check the following information: The polling interval allows you to specify how frequently the data-synchronization service will ask SpiraTeam and the external system for new data updates. The value is specified in milliseconds and we recommend a value no smaller than 5 minutes (i.e. 300,000ms). The larger the number, the longer it will take for data to be synchronized, but the lower the network and server overhead. The base URL to your instance SpiraTeam. It is typically of the form http://<server name>/SpiraTeam. Make sure that when you enter this URL on a browser on the server itself, the application login page appears. A valid login name and password to your instance of SpiraTeam. This user needs to be a member of the project(s) that will be synchronized with OnTime and needs to have at least Incident create/modify/view permissions and Release create/modify/view permissions in these projects. Once you have made these changes, save the file and proceed to the next stage. Configuring the Plug-In The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the OnTime server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for OnTimeDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the OnTime Data-Synchronization plug-in: You need to fill out the following fields for the OnTime Plug-in to operate correctly: Name -- this needs to be set to OnTimeDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the OnTimeDataSync.dll file for any reason, then you need to change the name here to match. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the full URL to the OnTime SDK. This is typically something like: http://<OnTime server name>/OnTimeSdk. You may need to check in the IIS Management Console of the OnTime server to verify the virtual directory name. Login -- this should be set to the GUID that you specified in the Web.Config file in step 13.1.1 above. Password -- this should be left blank as it's not used by the OnTime data-sync plug-in. Time Offset -- normally this should be set to zero, but if you find that defects being changed in OnTime are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your OnTime installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. Auto-Map Users -- this is not currently used by the OnTime data-sync plug-in and can be ignored. Custom 01 -- 05 -- these are not currently used by the OnTime data-sync plug-in and can be left blank. Configuring the Data Mapping Next, you need to configure the data mapping between SpiraTeam and OnTime. This allows the various projects, users, releases, incident statuses, priorities, severities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Open\" incident in SpiraTeam is the same as an \"Open\" defect in OnTime (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below: Configuring the Project Mapping From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the OnTime plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with OnTime, you need to enter: External Key -- This should be set to the numeric ID of the project token in OnTime. You can find this in OnTime by selecting the project in the project explorer inside OnTime and then clicking the Edit icon. This brings up the project details screen: The ID of the project is the value listed in the browser URL directly after the \"ProjectId=\" text. In the example above, the project ID would be 3. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project. Configuring the User Mapping To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing defects in OnTime: You will notice that below the Active flag for the user is a list of all the configured data-synchronization plug-ins. In the text box next to the OnTime Data-Sync plug-in you need to enter the Login ID for this username in OnTime. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in OnTime. Click [Update] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems. Configuring the Release Mapping When the data-synchronization service runs, when it comes across a release/iteration in SpiraTeam that it has not seen before, it will create a corresponding Release in OnTime. Similarly if it comes across a new Release in OnTime that it has not seen before, it will create a new Release in SpiraTeam. Therefore when using both systems together, it is recommended that you only enter new Releases in one system and let the data-synchronization service add them to the other system. However you may start out with the situation where you already have pre-existing Releases in both systems that you need to associate in the data-mapping. If you don't do this, you may find that duplicates get created when you first enable the data-synchronization service. Therefore for any Releases/Iterations that already exist in BOTH systems please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties configured for Releases, you will see an additional text property called \" OnTimeDataSync ID \" that is used to store the mapped external identifier for the equivalent Version in OnTime. You need to locate the ID of the equivalent version in OnTime, enter it into this text-box and click [Save]. You should now repeat for all the other pre-existing releases. Note: The OnTime ID can be found by looking at the URL inside OnTime when choosing to Edit the release in question. The URL will include the section: **ReleaseId=X* where X is the numeric ID of the version inside OnTime:* Configuring the Standard Field Mapping Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the OnTimeDataSync plug-in entry: From this screen, you need to click on Priority, Severity and Status in turn to configure their values (OnTime doesn't support different defect types): a) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching OnTime defect status names for each one. You can map multiple SpiraTeam fields to the same OnTime fields (e.g. New and Open in SpiraTeam are both equivalent to Open in OnTime), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from OnTime > SpiraTeam). We recommend that you always point the New and Open statuses inside SpiraTeam to point to the \"Open\" status inside OnTime and make Open in SpiraTeam the Primary status of the two. This is recommended so that as new incidents in SpiraTeam get synched over to OnTime, they will get switched to the Open status in OnTime which will then be synched back to \"Open\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with OnTime and those that haven't. Note: The OnTime external key needs to exactly match the display name of the status inside OnTime. If you change the name of a status in OnTime, you'll need to update the value in the data-mapping configuration as well. b) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching OnTime priority name for each one. You can map multiple SpiraTeam fields to the same OnTime fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from OnTime > SpiraTeam). Note: The OnTime external key needs to exactly match the display name of the priority inside OnTime. If you change the name of a priority in OnTime, you'll need to update the value in the data-mapping configuration as well. c) Incident Severity Click on the \"Severity\" hyperlink under Incident Standard Fields to bring up the Incident severity mapping configuration screen: The table lists each of the incident severities available in SpiraTeam and provides you with the ability to enter the matching OnTime severity name for each one. You can map multiple SpiraTeam fields to the same OnTime fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from OnTime > SpiraTeam). Note: The OnTime external key needs to exactly match the display name of the severity inside OnTime. If you change the name of a severity in OnTime, you'll need to update the value in the data-mapping configuration as well. Configuring the Custom Property Mapping Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in OnTime and also for custom properties in SpiraTeam that are used to map to standard fields in OnTime (currently only Replication Procedures) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for. We will consider the three different types of mapping that you might want to enter: a) Text Custom Properties Click on the hyperlink of the text custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For text custom properties there will be no values listed in the lower half of the screen. You need to lookup the display name of the custom field in OnTime that matches this custom property in SpiraTeam. Once you have entered the id of the custom field, click [Update]. b) List Custom Properties Click on the hyperlink of the list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For list custom properties there will be a textbox for both the custom field itself and a mapping table for each of the custom property values that need to be mapped: First you need to lookup the display name of the custom field in OnTime that matches this custom property in SpiraTeam. This should be entered in the 'External Key' field below the name of the custom property. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the full name of the custom field value as specified in OnTime. c) OnTime's Replication Procedures Field If you want new defects in OnTime to be loaded with the \"replication prodcedures\" standard text field populated, then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the environment description within SpiraTeam. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \"ReplicationProcedures\" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Replication Procedures field in OnTime. Note that there is no space between the words Replication and Procedures!! Once you have updated the various mapping sections, you are now ready to start the service. Enabling the Data-Synchronization Starting the Service When SpiraTeam is installed, a Windows Service -- SpiraTeam Data Sync Service -- is installed along with the web application. However to avoid wasting system resources, this service is initially set to run manually. To ensure continued synchronization of SpiraTeam with OnTime, we recommend starting the service and setting its startup-type to Automatic. To make these changes, open up the Windows Control Panel, click on the \"Administrative Tools\" link, and then choose the Services option. This will bring up the Windows Service control panel: Click on the 'SpiraTeam Data Sync Service' entry and click on the link to start the service. Then right-click the service entry and choose the option to set the startup type to 'Automatic'. This will ensure that synchronization continues between SpiraTeam and OnTime after a reboot of the server. Using SpiraTeam with OnTime Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into OnTime. At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any defects with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with OnTime on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTeam, defects found should be logged through the 'Add Incident' option as normal. Once an incident has been created during the running of the test, it will now be populated across into OnTime as a defect. It will be populated with the information captured in SpiraTeam. At this point, the incident should not be acted upon inside SpiraTeam, and all data changes to the defect should be made inside OnTime. To enforce this, you can modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with OnTime after that point. As the defect progresses through the OnTime workflow, changes to the status, priority, severity, and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTeam using the test cases managed by SpiraTeam and the incidents managed on behalf of SpiraTeam inside OnTime.","title":"OnTime"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-OnTime-11/#using-spira-with-ontime-11","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the OnTime 11+ defect tracking system from AxoSoft. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into OnTime. Once the incidents are loaded into OnTime as defects, the development team can then manage the lifecycle of these defects in OnTime, and have the status changes in OnTime be reflected back in SpiraTeam. Note: This section refers to integrating with the older SOAP API that was available in AxoSoft OnTime 11 (2010). This API was removed from AxoSoft OnTime in 2012 and we recommend you use the AxoSoft OnTime 14 Plugin instead that is described in section 10 above if you are using OnTime 14 or later. \u25ba Note: The OnTime11 Plug-In is Not Available on the Inflectra Cloud-Based DataSync Service.","title":"Using Spira with OnTime 11"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-OnTime-11/#configuring-the-integration-service","text":"This section outlines how to configure the integration service to export incidents into OnTime and pick up subsequent status changes in OnTime and have them update SpiraTeam. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam v2.3 or later and a working installation of OnTime 2010 or later. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v2.3 before trying to integrate with OnTime. The steps that need to be performed to configure integration with OnTime are as follows: Install and configure the OnTime SDK if you have not already done so Download the OnTime11 Data-Sync plug-in for SpiraTeam from our website Setup the plug-in in SpiraTeam to point to the correct instance of OnTime Configure the data field mappings between SpiraTeam and OnTime Start the service and verify data transfer","title":"Configuring the Integration Service"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-OnTime-11/#install-and-configure-the-ontime-sdk","text":"The API for accessing OnTime remotely is a separate download from the main OnTime application, and should be downloaded and installed from AxoSoft's website onto your OnTime server. It typically adds a separate IIS virtual directory (e.g. http://servername/OnTimeSdk) to the existing OnTime virtual directory (e.g. http://servername/OnTime ). Please make sure you have both virtual directories listed in IIS before continuing. Once you have installed the OnTime SDK, you need to navigate to the location that it was installed (typically C:\\inetpub\\wwwroot\\OnTimeSdk) and open up the Web.Config file in Notepad and locate the \" appSettings \" part of the file: 1 2 3 4 5 6 <appSettings> <add key= \"ConnectionString\" value= \"server=SERVER;database=OnTime;uid=USER;pwd=PASSWORD;\" /> <add key= \"SecurityToken\" value= \"{66ACD352-16C0-4485-8498-8C461BE7CE44}\" /> <add key= \"WebServicesUser\" value= \"1\" /> <add key= \"EnableDataCache\" value= \"False\" /> </appSettings> You need to make sure that you fill out the ConnectionString that points to the Microsoft SQL Server database that OnTime is connecting to. Also for the SecurityToken field you need to generate a new GUID and add it to the file. This security token will be used by SpiraTeam when it connects to the OnTime API. Once you have made the necessary changes, save the file.","title":"Install and Configure the OnTime SDK"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-OnTime-11/#download-the-ontime-plug-in","text":"Go to the Inflectra website and open up the page that lists the various downloads available for SpiraTeam ( http://www.inflectra.com/SpiraTeam/Downloads.aspx ). Listed on this page will be the OnTime11 Plug-In for SpiraTeam. Right-click on this link and save the Zip compressed folder to the hard-drive of the server where SpiraTeam is installed. Open up the compressed folder and extract the OnTimeDataSync.dll file and place it in the C:\\Program Files\\SpiraTeam\\Bin folder (it may be SpiraTest or SpiraPlan depending on which product you're running). This folder should already contain the DataSyncService.exe and DataSyncService.exe.config files that are the primary files used for managing the data synchronization between SpiraTeam and other systems. If you do not have an on-premise installation of SpiraTeam, but instead are using a hosted subscription provided by Inflectra (or a third party company) you will not have access to the DataSyncService background service. In such situations, you should use the Desktop DataSync application instead. This application is described in Appendix 1 and can be used instead of the server-based DataSyncService.","title":"Download the OnTime Plug-In"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-OnTime-11/#configuring-the-service","text":"To configure the integration service, please open up the DataSyncService.exe.config file located in C:\\Program Files\\SpiraTeam\\Bin with a text editor such as Notepad. Once open, it should look like: ``xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <configSections> <sectionGroup name=\"applicationSettings\" type=\"System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" > <section name=\"Inflectra.SpiraTest.DataSyncService.Properties.Settings\" type=\"System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" requirePermission=\"false\" /> </sectionGroup> </configSections> <applicationSettings> <Inflectra.SpiraTest.DataSyncService.Properties.Settings> <setting name=\"PollingInterval\" serializeAs=\"String\"> <value>600000</value> </setting> <setting name=\"WebServiceUrl\" serializeAs=\"String\"> <value> http://localhost/SpiraTeam </value> </setting> <setting name=\"Login\" serializeAs=\"String\"> <value>fredbloggs</value> </setting> <setting name=\"Password\" serializeAs=\"String\"> <value>fredbloggs</value> </setting> <setting name=\"EventLogSource\" serializeAs=\"String\"> <value>SpiraTeam Data Sync Service</value> </setting> <setting name=\"TraceLogging\" serializeAs=\"String\"> <value>False</value> </setting> </Inflectra.SpiraTest.DataSyncService.Properties.Settings> </applicationSettings> </configuration> ``` The sections that need to be verified and possibly changed are marked in yellow above. You need to check the following information: The polling interval allows you to specify how frequently the data-synchronization service will ask SpiraTeam and the external system for new data updates. The value is specified in milliseconds and we recommend a value no smaller than 5 minutes (i.e. 300,000ms). The larger the number, the longer it will take for data to be synchronized, but the lower the network and server overhead. The base URL to your instance SpiraTeam. It is typically of the form http://<server name>/SpiraTeam. Make sure that when you enter this URL on a browser on the server itself, the application login page appears. A valid login name and password to your instance of SpiraTeam. This user needs to be a member of the project(s) that will be synchronized with OnTime and needs to have at least Incident create/modify/view permissions and Release create/modify/view permissions in these projects. Once you have made these changes, save the file and proceed to the next stage.","title":"Configuring the Service"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-OnTime-11/#configuring-the-plug-in","text":"The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the OnTime server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for OnTimeDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the OnTime Data-Synchronization plug-in: You need to fill out the following fields for the OnTime Plug-in to operate correctly: Name -- this needs to be set to OnTimeDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the OnTimeDataSync.dll file for any reason, then you need to change the name here to match. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the full URL to the OnTime SDK. This is typically something like: http://<OnTime server name>/OnTimeSdk. You may need to check in the IIS Management Console of the OnTime server to verify the virtual directory name. Login -- this should be set to the GUID that you specified in the Web.Config file in step 13.1.1 above. Password -- this should be left blank as it's not used by the OnTime data-sync plug-in. Time Offset -- normally this should be set to zero, but if you find that defects being changed in OnTime are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your OnTime installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. Auto-Map Users -- this is not currently used by the OnTime data-sync plug-in and can be ignored. Custom 01 -- 05 -- these are not currently used by the OnTime data-sync plug-in and can be left blank.","title":"Configuring the Plug-In"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-OnTime-11/#configuring-the-data-mapping","text":"Next, you need to configure the data mapping between SpiraTeam and OnTime. This allows the various projects, users, releases, incident statuses, priorities, severities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Open\" incident in SpiraTeam is the same as an \"Open\" defect in OnTime (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below:","title":"Configuring the Data Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-OnTime-11/#configuring-the-project-mapping","text":"From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the OnTime plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with OnTime, you need to enter: External Key -- This should be set to the numeric ID of the project token in OnTime. You can find this in OnTime by selecting the project in the project explorer inside OnTime and then clicking the Edit icon. This brings up the project details screen: The ID of the project is the value listed in the browser URL directly after the \"ProjectId=\" text. In the example above, the project ID would be 3. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project.","title":"Configuring the Project Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-OnTime-11/#configuring-the-user-mapping","text":"To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing defects in OnTime: You will notice that below the Active flag for the user is a list of all the configured data-synchronization plug-ins. In the text box next to the OnTime Data-Sync plug-in you need to enter the Login ID for this username in OnTime. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in OnTime. Click [Update] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems.","title":"Configuring the User Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-OnTime-11/#configuring-the-release-mapping","text":"When the data-synchronization service runs, when it comes across a release/iteration in SpiraTeam that it has not seen before, it will create a corresponding Release in OnTime. Similarly if it comes across a new Release in OnTime that it has not seen before, it will create a new Release in SpiraTeam. Therefore when using both systems together, it is recommended that you only enter new Releases in one system and let the data-synchronization service add them to the other system. However you may start out with the situation where you already have pre-existing Releases in both systems that you need to associate in the data-mapping. If you don't do this, you may find that duplicates get created when you first enable the data-synchronization service. Therefore for any Releases/Iterations that already exist in BOTH systems please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties configured for Releases, you will see an additional text property called \" OnTimeDataSync ID \" that is used to store the mapped external identifier for the equivalent Version in OnTime. You need to locate the ID of the equivalent version in OnTime, enter it into this text-box and click [Save]. You should now repeat for all the other pre-existing releases. Note: The OnTime ID can be found by looking at the URL inside OnTime when choosing to Edit the release in question. The URL will include the section: **ReleaseId=X* where X is the numeric ID of the version inside OnTime:*","title":"Configuring the Release Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-OnTime-11/#configuring-the-standard-field-mapping","text":"Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the OnTimeDataSync plug-in entry: From this screen, you need to click on Priority, Severity and Status in turn to configure their values (OnTime doesn't support different defect types): a) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching OnTime defect status names for each one. You can map multiple SpiraTeam fields to the same OnTime fields (e.g. New and Open in SpiraTeam are both equivalent to Open in OnTime), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from OnTime > SpiraTeam). We recommend that you always point the New and Open statuses inside SpiraTeam to point to the \"Open\" status inside OnTime and make Open in SpiraTeam the Primary status of the two. This is recommended so that as new incidents in SpiraTeam get synched over to OnTime, they will get switched to the Open status in OnTime which will then be synched back to \"Open\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with OnTime and those that haven't. Note: The OnTime external key needs to exactly match the display name of the status inside OnTime. If you change the name of a status in OnTime, you'll need to update the value in the data-mapping configuration as well. b) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching OnTime priority name for each one. You can map multiple SpiraTeam fields to the same OnTime fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from OnTime > SpiraTeam). Note: The OnTime external key needs to exactly match the display name of the priority inside OnTime. If you change the name of a priority in OnTime, you'll need to update the value in the data-mapping configuration as well. c) Incident Severity Click on the \"Severity\" hyperlink under Incident Standard Fields to bring up the Incident severity mapping configuration screen: The table lists each of the incident severities available in SpiraTeam and provides you with the ability to enter the matching OnTime severity name for each one. You can map multiple SpiraTeam fields to the same OnTime fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from OnTime > SpiraTeam). Note: The OnTime external key needs to exactly match the display name of the severity inside OnTime. If you change the name of a severity in OnTime, you'll need to update the value in the data-mapping configuration as well.","title":"Configuring the Standard Field Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-OnTime-11/#configuring-the-custom-property-mapping","text":"Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in OnTime and also for custom properties in SpiraTeam that are used to map to standard fields in OnTime (currently only Replication Procedures) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for. We will consider the three different types of mapping that you might want to enter: a) Text Custom Properties Click on the hyperlink of the text custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For text custom properties there will be no values listed in the lower half of the screen. You need to lookup the display name of the custom field in OnTime that matches this custom property in SpiraTeam. Once you have entered the id of the custom field, click [Update]. b) List Custom Properties Click on the hyperlink of the list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For list custom properties there will be a textbox for both the custom field itself and a mapping table for each of the custom property values that need to be mapped: First you need to lookup the display name of the custom field in OnTime that matches this custom property in SpiraTeam. This should be entered in the 'External Key' field below the name of the custom property. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the full name of the custom field value as specified in OnTime. c) OnTime's Replication Procedures Field If you want new defects in OnTime to be loaded with the \"replication prodcedures\" standard text field populated, then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the environment description within SpiraTeam. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \"ReplicationProcedures\" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Replication Procedures field in OnTime. Note that there is no space between the words Replication and Procedures!! Once you have updated the various mapping sections, you are now ready to start the service.","title":"Configuring the Custom Property Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-OnTime-11/#enabling-the-data-synchronization","text":"","title":"Enabling the Data-Synchronization"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-OnTime-11/#starting-the-service","text":"When SpiraTeam is installed, a Windows Service -- SpiraTeam Data Sync Service -- is installed along with the web application. However to avoid wasting system resources, this service is initially set to run manually. To ensure continued synchronization of SpiraTeam with OnTime, we recommend starting the service and setting its startup-type to Automatic. To make these changes, open up the Windows Control Panel, click on the \"Administrative Tools\" link, and then choose the Services option. This will bring up the Windows Service control panel: Click on the 'SpiraTeam Data Sync Service' entry and click on the link to start the service. Then right-click the service entry and choose the option to set the startup type to 'Automatic'. This will ensure that synchronization continues between SpiraTeam and OnTime after a reboot of the server.","title":"Starting the Service"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-OnTime-11/#using-spirateam-with-ontime","text":"Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into OnTime. At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any defects with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with OnTime on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTeam, defects found should be logged through the 'Add Incident' option as normal. Once an incident has been created during the running of the test, it will now be populated across into OnTime as a defect. It will be populated with the information captured in SpiraTeam. At this point, the incident should not be acted upon inside SpiraTeam, and all data changes to the defect should be made inside OnTime. To enforce this, you can modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with OnTime after that point. As the defect progresses through the OnTime workflow, changes to the status, priority, severity, and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTeam using the test cases managed by SpiraTeam and the incidents managed on behalf of SpiraTeam inside OnTime.","title":"Using SpiraTeam with OnTime"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-ServiceNow/","text":"Using Spira with ServiceNow This section outlines how to use SpiraTest, SpiraTeam or SpiraPlan (hereafter referred to as SpiraPlan) in conjunction with tables in ServiceNow. STOP! Please make sure you have first read the Instructions in Setup before proceeding! ServiceNow tables are a highly configurable system that can now be used in conjunction with SpiraPlan. This integration service enables two-way syncing of new incidents and requirements with any table in ServiceNow and syncing of updates from ServiceNow into SpiraPlan. Attachments will only be synced with creation. Configuring the Integration Service This section outlines how to set up the integration service between ServiceNow and SpiraPlan. It assumes that you already have a working installation of SpiraPlan and appropriate ServiceNow tables. To setup the service, you must be logged into SpiraPlan as a user with System-Administrator level privileges. Inside SpiraPlan, go to the Administration page and navigate to the Integration > Data Synchronization webpage. Check that you don't already have a Plug-In called \"ServiceNowDataSync\", as shown below: If you already have a plug-in called ServiceNowDataSync , please click on its \"edit\" button, otherwise please click the \"Add\" button to create a new plug-in: Now fill out this configuration page as follows: You need to fill out the following fields for the ServiceNow Data Sync plugin to work properly: Name -- This needs to be set to ServiceNowDataSync Caption -- This is the display name of the plug-in, generally something generic like \"ServiceNow\" will work. Description -- The description of what you're using the plug-in for. This field is entirely optional and is not used by the system in any way. Connection Info -- The location of your ServiceNow account. For example, if you're on a dev instance, your connection info should be https://devxxxxx.service-now.com Login -- Your ServiceNow username Password -- Your ServiceNow password Time Offset -- Set this to how many hours ahead UTC is, so for EDT (UTC-4), you would put in positive 4. Auto-Map Users -- Set to yes if you would like the plugin to map users one-to-one by checking first & last names. Set to no if you would like to map users manually. Custom 01 -- The name of the table you would like to sync with incidents in SpiraPlan. This can be found in the name field in the table definition within ServiceNow Studio. Custom 02 -- The name of the table column in ServiceNow which will decide which project an incident is created in. This can be found in ServiceNow Studio under the column name. Custom 03 -- The name of the table you would like to sync with requirements in SpiraPlan. This can be found in the name field in the table definition within ServiceNow Studio. This cannot be the same as the table in Custom 01. Custom 04 - The name of the table column in ServiceNow which will decide which project a requirement is created in. This can be found in ServiceNow Studio under the column name. Custom 05 should be left blank. Once all those fields have been filled out, click the \"Add\" or \"Save\" button to save your changes. Configuring Project Mappings For this step, please ensure that you are in a SpiraPlan project you would like to sync with ServiceNow. For this example, the project is called \"ServiceNowDataSync Test.\" Click on the \"View Project Mappings\" button for the ServiceNow Data Sync. You need to fill out the following fields to sync correctly: External Key -- The value of the property in Custom 02/04 you would like to map with this project Active -- Set this to yes so that the Data Sync plug-in knows to synchronize with this project. The spira_product example above is a 'choice' type with the choices shown below: Type in the 'Label' field of the choice, not the 'Value.' A brief note about field syncing in ServiceNow: The sheer configurability of ServiceNow meant some assumptions were made in the designing of this data sync. Specific column names are mapped to their counterparts in SpiraPlan based on the list below. If a field is not present in ServiceNow, it will simply not be synced. SpiraPlan Field ServiceNow Column Name Name name/short_description [both will work] Description description Priority/Importance priority Author/Detected By opened_by Owner assigned_to Status state Configuring the Incident/Requirement Status Mappings Now click the \"Status\" button within the \"Incident\" section to map the Incident statuses together. The purpose of this is so that the ServiceNow Data Sync plug-in knows what the equivalent status is in ServiceNow for an incident status in SpiraPlan. The process is identical for Requirement statuses, so repeat these steps with Requirement > Status instead if you are also/only syncing requirements. If you don't have a status equivalent in your table, you can ignore this section. You must map every status in SpiraPlan to ServiceNow. Descriptions of the field are below: External Key -- If state is a dropdown in ServiceNow, it's the 'Label' ( not 'Value') of the choice, which is also what is shown in the ServiceNow UI. If state is a string in ServiceNow, just write in the value of the string to be mapped to the SpiraPlan status. Please take care to match it exactly (case, spaces, etc) Primary -- You must have exactly one primary key for each ServiceNow status. This is what status the plug-in should set the incident in SpiraPlan to when the status in ServiceNow changes. This is only used if there are more options in SpiraPlan than ServiceNow. Here are the corresponding statuses in ServiceNow Configuring the Priority/Importance Mapping Now click the \"Priority\" button within the \"Incident\" section to map incident priorities. This will tell the ServiceNow Data Sync plug-in which priorities in ServiceNow map to those in SpiraPlan. The process is identical for Requirement importance, so repeat these steps with Requirement > Importance instead if you are also/only syncing requirements. If you don't have a priority equivalent in your table, you can ignore this section. You must map every priority/importance in SpiraPlan to ServiceNow. Descriptions of the field are below: External Key -- If state is a dropdown in ServiceNow, it's the 'Label' ( not 'Value') of the choice, which is also what is shown in the ServiceNow UI. If state is a string in ServiceNow, just write in the value of the string to be mapped to the SpiraPlan status. Please take care to match it exactly (case, spaces, etc.) Primary -- You must have exactly one primary key for each ServiceNow priority. This is what priority the plug-in should set the incident in SpiraPlan to when the priority in ServiceNow changes. This is only used if there are more options in SpiraPlan than ServiceNow. Here are the corresponding priorities in ServiceNow: Cloning ServiceNow Fields Due to some of the assumptions made in the creation of this integration, it is often necessary to create a hidden compatibility layer between the fields you use in your ServiceNow table and those recognized by the SpiraPlan data sync. This section will lay out how to create 'hidden' fields that will be kept in sync with those in SpiraPlan. Create the field you would like to clone [for this example I will keep \"Complete Notes\" (visible by ServiceNow users) in sync with \"Description\" (for syncing with SpiraPlan)] A brief discussion about the requirements for this to work a. Both fields must be of the same type in ServiceNow b. If you have a list or choice, the \"Value\" of each choice must map one-to-one between the hidden 'Spira' field and the visible ServiceNow field These steps will show how to store description in complete notes when Spira creates an artifact in ServiceNow c. If Studio is not open already, open System Applications > Studio, then select the application the tables are being synced with d. In the top left, click \"Create Application File\" and select Server Development > Business Rule e. Create a new Business Rule and assign it to the table you are working with [for this example I will use Spira Test Table] f. Name it something helpful [like \"description -> complete notes\"] g. Under Where to run , check the Insert box h. Add a Filter Condition such that the field you're cloning with the Spira field is empty: i. Under Actions , where it says \"---choose field --\" set it to the field you would like to be populated [\"Complete Notes\" in this example] j. To the right of the field name, set \"To\" to \"Same as\" and select the Spira field [\"Description\" in this example] These steps will show you how to store complete notes in description when the user updates complete notes k. In the top left, click \"Create Application File\" and select Server Development > Business Rule l. Create a new Business Rule and assign it to the table you are working with [for this example I will use Spira Test Table] m. Name it something helpful [like \"[update] complete notes -> description\"] n. Under Where to run , check the Update box o. Under Actions , where it says \"---choose field --\" set it to the Spira field you would like to be synced [\"Description\" in this example] p. To the right of the field name, set \"To\" to \"Same as\" and select the ServiceNow field editable by the user [\"Complete Notes\" in this example] These steps will show you how to store complete notes in description when the user creates a new artifact in ServiceNow q. In the top left, click \"Create Application File\" and select Server Development > Business Rule r. Create a new Business Rule and assign it to the table you are working with [for this example I will use Spira Test Table] s. Name it something helpful [like \"[creation] complete notes -> description\"] t. Under Where to run , check the Insert box u. Add a Filter Condition such that the Spira field is empty: v. Under Actions , where it says \"---choose field---\" set it to the Spira field you would like to be synced [\"Description\" in this example] w. To the right of the field name, set \"To\" to \"Same as\" and select the ServiceNow field editable by the user [\"Complete Notes\" in this example] Configuring Custom Properties This section assumes the custom properties in SpiraPlan and ServiceNow are of the same type (integer -> integer, SingleSelect -> SingleSelect, etc.) Custom property syncing will not work otherwise. This applies to both requirement and incident custom properties. Click on a custom property mapping for a property you would like to sync. For the \"External Key\" right below the \"Name\" field put the column name ( not the column label), so for the Operating System field in ServiceNow, you would put in \"operating_system\" No extra work is required for user (sys_user references in ServiceNow), text, integer, or date fields. If your custom property is a single-select list (choice in ServiceNow), for each custom value, put in the \"Label\" ( not Value) of the choice in ServiceNow. So your single-select should look similar: If you have a multi-select in SpiraPlan (List in ServiceNow), repeat the same steps as for a single-select, except instead putting \"Label\" in the external key, put \"Value\" instead. You should have something like this: For these ServiceNow choices: Configuring the User Mapping If you have set the \"Auto-Map Users\" option set to yes in the ServiceNow plugin, you can skip this section completely. To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in ServiceNow: Click on the 'Data Mapping' tab to list all the configured data-synchronization plug-ins for this user. In the text box labeled \"ServiceNow Data Sync ID,\" you need to enter the first and last name of the user in ServiceNow. This will allow the data-synchronization plug-in to know which user in SpiraPlan matches with an equivalent user in ServiceNow. Click [Save] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems. Using the Data Synchronization Assuming everything was done correctly, the plug-in should start working. Start your Data Sync service and verify that issues in ServiceNow appear inside SpiraPlan. Note that the Data Sync service is not running constantly, so it may take some time for changes to materialize. Congratulations, you have just integrated your SpiraPlan instance with ServiceNow!","title":"ServiceNow"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-ServiceNow/#using-spira-with-servicenow","text":"This section outlines how to use SpiraTest, SpiraTeam or SpiraPlan (hereafter referred to as SpiraPlan) in conjunction with tables in ServiceNow. STOP! Please make sure you have first read the Instructions in Setup before proceeding! ServiceNow tables are a highly configurable system that can now be used in conjunction with SpiraPlan. This integration service enables two-way syncing of new incidents and requirements with any table in ServiceNow and syncing of updates from ServiceNow into SpiraPlan. Attachments will only be synced with creation.","title":"Using Spira with ServiceNow"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-ServiceNow/#configuring-the-integration-service","text":"This section outlines how to set up the integration service between ServiceNow and SpiraPlan. It assumes that you already have a working installation of SpiraPlan and appropriate ServiceNow tables. To setup the service, you must be logged into SpiraPlan as a user with System-Administrator level privileges. Inside SpiraPlan, go to the Administration page and navigate to the Integration > Data Synchronization webpage. Check that you don't already have a Plug-In called \"ServiceNowDataSync\", as shown below: If you already have a plug-in called ServiceNowDataSync , please click on its \"edit\" button, otherwise please click the \"Add\" button to create a new plug-in: Now fill out this configuration page as follows: You need to fill out the following fields for the ServiceNow Data Sync plugin to work properly: Name -- This needs to be set to ServiceNowDataSync Caption -- This is the display name of the plug-in, generally something generic like \"ServiceNow\" will work. Description -- The description of what you're using the plug-in for. This field is entirely optional and is not used by the system in any way. Connection Info -- The location of your ServiceNow account. For example, if you're on a dev instance, your connection info should be https://devxxxxx.service-now.com Login -- Your ServiceNow username Password -- Your ServiceNow password Time Offset -- Set this to how many hours ahead UTC is, so for EDT (UTC-4), you would put in positive 4. Auto-Map Users -- Set to yes if you would like the plugin to map users one-to-one by checking first & last names. Set to no if you would like to map users manually. Custom 01 -- The name of the table you would like to sync with incidents in SpiraPlan. This can be found in the name field in the table definition within ServiceNow Studio. Custom 02 -- The name of the table column in ServiceNow which will decide which project an incident is created in. This can be found in ServiceNow Studio under the column name. Custom 03 -- The name of the table you would like to sync with requirements in SpiraPlan. This can be found in the name field in the table definition within ServiceNow Studio. This cannot be the same as the table in Custom 01. Custom 04 - The name of the table column in ServiceNow which will decide which project a requirement is created in. This can be found in ServiceNow Studio under the column name. Custom 05 should be left blank. Once all those fields have been filled out, click the \"Add\" or \"Save\" button to save your changes.","title":"Configuring the Integration Service"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-ServiceNow/#configuring-project-mappings","text":"For this step, please ensure that you are in a SpiraPlan project you would like to sync with ServiceNow. For this example, the project is called \"ServiceNowDataSync Test.\" Click on the \"View Project Mappings\" button for the ServiceNow Data Sync. You need to fill out the following fields to sync correctly: External Key -- The value of the property in Custom 02/04 you would like to map with this project Active -- Set this to yes so that the Data Sync plug-in knows to synchronize with this project. The spira_product example above is a 'choice' type with the choices shown below: Type in the 'Label' field of the choice, not the 'Value.' A brief note about field syncing in ServiceNow: The sheer configurability of ServiceNow meant some assumptions were made in the designing of this data sync. Specific column names are mapped to their counterparts in SpiraPlan based on the list below. If a field is not present in ServiceNow, it will simply not be synced. SpiraPlan Field ServiceNow Column Name Name name/short_description [both will work] Description description Priority/Importance priority Author/Detected By opened_by Owner assigned_to Status state","title":"Configuring Project Mappings"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-ServiceNow/#configuring-the-incidentrequirement-status-mappings","text":"Now click the \"Status\" button within the \"Incident\" section to map the Incident statuses together. The purpose of this is so that the ServiceNow Data Sync plug-in knows what the equivalent status is in ServiceNow for an incident status in SpiraPlan. The process is identical for Requirement statuses, so repeat these steps with Requirement > Status instead if you are also/only syncing requirements. If you don't have a status equivalent in your table, you can ignore this section. You must map every status in SpiraPlan to ServiceNow. Descriptions of the field are below: External Key -- If state is a dropdown in ServiceNow, it's the 'Label' ( not 'Value') of the choice, which is also what is shown in the ServiceNow UI. If state is a string in ServiceNow, just write in the value of the string to be mapped to the SpiraPlan status. Please take care to match it exactly (case, spaces, etc) Primary -- You must have exactly one primary key for each ServiceNow status. This is what status the plug-in should set the incident in SpiraPlan to when the status in ServiceNow changes. This is only used if there are more options in SpiraPlan than ServiceNow. Here are the corresponding statuses in ServiceNow","title":"Configuring the Incident/Requirement Status Mappings"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-ServiceNow/#configuring-the-priorityimportance-mapping","text":"Now click the \"Priority\" button within the \"Incident\" section to map incident priorities. This will tell the ServiceNow Data Sync plug-in which priorities in ServiceNow map to those in SpiraPlan. The process is identical for Requirement importance, so repeat these steps with Requirement > Importance instead if you are also/only syncing requirements. If you don't have a priority equivalent in your table, you can ignore this section. You must map every priority/importance in SpiraPlan to ServiceNow. Descriptions of the field are below: External Key -- If state is a dropdown in ServiceNow, it's the 'Label' ( not 'Value') of the choice, which is also what is shown in the ServiceNow UI. If state is a string in ServiceNow, just write in the value of the string to be mapped to the SpiraPlan status. Please take care to match it exactly (case, spaces, etc.) Primary -- You must have exactly one primary key for each ServiceNow priority. This is what priority the plug-in should set the incident in SpiraPlan to when the priority in ServiceNow changes. This is only used if there are more options in SpiraPlan than ServiceNow. Here are the corresponding priorities in ServiceNow:","title":"Configuring the Priority/Importance Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-ServiceNow/#cloning-servicenow-fields","text":"Due to some of the assumptions made in the creation of this integration, it is often necessary to create a hidden compatibility layer between the fields you use in your ServiceNow table and those recognized by the SpiraPlan data sync. This section will lay out how to create 'hidden' fields that will be kept in sync with those in SpiraPlan. Create the field you would like to clone [for this example I will keep \"Complete Notes\" (visible by ServiceNow users) in sync with \"Description\" (for syncing with SpiraPlan)] A brief discussion about the requirements for this to work a. Both fields must be of the same type in ServiceNow b. If you have a list or choice, the \"Value\" of each choice must map one-to-one between the hidden 'Spira' field and the visible ServiceNow field These steps will show how to store description in complete notes when Spira creates an artifact in ServiceNow c. If Studio is not open already, open System Applications > Studio, then select the application the tables are being synced with d. In the top left, click \"Create Application File\" and select Server Development > Business Rule e. Create a new Business Rule and assign it to the table you are working with [for this example I will use Spira Test Table] f. Name it something helpful [like \"description -> complete notes\"] g. Under Where to run , check the Insert box h. Add a Filter Condition such that the field you're cloning with the Spira field is empty: i. Under Actions , where it says \"---choose field --\" set it to the field you would like to be populated [\"Complete Notes\" in this example] j. To the right of the field name, set \"To\" to \"Same as\" and select the Spira field [\"Description\" in this example] These steps will show you how to store complete notes in description when the user updates complete notes k. In the top left, click \"Create Application File\" and select Server Development > Business Rule l. Create a new Business Rule and assign it to the table you are working with [for this example I will use Spira Test Table] m. Name it something helpful [like \"[update] complete notes -> description\"] n. Under Where to run , check the Update box o. Under Actions , where it says \"---choose field --\" set it to the Spira field you would like to be synced [\"Description\" in this example] p. To the right of the field name, set \"To\" to \"Same as\" and select the ServiceNow field editable by the user [\"Complete Notes\" in this example] These steps will show you how to store complete notes in description when the user creates a new artifact in ServiceNow q. In the top left, click \"Create Application File\" and select Server Development > Business Rule r. Create a new Business Rule and assign it to the table you are working with [for this example I will use Spira Test Table] s. Name it something helpful [like \"[creation] complete notes -> description\"] t. Under Where to run , check the Insert box u. Add a Filter Condition such that the Spira field is empty: v. Under Actions , where it says \"---choose field---\" set it to the Spira field you would like to be synced [\"Description\" in this example] w. To the right of the field name, set \"To\" to \"Same as\" and select the ServiceNow field editable by the user [\"Complete Notes\" in this example]","title":"Cloning ServiceNow Fields"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-ServiceNow/#configuring-custom-properties","text":"This section assumes the custom properties in SpiraPlan and ServiceNow are of the same type (integer -> integer, SingleSelect -> SingleSelect, etc.) Custom property syncing will not work otherwise. This applies to both requirement and incident custom properties. Click on a custom property mapping for a property you would like to sync. For the \"External Key\" right below the \"Name\" field put the column name ( not the column label), so for the Operating System field in ServiceNow, you would put in \"operating_system\" No extra work is required for user (sys_user references in ServiceNow), text, integer, or date fields. If your custom property is a single-select list (choice in ServiceNow), for each custom value, put in the \"Label\" ( not Value) of the choice in ServiceNow. So your single-select should look similar: If you have a multi-select in SpiraPlan (List in ServiceNow), repeat the same steps as for a single-select, except instead putting \"Label\" in the external key, put \"Value\" instead. You should have something like this: For these ServiceNow choices:","title":"Configuring Custom Properties"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-ServiceNow/#configuring-the-user-mapping","text":"If you have set the \"Auto-Map Users\" option set to yes in the ServiceNow plugin, you can skip this section completely. To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in ServiceNow: Click on the 'Data Mapping' tab to list all the configured data-synchronization plug-ins for this user. In the text box labeled \"ServiceNow Data Sync ID,\" you need to enter the first and last name of the user in ServiceNow. This will allow the data-synchronization plug-in to know which user in SpiraPlan matches with an equivalent user in ServiceNow. Click [Save] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems.","title":"Configuring the User Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-ServiceNow/#using-the-data-synchronization","text":"Assuming everything was done correctly, the plug-in should start working. Start your Data Sync service and verify that issues in ServiceNow appear inside SpiraPlan. Note that the Data Sync service is not running constantly, so it may take some time for changes to materialize. Congratulations, you have just integrated your SpiraPlan instance with ServiceNow!","title":"Using the Data Synchronization"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-VersionOne/","text":"Using Spira with VersionOne This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Version One (V1) project management system from Collabnet (hereafter called V1). The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTeam, and then have the new incidents generated during the run be automatically loaded into V1 as new defects. In addition, user stories in V1 will be automatically added into SpiraTeam as new requirements that you can write test plans for. Once the incidents are loaded into V1 as defects, the development team can then manage the lifecycle of these defects in V1, and have the status changes in V1 be reflected back in SpiraTeam. STOP! Please make sure you have first read the Instructions in Setup before proceeding! Configuring the Plug-In This section outlines how to configure the integration service to connect to V1. It assumes that you already have a working installation of SpiraTeam v5.0 or later and an existing provisioned instance of V1. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v5.0 before trying to integrate with V1. The steps that need to be performed to configure integration with V1 are as follows: Setup the plug-in in SpiraTeam to point to the correct instance of V1 Configure the data field mappings between SpiraTeam and V1 Start synchronization and verify data transfer Configuring the Plug-In The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the V1 instance. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for VersionOneDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the V1 Data-Synchronization plug-in: You need to fill out the following fields for the V1 Plug-in to operate correctly: Name -- this needs to be set to VersionOneDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files (x86)\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the OnTimeDataSync.dll file for any reason, then you need to change the name here to match. Caption -- this is the display name of the V1 plugin and it can be meaningful name such as \"Version One\", \"V1\", or \"V1 Instance 1\". Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the full URL to V1. This is typically something like: https://www1.v1host.com/CompanyName . Login -- this should be set to the login that you use to access V1 through its web interface Password -- this should be set to the password that you use to access V1 through its web interface Time Offset -- normally this should be set to zero, but if you find that defects being changed in V1 are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Auto-Map Users -- This changes the way that the plugin maps users in SpiraTeam to those in V1: **Auto-Map = True **With this setting, all users in SpiraTeam need to have the same username as those in V1. If this is the case then you do not need to perform the user-mapping task outlined in section 12.2.2. This is a big time-saver if you can guarantee that all usernames are the same in both systems. **Auto-Map = False **With this setting, users in SpiraTeam and V1are free to have different usernames because you specify the corresponding V1login for each user as outlined in Configuring the User Mapping . Custom 01 -- this should be set to \"True\" if you want the plugin to log warnings about missing user mappings Custom 02-05 -- these are not currently used by the V1 data-sync plug-in and can be left blank. Configuring the Data Mapping Next, you need to configure the data mapping between SpiraTeam and V1. This allows the various projects, users, releases, incident statuses, priorities, severities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Open\" incident in SpiraTeam is the same as an \"Open\" defect in V1 (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases in the system The mapping of the various incident standard fields in the system The mapping of the various requirement standard fields in the system Each of these is explained in turn below: Configuring the Project Mapping From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the V1 plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with V1, you need to enter: External Key -- This should be set to the name of the project in V1: If you have sub-projects, you can map to one of those using the syntax: Project/SubProject Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project. Configuring the User Mapping (This section can be skipped if you enabled the 'AutoMap Users' option earlier). To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing defects in V1: You will notice that in the Data Mapping tab for the user is a list of all the configured data-synchronization plug-ins. In the text box next to the V1 Data-Sync plug-in you need to enter the Login Name for this username in V1. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in V1. Click [Update] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems. Configuring the Release/Iteration Mapping When the data-synchronization service runs, when it comes across a new Release or Sprint/Timebox in V1 that it has not seen before, it will create a new Release or Iteration in SpiraTeam. Therefore, when using both systems together, it is recommended that you only enter new Releases in V1 and let the data-synchronization service add them to SpiraTeam. To see this mapping, inside SpiraTeam, navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties configured for Releases, you will see an additional text property called \" V1DataSync ID \" that is used to store the mapped external identifier for the equivalent Version in V1. Configuring the Incident Field Mapping Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the V1DataSync plug-in entry: From this screen, you need to click on Status, Priority, Type in turn to configure their values (V1 doesn't support different defect severities): a) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching V1 defect status names for each one. You can map multiple SpiraTeam fields to the same V1 fields (e.g. New and Open in SpiraTeam are both equivalent to Future in V1), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from V1 > SpiraTeam). We recommend that you always point the New and Open statuses inside SpiraTeam to point to the \"Future\" status inside V1 and make Open in SpiraTeam the Primary status of the two. This is recommended so that as new incidents in SpiraTeam get synched over to V1, they will get switched to the Future status in V1 which will then be synched back to \"Open\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with V1 and those that haven't. Note: The V1 external key needs to exactly match the display name of the status inside V1. If you change the name of a status in V1, you'll need to update the value in the data-mapping configuration as well. b) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching V1 priority name for each one. You can map multiple SpiraTeam fields to the same V1 fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from V1 > SpiraTeam). Note: The V1 external key needs to exactly match the display name of the priority inside V1. If you change the name of a priority in V1, you'll need to update the value in the data-mapping configuration as well. c) Incident Type Click on the \"Type\" hyperlink under Incident Standard Fields to bring up the Incident type mapping configuration screen: The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching V1 defect type name for each one. You can map multiple SpiraTeam fields to the same V1 fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from V1 > SpiraTeam). Note: The V1 external key needs to exactly match the display name of the defect type inside V1. If you change the name of a defect type in V1, you'll need to update the value in the data-mapping configuration as well. Configuring the Requirement Field Mapping Next, we need to configure the standard requirement fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the V1DataSync plug-in entry: From this screen, you need to click on Priority, Severity and Status in turn to configure their values (V1 doesn't support different defect types): a) Requirement Status Click on the \"Status\" hyperlink under Requirement Standard Fields to bring up the Requirement status mapping configuration screen: The table lists each of the requirement statuses available in SpiraTeam and provides you with the ability to enter the matching V1 user story status names for each one. You can map multiple SpiraTeam fields to the same V1 fields (e.g. Requested and Planned in SpiraTeam are both equivalent to Future in V1), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from V1 > SpiraTeam). Note: The V1 external key needs to exactly match the display name of the status inside V1. If you change the name of a status in V1, you'll need to update the value in the data-mapping configuration as well. b) Requirement Importance Click on the \"Importance\" hyperlink under Requirement Standard Fields to bring up the Requirement Importance mapping configuration screen: The table lists each of the requirement importances available in SpiraTeam and provides you with the ability to enter the matching V1 user story priority name for each one. You can map multiple SpiraTeam fields to the same V1 fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from V1 > SpiraTeam). Note: The V1 external key needs to exactly match the display name of the priority inside V1. If you change the name of a priority in V1, you'll need to update the value in the data-mapping configuration as well. c) Requirement Type Click on the \"Type\" hyperlink under Requirement Standard Fields to bring up the requirement type mapping configuration screen: The table lists each of the requirement types available in SpiraTeam and provides you with the ability to enter the matching V1 user story type name for each one. You can map multiple SpiraTeam fields to the same V1 fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from V1 > SpiraTeam). Note: The V1 external key needs to exactly match the display name of the user story type inside V1. If you change the name of a user story type in V1, you'll need to update the value in the data-mapping configuration as well. Mapping a Custom Property to the V1 Display ID Version One has two unique IDs for all artifacts, a display ID (e.g. D-23232) and a physical ID (Defect:11291). Now the built in Data Sync ID in SpiraTeam will contain the physical ID of the V1 artifact. However, if you also want to see the V1 display IDs in SpiraTeam, you can map a custom property to the special V1DisplayId external key. This can be done for requirements: And for incidents: Once you have updated the various mapping sections, you are now ready to use the service. Using SpiraTeam with V1 Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into V1 and vice versa. In addition, any existing user stories in V1 will get added to SpiraTeam as requirements. At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any defects with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with V1 on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTeam, defects found should be logged through the 'Add Incident' option as normal. Developers can log new defects into either SpiraTeam or V1. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam User stories created in V1 will get added to SpiraTeam as requirements. You can now write test cases and associate them in SpiraTeam with these requirements. As the defect progresses through the V1 workflow, changes to the status, priority, severity, and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTeam using the requirements and test cases managed by SpiraTeam and the incidents managed on behalf of SpiraTeam inside V1.","title":"VersionOne"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-VersionOne/#using-spira-with-versionone","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Version One (V1) project management system from Collabnet (hereafter called V1). The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTeam, and then have the new incidents generated during the run be automatically loaded into V1 as new defects. In addition, user stories in V1 will be automatically added into SpiraTeam as new requirements that you can write test plans for. Once the incidents are loaded into V1 as defects, the development team can then manage the lifecycle of these defects in V1, and have the status changes in V1 be reflected back in SpiraTeam. STOP! Please make sure you have first read the Instructions in Setup before proceeding!","title":"Using Spira with VersionOne"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-VersionOne/#configuring-the-plug-in","text":"This section outlines how to configure the integration service to connect to V1. It assumes that you already have a working installation of SpiraTeam v5.0 or later and an existing provisioned instance of V1. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v5.0 before trying to integrate with V1. The steps that need to be performed to configure integration with V1 are as follows: Setup the plug-in in SpiraTeam to point to the correct instance of V1 Configure the data field mappings between SpiraTeam and V1 Start synchronization and verify data transfer","title":"Configuring the Plug-In"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-VersionOne/#configuring-the-plug-in_1","text":"The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the V1 instance. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for VersionOneDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the V1 Data-Synchronization plug-in: You need to fill out the following fields for the V1 Plug-in to operate correctly: Name -- this needs to be set to VersionOneDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files (x86)\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the OnTimeDataSync.dll file for any reason, then you need to change the name here to match. Caption -- this is the display name of the V1 plugin and it can be meaningful name such as \"Version One\", \"V1\", or \"V1 Instance 1\". Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the full URL to V1. This is typically something like: https://www1.v1host.com/CompanyName . Login -- this should be set to the login that you use to access V1 through its web interface Password -- this should be set to the password that you use to access V1 through its web interface Time Offset -- normally this should be set to zero, but if you find that defects being changed in V1 are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Auto-Map Users -- This changes the way that the plugin maps users in SpiraTeam to those in V1: **Auto-Map = True **With this setting, all users in SpiraTeam need to have the same username as those in V1. If this is the case then you do not need to perform the user-mapping task outlined in section 12.2.2. This is a big time-saver if you can guarantee that all usernames are the same in both systems. **Auto-Map = False **With this setting, users in SpiraTeam and V1are free to have different usernames because you specify the corresponding V1login for each user as outlined in Configuring the User Mapping . Custom 01 -- this should be set to \"True\" if you want the plugin to log warnings about missing user mappings Custom 02-05 -- these are not currently used by the V1 data-sync plug-in and can be left blank.","title":"Configuring the Plug-In"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-VersionOne/#configuring-the-data-mapping","text":"Next, you need to configure the data mapping between SpiraTeam and V1. This allows the various projects, users, releases, incident statuses, priorities, severities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Open\" incident in SpiraTeam is the same as an \"Open\" defect in V1 (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases in the system The mapping of the various incident standard fields in the system The mapping of the various requirement standard fields in the system Each of these is explained in turn below:","title":"Configuring the Data Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-VersionOne/#configuring-the-project-mapping","text":"From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the V1 plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with V1, you need to enter: External Key -- This should be set to the name of the project in V1: If you have sub-projects, you can map to one of those using the syntax: Project/SubProject Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project.","title":"Configuring the Project Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-VersionOne/#configuring-the-user-mapping","text":"(This section can be skipped if you enabled the 'AutoMap Users' option earlier). To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing defects in V1: You will notice that in the Data Mapping tab for the user is a list of all the configured data-synchronization plug-ins. In the text box next to the V1 Data-Sync plug-in you need to enter the Login Name for this username in V1. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in V1. Click [Update] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems.","title":"Configuring the User Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-VersionOne/#configuring-the-releaseiteration-mapping","text":"When the data-synchronization service runs, when it comes across a new Release or Sprint/Timebox in V1 that it has not seen before, it will create a new Release or Iteration in SpiraTeam. Therefore, when using both systems together, it is recommended that you only enter new Releases in V1 and let the data-synchronization service add them to SpiraTeam. To see this mapping, inside SpiraTeam, navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties configured for Releases, you will see an additional text property called \" V1DataSync ID \" that is used to store the mapped external identifier for the equivalent Version in V1.","title":"Configuring the Release/Iteration Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-VersionOne/#configuring-the-incident-field-mapping","text":"Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the V1DataSync plug-in entry: From this screen, you need to click on Status, Priority, Type in turn to configure their values (V1 doesn't support different defect severities): a) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching V1 defect status names for each one. You can map multiple SpiraTeam fields to the same V1 fields (e.g. New and Open in SpiraTeam are both equivalent to Future in V1), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from V1 > SpiraTeam). We recommend that you always point the New and Open statuses inside SpiraTeam to point to the \"Future\" status inside V1 and make Open in SpiraTeam the Primary status of the two. This is recommended so that as new incidents in SpiraTeam get synched over to V1, they will get switched to the Future status in V1 which will then be synched back to \"Open\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with V1 and those that haven't. Note: The V1 external key needs to exactly match the display name of the status inside V1. If you change the name of a status in V1, you'll need to update the value in the data-mapping configuration as well. b) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching V1 priority name for each one. You can map multiple SpiraTeam fields to the same V1 fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from V1 > SpiraTeam). Note: The V1 external key needs to exactly match the display name of the priority inside V1. If you change the name of a priority in V1, you'll need to update the value in the data-mapping configuration as well. c) Incident Type Click on the \"Type\" hyperlink under Incident Standard Fields to bring up the Incident type mapping configuration screen: The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching V1 defect type name for each one. You can map multiple SpiraTeam fields to the same V1 fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from V1 > SpiraTeam). Note: The V1 external key needs to exactly match the display name of the defect type inside V1. If you change the name of a defect type in V1, you'll need to update the value in the data-mapping configuration as well.","title":"Configuring the Incident Field Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-VersionOne/#configuring-the-requirement-field-mapping","text":"Next, we need to configure the standard requirement fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the V1DataSync plug-in entry: From this screen, you need to click on Priority, Severity and Status in turn to configure their values (V1 doesn't support different defect types): a) Requirement Status Click on the \"Status\" hyperlink under Requirement Standard Fields to bring up the Requirement status mapping configuration screen: The table lists each of the requirement statuses available in SpiraTeam and provides you with the ability to enter the matching V1 user story status names for each one. You can map multiple SpiraTeam fields to the same V1 fields (e.g. Requested and Planned in SpiraTeam are both equivalent to Future in V1), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from V1 > SpiraTeam). Note: The V1 external key needs to exactly match the display name of the status inside V1. If you change the name of a status in V1, you'll need to update the value in the data-mapping configuration as well. b) Requirement Importance Click on the \"Importance\" hyperlink under Requirement Standard Fields to bring up the Requirement Importance mapping configuration screen: The table lists each of the requirement importances available in SpiraTeam and provides you with the ability to enter the matching V1 user story priority name for each one. You can map multiple SpiraTeam fields to the same V1 fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from V1 > SpiraTeam). Note: The V1 external key needs to exactly match the display name of the priority inside V1. If you change the name of a priority in V1, you'll need to update the value in the data-mapping configuration as well. c) Requirement Type Click on the \"Type\" hyperlink under Requirement Standard Fields to bring up the requirement type mapping configuration screen: The table lists each of the requirement types available in SpiraTeam and provides you with the ability to enter the matching V1 user story type name for each one. You can map multiple SpiraTeam fields to the same V1 fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from V1 > SpiraTeam). Note: The V1 external key needs to exactly match the display name of the user story type inside V1. If you change the name of a user story type in V1, you'll need to update the value in the data-mapping configuration as well.","title":"Configuring the Requirement Field Mapping"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-VersionOne/#mapping-a-custom-property-to-the-v1-display-id","text":"Version One has two unique IDs for all artifacts, a display ID (e.g. D-23232) and a physical ID (Defect:11291). Now the built in Data Sync ID in SpiraTeam will contain the physical ID of the V1 artifact. However, if you also want to see the V1 display IDs in SpiraTeam, you can map a custom property to the special V1DisplayId external key. This can be done for requirements: And for incidents: Once you have updated the various mapping sections, you are now ready to use the service.","title":"Mapping a Custom Property to the V1 Display ID"},{"location":"External-Bug-Tracking-Integration/Using-Spira-with-VersionOne/#using-spirateam-with-v1","text":"Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into V1 and vice versa. In addition, any existing user stories in V1 will get added to SpiraTeam as requirements. At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any defects with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with V1 on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTeam, defects found should be logged through the 'Add Incident' option as normal. Developers can log new defects into either SpiraTeam or V1. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam User stories created in V1 will get added to SpiraTeam as requirements. You can now write test cases and associate them in SpiraTeam with these requirements. As the defect progresses through the V1 workflow, changes to the status, priority, severity, and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTeam using the requirements and test cases managed by SpiraTeam and the incidents managed on behalf of SpiraTeam inside V1.","title":"Using SpiraTeam with V1"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-ClearQuest/","text":"Using SpiraTeam with ClearQuest This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the ClearQuest defect tracking system. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into ClearQuest. Once the incidents are loaded into ClearQuest as defects, the development team can then manage the lifecycle of these defects in ClearQuest, and have the status changes in ClearQuest be reflected back in SpiraTeam. In addition, any issues logged directly into ClearQuest will get imported into SpiraTeam so that they can be linked to test cases and requirements. \u25ba Note: The ClearQuest Plug-In is Not Available on the Inflectra Cloud-Based DataSync Service. Configuring the Integration Service This section outlines how to configure the integration service to export incidents into ClearQuest and pick up subsequent status changes in ClearQuest and have them be updated in SpiraTeam. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam (v3.0 or higher) and a working installation of IBM Rational ClearQuest 7.0 or higher. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v3.0 before trying to integrate with ClearQuest. The steps that need to be performed to configure integration with ClearQuest are as follows: Download the latest ClearQuest Data-Sync plug-in for SpiraTeam from our website Setup the plug-in in SpiraTeam to point to the correct instance of ClearQuest Configure the data field mappings between SpiraTeam and ClearQuest Start the service and verify data transfer Download the ClearQuest Plug-In Go to the Inflectra website and open up the page that lists the various downloads available for SpiraTeam ( http://www.inflectra.com/SpiraTeam/Downloads.aspx ). Listed on this page will be the ClearQuest Plug-In for SpiraTeam. Right-click on this link and save the Zip compressed folder to the hard-drive of the server where SpiraTeam is installed. Open up the compressed folder and extract the ClearQuestDataSync.dll file and place it in the C:\\Program Files\\SpiraTeam\\Bin folder (it may be SpiraTest or SpiraPlan depending on which product you're running). This folder should already contain the DataSyncService.exe and DataSyncService.exe.config files that are the primary files used for managing the data synchronization between SpiraTeam and other systems. You will then need to install the ClearQuest client application itself onto the SpiraTeam server. This is needed because the ClearQuest plugin communicates with the ClearQuest API which is part of the ClearQuest client installation. The SpiraTeam plugin will use a single ClearQuest user license when it connects to ClearQuest. If you do not have an on-premise installation of SpiraTeam, but instead are using a hosted subscription provided by Inflectra (or a third party company) you will not have access to the DataSyncService background service. In such situations, you should use the Desktop DataSync application instead. This application is described in Appendix 1 and can be used instead of the server-based DataSyncService. Configuring the Service To configure the integration service, please open up the DataSyncService.exe.config file located in C:\\Program Files\\SpiraTeam\\Bin with a text editor such as Notepad. Once open, it should look like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <configSections> <sectionGroup name= \"applicationSettings\" type= \"System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" > <section name= \"Inflectra.SpiraTest.DataSyncService.Properties.Settings\" type= \"System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" requirePermission= \"false\" /> </sectionGroup> </configSections> <applicationSettings> <Inflectra.SpiraTest.DataSyncService.Properties.Settings> <setting name= \"PollingInterval\" serializeAs= \"String\" > <value> 600000 </value> </setting> <setting name= \"WebServiceUrl\" serializeAs= \"String\" > <value> http://localhost/SpiraTeam </value> </setting> <setting name= \"Login\" serializeAs= \"String\" > <value> fredbloggs </value> </setting> <setting name= \"Password\" serializeAs= \"String\" > <value> fredbloggs </value> </setting> <setting name= \"EventLogSource\" serializeAs= \"String\" > <value> SpiraTeam Data Sync Service </value> </setting> <setting name= \"TraceLogging\" serializeAs= \"String\" > <value> False </value> </setting> </Inflectra.SpiraTest.DataSyncService.Properties.Settings> </applicationSettings> </configuration> The sections that need to be verified and possibly changed are marked in yellow above. You need to check the following information: The polling interval allows you to specify how frequently the data-synchronization service will ask SpiraTeam and the external system for new data updates. The value is specified in milliseconds and we recommend a value no smaller than 5 minutes (i.e. 300,000ms). The larger the number, the longer it will take for data to be synchronized, but the lower the network and server overhead. The base URL to your instance SpiraTeam. It is typically of the form http://<server name>/SpiraTeam. Make sure that when you enter this URL on a browser on the server itself, the application login page appears. A valid login name and password to your instance of SpiraTeam. This user needs to be a member of the project(s) that will be synchronized with ClearQuest and needs to have at least Incident create/modify/view permissions and Release create/modify/view permissions in these projects. Once you have made these changes, save the file and proceed to the next stage. Configuring the Plug-In The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the ClearQuest server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for ClearQuestDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the ClearQuest Data-Synchronization plug-in: You need to fill out the following fields for the ClearQuest Plug-in to operate correctly: Name -- this needs to be set to ClearQuestDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the ClearQuestDataSync.dll file for any reason, then you need to change the name here to match. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the name of the ClearQuest master database. In most installations this is simply called \"MASTR\". Login -- this should be set to a valid login for your ClearQuest installation. The login needs to have permissions to create and view defects within ClearQuest. Password -- this should be set to the password of the login specified above. Time Offset -- normally this should be set to zero, but if you find that issues being changed in ClearQuest are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your ClearQuest installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. Auto-Map Users -- this is not currently used and can be ignored. Custom 01 -- This should be set to the word \"True\" if you want to have the plugin restrict synchronization to only loading new incidents from SpiraTeam > ClearQuest and updating existing items. This is useful if you want to prevent existing issues in ClearQuest from being loaded into SpiraTeam. Leave blank if you want the plugin to synchronize normally. Custom 02 -- Sometimes you don't want all the incidents in SpiraTeam to be added to ClearQuest. You can optionally enter a filter definition in this box to restrict the incidents that get synchronized. The filter uses the following syntax: [Property]=[Value|*]:[Property]=[Value|*]\\ For example, to limit the incidents to only have those where List01 = 5 and Text08 = \"Hello\" and Text05 is not blank you would use: List01=5:Text08=Hello:Text05=* Custom 03 -- ClearQuest doesn't have a built-in Detected in Release field. If you would like to map a custom ClearQuest field to the SpiraTeam Detected in Release, simply enter in the name of the ClearQuest field here. Custom 04 -- ClearQuest doesn't have a built-in Resolved in Release field. If you would like to map a custom ClearQuest field to the SpiraTeam Resolved in Release, simply enter in the name of the ClearQuest field here. Custom 05 -- This is the optional \"DBset\" value, when you have installations with more than one database set. If you have a single database set you can just leave this blank. If you enter a field name in either Custom 03 or Custom 04, you will need to also map the various releases in SpiraTeam to their corresponding equivalent field value in ClearQuest. To do that, click on Planning > Releases and choose a specific release. Then in the \"ClearQuest DataSync ID\" field under the \"Custom Properties\" tab you need to enter the name of the equivalent ClearQuest release. Configuring the Data Mapping Next, you need to configure the data mapping between SpiraTeam and ClearQuest. This allows the various projects, users, incident statuses, priorities, severities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that a \"New\" item in SpiraTeam is equivalent to a \"Submitted\" item in ClearQuest (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below: Configuring the Project Mapping From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the ClearQuest plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with ClearQuest, you need to enter: External Key -- This should be set to the name of the project database in ClearQuest that will be mapped to the specific SpiraTeam project. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project. Configuring the User Mapping To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in ClearQuest: You will notice that in the Data Mapping tab for the user, there is a list of all the configured data-synchronization plug-ins. In the text box next to the ClearQuest Data-Sync plug-in you need to enter the login for this username in ClearQuest. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in ClearQuest. Click [Update] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems. Configuring the Standard Field Mapping Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the ClearQuestDataSync plug-in entry: From this screen, you need to click on Priority, Severity and Status in turn to configure their values: a) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching ClearQuest issue status name for each one. You can map multiple SpiraTeam fields to the same ClearQuest fields (e.g. Open and Reopen in SpiraTeam are both equivalent to Opened in ClearQuest), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from ClearQuest > SpiraTeam). b) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching ClearQuest priority name for each one. You can map multiple SpiraTeam fields to the same ClearQuest fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from ClearQuest > SpiraTeam). c) Incident Severity Click on the \"Severity\" hyperlink under Incident Standard Fields to bring up the Incident severity mapping configuration screen: The table lists each of the incident severities available in SpiraTeam and provides you with the ability to enter the matching ClearQuest severity name for each one. You can map multiple SpiraTeam fields to the same ClearQuest fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from ClearQuest > SpiraTeam). Configuring the Custom Property Mapping Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in ClearQuest and also for custom properties in SpiraTeam that are used to map to standard fields in ClearQuest (e.g. Project, Resolution) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for. We will consider the two different types of mapping that you might want to enter: a) Text Custom Properties Click on the hyperlink of the text custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For text custom properties there will be no values listed in the lower half of the screen. You need to lookup the ID of the custom field in ClearQuest that matches this custom property in SpiraTeam. Once you have entered the id of the custom field, click [Update]. Note: The ID can be found by looking at the URL inside ClearQuest when choosing to View/Edit the Custom Field. The URL will include the section: **id=X* where X is the numeric ID of the Custom Field inside ClearQuest.* b) List Custom Properties Click on the hyperlink of the list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For list custom properties there will be a textbox for both the custom field itself and a mapping table for each of the custom property values that need to be mapped: First you need to lookup the name of the field in ClearQuest that matches this custom property in SpiraTeam. This should be entered in the 'External Key' field below the name of the custom property. The easiest way to determine this is to use the ClearQuest Designer which lets you see all the fields associated with a ClearQuest defect: Next for each of the Property Values in the table (in the lower half of the page) you need to enter the full name of the possible field values as displayed in the ClearQuest client application. Once you have updated the various mapping sections, you are now ready to start the service. Enabling the Data-Synchronization Starting the Service When SpiraTeam is installed, a Windows Service -- SpiraTeam Data Sync Service -- is installed along with the web application. However to avoid wasting system resources, this service is initially set to run manually. To ensure continued synchronization of SpiraTeam with ClearQuest, we recommend starting the service and setting its startup-type to Automatic. To make these changes, open up the Windows Control Panel, click on the \"Administrative Tools\" link, and then choose the Services option. This will bring up the Windows Service control panel: Click on the 'SpiraTeam Data Sync Service' entry and click on the link to start the service. Then right-click the service entry and choose the option to set the startup type to 'Automatic'. This will ensure that synchronization continues between SpiraTeam and ClearQuest after a reboot of the server. Using SpiraTeam with ClearQuest Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into ClearQuest and any existing defects in ClearQuest will get loaded into SpiraTeam At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any issues with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with ClearQuest on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTest or SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Developers using ClearQuest can log new defects into either SpiraTeam or ClearQuest. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam At this point, the incident should not be acted upon inside SpiraTeam and all data changes to the issue should be made inside ClearQuest. To enforce this, you should modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with ClearQuest after that point. As the issue progresses through the customized ClearQuest workflow, changes to the type of issue, changes to its status, priority, description and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTest/SpiraTeam using the test cases managed by SpiraTest/SpiraTeam and the incidents managed on behalf of SpiraTest/SpiraTeam inside ClearQuest.","title":"ClearQuest"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-ClearQuest/#using-spirateam-with-clearquest","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the ClearQuest defect tracking system. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into ClearQuest. Once the incidents are loaded into ClearQuest as defects, the development team can then manage the lifecycle of these defects in ClearQuest, and have the status changes in ClearQuest be reflected back in SpiraTeam. In addition, any issues logged directly into ClearQuest will get imported into SpiraTeam so that they can be linked to test cases and requirements. \u25ba Note: The ClearQuest Plug-In is Not Available on the Inflectra Cloud-Based DataSync Service.","title":"Using SpiraTeam with ClearQuest"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-ClearQuest/#configuring-the-integration-service","text":"This section outlines how to configure the integration service to export incidents into ClearQuest and pick up subsequent status changes in ClearQuest and have them be updated in SpiraTeam. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam (v3.0 or higher) and a working installation of IBM Rational ClearQuest 7.0 or higher. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v3.0 before trying to integrate with ClearQuest. The steps that need to be performed to configure integration with ClearQuest are as follows: Download the latest ClearQuest Data-Sync plug-in for SpiraTeam from our website Setup the plug-in in SpiraTeam to point to the correct instance of ClearQuest Configure the data field mappings between SpiraTeam and ClearQuest Start the service and verify data transfer","title":"Configuring the Integration Service"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-ClearQuest/#download-the-clearquest-plug-in","text":"Go to the Inflectra website and open up the page that lists the various downloads available for SpiraTeam ( http://www.inflectra.com/SpiraTeam/Downloads.aspx ). Listed on this page will be the ClearQuest Plug-In for SpiraTeam. Right-click on this link and save the Zip compressed folder to the hard-drive of the server where SpiraTeam is installed. Open up the compressed folder and extract the ClearQuestDataSync.dll file and place it in the C:\\Program Files\\SpiraTeam\\Bin folder (it may be SpiraTest or SpiraPlan depending on which product you're running). This folder should already contain the DataSyncService.exe and DataSyncService.exe.config files that are the primary files used for managing the data synchronization between SpiraTeam and other systems. You will then need to install the ClearQuest client application itself onto the SpiraTeam server. This is needed because the ClearQuest plugin communicates with the ClearQuest API which is part of the ClearQuest client installation. The SpiraTeam plugin will use a single ClearQuest user license when it connects to ClearQuest. If you do not have an on-premise installation of SpiraTeam, but instead are using a hosted subscription provided by Inflectra (or a third party company) you will not have access to the DataSyncService background service. In such situations, you should use the Desktop DataSync application instead. This application is described in Appendix 1 and can be used instead of the server-based DataSyncService.","title":"Download the ClearQuest Plug-In"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-ClearQuest/#configuring-the-service","text":"To configure the integration service, please open up the DataSyncService.exe.config file located in C:\\Program Files\\SpiraTeam\\Bin with a text editor such as Notepad. Once open, it should look like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <configSections> <sectionGroup name= \"applicationSettings\" type= \"System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" > <section name= \"Inflectra.SpiraTest.DataSyncService.Properties.Settings\" type= \"System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" requirePermission= \"false\" /> </sectionGroup> </configSections> <applicationSettings> <Inflectra.SpiraTest.DataSyncService.Properties.Settings> <setting name= \"PollingInterval\" serializeAs= \"String\" > <value> 600000 </value> </setting> <setting name= \"WebServiceUrl\" serializeAs= \"String\" > <value> http://localhost/SpiraTeam </value> </setting> <setting name= \"Login\" serializeAs= \"String\" > <value> fredbloggs </value> </setting> <setting name= \"Password\" serializeAs= \"String\" > <value> fredbloggs </value> </setting> <setting name= \"EventLogSource\" serializeAs= \"String\" > <value> SpiraTeam Data Sync Service </value> </setting> <setting name= \"TraceLogging\" serializeAs= \"String\" > <value> False </value> </setting> </Inflectra.SpiraTest.DataSyncService.Properties.Settings> </applicationSettings> </configuration> The sections that need to be verified and possibly changed are marked in yellow above. You need to check the following information: The polling interval allows you to specify how frequently the data-synchronization service will ask SpiraTeam and the external system for new data updates. The value is specified in milliseconds and we recommend a value no smaller than 5 minutes (i.e. 300,000ms). The larger the number, the longer it will take for data to be synchronized, but the lower the network and server overhead. The base URL to your instance SpiraTeam. It is typically of the form http://<server name>/SpiraTeam. Make sure that when you enter this URL on a browser on the server itself, the application login page appears. A valid login name and password to your instance of SpiraTeam. This user needs to be a member of the project(s) that will be synchronized with ClearQuest and needs to have at least Incident create/modify/view permissions and Release create/modify/view permissions in these projects. Once you have made these changes, save the file and proceed to the next stage.","title":"Configuring the Service"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-ClearQuest/#configuring-the-plug-in","text":"The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the ClearQuest server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for ClearQuestDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the ClearQuest Data-Synchronization plug-in: You need to fill out the following fields for the ClearQuest Plug-in to operate correctly: Name -- this needs to be set to ClearQuestDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the ClearQuestDataSync.dll file for any reason, then you need to change the name here to match. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the name of the ClearQuest master database. In most installations this is simply called \"MASTR\". Login -- this should be set to a valid login for your ClearQuest installation. The login needs to have permissions to create and view defects within ClearQuest. Password -- this should be set to the password of the login specified above. Time Offset -- normally this should be set to zero, but if you find that issues being changed in ClearQuest are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your ClearQuest installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. Auto-Map Users -- this is not currently used and can be ignored. Custom 01 -- This should be set to the word \"True\" if you want to have the plugin restrict synchronization to only loading new incidents from SpiraTeam > ClearQuest and updating existing items. This is useful if you want to prevent existing issues in ClearQuest from being loaded into SpiraTeam. Leave blank if you want the plugin to synchronize normally. Custom 02 -- Sometimes you don't want all the incidents in SpiraTeam to be added to ClearQuest. You can optionally enter a filter definition in this box to restrict the incidents that get synchronized. The filter uses the following syntax: [Property]=[Value|*]:[Property]=[Value|*]\\ For example, to limit the incidents to only have those where List01 = 5 and Text08 = \"Hello\" and Text05 is not blank you would use: List01=5:Text08=Hello:Text05=* Custom 03 -- ClearQuest doesn't have a built-in Detected in Release field. If you would like to map a custom ClearQuest field to the SpiraTeam Detected in Release, simply enter in the name of the ClearQuest field here. Custom 04 -- ClearQuest doesn't have a built-in Resolved in Release field. If you would like to map a custom ClearQuest field to the SpiraTeam Resolved in Release, simply enter in the name of the ClearQuest field here. Custom 05 -- This is the optional \"DBset\" value, when you have installations with more than one database set. If you have a single database set you can just leave this blank. If you enter a field name in either Custom 03 or Custom 04, you will need to also map the various releases in SpiraTeam to their corresponding equivalent field value in ClearQuest. To do that, click on Planning > Releases and choose a specific release. Then in the \"ClearQuest DataSync ID\" field under the \"Custom Properties\" tab you need to enter the name of the equivalent ClearQuest release.","title":"Configuring the Plug-In"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-ClearQuest/#configuring-the-data-mapping","text":"Next, you need to configure the data mapping between SpiraTeam and ClearQuest. This allows the various projects, users, incident statuses, priorities, severities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that a \"New\" item in SpiraTeam is equivalent to a \"Submitted\" item in ClearQuest (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below:","title":"Configuring the Data Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-ClearQuest/#configuring-the-project-mapping","text":"From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the ClearQuest plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with ClearQuest, you need to enter: External Key -- This should be set to the name of the project database in ClearQuest that will be mapped to the specific SpiraTeam project. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project.","title":"Configuring the Project Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-ClearQuest/#configuring-the-user-mapping","text":"To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in ClearQuest: You will notice that in the Data Mapping tab for the user, there is a list of all the configured data-synchronization plug-ins. In the text box next to the ClearQuest Data-Sync plug-in you need to enter the login for this username in ClearQuest. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in ClearQuest. Click [Update] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems.","title":"Configuring the User Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-ClearQuest/#configuring-the-standard-field-mapping","text":"Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the ClearQuestDataSync plug-in entry: From this screen, you need to click on Priority, Severity and Status in turn to configure their values: a) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching ClearQuest issue status name for each one. You can map multiple SpiraTeam fields to the same ClearQuest fields (e.g. Open and Reopen in SpiraTeam are both equivalent to Opened in ClearQuest), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from ClearQuest > SpiraTeam). b) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching ClearQuest priority name for each one. You can map multiple SpiraTeam fields to the same ClearQuest fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from ClearQuest > SpiraTeam). c) Incident Severity Click on the \"Severity\" hyperlink under Incident Standard Fields to bring up the Incident severity mapping configuration screen: The table lists each of the incident severities available in SpiraTeam and provides you with the ability to enter the matching ClearQuest severity name for each one. You can map multiple SpiraTeam fields to the same ClearQuest fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from ClearQuest > SpiraTeam).","title":"Configuring the Standard Field Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-ClearQuest/#configuring-the-custom-property-mapping","text":"Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in ClearQuest and also for custom properties in SpiraTeam that are used to map to standard fields in ClearQuest (e.g. Project, Resolution) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for. We will consider the two different types of mapping that you might want to enter: a) Text Custom Properties Click on the hyperlink of the text custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For text custom properties there will be no values listed in the lower half of the screen. You need to lookup the ID of the custom field in ClearQuest that matches this custom property in SpiraTeam. Once you have entered the id of the custom field, click [Update]. Note: The ID can be found by looking at the URL inside ClearQuest when choosing to View/Edit the Custom Field. The URL will include the section: **id=X* where X is the numeric ID of the Custom Field inside ClearQuest.* b) List Custom Properties Click on the hyperlink of the list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For list custom properties there will be a textbox for both the custom field itself and a mapping table for each of the custom property values that need to be mapped: First you need to lookup the name of the field in ClearQuest that matches this custom property in SpiraTeam. This should be entered in the 'External Key' field below the name of the custom property. The easiest way to determine this is to use the ClearQuest Designer which lets you see all the fields associated with a ClearQuest defect: Next for each of the Property Values in the table (in the lower half of the page) you need to enter the full name of the possible field values as displayed in the ClearQuest client application. Once you have updated the various mapping sections, you are now ready to start the service.","title":"Configuring the Custom Property Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-ClearQuest/#enabling-the-data-synchronization","text":"","title":"Enabling the Data-Synchronization"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-ClearQuest/#starting-the-service","text":"When SpiraTeam is installed, a Windows Service -- SpiraTeam Data Sync Service -- is installed along with the web application. However to avoid wasting system resources, this service is initially set to run manually. To ensure continued synchronization of SpiraTeam with ClearQuest, we recommend starting the service and setting its startup-type to Automatic. To make these changes, open up the Windows Control Panel, click on the \"Administrative Tools\" link, and then choose the Services option. This will bring up the Windows Service control panel: Click on the 'SpiraTeam Data Sync Service' entry and click on the link to start the service. Then right-click the service entry and choose the option to set the startup type to 'Automatic'. This will ensure that synchronization continues between SpiraTeam and ClearQuest after a reboot of the server.","title":"Starting the Service"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-ClearQuest/#using-spirateam-with-clearquest_1","text":"Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into ClearQuest and any existing defects in ClearQuest will get loaded into SpiraTeam At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any issues with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with ClearQuest on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTest or SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Developers using ClearQuest can log new defects into either SpiraTeam or ClearQuest. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam At this point, the incident should not be acted upon inside SpiraTeam and all data changes to the issue should be made inside ClearQuest. To enforce this, you should modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with ClearQuest after that point. As the issue progresses through the customized ClearQuest workflow, changes to the type of issue, changes to its status, priority, description and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTest/SpiraTeam using the test cases managed by SpiraTest/SpiraTeam and the incidents managed on behalf of SpiraTest/SpiraTeam inside ClearQuest.","title":"Using SpiraTeam with ClearQuest"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-IBM-RTC/","text":"Using SpiraTeam with IBM RTC This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the IBM Rational Team Concert (hereafter referred to as RTC) work item tracking system. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into RTC. Once the incidents are loaded into RTC as work items, the development team can then manage the lifecycle of these work items in RTC, and have the status changes in RTC be reflected back in SpiraTeam. In addition, any issues logged directly into RTC will get imported into SpiraTeam so that they can be linked to test cases and requirements. STOP! Please make sure you have first read the Instructions in Setup before proceeding! Configuring the Plug-In The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the RTC server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for RtcDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the RTC Data-Synchronization plug-in: You need to fill out the following fields for the RTC Plug-in to operate correctly: Name -- this needs to be set to RtcDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the RtcDataSync.dll file for any reason, then you need to change the name here to match. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should be the base URL for connecting to your instance of RTC (for example https://servername:9443/ccm ). Login -- this should be set to a valid login for your RTC installation. The login needs to have permissions to create and view work items within RTC. Password -- this should be set to the password of the login specified above. Time Offset -- normally this should be set to zero, but if you find that issues being changed in RTC are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your RTC installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. Auto-Map Users -- this is not currently used and can be ignored. Custom 01 -- this is not currently used and can be ignored Custom 02 -- this is not currently used and can be ignored Custom 03 -- this is not currently used and can be ignored Custom 04 -- this is not currently used and can be ignored Custom 05 -- this is not currently used and can be ignored Configuring the Data Mapping Next, you need to configure the data mapping between SpiraTeam and RTC. This allows the various projects, users, incident statuses, priorities, severities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that a \"New\" item in SpiraTeam is equivalent to a \"New\" item in RTC (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below: Configuring the Project Mapping From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the RTC plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with RTC, you need to enter: External Key -- This should be set to the display name of the project in RTC that will be mapped to the specific SpiraTeam project. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project. Configuring the Standard Field Mapping Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the RtcDataSync plug-in entry: From this screen, you need to click on Status and Type in turn to configure their values: a) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching RTC work item status name for each one. You can map multiple SpiraTeam fields to the same RTC fields (e.g. Closed and Resolved in SpiraTeam are both equivalent to Complete in RTC), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from RTC > SpiraTeam). b) Incident Type Click on the \"Type\" hyperlink under Incident Standard Fields to bring up the Incident type mapping configuration screen: The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching RTC work item type name for each one. You can map multiple SpiraTeam fields to the same RTC fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from RTC > SpiraTeam). Configuring the Custom Property Mapping Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used to associate custom properties in SpiraTeam that map to custom fields in RTC. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for. We will consider the two different types of mapping that you might want to enter: a) Text Custom Properties Click on the hyperlink of the text custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For text custom properties there will be no values listed in the lower half of the screen. You need to obtain the fully qualified XML name of the custom field in RTC that matches this custom property in SpiraTeam from the RTC documentation. Once you have entered the name of the custom field, click [Update]. b) List Custom Properties Click on the hyperlink of the list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For list custom properties there will be a textbox for both the custom field itself and a mapping table for each of the custom property values that need to be mapped: First you need to obtain the fully qualified XML name of the field in RTC that matches this custom property in SpiraTeam. This should be entered in the 'External Key' field below the name of the custom property. Then you need enter the possible values in RTC for the custom property, mapping each one to the corresponding SpiraTeam custom property value. **Once you have updated the various mapping sections, you are now ready to use the service. ** Using SpiraTeam with RTC Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into RTC and any existing work items in RTC will get loaded into SpiraTeam At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any issues with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( http://www.inflectra.com/Support ) who will help you troubleshoot the problem. To use SpiraTeam with RTC on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTest or SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Developers using RTC can log new work items into either SpiraTeam or RTC. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam At this point, the incident should not be acted upon inside SpiraTeam and all data changes to the issue should be made inside RTC. To enforce this, you should modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with RTC after that point. As the issue progresses through the customized RTC workflow, changes to the type of work item, changes to its status, description and custom fields will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTest/SpiraTeam using the test cases managed by SpiraTest/SpiraTeam and the incidents managed on behalf of SpiraTest/SpiraTeam inside RTC.","title":"RTC"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-IBM-RTC/#using-spirateam-with-ibm-rtc","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the IBM Rational Team Concert (hereafter referred to as RTC) work item tracking system. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into RTC. Once the incidents are loaded into RTC as work items, the development team can then manage the lifecycle of these work items in RTC, and have the status changes in RTC be reflected back in SpiraTeam. In addition, any issues logged directly into RTC will get imported into SpiraTeam so that they can be linked to test cases and requirements. STOP! Please make sure you have first read the Instructions in Setup before proceeding!","title":"Using SpiraTeam with IBM RTC"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-IBM-RTC/#configuring-the-plug-in","text":"The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the RTC server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for RtcDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the RTC Data-Synchronization plug-in: You need to fill out the following fields for the RTC Plug-in to operate correctly: Name -- this needs to be set to RtcDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the RtcDataSync.dll file for any reason, then you need to change the name here to match. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should be the base URL for connecting to your instance of RTC (for example https://servername:9443/ccm ). Login -- this should be set to a valid login for your RTC installation. The login needs to have permissions to create and view work items within RTC. Password -- this should be set to the password of the login specified above. Time Offset -- normally this should be set to zero, but if you find that issues being changed in RTC are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your RTC installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. Auto-Map Users -- this is not currently used and can be ignored. Custom 01 -- this is not currently used and can be ignored Custom 02 -- this is not currently used and can be ignored Custom 03 -- this is not currently used and can be ignored Custom 04 -- this is not currently used and can be ignored Custom 05 -- this is not currently used and can be ignored","title":"Configuring the Plug-In"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-IBM-RTC/#configuring-the-data-mapping","text":"Next, you need to configure the data mapping between SpiraTeam and RTC. This allows the various projects, users, incident statuses, priorities, severities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that a \"New\" item in SpiraTeam is equivalent to a \"New\" item in RTC (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below:","title":"Configuring the Data Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-IBM-RTC/#configuring-the-project-mapping","text":"From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the RTC plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with RTC, you need to enter: External Key -- This should be set to the display name of the project in RTC that will be mapped to the specific SpiraTeam project. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project.","title":"Configuring the Project Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-IBM-RTC/#configuring-the-standard-field-mapping","text":"Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the RtcDataSync plug-in entry: From this screen, you need to click on Status and Type in turn to configure their values: a) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching RTC work item status name for each one. You can map multiple SpiraTeam fields to the same RTC fields (e.g. Closed and Resolved in SpiraTeam are both equivalent to Complete in RTC), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from RTC > SpiraTeam). b) Incident Type Click on the \"Type\" hyperlink under Incident Standard Fields to bring up the Incident type mapping configuration screen: The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching RTC work item type name for each one. You can map multiple SpiraTeam fields to the same RTC fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from RTC > SpiraTeam).","title":"Configuring the Standard Field Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-IBM-RTC/#configuring-the-custom-property-mapping","text":"Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used to associate custom properties in SpiraTeam that map to custom fields in RTC. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for. We will consider the two different types of mapping that you might want to enter: a) Text Custom Properties Click on the hyperlink of the text custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For text custom properties there will be no values listed in the lower half of the screen. You need to obtain the fully qualified XML name of the custom field in RTC that matches this custom property in SpiraTeam from the RTC documentation. Once you have entered the name of the custom field, click [Update]. b) List Custom Properties Click on the hyperlink of the list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For list custom properties there will be a textbox for both the custom field itself and a mapping table for each of the custom property values that need to be mapped: First you need to obtain the fully qualified XML name of the field in RTC that matches this custom property in SpiraTeam. This should be entered in the 'External Key' field below the name of the custom property. Then you need enter the possible values in RTC for the custom property, mapping each one to the corresponding SpiraTeam custom property value. **Once you have updated the various mapping sections, you are now ready to use the service. **","title":"Configuring the Custom Property Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-IBM-RTC/#using-spirateam-with-rtc","text":"Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into RTC and any existing work items in RTC will get loaded into SpiraTeam At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any issues with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( http://www.inflectra.com/Support ) who will help you troubleshoot the problem. To use SpiraTeam with RTC on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTest or SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Developers using RTC can log new work items into either SpiraTeam or RTC. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam At this point, the incident should not be acted upon inside SpiraTeam and all data changes to the issue should be made inside RTC. To enforce this, you should modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with RTC after that point. As the issue progresses through the customized RTC workflow, changes to the type of work item, changes to its status, description and custom fields will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTest/SpiraTeam using the test cases managed by SpiraTest/SpiraTeam and the incidents managed on behalf of SpiraTest/SpiraTeam inside RTC.","title":"Using SpiraTeam with RTC"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-3--4/","text":"Using SpiraTeam with JIRA 3 / 4 This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the JIRA issue/bug tracking system versions 3.0 -- 4.0. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into JIRA. Once the incidents are loaded into JIRA as issues, the development team can then manage the lifecycle of these issues in JIRA, and have the status changes in JIRA be reflected back in SpiraTeam. In addition, if you are using JIRA 4.x or higher, any issues logged directly into JIRA will get imported into SpiraTeam so that they can be linked to test cases and requirements. Set up data synchronization STOP! Please make sure you have first read the Instructions in Setup before proceeding! Configuring the Plug-In The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the JIRA server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for JiraDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the JIRA Data-Synchronization plug-in: You need to fill out the following fields for the JIRA Plug-in to operate correctly: Name -- this needs to be set to JiraDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the JiraDataSync.dll file for any reason, then you need to change the name here to match. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the full URL to the JIRA installation's web-service API. This is typically http://<jira server name>/rpc/soap/jirasoapservice-v2. Login -- this should be set to a valid login to the JIRA installation. The login needs to have permissions to create and view issues and versions within JIRA. Password -- this should be set to the password of the login specified above. Time Offset -- normally this should be set to zero, but if you find that issues being changed in JIRA are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your JIRA installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. The remaining fields work differently depending on which version of the plugin you are using (JIRA 3.x or JIRA 4.x): a) JIRA 3.x Plugin Please fill out the fields as follows: Auto-Map Users -- this is not currently used and can be ignored. Custom 01 -- This is used to specify a JIRA custom property that should be mapped to the built-in SpiraTeam Incident Severity field (which does not exist in JIRA). This can be left empty for now and will be discussed below in Configuring the Data Mapping . Custom 02 -- 05 -- these are not currently used by the plug-in and should be left blank. b) JIRA 4.x Plugin Please fill out the fields as follows: Auto-Map Users -- This changes the way that the plugin maps users in SpiraTeam to those in JIRA: **Auto-Map = True **With this setting, all users in SpiraTeam need to have the same username as those in JIRA. If this is the case then you do not need to perform the user-mapping task . This is a big time-saver if you can guarantee that all usernames are the same in both systems. Auto-Map = False **With this setting, users in SpiraTeam and JIRA are free to have different usernames because you specify the corresponding JIRA name for each user as outlined in Configuring the User Mapping . ** Custom 01 -- This is used to specify a JIRA custom property that should be mapped to the built-in SpiraTeam Incident Severity field (which does not exist in JIRA). This can be left empty for now and will be discussed below in Configuring the Data Mapping . Custom 02 -- This should be set to the word \"True\" if you want to have the new issues submitted to JIRA be submitted using a specified SecurityLevel. If you're not using the security level feature of JIRA, leave the field blank. Custom 03 -- This should be set to the word \"True\" if you want to have the plugin restrict synchronization to only loading new incidents from SpiraTeam to JIRA and updating existing items. This is useful if you want to prevent existing issues in JIRA from being loaded into SpiraTeam. Leave blank if you want the plugin to synchronize normally. Custom 04 -- This should be set to the word \"True\" if you want to have the plugin copy file attachments from SpiraTeam to JIRA. This can use additional system resources and may fail if the files are too large for JIRA's API to handle. Leave the field blank if you want the default behavior -- which is to not synchronize attachments. Custom 05 - When you click \"Force Resync\" inside SpiraTeam it will attempt to resynchronize all incidents/issues from 1/1/1900. Sometimes that causes the JIRA API to timeout or exceed the maximum allowed number of results if there are a large number of existing issues in JIRA. You can set this field to a specific year (e.g. 1995) or year and month (e.g. 2010-11) to restrict how far back the system will look for existing issues. If you leave this field blank it will use the default value of \"1900-01\". Note: For most users, we recommend leaving Custom 01 -- Custom 05 blank. Configuring the Data Mapping Next, you need to configure the data mapping between SpiraTeam and JIRA. This allows the various projects, users, releases, incident types, statuses, priorities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Enhancement\" in SpiraTeam is the same as a \"New Feature\" in JIRA (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases (equivalent to JIRA versions) in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below: Configuring the Project Mapping From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the JIRA plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with JIRA, you need to enter: External Key -- This should be set to the name of the project token in JIRA. Typically this is a three-letter acronym for the project. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project. Configuring the User Mapping To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in JIRA: You will notice that below the Active flag for the user is a list of all the configured data-synchronization plug-ins. In the text box next to the JIRA Data-Sync plug-in you need to enter the login for this username in JIRA. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in JIRA. Click [Update] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems. Configuring the Release Mapping When the data-synchronization service runs, when it comes across a release/iteration in SpiraTeam that it has not seen before, it will create a corresponding \"Version\" in JIRA. Similarly if it comes across a new Version in JIRA that it has not seen before, it will create a new Release in SpiraTeam. Therefore when using both systems together, it is recommended that you only enter new Releases/Versions in one system and let the data-synchronization service add them to the other system. However you may start out with the situation where you already have pre-existing Releases/Version in both systems that you need to associate in the data-mapping. If you don't do this, you may find that duplicates get created when you first enable the data-synchronization service. Therefore for any Releases/Iterations that already exist in BOTH systems please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields custom properties configured for Releases, you will see an additional text property called \" JiraDataSync ID \" that is used to store the mapped external identifier for the equivalent Version in JIRA. You need to locate the ID of the equivalent version in JIRA, enter it into this text-box and click [Save]. You should now repeat for all the other pre-existing releases. Note: The JIRA ID can be found by looking at the URL inside JIRA when choosing to View/Edit the version name/description. The URL will include the section: **id=X* where X is the numeric ID of the version inside JIRA.* Configuring the Standard Field Mapping Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the JiraDataSync plug-in entry: From this screen, you need to click on Priority, Severity, Status and Type in turn to configure their values: a) Incident Type Click on the \"Type\" hyperlink under Incident Standard Fields to bring up the Incident type mapping configuration screen: The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching JIRA issue type ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields (e.g. Bug and Incident in SpiraTeam are both equivalent to Bug in JIRA), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). Note: The JIRA ID can be found by looking at the URL inside JIRA when choosing to View/Edit the Issue Type. The URL will include the section: **id=X* where X is the numeric ID of the Issue Type inside JIRA.* b) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching JIRA issue status ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields (e.g. New and Open in SpiraTeam are both equivalent to Open in JIRA), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). We recommend that you always point the New and Open statuses inside SpiraTeam to point to the ID for \"Open\" inside JIRA and make Open in SpiraTeam the Primary status of the two. This is recommended so that as new incidents in SpiraTeam get synched over to JIRA, they will get switched to the Open status in JIRA which will then be synched back to \"Open\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with JIRA and those that haven't. Note: The JIRA ID can be found by looking at the URL inside JIRA when choosing to View/Edit the Issue Status. The URL will include the section: **id=X* where X is the numeric ID of the Issue Status inside JIRA.* c) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching JIRA priority ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). Note: The JIRA ID can be found by looking at the URL inside JIRA when choosing to View/Edit the Priority. The URL will include the section: **id=X* where X is the numeric ID of the Priority inside JIRA.* d) Incident Severity (Optional) Click on the \"Severity\" hyperlink under Incident Standard Fields to bring up the Incident severity mapping configuration screen: Unlike the other incident standard fields, JIRA doesn't actually have a built-in field for storing the severity of an issue, so if you want to be able to see the SpiraTeam incident severity in JIRA, you'll need to create a JIRA custom list field to store the different severity values. If you don't want to synchronize severity values with JIRA, you can skip the rest of this section. Once you have created a custom field in JIRA to contain the list of severity values, you need to now populate the above table with the name (Not the ID) of the severity custom property values inside JIRA and click Update. Secondly you need to go to the Plug-in configuration screen: On this screen you need to enter the ID of the custom field that you're using to store severities in JIRA and populate the Custom 01 property with this value (see above). Note: The ID can be found by looking at the URL inside JIRA when choosing to View/Edit the Custom Field. The URL will include the section: **id=X* where X is the numeric ID of the Custom Field inside JIRA.* Configuring the Custom Property Mapping Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in JIRA and also for custom properties in SpiraTeam that are used to map to standard fields in JIRA (Component, Environment, Resolution and SecurityLevel) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for. We will consider the four different types of mapping that you might want to enter: a) Text Custom Properties Click on the hyperlink of the text custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For text custom properties there will be no values listed in the lower half of the screen. You need to lookup the ID of the custom field in JIRA that matches this custom property in SpiraTeam. Once you have entered the id of the custom field, click [Update]. Note: The ID can be found by looking at the URL inside JIRA when choosing to View/Edit the Custom Field. The URL will include the section: **id=X* where X is the numeric ID of the Custom Field inside JIRA.* b) List Custom Properties Click on the hyperlink of the list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For list custom properties there will be a textbox for both the custom field itself and a mapping table for each of the custom property values that need to be mapped: First you need to lookup the ID of the custom field in JIRA that matches this custom property in SpiraTeam. This should be entered in the 'External Key' field below the name of the custom property. Note: The ID can be found by looking at the URL inside JIRA when choosing to View/Edit the Custom Field. The URL will include the section: **id=X* where X is the numeric ID of the Custom Field inside JIRA.* Next for each of the Property Values in the table (in the lower half of the page) you need to enter the full name (not the id this time) of the custom field value as specified in JIRA. c) JIRA's Component Field If your instance of JIRA requires that all new issues are submitted with a 'Component' then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various component names that exist inside JIRA. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \" Component \" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Component field in JIRA. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the JIRA ID of the various Components that are configured in JIRA. The external ID can be found by looking at the URL inside JIRA which choosing to View/Edit the component name/description. d) JIRA's Resolution Field If you would like the values of the JIRA ' Resolution' field to be synchronized back to SpiraTeam, then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various resolution names that exist inside JIRA. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Resolution\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Resolution field in JIRA. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the JIRA ID of the various Resolutions that are configured in JIRA. The external ID can be found by looking at the URL inside JIRA which choosing to View/Edit the resolution name/description. e) JIRA's Environment Field If your instance of JIRA requires that all new issues are submitted with an 'Environment' description specified, then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the environment description within SpiraTeam. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \" Environment \" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Environment field in JIRA. f) JIRA's Security Level Field (JIRA 4.x Plug-In Only) If your instance of JIRA requires that all new issues are submitted with a 'Security Level' then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various security levels that exist inside JIRA. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. First you need to enter the word \" SecurityLevel \" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Security Level field in JIRA. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the JIRA ID of the various Security Levels that are configured in JIRA. The external ID can be found by looking at the URL inside JIRA which choosing to View/Edit the security level name/description. g) JIRA's Issue Key Field (JIRA 4.x Plug-In Only) It can be convenient to create a SpiraTeam custom property to store the JIRA Issue Key (the ID used to identify an issue in JIRA). This allows you to display a list of incients in SpiraTest and see the corresponding JIRA ID in the same list. You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the JIRA issue key within SpiraTeam. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \" JiraIssueKey \" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Issue Key field in JIRA. Once you have updated the various mapping sections, you are now ready to start using the system. Using SpiraTeam with JIRA Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into JIRA and if using JIRA 4.x, any existing issues in JIRA will get loaded into SpiraTeam At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any issues with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with JIRA on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTest or SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Developers using JIRA 4.x can log new defects into either SpiraTeam or JIRA. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam At this point, the incident should not be acted upon inside SpiraTeam and all data changes to the issue should be made inside JIRA. To enforce this, you should modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with JIRA after that point. As the issue progresses through the customized JIRA workflow, changes to the type of issue, changes to its status, priority, description and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTest/SpiraTeam using the test cases managed by SpiraTest/SpiraTeam and the incidents managed on behalf of SpiraTest/SpiraTeam inside JIRA.","title":"JIRA 3, 4"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-3--4/#using-spirateam-with-jira-3-4","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the JIRA issue/bug tracking system versions 3.0 -- 4.0. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into JIRA. Once the incidents are loaded into JIRA as issues, the development team can then manage the lifecycle of these issues in JIRA, and have the status changes in JIRA be reflected back in SpiraTeam. In addition, if you are using JIRA 4.x or higher, any issues logged directly into JIRA will get imported into SpiraTeam so that they can be linked to test cases and requirements. Set up data synchronization STOP! Please make sure you have first read the Instructions in Setup before proceeding!","title":"Using SpiraTeam with JIRA 3 / 4"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-3--4/#configuring-the-plug-in","text":"The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the JIRA server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for JiraDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the JIRA Data-Synchronization plug-in: You need to fill out the following fields for the JIRA Plug-in to operate correctly: Name -- this needs to be set to JiraDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the JiraDataSync.dll file for any reason, then you need to change the name here to match. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the full URL to the JIRA installation's web-service API. This is typically http://<jira server name>/rpc/soap/jirasoapservice-v2. Login -- this should be set to a valid login to the JIRA installation. The login needs to have permissions to create and view issues and versions within JIRA. Password -- this should be set to the password of the login specified above. Time Offset -- normally this should be set to zero, but if you find that issues being changed in JIRA are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your JIRA installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. The remaining fields work differently depending on which version of the plugin you are using (JIRA 3.x or JIRA 4.x): a) JIRA 3.x Plugin Please fill out the fields as follows: Auto-Map Users -- this is not currently used and can be ignored. Custom 01 -- This is used to specify a JIRA custom property that should be mapped to the built-in SpiraTeam Incident Severity field (which does not exist in JIRA). This can be left empty for now and will be discussed below in Configuring the Data Mapping . Custom 02 -- 05 -- these are not currently used by the plug-in and should be left blank. b) JIRA 4.x Plugin Please fill out the fields as follows: Auto-Map Users -- This changes the way that the plugin maps users in SpiraTeam to those in JIRA: **Auto-Map = True **With this setting, all users in SpiraTeam need to have the same username as those in JIRA. If this is the case then you do not need to perform the user-mapping task . This is a big time-saver if you can guarantee that all usernames are the same in both systems. Auto-Map = False **With this setting, users in SpiraTeam and JIRA are free to have different usernames because you specify the corresponding JIRA name for each user as outlined in Configuring the User Mapping . ** Custom 01 -- This is used to specify a JIRA custom property that should be mapped to the built-in SpiraTeam Incident Severity field (which does not exist in JIRA). This can be left empty for now and will be discussed below in Configuring the Data Mapping . Custom 02 -- This should be set to the word \"True\" if you want to have the new issues submitted to JIRA be submitted using a specified SecurityLevel. If you're not using the security level feature of JIRA, leave the field blank. Custom 03 -- This should be set to the word \"True\" if you want to have the plugin restrict synchronization to only loading new incidents from SpiraTeam to JIRA and updating existing items. This is useful if you want to prevent existing issues in JIRA from being loaded into SpiraTeam. Leave blank if you want the plugin to synchronize normally. Custom 04 -- This should be set to the word \"True\" if you want to have the plugin copy file attachments from SpiraTeam to JIRA. This can use additional system resources and may fail if the files are too large for JIRA's API to handle. Leave the field blank if you want the default behavior -- which is to not synchronize attachments. Custom 05 - When you click \"Force Resync\" inside SpiraTeam it will attempt to resynchronize all incidents/issues from 1/1/1900. Sometimes that causes the JIRA API to timeout or exceed the maximum allowed number of results if there are a large number of existing issues in JIRA. You can set this field to a specific year (e.g. 1995) or year and month (e.g. 2010-11) to restrict how far back the system will look for existing issues. If you leave this field blank it will use the default value of \"1900-01\". Note: For most users, we recommend leaving Custom 01 -- Custom 05 blank.","title":"Configuring the Plug-In"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-3--4/#configuring-the-data-mapping","text":"Next, you need to configure the data mapping between SpiraTeam and JIRA. This allows the various projects, users, releases, incident types, statuses, priorities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Enhancement\" in SpiraTeam is the same as a \"New Feature\" in JIRA (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases (equivalent to JIRA versions) in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below:","title":"Configuring the Data Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-3--4/#configuring-the-project-mapping","text":"From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the JIRA plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with JIRA, you need to enter: External Key -- This should be set to the name of the project token in JIRA. Typically this is a three-letter acronym for the project. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project.","title":"Configuring the Project Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-3--4/#configuring-the-user-mapping","text":"To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in JIRA: You will notice that below the Active flag for the user is a list of all the configured data-synchronization plug-ins. In the text box next to the JIRA Data-Sync plug-in you need to enter the login for this username in JIRA. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in JIRA. Click [Update] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems.","title":"Configuring the User Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-3--4/#configuring-the-release-mapping","text":"When the data-synchronization service runs, when it comes across a release/iteration in SpiraTeam that it has not seen before, it will create a corresponding \"Version\" in JIRA. Similarly if it comes across a new Version in JIRA that it has not seen before, it will create a new Release in SpiraTeam. Therefore when using both systems together, it is recommended that you only enter new Releases/Versions in one system and let the data-synchronization service add them to the other system. However you may start out with the situation where you already have pre-existing Releases/Version in both systems that you need to associate in the data-mapping. If you don't do this, you may find that duplicates get created when you first enable the data-synchronization service. Therefore for any Releases/Iterations that already exist in BOTH systems please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields custom properties configured for Releases, you will see an additional text property called \" JiraDataSync ID \" that is used to store the mapped external identifier for the equivalent Version in JIRA. You need to locate the ID of the equivalent version in JIRA, enter it into this text-box and click [Save]. You should now repeat for all the other pre-existing releases. Note: The JIRA ID can be found by looking at the URL inside JIRA when choosing to View/Edit the version name/description. The URL will include the section: **id=X* where X is the numeric ID of the version inside JIRA.*","title":"Configuring the Release Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-3--4/#configuring-the-standard-field-mapping","text":"Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the JiraDataSync plug-in entry: From this screen, you need to click on Priority, Severity, Status and Type in turn to configure their values: a) Incident Type Click on the \"Type\" hyperlink under Incident Standard Fields to bring up the Incident type mapping configuration screen: The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching JIRA issue type ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields (e.g. Bug and Incident in SpiraTeam are both equivalent to Bug in JIRA), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). Note: The JIRA ID can be found by looking at the URL inside JIRA when choosing to View/Edit the Issue Type. The URL will include the section: **id=X* where X is the numeric ID of the Issue Type inside JIRA.* b) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching JIRA issue status ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields (e.g. New and Open in SpiraTeam are both equivalent to Open in JIRA), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). We recommend that you always point the New and Open statuses inside SpiraTeam to point to the ID for \"Open\" inside JIRA and make Open in SpiraTeam the Primary status of the two. This is recommended so that as new incidents in SpiraTeam get synched over to JIRA, they will get switched to the Open status in JIRA which will then be synched back to \"Open\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with JIRA and those that haven't. Note: The JIRA ID can be found by looking at the URL inside JIRA when choosing to View/Edit the Issue Status. The URL will include the section: **id=X* where X is the numeric ID of the Issue Status inside JIRA.* c) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching JIRA priority ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). Note: The JIRA ID can be found by looking at the URL inside JIRA when choosing to View/Edit the Priority. The URL will include the section: **id=X* where X is the numeric ID of the Priority inside JIRA.* d) Incident Severity (Optional) Click on the \"Severity\" hyperlink under Incident Standard Fields to bring up the Incident severity mapping configuration screen: Unlike the other incident standard fields, JIRA doesn't actually have a built-in field for storing the severity of an issue, so if you want to be able to see the SpiraTeam incident severity in JIRA, you'll need to create a JIRA custom list field to store the different severity values. If you don't want to synchronize severity values with JIRA, you can skip the rest of this section. Once you have created a custom field in JIRA to contain the list of severity values, you need to now populate the above table with the name (Not the ID) of the severity custom property values inside JIRA and click Update. Secondly you need to go to the Plug-in configuration screen: On this screen you need to enter the ID of the custom field that you're using to store severities in JIRA and populate the Custom 01 property with this value (see above). Note: The ID can be found by looking at the URL inside JIRA when choosing to View/Edit the Custom Field. The URL will include the section: **id=X* where X is the numeric ID of the Custom Field inside JIRA.*","title":"Configuring the Standard Field Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-3--4/#configuring-the-custom-property-mapping","text":"Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in JIRA and also for custom properties in SpiraTeam that are used to map to standard fields in JIRA (Component, Environment, Resolution and SecurityLevel) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for. We will consider the four different types of mapping that you might want to enter: a) Text Custom Properties Click on the hyperlink of the text custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For text custom properties there will be no values listed in the lower half of the screen. You need to lookup the ID of the custom field in JIRA that matches this custom property in SpiraTeam. Once you have entered the id of the custom field, click [Update]. Note: The ID can be found by looking at the URL inside JIRA when choosing to View/Edit the Custom Field. The URL will include the section: **id=X* where X is the numeric ID of the Custom Field inside JIRA.* b) List Custom Properties Click on the hyperlink of the list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For list custom properties there will be a textbox for both the custom field itself and a mapping table for each of the custom property values that need to be mapped: First you need to lookup the ID of the custom field in JIRA that matches this custom property in SpiraTeam. This should be entered in the 'External Key' field below the name of the custom property. Note: The ID can be found by looking at the URL inside JIRA when choosing to View/Edit the Custom Field. The URL will include the section: **id=X* where X is the numeric ID of the Custom Field inside JIRA.* Next for each of the Property Values in the table (in the lower half of the page) you need to enter the full name (not the id this time) of the custom field value as specified in JIRA. c) JIRA's Component Field If your instance of JIRA requires that all new issues are submitted with a 'Component' then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various component names that exist inside JIRA. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \" Component \" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Component field in JIRA. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the JIRA ID of the various Components that are configured in JIRA. The external ID can be found by looking at the URL inside JIRA which choosing to View/Edit the component name/description. d) JIRA's Resolution Field If you would like the values of the JIRA ' Resolution' field to be synchronized back to SpiraTeam, then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various resolution names that exist inside JIRA. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Resolution\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Resolution field in JIRA. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the JIRA ID of the various Resolutions that are configured in JIRA. The external ID can be found by looking at the URL inside JIRA which choosing to View/Edit the resolution name/description. e) JIRA's Environment Field If your instance of JIRA requires that all new issues are submitted with an 'Environment' description specified, then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the environment description within SpiraTeam. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \" Environment \" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Environment field in JIRA. f) JIRA's Security Level Field (JIRA 4.x Plug-In Only) If your instance of JIRA requires that all new issues are submitted with a 'Security Level' then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various security levels that exist inside JIRA. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. First you need to enter the word \" SecurityLevel \" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Security Level field in JIRA. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the JIRA ID of the various Security Levels that are configured in JIRA. The external ID can be found by looking at the URL inside JIRA which choosing to View/Edit the security level name/description. g) JIRA's Issue Key Field (JIRA 4.x Plug-In Only) It can be convenient to create a SpiraTeam custom property to store the JIRA Issue Key (the ID used to identify an issue in JIRA). This allows you to display a list of incients in SpiraTest and see the corresponding JIRA ID in the same list. You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the JIRA issue key within SpiraTeam. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \" JiraIssueKey \" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Issue Key field in JIRA. Once you have updated the various mapping sections, you are now ready to start using the system.","title":"Configuring the Custom Property Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-3--4/#using-spirateam-with-jira","text":"Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into JIRA and if using JIRA 4.x, any existing issues in JIRA will get loaded into SpiraTeam At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any issues with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with JIRA on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTest or SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Developers using JIRA 4.x can log new defects into either SpiraTeam or JIRA. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam At this point, the incident should not be acted upon inside SpiraTeam and all data changes to the issue should be made inside JIRA. To enforce this, you should modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with JIRA after that point. As the issue progresses through the customized JIRA workflow, changes to the type of issue, changes to its status, priority, description and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTest/SpiraTeam using the test cases managed by SpiraTest/SpiraTeam and the incidents managed on behalf of SpiraTest/SpiraTeam inside JIRA.","title":"Using SpiraTeam with JIRA"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/","text":"Using SpiraTeam with Jira Server (5 or later) This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Jira Server issue/bug tracking system version 5.0 and later. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into JIRA. Once the incidents are loaded into JIRA as issues, the development team can then manage the lifecycle of these issues in JIRA, and have the status changes in JIRA be reflected back in SpiraTeam. In addition, any issues logged directly into JIRA will get imported into SpiraTeam as either new incidents or new requirements (depending on their type) so that they can be used as part of the planning and testing lifecycle. Set up data synchronization STOP! Please make sure you have first read the Instructions in Setup before proceeding! Configuring the Plug-In This section outlines how to configure the integration service to export incidents into JIRA, import new issues from JIRA and pick up subsequent status changes in JIRA and have them update SpiraTeam. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam and a working installation of JIRA. The following versions of SpiraTeam and Jira Server are supported: The JIRA 5.x plugin supports Jira Server 5.0 or later and SpiraTeam v5.0 or later The JIRA 4.x plugin supports JIRA 4.0 or later and SpiraTeam v3.0 or later (see Using SpiraTeam with JIRA 3 / 4 ) The JIRA 3.x plugin supports JIRA 3.0 or later and SpiraTeam v2.3 or later (see Using SpiraTeam with JIRA 3 / 4 ) If you are using the Cloud version of Jira, please refer to the Jira Cloud Documentation instead. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v2.3 before trying to integrate with Jira Server. The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the Jira server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for JiraDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the JIRA Data-Synchronization plug-in: You need to fill out the following fields for the JIRA Plug-in to operate correctly: Name -- this needs to be set to JiraDataSync . Caption -- this is the display name of the plugin. Normally you can use something generic such as \"Jira\", however if you have multiple JIRA instances you might want to name it something specific such as \"Jira External\". If you don't enter a value, the display name will be \"JiraDataSync\" Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the full URL to the JIRA installation being connected to (including any custom port numbers). Entering this URL into a web browser should bring up the JIRA login page. It is typically of the form: http://myserver:8080 Login -- this should be set to a valid login to the JIRA installation. The login needs to have permissions to create and view issues and versions within JIRA. Password -- this should be set to either the password or the API Key of the login specified above. The ability to use your password vs. a special API Key will depend on your version of Jira. Time Offset -- normally this should be set to zero, but if you find that issues being changed in JIRA are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your JIRA installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. Auto-Map Users -- This changes the way that the plugin maps users in SpiraTeam to those in JIRA: **Auto-Map = True\\ **With this setting, all users in SpiraTeam need to have the same username as those in JIRA. If this is the case then you do not need to perform the user-mapping task . This is a big time-saver if you can guarantee that all usernames are the same in both systems. **Auto-Map = False\\ **With this setting, users in SpiraTeam and JIRA are free to have different usernames because you specify the corresponding JIRA name for each user as outlined in Configuring the User Mapping Custom 01 -- This is used to specify a JIRA custom property that should be mapped to the built-in SpiraTeam Incident Severity field (which does not exist in JIRA). This can be left empty for now and will be discussed below in Configuring the Data Mapping . Custom 02 -- This should be set to the word \"True\" if you want to have the new issues submitted to JIRA be submitted using a specified SecurityLevel. If you're not using the security level feature of JIRA, leave the field blank. Custom 03 -- This determines how the synchronization of incidents works: Default (leave blank) -- By default the plugin will log new issues from SpiraTeam to JIRA, and from JIRA to SpiraTeam. Updates will only occur from JIRA to SpiraTeam. This is the recommended option for most users. \"True\" -- If you enter the word \"True\" in this setting, the plugin will log new issues from SpiraTeam to JIRA. It will NOT log new issues from JIRA into SpiraTeam. Updates will only occur from JIRA to SpiraTeam.. This is useful if you want to prevent existing issues in JIRA from being loaded into SpiraTeam. \"Both\" -- If you enter the word \"Both\" in this setting, the plugin will allow full bidirectional synchronization of new incidents/issues and also updates to existing incidents/issues in both SpiraTeam and JIRA. This option should only be used if you have a well-defined set of workflows that make sense in both systems, and that do not conflict.\\ This option is not recommended for novice users. Custom 04 -- This should be set to a comma-separated list of IDs of any JIRA issue types that you want to be synchronized with SpiraTeam requirements instead of incidents. If you leave this blank, all JIRA issue types will be synchronized with incidents. Custom 05 -- This should be set to the name of the JIRA issue link type that you want SpiraTeam incident associations to use. If you leave this blank, incident associations in SpiraTeam will not be imported into JIRA. You can get the list of issue link types from the following screen in JIRA: Note: For most users, we recommend leaving Custom 01 -- Custom 04 blank. Configuring the Data Mapping Next, you need to configure the data mapping between SpiraTeam and JIRA. This allows the various projects, users, releases, incident types, statuses, priorities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Enhancement\" in SpiraTeam is the same as a \"New Feature\" in JIRA (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases (equivalent to JIRA versions) in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below. However, to make the data mapping process easier, we have a helpful utility that will help you connect to your JIRA instance (both cloud or server) and determine the matching IDs for the various fields in JIRA: You can download it from this URL: https://www.inflectra.com/Downloads/JiraConfigurationHelper.zip Once you have downloaded and unzipped the program, run the JiraConfigurationHelper.exe and the following screen will be displayed: Enter in the URL, login and password/API Key for your JIRA instance and click Connect : Choose the project in JIRA that you will be connecting to SpiraTest and then the list of issue types, issue statuses, issue priorities, components, versions and custom fields will be displayed. We will be using this tool later on when you want to get some of the ID values to populate in SpiraTest. Configuring the Project Mapping From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the JIRA plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with JIRA, you need to enter: External Key -- This should be set to the name of the project Key in JIRA. Typically, this is a short acronym for the project: Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project. Configuring the User Mapping To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in JIRA: Click on the 'Data Mapping' tab to list all the configured data-synchronization plug-ins for this user. In the text box next to the JIRA Data-Sync plug-in you need to enter the login for this username in JIRA. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in JIRA. Click [Save] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems. If you have set the \"Auto-Map Users\" option in the JIRA plugin, you can skip this section completely. Configuring the Release Mapping When the data-synchronization service runs, when it comes across a release/iteration in SpiraTeam that it has not seen before, it will create a corresponding \"Version\" in JIRA. Similarly, if it comes across a new Version in JIRA that it has not seen before, it will create a new Release in SpiraTeam. Therefore, when using both systems together, it is recommended that you only enter new Releases/Versions in one system and let the data-synchronization service add them to the other system. However, you may start out with the situation where you already have pre-existing Releases/Version in both systems that you need to associate in the data-mapping. If you don't do this, you may find that duplicates get created when you first enable the data-synchronization service. Therefore, for any Releases/Iterations that already exist in BOTH systems please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties, you will see an additional text property called \" Jira ID \" that is used to store the mapped external identifier for the equivalent Version in JIRA. You need to locate the ID of the equivalent version in JIRA, enter it into this text-box and click [Save]. You should now repeat for all the other pre-existing releases. The JIRA ID can be found using the Jira Configuration Helper using the Versions tab: Configuring the Standard Field Mapping Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident and requirement fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the JiraDataSync plug-in entry: From this screen, you need to click on Priority, Severity, Component, Status and Type in turn to configure the incident field mappings. If you're using the option to have JIRA also synchronize some issue types as requirements, then you'll need to also configure the Requirement Importance, Type, Component and Status fields. a) Incident Type Click on the \"Type\" hyperlink under Incident Standard Fields to bring up the Incident type mapping configuration screen: The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching JIRA issue type ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields (e.g. Bug and Incident in SpiraTeam are both equivalent to Bug in JIRA), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Types tab of the Jira configuration helper: b) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching JIRA issue status ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields (e.g. New and Open in SpiraTeam are both equivalent to Open in JIRA), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). We recommend that you always point the New and Open statuses inside SpiraTeam to point to the ID for \"Open\" inside JIRA and make Open in SpiraTeam the Primary status of the two. This is recommended so that as new incidents in SpiraTeam get synched over to JIRA, they will get switched to the Open status in JIRA which will then be synched back to \"Open\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with JIRA and those that haven't. The JIRA ID can be found by using the Issue Statuses tab of the Jira configuration helper: c) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching JIRA priority ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Priorities tab of the Jira configuration helper: d) Incident Component (Optional) Click on the \"Component\" hyperlink under Incident Standard Fields to bring up the Incident component mapping configuration screen: The table lists each of the components available in SpiraTeam and provides you with the ability to enter the matching JIRA component ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Components tab of the Jira configuration helper: : e) Incident Severity (Optional) Click on the \"Severity\" hyperlink under Incident Standard Fields to bring up the Incident severity mapping configuration screen: Unlike the other incident standard fields, JIRA doesn't actually have a built-in field for storing the severity of an issue, so if you want to be able to see the SpiraTeam incident severity in JIRA, you'll need to create a JIRA custom list field to store the different severity values. If you don't want to synchronize severity values with JIRA, you can skip the rest of this section. Once you have created a custom field in JIRA to contain the list of severity values, you need to now populate the above table with the name (Not the ID) of the severity custom property values inside JIRA and click Update. Secondly you need to go to the Plug-in configuration screen: On this screen you need to enter the ID of the custom field that you're using to store severities in JIRA and populate the Custom 01 property with this value (see above). The ID can be found by using the Custom Fields tab of the Jira Configuration Helper: f) Requirement Status (Optional) Click on the \"Status\" hyperlink under Requirement Standard Fields to bring up the Requirement status mapping configuration screen: The table lists each of the requirement statuses available in SpiraTeam and provides you with the ability to enter the matching JIRA issue status ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Statuses tab of the Jira configuration helper: g) Requirement Importance (Optional) Click on the \"Importance\" hyperlink under Requirement Standard Fields to bring up the Requirement Importance mapping configuration screen: The table lists each of the requirement importances available in SpiraTeam and provides you with the ability to enter the matching JIRA priority ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Priorities tab of the Jira configuration helper: h) Requirement Type (Optional) Click on the \"Type\" hyperlink under Requirement Standard Fields to bring up the Requirement type mapping configuration screen: The table lists each of the requirement types available in SpiraTeam and provides you with the ability to enter the matching JIRA issue type ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields (e.g. Use Case and User Story in SpiraTeam are both equivalent to User Story in JIRA), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Types tab of the Jira configuration helper: i) Requirement Component (Optional) Click on the \"Component\" hyperlink under Requirement Standard Fields to bring up the Requirement component mapping configuration screen: The table lists each of the components available in SpiraTeam and provides you with the ability to enter the matching JIRA component ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Components tab of the Jira configuration helper: : Configuring the Custom Property Mapping Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in JIRA and also for custom properties in SpiraTeam that are used to map to standard fields in JIRA (Environment, Resolution and SecurityLevel) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident or Requirement Custom Property that you want to add data-mapping information for. We will consider the four different types of mapping that you might want to enter: a) Scalar Custom Properties This refers to custom properties that have a simple user-entered value and don't need to have their specific options mapped between SpiraTeam and JIRA. All of the custom property types except List and Multi-List fall into this category (e.g. Text, Date, User, Boolean, Decimal, Integer, etc.) Click on the hyperlink of the scalar custom property under Incident/Requirement Custom Properties to bring up the custom property mapping configuration screen. For scalar custom properties, there will be no values listed in the lower half of the screen. You need to lookup the ID of the custom field in JIRA that matches this custom property in SpiraTeam. Once you have entered the id of the custom field, click [Update]. The ID can be found by using the Custom Fields tab of the Jira Configuration Helper: b) List Custom Properties This refers to custom properties that are either of type List or Multi-List . Click on the hyperlink of the list custom property under Incident/Requirement Custom Properties to bring up the custom property mapping configuration screen. For list custom properties there will be a textbox for both the custom field itself and a mapping table for each of the custom property values that need to be mapped: First you need to lookup the ID of the custom field in JIRA that matches this custom property in SpiraTeam. This should be entered in the 'External Key' field below the name of the custom property. The ID can be found by using the Custom Fields tab of the Jira Configuration Helper: Next for each of the Property Values in the table (in the lower half of the page) you need to enter the full name (not the id this time) of the custom field value as specified in JIRA: c) JIRA's Resolution Field If you would like the values of the JIRA ' Resolution' field to be synchronized back to SpiraTeam, then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various resolution names that exist inside JIRA. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Resolution\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Resolution field in JIRA. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the JIRA ID of the various Resolutions that are configured in JIRA. The external ID can be found by looking at the URL inside JIRA which choosing to View/Edit the resolution name/description. d) JIRA's Environment Field If your instance of JIRA requires that all new issues are submitted with an 'Environment' description specified, then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the environment description within SpiraTeam. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \" Environment \" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Environment field in JIRA. e) JIRA's Security Level Field If your instance of JIRA requires that all new issues are submitted with a 'Security Level' then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various security levels that exist inside JIRA. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. First you need to enter the word \" SecurityLevel \" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Security Level field in JIRA. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the JIRA ID of the various Security Levels that are configured in JIRA. The external ID can be found by looking at the URL inside JIRA which choosing to View/Edit the security level name/description. f) JIRA's Issue Key Field It can be convenient to create a SpiraTeam custom property to store the JIRA Issue Key (the ID used to identify an issue in JIRA). This allows you to display a list of incients in SpiraTest and see the corresponding JIRA ID in the same list. You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the JIRA issue key within SpiraTeam. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \" JiraIssueKey \" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Issue Key field in JIRA. Once you have updated the various mapping sections, you are now ready to use the integration. Using SpiraTeam with JIRA Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into JIRA and any existing issues in JIRA will get loaded into SpiraTeam as either incidents or requirements (depending on your configuration). At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any issues with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with JIRA on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTest or SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Developers can log new defects into either SpiraTeam or JIRA. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam At this point, the incident should not be acted upon inside SpiraTeam and all data changes to the issue should be made inside JIRA. To enforce this, you should modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with JIRA after that point. As the issue progresses through the customized JIRA workflow, changes to the type of issue, changes to its status, priority, description and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTest/SpiraTeam using the test cases managed by SpiraTest/SpiraTeam and the incidents managed on behalf of SpiraTest/SpiraTeam inside JIRA.","title":"Jira Server"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#using-spirateam-with-jira-server-5-or-later","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Jira Server issue/bug tracking system version 5.0 and later. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into JIRA. Once the incidents are loaded into JIRA as issues, the development team can then manage the lifecycle of these issues in JIRA, and have the status changes in JIRA be reflected back in SpiraTeam. In addition, any issues logged directly into JIRA will get imported into SpiraTeam as either new incidents or new requirements (depending on their type) so that they can be used as part of the planning and testing lifecycle. Set up data synchronization STOP! Please make sure you have first read the Instructions in Setup before proceeding!","title":"Using SpiraTeam with Jira Server (5 or later)"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#configuring-the-plug-in","text":"This section outlines how to configure the integration service to export incidents into JIRA, import new issues from JIRA and pick up subsequent status changes in JIRA and have them update SpiraTeam. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam and a working installation of JIRA. The following versions of SpiraTeam and Jira Server are supported: The JIRA 5.x plugin supports Jira Server 5.0 or later and SpiraTeam v5.0 or later The JIRA 4.x plugin supports JIRA 4.0 or later and SpiraTeam v3.0 or later (see Using SpiraTeam with JIRA 3 / 4 ) The JIRA 3.x plugin supports JIRA 3.0 or later and SpiraTeam v2.3 or later (see Using SpiraTeam with JIRA 3 / 4 ) If you are using the Cloud version of Jira, please refer to the Jira Cloud Documentation instead. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v2.3 before trying to integrate with Jira Server. The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the Jira server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for JiraDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the JIRA Data-Synchronization plug-in: You need to fill out the following fields for the JIRA Plug-in to operate correctly: Name -- this needs to be set to JiraDataSync . Caption -- this is the display name of the plugin. Normally you can use something generic such as \"Jira\", however if you have multiple JIRA instances you might want to name it something specific such as \"Jira External\". If you don't enter a value, the display name will be \"JiraDataSync\" Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the full URL to the JIRA installation being connected to (including any custom port numbers). Entering this URL into a web browser should bring up the JIRA login page. It is typically of the form: http://myserver:8080 Login -- this should be set to a valid login to the JIRA installation. The login needs to have permissions to create and view issues and versions within JIRA. Password -- this should be set to either the password or the API Key of the login specified above. The ability to use your password vs. a special API Key will depend on your version of Jira. Time Offset -- normally this should be set to zero, but if you find that issues being changed in JIRA are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your JIRA installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. Auto-Map Users -- This changes the way that the plugin maps users in SpiraTeam to those in JIRA: **Auto-Map = True\\ **With this setting, all users in SpiraTeam need to have the same username as those in JIRA. If this is the case then you do not need to perform the user-mapping task . This is a big time-saver if you can guarantee that all usernames are the same in both systems. **Auto-Map = False\\ **With this setting, users in SpiraTeam and JIRA are free to have different usernames because you specify the corresponding JIRA name for each user as outlined in Configuring the User Mapping Custom 01 -- This is used to specify a JIRA custom property that should be mapped to the built-in SpiraTeam Incident Severity field (which does not exist in JIRA). This can be left empty for now and will be discussed below in Configuring the Data Mapping . Custom 02 -- This should be set to the word \"True\" if you want to have the new issues submitted to JIRA be submitted using a specified SecurityLevel. If you're not using the security level feature of JIRA, leave the field blank. Custom 03 -- This determines how the synchronization of incidents works: Default (leave blank) -- By default the plugin will log new issues from SpiraTeam to JIRA, and from JIRA to SpiraTeam. Updates will only occur from JIRA to SpiraTeam. This is the recommended option for most users. \"True\" -- If you enter the word \"True\" in this setting, the plugin will log new issues from SpiraTeam to JIRA. It will NOT log new issues from JIRA into SpiraTeam. Updates will only occur from JIRA to SpiraTeam.. This is useful if you want to prevent existing issues in JIRA from being loaded into SpiraTeam. \"Both\" -- If you enter the word \"Both\" in this setting, the plugin will allow full bidirectional synchronization of new incidents/issues and also updates to existing incidents/issues in both SpiraTeam and JIRA. This option should only be used if you have a well-defined set of workflows that make sense in both systems, and that do not conflict.\\ This option is not recommended for novice users. Custom 04 -- This should be set to a comma-separated list of IDs of any JIRA issue types that you want to be synchronized with SpiraTeam requirements instead of incidents. If you leave this blank, all JIRA issue types will be synchronized with incidents. Custom 05 -- This should be set to the name of the JIRA issue link type that you want SpiraTeam incident associations to use. If you leave this blank, incident associations in SpiraTeam will not be imported into JIRA. You can get the list of issue link types from the following screen in JIRA: Note: For most users, we recommend leaving Custom 01 -- Custom 04 blank.","title":"Configuring the Plug-In"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#configuring-the-data-mapping","text":"Next, you need to configure the data mapping between SpiraTeam and JIRA. This allows the various projects, users, releases, incident types, statuses, priorities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Enhancement\" in SpiraTeam is the same as a \"New Feature\" in JIRA (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases (equivalent to JIRA versions) in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below. However, to make the data mapping process easier, we have a helpful utility that will help you connect to your JIRA instance (both cloud or server) and determine the matching IDs for the various fields in JIRA: You can download it from this URL: https://www.inflectra.com/Downloads/JiraConfigurationHelper.zip Once you have downloaded and unzipped the program, run the JiraConfigurationHelper.exe and the following screen will be displayed: Enter in the URL, login and password/API Key for your JIRA instance and click Connect : Choose the project in JIRA that you will be connecting to SpiraTest and then the list of issue types, issue statuses, issue priorities, components, versions and custom fields will be displayed. We will be using this tool later on when you want to get some of the ID values to populate in SpiraTest.","title":"Configuring the Data Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#configuring-the-project-mapping","text":"From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the JIRA plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with JIRA, you need to enter: External Key -- This should be set to the name of the project Key in JIRA. Typically, this is a short acronym for the project: Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project.","title":"Configuring the Project Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#configuring-the-user-mapping","text":"To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in JIRA: Click on the 'Data Mapping' tab to list all the configured data-synchronization plug-ins for this user. In the text box next to the JIRA Data-Sync plug-in you need to enter the login for this username in JIRA. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in JIRA. Click [Save] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems. If you have set the \"Auto-Map Users\" option in the JIRA plugin, you can skip this section completely.","title":"Configuring the User Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#configuring-the-release-mapping","text":"When the data-synchronization service runs, when it comes across a release/iteration in SpiraTeam that it has not seen before, it will create a corresponding \"Version\" in JIRA. Similarly, if it comes across a new Version in JIRA that it has not seen before, it will create a new Release in SpiraTeam. Therefore, when using both systems together, it is recommended that you only enter new Releases/Versions in one system and let the data-synchronization service add them to the other system. However, you may start out with the situation where you already have pre-existing Releases/Version in both systems that you need to associate in the data-mapping. If you don't do this, you may find that duplicates get created when you first enable the data-synchronization service. Therefore, for any Releases/Iterations that already exist in BOTH systems please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties, you will see an additional text property called \" Jira ID \" that is used to store the mapped external identifier for the equivalent Version in JIRA. You need to locate the ID of the equivalent version in JIRA, enter it into this text-box and click [Save]. You should now repeat for all the other pre-existing releases. The JIRA ID can be found using the Jira Configuration Helper using the Versions tab:","title":"Configuring the Release Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#configuring-the-standard-field-mapping","text":"Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident and requirement fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the JiraDataSync plug-in entry: From this screen, you need to click on Priority, Severity, Component, Status and Type in turn to configure the incident field mappings. If you're using the option to have JIRA also synchronize some issue types as requirements, then you'll need to also configure the Requirement Importance, Type, Component and Status fields.","title":"Configuring the Standard Field Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#a-incident-type","text":"Click on the \"Type\" hyperlink under Incident Standard Fields to bring up the Incident type mapping configuration screen: The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching JIRA issue type ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields (e.g. Bug and Incident in SpiraTeam are both equivalent to Bug in JIRA), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Types tab of the Jira configuration helper:","title":"a) Incident Type"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#b-incident-status","text":"Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching JIRA issue status ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields (e.g. New and Open in SpiraTeam are both equivalent to Open in JIRA), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). We recommend that you always point the New and Open statuses inside SpiraTeam to point to the ID for \"Open\" inside JIRA and make Open in SpiraTeam the Primary status of the two. This is recommended so that as new incidents in SpiraTeam get synched over to JIRA, they will get switched to the Open status in JIRA which will then be synched back to \"Open\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with JIRA and those that haven't. The JIRA ID can be found by using the Issue Statuses tab of the Jira configuration helper:","title":"b) Incident Status"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#c-incident-priority","text":"Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching JIRA priority ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Priorities tab of the Jira configuration helper:","title":"c) Incident Priority"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#d-incident-component-optional","text":"Click on the \"Component\" hyperlink under Incident Standard Fields to bring up the Incident component mapping configuration screen: The table lists each of the components available in SpiraTeam and provides you with the ability to enter the matching JIRA component ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Components tab of the Jira configuration helper: :","title":"d) Incident Component (Optional)"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#e-incident-severity-optional","text":"Click on the \"Severity\" hyperlink under Incident Standard Fields to bring up the Incident severity mapping configuration screen: Unlike the other incident standard fields, JIRA doesn't actually have a built-in field for storing the severity of an issue, so if you want to be able to see the SpiraTeam incident severity in JIRA, you'll need to create a JIRA custom list field to store the different severity values. If you don't want to synchronize severity values with JIRA, you can skip the rest of this section. Once you have created a custom field in JIRA to contain the list of severity values, you need to now populate the above table with the name (Not the ID) of the severity custom property values inside JIRA and click Update. Secondly you need to go to the Plug-in configuration screen: On this screen you need to enter the ID of the custom field that you're using to store severities in JIRA and populate the Custom 01 property with this value (see above). The ID can be found by using the Custom Fields tab of the Jira Configuration Helper:","title":"e) Incident Severity (Optional)"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#f-requirement-status-optional","text":"Click on the \"Status\" hyperlink under Requirement Standard Fields to bring up the Requirement status mapping configuration screen: The table lists each of the requirement statuses available in SpiraTeam and provides you with the ability to enter the matching JIRA issue status ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Statuses tab of the Jira configuration helper:","title":"f) Requirement Status (Optional)"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#g-requirement-importance-optional","text":"Click on the \"Importance\" hyperlink under Requirement Standard Fields to bring up the Requirement Importance mapping configuration screen: The table lists each of the requirement importances available in SpiraTeam and provides you with the ability to enter the matching JIRA priority ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Priorities tab of the Jira configuration helper:","title":"g) Requirement Importance (Optional)"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#h-requirement-type-optional","text":"Click on the \"Type\" hyperlink under Requirement Standard Fields to bring up the Requirement type mapping configuration screen: The table lists each of the requirement types available in SpiraTeam and provides you with the ability to enter the matching JIRA issue type ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields (e.g. Use Case and User Story in SpiraTeam are both equivalent to User Story in JIRA), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Types tab of the Jira configuration helper:","title":"h) Requirement Type (Optional)"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#i-requirement-component-optional","text":"Click on the \"Component\" hyperlink under Requirement Standard Fields to bring up the Requirement component mapping configuration screen: The table lists each of the components available in SpiraTeam and provides you with the ability to enter the matching JIRA component ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Components tab of the Jira configuration helper: :","title":"i) Requirement Component (Optional)"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#configuring-the-custom-property-mapping","text":"Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in JIRA and also for custom properties in SpiraTeam that are used to map to standard fields in JIRA (Environment, Resolution and SecurityLevel) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident or Requirement Custom Property that you want to add data-mapping information for. We will consider the four different types of mapping that you might want to enter:","title":"Configuring the Custom Property Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#a-scalar-custom-properties","text":"This refers to custom properties that have a simple user-entered value and don't need to have their specific options mapped between SpiraTeam and JIRA. All of the custom property types except List and Multi-List fall into this category (e.g. Text, Date, User, Boolean, Decimal, Integer, etc.) Click on the hyperlink of the scalar custom property under Incident/Requirement Custom Properties to bring up the custom property mapping configuration screen. For scalar custom properties, there will be no values listed in the lower half of the screen. You need to lookup the ID of the custom field in JIRA that matches this custom property in SpiraTeam. Once you have entered the id of the custom field, click [Update]. The ID can be found by using the Custom Fields tab of the Jira Configuration Helper:","title":"a) Scalar Custom Properties"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#b-list-custom-properties","text":"This refers to custom properties that are either of type List or Multi-List . Click on the hyperlink of the list custom property under Incident/Requirement Custom Properties to bring up the custom property mapping configuration screen. For list custom properties there will be a textbox for both the custom field itself and a mapping table for each of the custom property values that need to be mapped: First you need to lookup the ID of the custom field in JIRA that matches this custom property in SpiraTeam. This should be entered in the 'External Key' field below the name of the custom property. The ID can be found by using the Custom Fields tab of the Jira Configuration Helper: Next for each of the Property Values in the table (in the lower half of the page) you need to enter the full name (not the id this time) of the custom field value as specified in JIRA:","title":"b) List Custom Properties"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#c-jiras-resolution-field","text":"If you would like the values of the JIRA ' Resolution' field to be synchronized back to SpiraTeam, then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various resolution names that exist inside JIRA. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Resolution\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Resolution field in JIRA. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the JIRA ID of the various Resolutions that are configured in JIRA. The external ID can be found by looking at the URL inside JIRA which choosing to View/Edit the resolution name/description.","title":"c) JIRA's Resolution Field"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#d-jiras-environment-field","text":"If your instance of JIRA requires that all new issues are submitted with an 'Environment' description specified, then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the environment description within SpiraTeam. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \" Environment \" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Environment field in JIRA.","title":"d) JIRA's Environment Field"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#e-jiras-security-level-field","text":"If your instance of JIRA requires that all new issues are submitted with a 'Security Level' then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various security levels that exist inside JIRA. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. First you need to enter the word \" SecurityLevel \" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Security Level field in JIRA. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the JIRA ID of the various Security Levels that are configured in JIRA. The external ID can be found by looking at the URL inside JIRA which choosing to View/Edit the security level name/description.","title":"e) JIRA's Security Level Field"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#f-jiras-issue-key-field","text":"It can be convenient to create a SpiraTeam custom property to store the JIRA Issue Key (the ID used to identify an issue in JIRA). This allows you to display a list of incients in SpiraTest and see the corresponding JIRA ID in the same list. You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the JIRA issue key within SpiraTeam. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \" JiraIssueKey \" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Issue Key field in JIRA. Once you have updated the various mapping sections, you are now ready to use the integration.","title":"f) JIRA's Issue Key Field"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-JIRA-5+/#using-spirateam-with-jira","text":"Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into JIRA and any existing issues in JIRA will get loaded into SpiraTeam as either incidents or requirements (depending on your configuration). At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any issues with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with JIRA on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTest or SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Developers can log new defects into either SpiraTeam or JIRA. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam At this point, the incident should not be acted upon inside SpiraTeam and all data changes to the issue should be made inside JIRA. To enforce this, you should modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with JIRA after that point. As the issue progresses through the customized JIRA workflow, changes to the type of issue, changes to its status, priority, description and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTest/SpiraTeam using the test cases managed by SpiraTest/SpiraTeam and the incidents managed on behalf of SpiraTest/SpiraTeam inside JIRA.","title":"Using SpiraTeam with JIRA"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/","text":"Using SpiraTeam with Jira Cloud This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the cloud version of the Jira issue/bug tracking system. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into JIRA. Once the incidents are loaded into JIRA as issues, the development team can then manage the lifecycle of these issues in JIRA, and have the status changes in JIRA be reflected back in SpiraTeam. In addition, any issues logged directly into JIRA will get imported into SpiraTeam as either new incidents or new requirements (depending on their type) so that they can be used as part of the planning and testing lifecycle. Set up data synchronization STOP! Please make sure you have first read the Instructions in Setup before proceeding! Configuring the Plug-In This section outlines how to configure the integration service to export incidents into JIRA, import new issues from JIRA and pick up subsequent status changes in JIRA and have them update SpiraTeam. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam and a cloud subscription to Jira. The Jira Cloud plugin supports SpiraTeam v5.0 or later and the most recent version of Jira cloud hosted by Atlassian. For Jira Server, we have an alternate Jira Server plugin available. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v5.0 before trying to integrate with Jira Cloud. The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the JIRA server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for JiraDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the JIRA Data-Synchronization plug-in: You need to fill out the following fields for the JIRA Plug-in to operate correctly: Name -- this needs to be set to JiraDataSync . Caption -- this is the display name of the plugin. Normally you can use something generic such as \"Jira\", however if you have multiple JIRA instances you might want to name it something specific such as \"Jira External\". If you don't enter a value, the display name will be \"JiraDataSync\" Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the full URL to the JIRA installation being connected to (including any custom port numbers). Entering this URL into a web browser should bring up the JIRA login page. It is typically of the form: https://mycompany.atlassian.net Login -- this should be set to a valid login to the JIRA installation. The login needs to have permissions to create and view issues and versions within JIRA. Typically this is your Atlassian email address. Password -- this should be set to the API Key ( not password ) of the Atlassian login specified above. Time Offset -- normally this should be set to zero, but if you find that issues being changed in JIRA are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your JIRA installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. Auto-Map Users -- This changes the way that the plugin maps users in SpiraTeam to those in JIRA: **Auto-Map = True\\ **With this setting, all users in SpiraTeam need to have the same username as those in JIRA. If this is the case then you do not need to perform the user-mapping task . This is a big time-saver if you can guarantee that all usernames are the same in both systems. **Auto-Map = False\\ **With this setting, users in SpiraTeam and JIRA are free to have different usernames because you specify the corresponding JIRA name for each user as outlined in Configuring the User Mapping Custom 01 -- This is used to specify a JIRA custom property that should be mapped to the built-in SpiraTeam Incident Severity field (which does not exist in JIRA). This can be left empty for now and will be discussed below in Configuring the Data Mapping . Custom 02 -- This should be set to the word \"True\" if you want to have the new issues submitted to JIRA be submitted using a specified SecurityLevel. If you're not using the security level feature of JIRA, leave the field blank. Custom 03 -- This determines how the synchronization of incidents works: Default (leave blank) -- By default the plugin will log new issues from SpiraTeam to JIRA, and from JIRA to SpiraTeam. Updates will only occur from JIRA to SpiraTeam. This is the recommended option for most users. \"True\" -- If you enter the word \"True\" in this setting, the plugin will log new issues from SpiraTeam to JIRA. It will NOT log new issues from JIRA into SpiraTeam. Updates will only occur from JIRA to SpiraTeam.. This is useful if you want to prevent existing issues in JIRA from being loaded into SpiraTeam. \"Both\" -- If you enter the word \"Both\" in this setting, the plugin will allow full bidirectional synchronization of new incidents/issues and also updates to existing incidents/issues in both SpiraTeam and JIRA. This option should only be used if you have a well-defined set of workflows that make sense in both systems, and that do not conflict.\\ This option is not recommended for novice users. Custom 04 -- This should be set to a comma-separated list of IDs of any JIRA issue types that you want to be synchronized with SpiraTeam requirements instead of incidents. If you leave this blank, all JIRA issue types will be synchronized with incidents. Custom 05 -- This should be set to the name of the JIRA issue link type that you want SpiraTeam incident associations to use. If you leave this blank, incident associations in SpiraTeam will not be imported into JIRA. You can get the list of issue link types from the following screen in JIRA: Note: For most users, we recommend leaving Custom 01 -- Custom 04 blank. Configuring the Data Mapping Next, you need to configure the data mapping between SpiraTeam and JIRA. This allows the various projects, users, releases, incident types, statuses, priorities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Enhancement\" in SpiraTeam is the same as a \"New Feature\" in JIRA (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases (equivalent to JIRA versions) in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below. However, to make the data mapping process easier, we have a helpful utility that will help you connect to your JIRA instance (both cloud or server) and determine the matching IDs for the various fields in JIRA: You can download it from this URL: https://www.inflectra.com/Downloads/JiraConfigurationHelper.zip Once you have downloaded and unzipped the program, run the JiraConfigurationHelper.exe and the following screen will be displayed: Enter in the URL, login and password/API Key for your JIRA instance and click Connect : Choose the project in JIRA that you will be connecting to SpiraTest and then the list of issue types, issue statuses, issue priorities, components, versions and custom fields will be displayed. We will be using this tool later on when you want to get some of the ID values to populate in SpiraTest. Configuring the Project Mapping From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the JIRA plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with JIRA, you need to enter: External Key -- This should be set to the name of the project Key in JIRA. Typically, this is a short acronym for the project: Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project. Configuring the User Mapping To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in JIRA: Click on the 'Data Mapping' tab to list all the configured data-synchronization plug-ins for this user. In the text box next to the JIRA Data-Sync plug-in entry, you need to enter one of the following Jira user identifiers to allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in Jira: Email Address - you can enter in the email address of the user in Jira. This will only work if the user has set their user profile to be public . This requires that the profile has its email address visibility set to Anyone inside Jira: Atlassian AccountID - you can enter in the corresponding Atlassian AccountID value into this field. This will work regardless of whether the user's profile is public or private. Click [Save] once you've entered the appropriate user identifier name. You should now repeat for the other users who will be active in both systems. If you have set the \"Auto-Map Users\" option in the JIRA plugin, you can skip this section completely. Configuring the Release Mapping When the data-synchronization service runs, when it comes across a release/iteration in SpiraTeam that it has not seen before, it will create a corresponding \"Version\" in JIRA. Similarly, if it comes across a new Version in JIRA that it has not seen before, it will create a new Release in SpiraTeam. Therefore, when using both systems together, it is recommended that you only enter new Releases/Versions in one system and let the data-synchronization service add them to the other system. However, you may start out with the situation where you already have pre-existing Releases/Version in both systems that you need to associate in the data-mapping. If you don't do this, you may find that duplicates get created when you first enable the data-synchronization service. Therefore, for any Releases/Iterations that already exist in BOTH systems please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties, you will see an additional text property called \" Jira ID \" that is used to store the mapped external identifier for the equivalent Version in JIRA. You need to locate the ID of the equivalent version in JIRA, enter it into this text-box and click [Save]. You should now repeat for all the other pre-existing releases. The JIRA ID can be found using the Jira Configuration Helper using the Versions tab: Configuring the Standard Field Mapping Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident and requirement fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the JiraDataSync plug-in entry: From this screen, you need to click on Priority, Severity, Component, Status and Type in turn to configure the incident field mappings. If you're using the option to have JIRA also synchronize some issue types as requirements, then you'll need to also configure the Requirement Importance, Type, Component and Status fields. a) Incident Type Click on the \"Type\" hyperlink under Incident Standard Fields to bring up the Incident type mapping configuration screen: The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching JIRA issue type ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields (e.g. Bug and Incident in SpiraTeam are both equivalent to Bug in JIRA), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Types tab of the Jira configuration helper: b) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching JIRA issue status ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields (e.g. New and Open in SpiraTeam are both equivalent to Open in JIRA), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). We recommend that you always point the New and Open statuses inside SpiraTeam to point to the ID for \"Open\" inside JIRA and make Open in SpiraTeam the Primary status of the two. This is recommended so that as new incidents in SpiraTeam get synched over to JIRA, they will get switched to the Open status in JIRA which will then be synched back to \"Open\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with JIRA and those that haven't. The JIRA ID can be found by using the Issue Statuses tab of the Jira configuration helper: c) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching JIRA priority ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Priorities tab of the Jira configuration helper: d) Incident Component (Optional) Click on the \"Component\" hyperlink under Incident Standard Fields to bring up the Incident component mapping configuration screen: The table lists each of the components available in SpiraTeam and provides you with the ability to enter the matching JIRA component ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Components tab of the Jira configuration helper: : e) Incident Severity (Optional) Click on the \"Severity\" hyperlink under Incident Standard Fields to bring up the Incident severity mapping configuration screen: Unlike the other incident standard fields, JIRA doesn't actually have a built-in field for storing the severity of an issue, so if you want to be able to see the SpiraTeam incident severity in JIRA, you'll need to create a JIRA custom list field to store the different severity values. If you don't want to synchronize severity values with JIRA, you can skip the rest of this section. Once you have created a custom field in JIRA to contain the list of severity values, you need to now populate the above table with the name (Not the ID) of the severity custom property values inside JIRA and click Update. Secondly you need to go to the Plug-in configuration screen: On this screen you need to enter the ID of the custom field that you're using to store severities in JIRA and populate the Custom 01 property with this value (see above). The ID can be found by using the Custom Fields tab of the Jira Configuration Helper: f) Requirement Status (Optional) Click on the \"Status\" hyperlink under Requirement Standard Fields to bring up the Requirement status mapping configuration screen: The table lists each of the requirement statuses available in SpiraTeam and provides you with the ability to enter the matching JIRA issue status ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Statuses tab of the Jira configuration helper: g) Requirement Importance (Optional) Click on the \"Importance\" hyperlink under Requirement Standard Fields to bring up the Requirement Importance mapping configuration screen: The table lists each of the requirement importances available in SpiraTeam and provides you with the ability to enter the matching JIRA priority ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Priorities tab of the Jira configuration helper: h) Requirement Type (Optional) Click on the \"Type\" hyperlink under Requirement Standard Fields to bring up the Requirement type mapping configuration screen: The table lists each of the requirement types available in SpiraTeam and provides you with the ability to enter the matching JIRA issue type ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields (e.g. Use Case and User Story in SpiraTeam are both equivalent to User Story in JIRA), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Types tab of the Jira configuration helper: i) Requirement Component (Optional) Click on the \"Component\" hyperlink under Requirement Standard Fields to bring up the Requirement component mapping configuration screen: The table lists each of the components available in SpiraTeam and provides you with the ability to enter the matching JIRA component ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Components tab of the Jira configuration helper: : Configuring the Custom Property Mapping Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in JIRA and also for custom properties in SpiraTeam that are used to map to standard fields in JIRA (Environment, Resolution and SecurityLevel) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident or Requirement Custom Property that you want to add data-mapping information for. We will consider the four different types of mapping that you might want to enter: a) Scalar Custom Properties This refers to custom properties that have a simple user-entered value and don't need to have their specific options mapped between SpiraTeam and JIRA. All of the custom property types except List and Multi-List fall into this category (e.g. Text, Date, User, Boolean, Decimal, Integer, etc.) Click on the hyperlink of the scalar custom property under Incident/Requirement Custom Properties to bring up the custom property mapping configuration screen. For scalar custom properties, there will be no values listed in the lower half of the screen. You need to lookup the ID of the custom field in JIRA that matches this custom property in SpiraTeam. Once you have entered the id of the custom field, click [Update]. The ID can be found by using the Custom Fields tab of the Jira Configuration Helper: b) List Custom Properties This refers to custom properties that are either of type List or Multi-List . Click on the hyperlink of the list custom property under Incident/Requirement Custom Properties to bring up the custom property mapping configuration screen. For list custom properties there will be a textbox for both the custom field itself and a mapping table for each of the custom property values that need to be mapped: First you need to lookup the ID of the custom field in JIRA that matches this custom property in SpiraTeam. This should be entered in the 'External Key' field below the name of the custom property. The ID can be found by using the Custom Fields tab of the Jira Configuration Helper: Next for each of the Property Values in the table (in the lower half of the page) you need to enter the full name (not the id this time) of the custom field value as specified in JIRA: c) JIRA's Resolution Field If you would like the values of the JIRA ' Resolution' field to be synchronized back to SpiraTeam, then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various resolution names that exist inside JIRA. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Resolution\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Resolution field in JIRA. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the JIRA ID of the various Resolutions that are configured in JIRA. The external ID can be found by looking at the URL inside JIRA which choosing to View/Edit the resolution name/description. d) JIRA's Environment Field If your instance of JIRA requires that all new issues are submitted with an 'Environment' description specified, then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the environment description within SpiraTeam. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \" Environment \" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Environment field in JIRA. e) JIRA's Security Level Field If your instance of JIRA requires that all new issues are submitted with a 'Security Level' then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various security levels that exist inside JIRA. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. First you need to enter the word \" SecurityLevel \" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Security Level field in JIRA. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the JIRA ID of the various Security Levels that are configured in JIRA. The external ID can be found by looking at the URL inside JIRA which choosing to View/Edit the security level name/description. f) JIRA's Issue Key Field It can be convenient to create a SpiraTeam custom property to store the JIRA Issue Key (the ID used to identify an issue in JIRA). This allows you to display a list of incients in SpiraTest and see the corresponding JIRA ID in the same list. You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the JIRA issue key within SpiraTeam. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \" JiraIssueKey \" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Issue Key field in JIRA. Once you have updated the various mapping sections, you are now ready to use the integration. Using SpiraTeam with JIRA Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into JIRA and any existing issues in JIRA will get loaded into SpiraTeam as either incidents or requirements (depending on your configuration). At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any issues with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with JIRA on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTest or SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Developers can log new defects into either SpiraTeam or JIRA. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam At this point, the incident should not be acted upon inside SpiraTeam and all data changes to the issue should be made inside JIRA. To enforce this, you should modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with JIRA after that point. As the issue progresses through the customized JIRA workflow, changes to the type of issue, changes to its status, priority, description and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTest/SpiraTeam using the test cases managed by SpiraTest/SpiraTeam and the incidents managed on behalf of SpiraTest/SpiraTeam inside JIRA. Using the Jira Cloud Connector Once you have the data-synchronization established between SpiraTest and Jira Cloud, we have an additional Atlassian marketplace connector that you can use (see https://marketplace.atlassian.com/apps/1218742/spiratest-app-for-jira ): You can install the connector by following these instructions: Log into your Jira instance as an admin. Click the admin dropdown and choose Add-ons. The Find new apps or Find new add-ons screen loads. Locate SpiraTest app for Jira. Click Install to download and install your app. Click Close in the \"Installed and ready to go\" dialog. Now you need to configure the add-on to connect to your SpiraTest instance. Please enter the following information: SpiraTest URL : this needs to be the base URL for your SpiraTest instance, typically of the form: https://mysite.spiraservice.net https://demo.spiraservice.net/mysite Username : This is the login you use to connect to SpiraTest API Key / RSS Token : This is the RSS Token / API key for the user name you specified. You can get the SpiraTest API Key from within the User Profile screen of SpiraTest:","title":"Jira Cloud"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#using-spirateam-with-jira-cloud","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the cloud version of the Jira issue/bug tracking system. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into JIRA. Once the incidents are loaded into JIRA as issues, the development team can then manage the lifecycle of these issues in JIRA, and have the status changes in JIRA be reflected back in SpiraTeam. In addition, any issues logged directly into JIRA will get imported into SpiraTeam as either new incidents or new requirements (depending on their type) so that they can be used as part of the planning and testing lifecycle. Set up data synchronization STOP! Please make sure you have first read the Instructions in Setup before proceeding!","title":"Using SpiraTeam with Jira Cloud"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#configuring-the-plug-in","text":"This section outlines how to configure the integration service to export incidents into JIRA, import new issues from JIRA and pick up subsequent status changes in JIRA and have them update SpiraTeam. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam and a cloud subscription to Jira. The Jira Cloud plugin supports SpiraTeam v5.0 or later and the most recent version of Jira cloud hosted by Atlassian. For Jira Server, we have an alternate Jira Server plugin available. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v5.0 before trying to integrate with Jira Cloud. The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the JIRA server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for JiraDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the JIRA Data-Synchronization plug-in: You need to fill out the following fields for the JIRA Plug-in to operate correctly: Name -- this needs to be set to JiraDataSync . Caption -- this is the display name of the plugin. Normally you can use something generic such as \"Jira\", however if you have multiple JIRA instances you might want to name it something specific such as \"Jira External\". If you don't enter a value, the display name will be \"JiraDataSync\" Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the full URL to the JIRA installation being connected to (including any custom port numbers). Entering this URL into a web browser should bring up the JIRA login page. It is typically of the form: https://mycompany.atlassian.net Login -- this should be set to a valid login to the JIRA installation. The login needs to have permissions to create and view issues and versions within JIRA. Typically this is your Atlassian email address. Password -- this should be set to the API Key ( not password ) of the Atlassian login specified above. Time Offset -- normally this should be set to zero, but if you find that issues being changed in JIRA are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your JIRA installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. Auto-Map Users -- This changes the way that the plugin maps users in SpiraTeam to those in JIRA: **Auto-Map = True\\ **With this setting, all users in SpiraTeam need to have the same username as those in JIRA. If this is the case then you do not need to perform the user-mapping task . This is a big time-saver if you can guarantee that all usernames are the same in both systems. **Auto-Map = False\\ **With this setting, users in SpiraTeam and JIRA are free to have different usernames because you specify the corresponding JIRA name for each user as outlined in Configuring the User Mapping Custom 01 -- This is used to specify a JIRA custom property that should be mapped to the built-in SpiraTeam Incident Severity field (which does not exist in JIRA). This can be left empty for now and will be discussed below in Configuring the Data Mapping . Custom 02 -- This should be set to the word \"True\" if you want to have the new issues submitted to JIRA be submitted using a specified SecurityLevel. If you're not using the security level feature of JIRA, leave the field blank. Custom 03 -- This determines how the synchronization of incidents works: Default (leave blank) -- By default the plugin will log new issues from SpiraTeam to JIRA, and from JIRA to SpiraTeam. Updates will only occur from JIRA to SpiraTeam. This is the recommended option for most users. \"True\" -- If you enter the word \"True\" in this setting, the plugin will log new issues from SpiraTeam to JIRA. It will NOT log new issues from JIRA into SpiraTeam. Updates will only occur from JIRA to SpiraTeam.. This is useful if you want to prevent existing issues in JIRA from being loaded into SpiraTeam. \"Both\" -- If you enter the word \"Both\" in this setting, the plugin will allow full bidirectional synchronization of new incidents/issues and also updates to existing incidents/issues in both SpiraTeam and JIRA. This option should only be used if you have a well-defined set of workflows that make sense in both systems, and that do not conflict.\\ This option is not recommended for novice users. Custom 04 -- This should be set to a comma-separated list of IDs of any JIRA issue types that you want to be synchronized with SpiraTeam requirements instead of incidents. If you leave this blank, all JIRA issue types will be synchronized with incidents. Custom 05 -- This should be set to the name of the JIRA issue link type that you want SpiraTeam incident associations to use. If you leave this blank, incident associations in SpiraTeam will not be imported into JIRA. You can get the list of issue link types from the following screen in JIRA: Note: For most users, we recommend leaving Custom 01 -- Custom 04 blank.","title":"Configuring the Plug-In"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#configuring-the-data-mapping","text":"Next, you need to configure the data mapping between SpiraTeam and JIRA. This allows the various projects, users, releases, incident types, statuses, priorities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Enhancement\" in SpiraTeam is the same as a \"New Feature\" in JIRA (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases (equivalent to JIRA versions) in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below. However, to make the data mapping process easier, we have a helpful utility that will help you connect to your JIRA instance (both cloud or server) and determine the matching IDs for the various fields in JIRA: You can download it from this URL: https://www.inflectra.com/Downloads/JiraConfigurationHelper.zip Once you have downloaded and unzipped the program, run the JiraConfigurationHelper.exe and the following screen will be displayed: Enter in the URL, login and password/API Key for your JIRA instance and click Connect : Choose the project in JIRA that you will be connecting to SpiraTest and then the list of issue types, issue statuses, issue priorities, components, versions and custom fields will be displayed. We will be using this tool later on when you want to get some of the ID values to populate in SpiraTest.","title":"Configuring the Data Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#configuring-the-project-mapping","text":"From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the JIRA plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with JIRA, you need to enter: External Key -- This should be set to the name of the project Key in JIRA. Typically, this is a short acronym for the project: Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project.","title":"Configuring the Project Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#configuring-the-user-mapping","text":"To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in JIRA: Click on the 'Data Mapping' tab to list all the configured data-synchronization plug-ins for this user. In the text box next to the JIRA Data-Sync plug-in entry, you need to enter one of the following Jira user identifiers to allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in Jira: Email Address - you can enter in the email address of the user in Jira. This will only work if the user has set their user profile to be public . This requires that the profile has its email address visibility set to Anyone inside Jira: Atlassian AccountID - you can enter in the corresponding Atlassian AccountID value into this field. This will work regardless of whether the user's profile is public or private. Click [Save] once you've entered the appropriate user identifier name. You should now repeat for the other users who will be active in both systems. If you have set the \"Auto-Map Users\" option in the JIRA plugin, you can skip this section completely.","title":"Configuring the User Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#configuring-the-release-mapping","text":"When the data-synchronization service runs, when it comes across a release/iteration in SpiraTeam that it has not seen before, it will create a corresponding \"Version\" in JIRA. Similarly, if it comes across a new Version in JIRA that it has not seen before, it will create a new Release in SpiraTeam. Therefore, when using both systems together, it is recommended that you only enter new Releases/Versions in one system and let the data-synchronization service add them to the other system. However, you may start out with the situation where you already have pre-existing Releases/Version in both systems that you need to associate in the data-mapping. If you don't do this, you may find that duplicates get created when you first enable the data-synchronization service. Therefore, for any Releases/Iterations that already exist in BOTH systems please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties, you will see an additional text property called \" Jira ID \" that is used to store the mapped external identifier for the equivalent Version in JIRA. You need to locate the ID of the equivalent version in JIRA, enter it into this text-box and click [Save]. You should now repeat for all the other pre-existing releases. The JIRA ID can be found using the Jira Configuration Helper using the Versions tab:","title":"Configuring the Release Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#configuring-the-standard-field-mapping","text":"Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident and requirement fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the JiraDataSync plug-in entry: From this screen, you need to click on Priority, Severity, Component, Status and Type in turn to configure the incident field mappings. If you're using the option to have JIRA also synchronize some issue types as requirements, then you'll need to also configure the Requirement Importance, Type, Component and Status fields.","title":"Configuring the Standard Field Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#a-incident-type","text":"Click on the \"Type\" hyperlink under Incident Standard Fields to bring up the Incident type mapping configuration screen: The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching JIRA issue type ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields (e.g. Bug and Incident in SpiraTeam are both equivalent to Bug in JIRA), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Types tab of the Jira configuration helper:","title":"a) Incident Type"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#b-incident-status","text":"Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching JIRA issue status ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields (e.g. New and Open in SpiraTeam are both equivalent to Open in JIRA), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). We recommend that you always point the New and Open statuses inside SpiraTeam to point to the ID for \"Open\" inside JIRA and make Open in SpiraTeam the Primary status of the two. This is recommended so that as new incidents in SpiraTeam get synched over to JIRA, they will get switched to the Open status in JIRA which will then be synched back to \"Open\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with JIRA and those that haven't. The JIRA ID can be found by using the Issue Statuses tab of the Jira configuration helper:","title":"b) Incident Status"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#c-incident-priority","text":"Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching JIRA priority ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Priorities tab of the Jira configuration helper:","title":"c) Incident Priority"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#d-incident-component-optional","text":"Click on the \"Component\" hyperlink under Incident Standard Fields to bring up the Incident component mapping configuration screen: The table lists each of the components available in SpiraTeam and provides you with the ability to enter the matching JIRA component ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Components tab of the Jira configuration helper: :","title":"d) Incident Component (Optional)"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#e-incident-severity-optional","text":"Click on the \"Severity\" hyperlink under Incident Standard Fields to bring up the Incident severity mapping configuration screen: Unlike the other incident standard fields, JIRA doesn't actually have a built-in field for storing the severity of an issue, so if you want to be able to see the SpiraTeam incident severity in JIRA, you'll need to create a JIRA custom list field to store the different severity values. If you don't want to synchronize severity values with JIRA, you can skip the rest of this section. Once you have created a custom field in JIRA to contain the list of severity values, you need to now populate the above table with the name (Not the ID) of the severity custom property values inside JIRA and click Update. Secondly you need to go to the Plug-in configuration screen: On this screen you need to enter the ID of the custom field that you're using to store severities in JIRA and populate the Custom 01 property with this value (see above). The ID can be found by using the Custom Fields tab of the Jira Configuration Helper:","title":"e) Incident Severity (Optional)"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#f-requirement-status-optional","text":"Click on the \"Status\" hyperlink under Requirement Standard Fields to bring up the Requirement status mapping configuration screen: The table lists each of the requirement statuses available in SpiraTeam and provides you with the ability to enter the matching JIRA issue status ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Statuses tab of the Jira configuration helper:","title":"f) Requirement Status (Optional)"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#g-requirement-importance-optional","text":"Click on the \"Importance\" hyperlink under Requirement Standard Fields to bring up the Requirement Importance mapping configuration screen: The table lists each of the requirement importances available in SpiraTeam and provides you with the ability to enter the matching JIRA priority ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Priorities tab of the Jira configuration helper:","title":"g) Requirement Importance (Optional)"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#h-requirement-type-optional","text":"Click on the \"Type\" hyperlink under Requirement Standard Fields to bring up the Requirement type mapping configuration screen: The table lists each of the requirement types available in SpiraTeam and provides you with the ability to enter the matching JIRA issue type ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields (e.g. Use Case and User Story in SpiraTeam are both equivalent to User Story in JIRA), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Issue Types tab of the Jira configuration helper:","title":"h) Requirement Type (Optional)"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#i-requirement-component-optional","text":"Click on the \"Component\" hyperlink under Requirement Standard Fields to bring up the Requirement component mapping configuration screen: The table lists each of the components available in SpiraTeam and provides you with the ability to enter the matching JIRA component ID for each one. You can map multiple SpiraTeam fields to the same JIRA fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from JIRA to SpiraTeam). The JIRA ID can be found by using the Components tab of the Jira configuration helper: :","title":"i) Requirement Component (Optional)"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#configuring-the-custom-property-mapping","text":"Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in JIRA and also for custom properties in SpiraTeam that are used to map to standard fields in JIRA (Environment, Resolution and SecurityLevel) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident or Requirement Custom Property that you want to add data-mapping information for. We will consider the four different types of mapping that you might want to enter:","title":"Configuring the Custom Property Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#a-scalar-custom-properties","text":"This refers to custom properties that have a simple user-entered value and don't need to have their specific options mapped between SpiraTeam and JIRA. All of the custom property types except List and Multi-List fall into this category (e.g. Text, Date, User, Boolean, Decimal, Integer, etc.) Click on the hyperlink of the scalar custom property under Incident/Requirement Custom Properties to bring up the custom property mapping configuration screen. For scalar custom properties, there will be no values listed in the lower half of the screen. You need to lookup the ID of the custom field in JIRA that matches this custom property in SpiraTeam. Once you have entered the id of the custom field, click [Update]. The ID can be found by using the Custom Fields tab of the Jira Configuration Helper:","title":"a) Scalar Custom Properties"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#b-list-custom-properties","text":"This refers to custom properties that are either of type List or Multi-List . Click on the hyperlink of the list custom property under Incident/Requirement Custom Properties to bring up the custom property mapping configuration screen. For list custom properties there will be a textbox for both the custom field itself and a mapping table for each of the custom property values that need to be mapped: First you need to lookup the ID of the custom field in JIRA that matches this custom property in SpiraTeam. This should be entered in the 'External Key' field below the name of the custom property. The ID can be found by using the Custom Fields tab of the Jira Configuration Helper: Next for each of the Property Values in the table (in the lower half of the page) you need to enter the full name (not the id this time) of the custom field value as specified in JIRA:","title":"b) List Custom Properties"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#c-jiras-resolution-field","text":"If you would like the values of the JIRA ' Resolution' field to be synchronized back to SpiraTeam, then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various resolution names that exist inside JIRA. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Resolution\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Resolution field in JIRA. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the JIRA ID of the various Resolutions that are configured in JIRA. The external ID can be found by looking at the URL inside JIRA which choosing to View/Edit the resolution name/description.","title":"c) JIRA's Resolution Field"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#d-jiras-environment-field","text":"If your instance of JIRA requires that all new issues are submitted with an 'Environment' description specified, then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the environment description within SpiraTeam. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \" Environment \" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Environment field in JIRA.","title":"d) JIRA's Environment Field"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#e-jiras-security-level-field","text":"If your instance of JIRA requires that all new issues are submitted with a 'Security Level' then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various security levels that exist inside JIRA. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. First you need to enter the word \" SecurityLevel \" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Security Level field in JIRA. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the JIRA ID of the various Security Levels that are configured in JIRA. The external ID can be found by looking at the URL inside JIRA which choosing to View/Edit the security level name/description.","title":"e) JIRA's Security Level Field"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#f-jiras-issue-key-field","text":"It can be convenient to create a SpiraTeam custom property to store the JIRA Issue Key (the ID used to identify an issue in JIRA). This allows you to display a list of incients in SpiraTest and see the corresponding JIRA ID in the same list. You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the JIRA issue key within SpiraTeam. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \" JiraIssueKey \" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Issue Key field in JIRA. Once you have updated the various mapping sections, you are now ready to use the integration.","title":"f) JIRA's Issue Key Field"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#using-spirateam-with-jira","text":"Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into JIRA and any existing issues in JIRA will get loaded into SpiraTeam as either incidents or requirements (depending on your configuration). At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any issues with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with JIRA on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTest or SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Developers can log new defects into either SpiraTeam or JIRA. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam At this point, the incident should not be acted upon inside SpiraTeam and all data changes to the issue should be made inside JIRA. To enforce this, you should modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with JIRA after that point. As the issue progresses through the customized JIRA workflow, changes to the type of issue, changes to its status, priority, description and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTest/SpiraTeam using the test cases managed by SpiraTest/SpiraTeam and the incidents managed on behalf of SpiraTest/SpiraTeam inside JIRA.","title":"Using SpiraTeam with JIRA"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Jira-Cloud/#using-the-jira-cloud-connector","text":"Once you have the data-synchronization established between SpiraTest and Jira Cloud, we have an additional Atlassian marketplace connector that you can use (see https://marketplace.atlassian.com/apps/1218742/spiratest-app-for-jira ): You can install the connector by following these instructions: Log into your Jira instance as an admin. Click the admin dropdown and choose Add-ons. The Find new apps or Find new add-ons screen loads. Locate SpiraTest app for Jira. Click Install to download and install your app. Click Close in the \"Installed and ready to go\" dialog. Now you need to configure the add-on to connect to your SpiraTest instance. Please enter the following information: SpiraTest URL : this needs to be the base URL for your SpiraTest instance, typically of the form: https://mysite.spiraservice.net https://demo.spiraservice.net/mysite Username : This is the login you use to connect to SpiraTest API Key / RSS Token : This is the RSS Token / API key for the user name you specified. You can get the SpiraTest API Key from within the User Profile screen of SpiraTest:","title":"Using the Jira Cloud Connector"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Mantis/","text":"Using SpiraTeam with Mantis This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Mantis issue tracking system. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into Mantis. Once the incidents are synchronized into Mantis, the development team can then manage the issues in Mantis and have the status changes and additional notes entered in Mantis be reflected back in SpiraTeam. In addition, any new issues logged into mantis will get imported into SpiraTeam so that they can be linked to test cases and requirements. STOP! Please make sure you have first read the Instructions in Setup before proceeding! Configuring the Plug-In The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the Mantis server. To start the configuration, open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for MantisDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the Mantis Data-Synchronization plug-in: You need to fill out the following fields for the Mantis Plug-in to operate correctly: Name -- this needs to be set to MantisDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the MantisDataSync.dll file for any reason, then you need to change the name here to match. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the URL that you use to access your instance of Mantis (e.g. https://www.mycompany.com/bugs ) Login -- this should be set to a valid login to the Mantis installation. The login needs to have permissions to create and view issues and versions within Mantis for the projects that you will be syncing to SpiraTeam. Password -- this should be set to the password of the login specified above. Time Offset -- The time offset between the two servers, if the Mantis server is on a different server than SpiraTeam. For example, if the Mantis server's clock is set to Pacific Standard Time (PST) and the SpiraTeam server is set to Eastern Standard Time (EST), the Mantis server would be three hours behind SpiraTeam, so you would need to put -3 into this field. Auto-Map Users -- If enabled and a mapped user is not found between the two systems, a search will be made comparing logins between SpiraTeam and Mantis for matching UserIDs. If one is found, than that user will be used. If not enabled and a match is not found, then the UserID used will be the connecting user for the Data Sync. (The SpiraTeam User for issues coming into SpiraTeam, and the Mantis Login for issues imported into Mantis.) Custom 01 -- This field specifies whether or not a Resolution item in SpiraTeam, or a Note item in Mantis will be created when an issue is created in either system for a new issue. Valid values are True or False . Default (or blank) is True . Custom 02 -- This field indicates whether or not to convert Carriage Returns and spaces in Mantis issues when synchronizing them into SpiraTeam. If enabled, then carriage returns will be converted to HTML breaks, and multiple spaces will be converted to non-breaking spaces to preserve formatting when importing into SpiraTeam. If disabled, then carriage returns and spaces will be left as-is. Valid values are True or False . Default (or blank) is True . Custom 03 -- This field is only used when 'Auto-Map Users' is enabled and for Incidents synchronized from SpiraTeam into Mantis. If enabled, and the Auto-Map User did not find a user with a matching Login ID, then the Login ID will be set to the User in Spira, even if that user may not exist in Mantis. Depending on Mantis configuration, the user may be accepted, or it may default back to the Mantis UserID that the Data Sync runs under. Valid values are True or False . Default (or blank) is False . Custom 04 -- If enabled, this option specifies whether or not to append the \"Additional Information\" and \"Steps To Reproduce\" fields to the end of the Description field in Spira. During transfer of new issues from Mantis to SpiraTeam, the Description field in SpiraTeam will consist of the Description field in Mantis appended by the Additional Information field in Mantis, and finally the Steps To Reproduce field in Mantis. If this option is disabled, only the Description will be transferred over. Valid values are True or False . Default (or blank) is False . Custom 05 -- This is not currently used by the MantisDataSync, and can be left blank. Configuring the Data Mapping Next, you need to configure the data mapping between SpiraTeam and Mantis. This allows the various projects, users, releases, incident types, statuses, priorities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Enhancement\" in SpiraTeam is the same as a \"Feature\" in Mantis (for example). The following mapping information needs to be setup in SpiraTeam: The linking between the project in SpiraTeam and the project in Mantis. The linking of users between the two systems. The linking of releases between the two systems. The linking of standard SpiraTeam fields to Mantis fields. The linking of custom SpiraTeam fields to Mantis custom fields. Each of these is explained in turn below: Configuring the Project Mapping While working in the project you want to map, from the data synchronization administration page you need to click on the \"View Project Mappings\" hyperlink next to the Mantis plug-in name. This will take you to the data-mapping overview page: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with Mantis, you need to enter: External Key -- This should be set to the ID of the project in Mantis. To get the ID of the Project in Mantis, log in as an administrator and go to Manage -> Manage Projects: Then hover the mouse over the project name. The project ID will be displayed in the URL line as project_id=X where X is the numeric ID of the project. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project, if you are going to want to Sync the new project up to Mantis. Configuring the User Mapping To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in Mantis: You will notice that below the Active flag for the user is a list of all the configured data-synchronization plug-ins. In the text box next to the MantisDataSync ID you need to enter the Login ID of this user in Mantis. If you have the \"Automap Users\" checkbox enabled in the MantisDataSync plugin, then if no link is created, the system will scan for a matching Login ID from both systems and use a match. (If you then do not have Custom3 set to \" False \", then for data going into Mantis the User ID will be forced to that of the User ID in SpiraTeam.) Once you have entered the Mantis Login ID in, click [Update]. You should now repeat for the other users who will be active in both systems. Configuring the Release Mapping When the data-synchronization service runs and it comes across a release in SpiraTeam (or a Version in Mantis) that it has not linked before, it will create a corresponding entry in the other system. When starting out a new project, it is recommended that you let the MantisDataSync handle creation of the releases/versions in either system, and then edit the information once the link is made. In cases where you are syncing up two existing projects in both systems, it is advised that you link any existing releases that exist in both systems manually, and then only create new releases in one system. To link a release in SpiraTeam up to a version in Mantis, please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties configured for Releases, you will see an additional text property called \" MantisDataSync ID \" that is used to store the mapped external identifier for the equivalent Release in Mantis. The Mantis ID of a version is the string that is in the The Mantis Release ID can be found by going to Manage -> Manage Projects -> Versions and viewing a release's details: The Mantis Release ID is the highlighted text field. Copy and paste this into the field in SpiraTeam. Depending on your regional settings in both applications, this field will likely be case-sensitive. For versions imported into Mantis from SpiraTeam, the Version will have an \"(S)\" appended to the name, and for versions in SpiraTeam imported from Mantis the version field of the Release will have \"(M)\" appended to the name. Configuring the Standard Field Mapping Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the MantisDataSync plug-in entry: From this screen, you need to set up the Priority, Severity, Status, and Type fields: a) Incident Type The Incident Type field is optional and can be linked to the Mantis Category selection. If you do not link values , then all issues being imported into SpiraTeam from Mantis will be set to the Default Type (as specified in the \"View/Edit Types\" screen), and issues going from SpiraTeam into Mantis will be assigned to the first Category in the list. (Usually Mantis orders them alphabetically, but this may change depending on your installation. If you do not have any Categories set-up, then issues will not transfer over and error messages will be logged.) For existing issues, updates to this field will not be transferred. The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching Mantis Category for each one. The value to put in External ID is the Category text: The Mantis Release ID is the highlighted text field. Copy and paste this into the field in SpiraTeam. Depending on your regional settings in both applications, this field will likely be case-sensitive. You can map multiple SpiraTeam fields to the same Mantis fields (e.g. Bug and Incident in SpiraTeam are both equivalent to category \"development\" in Mantis). In a situation like this, enter in the Mantis category in both Big and Incident external keys, and decide which one will be primary. For issues coming from Mantis into SpiraTeam, the one marked Primary will be used, and for issues being created in Mantis, the same category will be used to create the issue. b) Incident Status The Incident Status is an optional field to be linked to the Mantis field by the same name. If you do not link values , then defaults will be used. For issues coming from Mantis into SpiraTeam, incidents will be marked as 'New' (as defined by the \"View/Edit Status\" in Administration), and for issues being transferred to Mantis, the default is 'new'. Note that if an issue has an Owner in SpiraTeam, then the default for the new issue in Mantis is 'assigned'. For existing issues, updates to the field will not be transferred over. The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching Mantis Category for each one. The values to put in External Key is any one of the Status values in Mantis. By default in Mantis, the available statuses are: The Mantis values are in the highlighted text field. Type these into the External Key field in SpiraTeam. Depending on your regional settings in both applications, this field will likely be case-sensitive. You can map multiple SpiraTeam fields to the same Mantis fields, just like the Incident Type above. c) Incident Priority & Severity The Incident Priority and Severity are optional fields that are linked to Mantis fields by the same name. If you do not link values , then defaults will be used. For issues coming from Mantis into SpiraTeam, incidents will leave those fields undefined (unset). For issues coming from SpiraTeam into Mantis, the default priority of 'normal' and severity of 'minor' is used. For existing issues, updates to the field will not be transferred over. The table lists each of the priorities available in SpiraTeam and provides you with the ability to enter the matching Mantis priority for each one. (The table for Severities has the same functionality.) The values to put in External Key are any one of the Priority (or Severity) values in Mantis. By default in Mantis, the available values are: The Mantis values are in the highlighted fields above. Type these into the External Key field in SpiraTeam. Depending on your regional settings in both applications, this field will likely be case-sensitive. You can map multiple SpiraTeam fields to the same Mantis fields, just like described in Incident Type above. Configuring the Custom Property Mapping Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. At the moment, only custom fields in Mantis can be linked to custom fields in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for. Both field types in SpiraTeam can be linked up to any of the supported field types in Mantis. Linking between the two systems is done in text values only -- that means that if you have a SpiraTeam custom list, then the values that will be put into Mantis will be the strings of the list. The same works for moving fields back from Mantis. Rules for linking different field types up are as follows: SpiraTeam 'List' to Mantis 'Enum', 'List', or 'Multiselection' : For linking these types of fields together, the available values must match. For example, if you have \"Windows\" as an item in your list in SpiraTeam, then in the associated field in Mantis, \"Windows\" must be an available item as well. In instances where there is no match, then the default will be used in either system. On a Multiselection-type field, for importing back into SpiraTeam, only the first (top) selected value will be stored. SpiraTeam 'List' to Mantis 'Numeric', 'Float', 'Date', 'Text', or 'Email' : In this case, the text value of the SpiraTeam list will be assigned to the Mantis field, and values must be exact. For example, if you linked a SpiraTeam List to a Mantis Date field, the value for the List must be a valid date, like \"1/1/2010\". If any value fails the Mantis validation, the value will be ignored and the custom field will be set blank or to default. When transferring a value back from Mantis into SpiraTeam, the text must equal an available item in the custom list, or the field will be left blank. SpiraTeam 'Text' to Mantis 'Numeric', 'Float', 'Date', 'Text', or 'Email' : In this case, text will be copied over as-is. Note that in some special cases, like the number, date, and e-mail fields, Mantis may apply formatting or verification on values transferred over. SpiraTeam 'Text' to Mantis 'Enum', 'List', or 'Multiselection' : When pulling data from Mantis, the SpiraTeam custom field will be translated as the field in Mantis displays. However, when transferring data to Mantis, if the text in the SpiraTeam field does not match an available item in the lists, then Mantis may leave the field blank or set it to the default value. a) Mapping custom fields For a SpiraTeam test field, all you need to do is link the custom field to the custom field in Mantis. To do this, click on the name of the custom field under the \"Custom Properties\" header in the MantisDataSync Project Mappings, and you will see a screen allowing you to enter the External Key: insert screenshot of custom map text prop screen with mapping for below insert screenshot of custom map text prop screen with mapping for below In the External Key field, put the name of your custom field in Mantis: Once you have updated the various mapping sections, you are now ready to use the service. Using SpiraTeam with Mantis Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into Mantis and any existing issues in Mantis will get loaded into SpiraTeam. After the first sync, we recommend opening the Windows Event Viewer and viewing the Application Log. Any errors (unable to connect messages, invalid required field mappings) and warnings (incomplete field mappings) will be displayed. If on Server 2008/Vista or later, you can filter by the Application name \"MantisDataSync\". If you see any error messages (or warning messages that you want to correct before continuing) at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any issues with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with Mantis on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTest or SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Developers using Mantis can log new defects into either SpiraTeam or Mantis. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam. Since Mantis is considered the master system for incidents/issues, all data changes to the issue should be made inside Mantis. To enforce this, you should modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them from making changes in conflict with Mantis after that point. As the issue progresses in Mantis, changes to the type of issue, changes to its status, priority, description and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTeam using the test cases managed by SpiraTeam and the incidents managed on behalf of SpiraTeam inside Mantis.","title":"Mantis"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Mantis/#using-spirateam-with-mantis","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Mantis issue tracking system. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into Mantis. Once the incidents are synchronized into Mantis, the development team can then manage the issues in Mantis and have the status changes and additional notes entered in Mantis be reflected back in SpiraTeam. In addition, any new issues logged into mantis will get imported into SpiraTeam so that they can be linked to test cases and requirements. STOP! Please make sure you have first read the Instructions in Setup before proceeding!","title":"Using SpiraTeam with Mantis"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Mantis/#configuring-the-plug-in","text":"The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the Mantis server. To start the configuration, open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for MantisDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the Mantis Data-Synchronization plug-in: You need to fill out the following fields for the Mantis Plug-in to operate correctly: Name -- this needs to be set to MantisDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the MantisDataSync.dll file for any reason, then you need to change the name here to match. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the URL that you use to access your instance of Mantis (e.g. https://www.mycompany.com/bugs ) Login -- this should be set to a valid login to the Mantis installation. The login needs to have permissions to create and view issues and versions within Mantis for the projects that you will be syncing to SpiraTeam. Password -- this should be set to the password of the login specified above. Time Offset -- The time offset between the two servers, if the Mantis server is on a different server than SpiraTeam. For example, if the Mantis server's clock is set to Pacific Standard Time (PST) and the SpiraTeam server is set to Eastern Standard Time (EST), the Mantis server would be three hours behind SpiraTeam, so you would need to put -3 into this field. Auto-Map Users -- If enabled and a mapped user is not found between the two systems, a search will be made comparing logins between SpiraTeam and Mantis for matching UserIDs. If one is found, than that user will be used. If not enabled and a match is not found, then the UserID used will be the connecting user for the Data Sync. (The SpiraTeam User for issues coming into SpiraTeam, and the Mantis Login for issues imported into Mantis.) Custom 01 -- This field specifies whether or not a Resolution item in SpiraTeam, or a Note item in Mantis will be created when an issue is created in either system for a new issue. Valid values are True or False . Default (or blank) is True . Custom 02 -- This field indicates whether or not to convert Carriage Returns and spaces in Mantis issues when synchronizing them into SpiraTeam. If enabled, then carriage returns will be converted to HTML breaks, and multiple spaces will be converted to non-breaking spaces to preserve formatting when importing into SpiraTeam. If disabled, then carriage returns and spaces will be left as-is. Valid values are True or False . Default (or blank) is True . Custom 03 -- This field is only used when 'Auto-Map Users' is enabled and for Incidents synchronized from SpiraTeam into Mantis. If enabled, and the Auto-Map User did not find a user with a matching Login ID, then the Login ID will be set to the User in Spira, even if that user may not exist in Mantis. Depending on Mantis configuration, the user may be accepted, or it may default back to the Mantis UserID that the Data Sync runs under. Valid values are True or False . Default (or blank) is False . Custom 04 -- If enabled, this option specifies whether or not to append the \"Additional Information\" and \"Steps To Reproduce\" fields to the end of the Description field in Spira. During transfer of new issues from Mantis to SpiraTeam, the Description field in SpiraTeam will consist of the Description field in Mantis appended by the Additional Information field in Mantis, and finally the Steps To Reproduce field in Mantis. If this option is disabled, only the Description will be transferred over. Valid values are True or False . Default (or blank) is False . Custom 05 -- This is not currently used by the MantisDataSync, and can be left blank.","title":"Configuring the Plug-In"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Mantis/#configuring-the-data-mapping","text":"Next, you need to configure the data mapping between SpiraTeam and Mantis. This allows the various projects, users, releases, incident types, statuses, priorities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Enhancement\" in SpiraTeam is the same as a \"Feature\" in Mantis (for example). The following mapping information needs to be setup in SpiraTeam: The linking between the project in SpiraTeam and the project in Mantis. The linking of users between the two systems. The linking of releases between the two systems. The linking of standard SpiraTeam fields to Mantis fields. The linking of custom SpiraTeam fields to Mantis custom fields. Each of these is explained in turn below:","title":"Configuring the Data Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Mantis/#configuring-the-project-mapping","text":"While working in the project you want to map, from the data synchronization administration page you need to click on the \"View Project Mappings\" hyperlink next to the Mantis plug-in name. This will take you to the data-mapping overview page: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with Mantis, you need to enter: External Key -- This should be set to the ID of the project in Mantis. To get the ID of the Project in Mantis, log in as an administrator and go to Manage -> Manage Projects: Then hover the mouse over the project name. The project ID will be displayed in the URL line as project_id=X where X is the numeric ID of the project. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project, if you are going to want to Sync the new project up to Mantis.","title":"Configuring the Project Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Mantis/#configuring-the-user-mapping","text":"To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in Mantis: You will notice that below the Active flag for the user is a list of all the configured data-synchronization plug-ins. In the text box next to the MantisDataSync ID you need to enter the Login ID of this user in Mantis. If you have the \"Automap Users\" checkbox enabled in the MantisDataSync plugin, then if no link is created, the system will scan for a matching Login ID from both systems and use a match. (If you then do not have Custom3 set to \" False \", then for data going into Mantis the User ID will be forced to that of the User ID in SpiraTeam.) Once you have entered the Mantis Login ID in, click [Update]. You should now repeat for the other users who will be active in both systems.","title":"Configuring the User Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Mantis/#configuring-the-release-mapping","text":"When the data-synchronization service runs and it comes across a release in SpiraTeam (or a Version in Mantis) that it has not linked before, it will create a corresponding entry in the other system. When starting out a new project, it is recommended that you let the MantisDataSync handle creation of the releases/versions in either system, and then edit the information once the link is made. In cases where you are syncing up two existing projects in both systems, it is advised that you link any existing releases that exist in both systems manually, and then only create new releases in one system. To link a release in SpiraTeam up to a version in Mantis, please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties configured for Releases, you will see an additional text property called \" MantisDataSync ID \" that is used to store the mapped external identifier for the equivalent Release in Mantis. The Mantis ID of a version is the string that is in the The Mantis Release ID can be found by going to Manage -> Manage Projects -> Versions and viewing a release's details: The Mantis Release ID is the highlighted text field. Copy and paste this into the field in SpiraTeam. Depending on your regional settings in both applications, this field will likely be case-sensitive. For versions imported into Mantis from SpiraTeam, the Version will have an \"(S)\" appended to the name, and for versions in SpiraTeam imported from Mantis the version field of the Release will have \"(M)\" appended to the name.","title":"Configuring the Release Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Mantis/#configuring-the-standard-field-mapping","text":"Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the MantisDataSync plug-in entry: From this screen, you need to set up the Priority, Severity, Status, and Type fields: a) Incident Type The Incident Type field is optional and can be linked to the Mantis Category selection. If you do not link values , then all issues being imported into SpiraTeam from Mantis will be set to the Default Type (as specified in the \"View/Edit Types\" screen), and issues going from SpiraTeam into Mantis will be assigned to the first Category in the list. (Usually Mantis orders them alphabetically, but this may change depending on your installation. If you do not have any Categories set-up, then issues will not transfer over and error messages will be logged.) For existing issues, updates to this field will not be transferred. The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching Mantis Category for each one. The value to put in External ID is the Category text: The Mantis Release ID is the highlighted text field. Copy and paste this into the field in SpiraTeam. Depending on your regional settings in both applications, this field will likely be case-sensitive. You can map multiple SpiraTeam fields to the same Mantis fields (e.g. Bug and Incident in SpiraTeam are both equivalent to category \"development\" in Mantis). In a situation like this, enter in the Mantis category in both Big and Incident external keys, and decide which one will be primary. For issues coming from Mantis into SpiraTeam, the one marked Primary will be used, and for issues being created in Mantis, the same category will be used to create the issue. b) Incident Status The Incident Status is an optional field to be linked to the Mantis field by the same name. If you do not link values , then defaults will be used. For issues coming from Mantis into SpiraTeam, incidents will be marked as 'New' (as defined by the \"View/Edit Status\" in Administration), and for issues being transferred to Mantis, the default is 'new'. Note that if an issue has an Owner in SpiraTeam, then the default for the new issue in Mantis is 'assigned'. For existing issues, updates to the field will not be transferred over. The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching Mantis Category for each one. The values to put in External Key is any one of the Status values in Mantis. By default in Mantis, the available statuses are: The Mantis values are in the highlighted text field. Type these into the External Key field in SpiraTeam. Depending on your regional settings in both applications, this field will likely be case-sensitive. You can map multiple SpiraTeam fields to the same Mantis fields, just like the Incident Type above. c) Incident Priority & Severity The Incident Priority and Severity are optional fields that are linked to Mantis fields by the same name. If you do not link values , then defaults will be used. For issues coming from Mantis into SpiraTeam, incidents will leave those fields undefined (unset). For issues coming from SpiraTeam into Mantis, the default priority of 'normal' and severity of 'minor' is used. For existing issues, updates to the field will not be transferred over. The table lists each of the priorities available in SpiraTeam and provides you with the ability to enter the matching Mantis priority for each one. (The table for Severities has the same functionality.) The values to put in External Key are any one of the Priority (or Severity) values in Mantis. By default in Mantis, the available values are: The Mantis values are in the highlighted fields above. Type these into the External Key field in SpiraTeam. Depending on your regional settings in both applications, this field will likely be case-sensitive. You can map multiple SpiraTeam fields to the same Mantis fields, just like described in Incident Type above.","title":"Configuring the Standard Field Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Mantis/#configuring-the-custom-property-mapping","text":"Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. At the moment, only custom fields in Mantis can be linked to custom fields in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for. Both field types in SpiraTeam can be linked up to any of the supported field types in Mantis. Linking between the two systems is done in text values only -- that means that if you have a SpiraTeam custom list, then the values that will be put into Mantis will be the strings of the list. The same works for moving fields back from Mantis. Rules for linking different field types up are as follows: SpiraTeam 'List' to Mantis 'Enum', 'List', or 'Multiselection' : For linking these types of fields together, the available values must match. For example, if you have \"Windows\" as an item in your list in SpiraTeam, then in the associated field in Mantis, \"Windows\" must be an available item as well. In instances where there is no match, then the default will be used in either system. On a Multiselection-type field, for importing back into SpiraTeam, only the first (top) selected value will be stored. SpiraTeam 'List' to Mantis 'Numeric', 'Float', 'Date', 'Text', or 'Email' : In this case, the text value of the SpiraTeam list will be assigned to the Mantis field, and values must be exact. For example, if you linked a SpiraTeam List to a Mantis Date field, the value for the List must be a valid date, like \"1/1/2010\". If any value fails the Mantis validation, the value will be ignored and the custom field will be set blank or to default. When transferring a value back from Mantis into SpiraTeam, the text must equal an available item in the custom list, or the field will be left blank. SpiraTeam 'Text' to Mantis 'Numeric', 'Float', 'Date', 'Text', or 'Email' : In this case, text will be copied over as-is. Note that in some special cases, like the number, date, and e-mail fields, Mantis may apply formatting or verification on values transferred over. SpiraTeam 'Text' to Mantis 'Enum', 'List', or 'Multiselection' : When pulling data from Mantis, the SpiraTeam custom field will be translated as the field in Mantis displays. However, when transferring data to Mantis, if the text in the SpiraTeam field does not match an available item in the lists, then Mantis may leave the field blank or set it to the default value. a) Mapping custom fields For a SpiraTeam test field, all you need to do is link the custom field to the custom field in Mantis. To do this, click on the name of the custom field under the \"Custom Properties\" header in the MantisDataSync Project Mappings, and you will see a screen allowing you to enter the External Key: insert screenshot of custom map text prop screen with mapping for below insert screenshot of custom map text prop screen with mapping for below In the External Key field, put the name of your custom field in Mantis: Once you have updated the various mapping sections, you are now ready to use the service.","title":"Configuring the Custom Property Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Mantis/#using-spirateam-with-mantis_1","text":"Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into Mantis and any existing issues in Mantis will get loaded into SpiraTeam. After the first sync, we recommend opening the Windows Event Viewer and viewing the Application Log. Any errors (unable to connect messages, invalid required field mappings) and warnings (incomplete field mappings) will be displayed. If on Server 2008/Vista or later, you can filter by the Application name \"MantisDataSync\". If you see any error messages (or warning messages that you want to correct before continuing) at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any issues with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with Mantis on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTest or SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Developers using Mantis can log new defects into either SpiraTeam or Mantis. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam. Since Mantis is considered the master system for incidents/issues, all data changes to the issue should be made inside Mantis. To enforce this, you should modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them from making changes in conflict with Mantis after that point. As the issue progresses in Mantis, changes to the type of issue, changes to its status, priority, description and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTeam using the test cases managed by SpiraTeam and the incidents managed on behalf of SpiraTeam inside Mantis.","title":"Using SpiraTeam with Mantis"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Redmine/","text":"Using SpiraTeam with Redmine This section outlines how to use SpiraTeam in conjunction with the open-source Redmine bug-tracking and project management system. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTeam, and then have the new incidents generated during the run be automatically loaded into Redmine. Once the incidents are loaded into Redmine as issues, the development team can then manage the lifecycle of these issues in Redmine, and have the status changes in Redmine be reflected back in SpiraTeam. In addition, any issues logged directly into Redmine will get imported into SpiraTeam so that they can be linked to test cases and requirements. STOP! Please make sure you have first read the Instructions in Setup before proceeding! Configuring the Plug-In The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the Redmine server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for RedmineDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the Redmine Data-Synchronization plug-in: You need to fill out the following fields for the Redmine Plug-in to operate correctly: Name -- this needs to be set to RedmineDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the RedmineDataSync.dll file for any reason, then you need to change the name here to match. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should be the base URL of the Redmine installation. As an example, for the public demo installation of Redmine, it would be: http://demo.redmine.org Login -- this should be set to a valid login to the Redmine installation -- the login needs to have permissions to create and view bugs and versions within Redmine. Password -- this should be set to the password of the login specified above. Time Offset -- normally this should be set to zero, but if you find that issues being changed in Redmine are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your Redmine installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. Auto-Map Users -- This changes the way that the plugin maps users in SpiraTeam to those in Redmine: **Auto-Map = True **With this setting, all users in SpiraTeam need to have the same username as those in Redmine. If this is the case then you do not need to perform the user-mapping task . This is a big time-saver if you can guarantee that all usernames are the same in both systems. **Auto-Map = False **With this setting, users in SpiraTeam and Redmine are free to have different usernames because you specify the corresponding Redmine name for each user as outlined in Configuring the User Mapping . Custom 01 -- This should be set to the word \" false \" if you want to have the plugin restrict synchronization to not create any new incidents in Spira. Custom 02 -- This should be set to the word \" false \" if you want to have the plugin restrict synchronization to not create any new issues in Redmine. Custom 03 -- 05 -- these are not currently used by the Redmine data-sync plug-in and can be left blank. Configuring the Data Mapping Next, you need to configure the data mapping between SpiraTeam and Redmine. This allows the various projects, users, releases, incident types, statuses, priorities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Duplicate\" incident in SpiraTeam is the same as a \"Rejected\" bug in Redmine (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases (equivalent to Redmine versions) in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below: Configuring the Project Mapping From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the Redmine plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with Redmine, you need to enter: External Key -- This should be set to the name of the equivalent project in Redmine. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project. Configuring the User Mapping To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in Redmine: You will notice that in the special Data Mapping tab for the user is a list of all the configured data-synchronization plug-ins. In the text box next to the Redmine Data-Sync plug-in you need to enter the numeric ID for this user in Redmine. This will allow the data-synchronization plug-in to know which user in Redmine matches this SpiraTeam user. Click [Update] once you've entered the appropriate ID value. You should now repeat for the other users who will be active in both systems. Configuring the Release Mapping Now that the projects and users have been mapped correctly, we need to configure the mapping between Releases/Iterations in SpiraTeam and Versions in Redmine. To do this, please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties configured for Releases, you will see an additional text property called \" RedmineDataSync ID \" that is used to store the mapped external identifier for the equivalent Version in Redmine. You need to enter the numeric ID of the equivalent version in Redmine, enter it into this text-box and click [Save]. You should now repeat for all the other releases and iterations in the project. In addition, any Versions that have already been created in Redmine will be automatically imported into SpiraTeam if they do not already exist in SpiraTeam and they have not already been mapped. Configuring the Standard Field Mapping Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the RedmineDataSync plug-in entry: From this screen, you need to click on Priority, Type and Status in turn to configure their values: a) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching Redmine bug status ID for each one. You can map multiple SpiraTeam fields to the same Redmine fields (e.g. Open and Assigned in SpiraTeam are both equivalent to \"In Progress\" (ID=2) in Redmine), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Redmine > SpiraTeam). b) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching Redmine priority ID for each one. You can map multiple SpiraTeam fields to the same Redmine fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Redmine > SpiraTeam). c) Incident Type Incident types in SpiraTeam are equivalent to Trackers in Redmine. Click on the \"Type\" hyperlink under Incident Standard Fields to bring up the Incident type mapping configuration screen: The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching Redmine Tracker ID for each one. You can map multiple SpiraTeam fields to the same Redmine tracker values, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Redmine > SpiraTeam). Configuring the Custom Property Mapping Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for custom properties in SpiraTeam that map to custom fields in Redmine. You will need to first make sure that the custom properties and associated custom lists have been created in both systems: From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for: We will consider the two different types of mapping that you might want to enter. a) Scalar Custom Properties This refers to custom properties that have a simple user-entered value and don't need to have their specific options mapped between SpiraTeam and Redmine. All of the custom property types except List and Multi-List fall into this category (e.g. Text, Date, Boolean, Decimal, Integer, etc.) Click on the hyperlink of the scalar custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For scalar custom properties there will be no values listed in the lower half of the screen. You need to enter the ID of the custom field in Redmine that matches this custom property in SpiraTeam. Once you have entered the id of the custom field, click [Update]. b) List Custom Properties This refers to custom properties that are either of type List or Multi-List . Click on the hyperlink of the list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For list custom properties there will be a textbox for both the custom field itself and a mapping table for each of the custom property values that need to be mapped: First you need to find the ID of the custom field in Redmine that matches this custom property in SpiraTeam. This should be entered in the 'External Key' field below the name of the custom property. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the full name (not the id this time) of the custom field value as specified in Redmine. Once you have updated the various mapping sections, you are now ready to use the service. Using SpiraTest with Redmine Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into Redmine. At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the Data Synchronization service will be displayed. If you see any error messages at this point, we recommend immediately stopping the service and checking the various mapping entries. If you cannot see any issues with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with Redmine on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Developers can log new defects into either SpiraTeam or Redmine. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam All data changes to the issue should be made inside Redmine. To enforce this, you can modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with Redmine after that point. As the issue progresses through the Redmine workflow, changes to the status, priority, tracker, and target version will be updated automatically in SpiraTeam, and any notes added will be added to SpiraTeam as new comments. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTeam using the test cases managed by SpiraTeam and the incidents managed on behalf of SpiraTeam inside Redmine.","title":"Redmine"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Redmine/#using-spirateam-with-redmine","text":"This section outlines how to use SpiraTeam in conjunction with the open-source Redmine bug-tracking and project management system. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTeam, and then have the new incidents generated during the run be automatically loaded into Redmine. Once the incidents are loaded into Redmine as issues, the development team can then manage the lifecycle of these issues in Redmine, and have the status changes in Redmine be reflected back in SpiraTeam. In addition, any issues logged directly into Redmine will get imported into SpiraTeam so that they can be linked to test cases and requirements. STOP! Please make sure you have first read the Instructions in Setup before proceeding!","title":"Using SpiraTeam with Redmine"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Redmine/#configuring-the-plug-in","text":"The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the Redmine server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for RedmineDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the Redmine Data-Synchronization plug-in: You need to fill out the following fields for the Redmine Plug-in to operate correctly: Name -- this needs to be set to RedmineDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the RedmineDataSync.dll file for any reason, then you need to change the name here to match. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should be the base URL of the Redmine installation. As an example, for the public demo installation of Redmine, it would be: http://demo.redmine.org Login -- this should be set to a valid login to the Redmine installation -- the login needs to have permissions to create and view bugs and versions within Redmine. Password -- this should be set to the password of the login specified above. Time Offset -- normally this should be set to zero, but if you find that issues being changed in Redmine are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your Redmine installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. Auto-Map Users -- This changes the way that the plugin maps users in SpiraTeam to those in Redmine: **Auto-Map = True **With this setting, all users in SpiraTeam need to have the same username as those in Redmine. If this is the case then you do not need to perform the user-mapping task . This is a big time-saver if you can guarantee that all usernames are the same in both systems. **Auto-Map = False **With this setting, users in SpiraTeam and Redmine are free to have different usernames because you specify the corresponding Redmine name for each user as outlined in Configuring the User Mapping . Custom 01 -- This should be set to the word \" false \" if you want to have the plugin restrict synchronization to not create any new incidents in Spira. Custom 02 -- This should be set to the word \" false \" if you want to have the plugin restrict synchronization to not create any new issues in Redmine. Custom 03 -- 05 -- these are not currently used by the Redmine data-sync plug-in and can be left blank.","title":"Configuring the Plug-In"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Redmine/#configuring-the-data-mapping","text":"Next, you need to configure the data mapping between SpiraTeam and Redmine. This allows the various projects, users, releases, incident types, statuses, priorities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Duplicate\" incident in SpiraTeam is the same as a \"Rejected\" bug in Redmine (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases (equivalent to Redmine versions) in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below:","title":"Configuring the Data Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Redmine/#configuring-the-project-mapping","text":"From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the Redmine plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with Redmine, you need to enter: External Key -- This should be set to the name of the equivalent project in Redmine. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project.","title":"Configuring the Project Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Redmine/#configuring-the-user-mapping","text":"To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in Redmine: You will notice that in the special Data Mapping tab for the user is a list of all the configured data-synchronization plug-ins. In the text box next to the Redmine Data-Sync plug-in you need to enter the numeric ID for this user in Redmine. This will allow the data-synchronization plug-in to know which user in Redmine matches this SpiraTeam user. Click [Update] once you've entered the appropriate ID value. You should now repeat for the other users who will be active in both systems.","title":"Configuring the User Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Redmine/#configuring-the-release-mapping","text":"Now that the projects and users have been mapped correctly, we need to configure the mapping between Releases/Iterations in SpiraTeam and Versions in Redmine. To do this, please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties configured for Releases, you will see an additional text property called \" RedmineDataSync ID \" that is used to store the mapped external identifier for the equivalent Version in Redmine. You need to enter the numeric ID of the equivalent version in Redmine, enter it into this text-box and click [Save]. You should now repeat for all the other releases and iterations in the project. In addition, any Versions that have already been created in Redmine will be automatically imported into SpiraTeam if they do not already exist in SpiraTeam and they have not already been mapped.","title":"Configuring the Release Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Redmine/#configuring-the-standard-field-mapping","text":"Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the RedmineDataSync plug-in entry: From this screen, you need to click on Priority, Type and Status in turn to configure their values: a) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching Redmine bug status ID for each one. You can map multiple SpiraTeam fields to the same Redmine fields (e.g. Open and Assigned in SpiraTeam are both equivalent to \"In Progress\" (ID=2) in Redmine), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Redmine > SpiraTeam). b) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching Redmine priority ID for each one. You can map multiple SpiraTeam fields to the same Redmine fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Redmine > SpiraTeam). c) Incident Type Incident types in SpiraTeam are equivalent to Trackers in Redmine. Click on the \"Type\" hyperlink under Incident Standard Fields to bring up the Incident type mapping configuration screen: The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching Redmine Tracker ID for each one. You can map multiple SpiraTeam fields to the same Redmine tracker values, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Redmine > SpiraTeam).","title":"Configuring the Standard Field Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Redmine/#configuring-the-custom-property-mapping","text":"Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for custom properties in SpiraTeam that map to custom fields in Redmine. You will need to first make sure that the custom properties and associated custom lists have been created in both systems: From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for: We will consider the two different types of mapping that you might want to enter. a) Scalar Custom Properties This refers to custom properties that have a simple user-entered value and don't need to have their specific options mapped between SpiraTeam and Redmine. All of the custom property types except List and Multi-List fall into this category (e.g. Text, Date, Boolean, Decimal, Integer, etc.) Click on the hyperlink of the scalar custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For scalar custom properties there will be no values listed in the lower half of the screen. You need to enter the ID of the custom field in Redmine that matches this custom property in SpiraTeam. Once you have entered the id of the custom field, click [Update]. b) List Custom Properties This refers to custom properties that are either of type List or Multi-List . Click on the hyperlink of the list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen. For list custom properties there will be a textbox for both the custom field itself and a mapping table for each of the custom property values that need to be mapped: First you need to find the ID of the custom field in Redmine that matches this custom property in SpiraTeam. This should be entered in the 'External Key' field below the name of the custom property. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the full name (not the id this time) of the custom field value as specified in Redmine. Once you have updated the various mapping sections, you are now ready to use the service.","title":"Configuring the Custom Property Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTeam-with-Redmine/#using-spiratest-with-redmine","text":"Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into Redmine. At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the Data Synchronization service will be displayed. If you see any error messages at this point, we recommend immediately stopping the service and checking the various mapping entries. If you cannot see any issues with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with Redmine on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Developers can log new defects into either SpiraTeam or Redmine. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam All data changes to the issue should be made inside Redmine. To enforce this, you can modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with Redmine after that point. As the issue progresses through the Redmine workflow, changes to the status, priority, tracker, and target version will be updated automatically in SpiraTeam, and any notes added will be added to SpiraTeam as new comments. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTeam using the test cases managed by SpiraTeam and the incidents managed on behalf of SpiraTeam inside Redmine.","title":"Using SpiraTest with Redmine"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-Bugzilla/","text":"Using SpiraTest with Bugzilla This section outlines how to use SpiraTest in conjunction with the open-source Bugzilla bug tracking system. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTest, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into Bugzilla. Once the incidents are loaded into Bugzilla as bugs, the development team can then manage the lifecycle of these bugs in Bugzilla, and have the status changes in Bugzilla be reflected back in SpiraTest. In addition, if you are using Bugzilla 4.x or higher, any issues logged directly into Bugzilla will get imported into SpiraTeam so that they can be linked to test cases and requirements. STOP! Please make sure you have first read the Instructions in Setup before proceeding! Configuring the Plug-In The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the Bugzilla server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for BugzillaDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the Bugzilla Data-Synchronization plug-in: You need to fill out the following fields for the Bugzilla Plug-in to operate correctly: Name -- this needs to be set to BugzillaDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the BugzillaDataSync.dll file for any reason, then you need to change the name here to match. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the full URL to the Bugzilla installation's web-service API. This is typically http://<Bugzilla server name>/xmlrpc.cgi Login -- this should be set to a valid login to the Bugzilla installation -- typically an email address. The login needs to have permissions to create and view bugs within Bugzilla. Password -- this should be set to the password of the login specified above. Time Offset -- normally this should be set to zero, but if you find that issues being changed in Bugzilla are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your Bugzilla installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. Auto-Map Users -- this is not currently used by the Bugzilla data-sync plug-in and can be ignored. Custom 01 -- When connecting to Bugzilla, sometimes the connection gets dropped by the server without notifying the plug-in. This happens when using HTTP 1.1 Keep-Alive connections. If you set this property to \" False \", it will tell the plug-in to not-use HTTP keep-alives when connecting to Bugzilla, otherwise set it to \" True \". Custom 02 -- When connecting to a Bugzilla instance that is running under HTTPS (SSL) this custom property can be set to determine if the plug-in should verify that the SSL certificate is a trusted root certificate. Set to \" True \" if you are using an SSL certificate that was issued by a trusted Certification Authority, and set to \" False \" if you are using a self-signed certificate. Custom 03 -- 05 -- these are not currently used by the Bugzilla data-sync plug-in and can be left blank. Configuring the Data Mapping Next, you need to configure the data mapping between SpiraTeam and Bugzilla. This allows the various projects, users, releases, incident types, statuses, priorities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Duplicate\" incident in SpiraTeam is the same as an \"UNCONFIRMED\" bug in Bugzilla (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases (equivalent to Bugzilla versions) in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below: Configuring the Project Mapping From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the Bugzilla plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with Bugzilla, you need to enter: External Key -- This should be set to the name of the equivalent Product in Bugzilla. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project. Configuring the User Mapping To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in Bugzilla: You will notice that below the Active flag for the user is a list of all the configured data-synchronization plug-ins. In the text box next to the Bugzilla Data-Sync plug-in you need to enter the login for this username in Bugzilla. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in Bugzilla. Click [Update] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems. Configuring the Release Mapping Now that the projects and users have been mapped correctly, we need to configure the mapping between Releases/Iterations in SpiraTeam and Versions in Bugzilla. To do this, please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties configured for Releases, you will see an additional text property called \" BugzillaDataSync ID \" that is used to store the mapped external identifier for the equivalent Version in Bugzilla. You need to enter the name of the equivalent version in Bugzilla, enter it into this text-box and click [Save]. You should now repeat for all the other releases and iterations in the project. If you are using the plugin for Bugzilla 4.x then any Versions that have already been created in Bugzilla will be automatically imported into SpiraTeam if they do not already exist in SpiraTeam and they have not already been mapped. Configuring the Standard Field Mapping Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the BugzillaDataSync plug-in entry: From this screen, you need to click on Priority, Severity and Status in turn to configure their values: a) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching Bugzilla bug status for each one. You can map multiple SpiraTeam fields to the same Bugzilla fields (e.g. New and Open in SpiraTeam are both equivalent to NEW in Bugzilla), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Bugzilla > SpiraTeam). We recommend that you always point the New and Open statuses inside SpiraTeam to point to the NEW status inside Bugzilla and make Open in SpiraTeam the Primary status of the two. This is recommended so that as new incidents in SpiraTeam get synched over to Bugzilla, they will get switched to the NEW status in Bugzilla which will then be synched back to \"Open\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with Bugzilla and those that haven't. b) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching Bugzilla priority for each one. You can map multiple SpiraTeam fields to the same Bugzilla fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Bugzilla > SpiraTeam). c) Incident Severity Click on the \"Severity\" hyperlink under Incident Standard Fields to bring up the Incident severity mapping configuration screen: The table lists each of the incident severities available in SpiraTeam and provides you with the ability to enter the matching Bugzilla severity for each one. You can map multiple SpiraTeam fields to the same Bugzilla fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Bugzilla > SpiraTeam). Configuring the Custom Property Mapping Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for custom properties in SpiraTeam that are used to map to standard fields in Bugzilla (Component, Hardware, Operating System and Resolution) that don't exist in SpiraTeam. You need to make sure that you have first added custom lists in SpiraTeam that contain the list of Components, Hardware platforms and Operating Systems used in Bugzilla and that you have setup those lists as Custom Properties on the Incident artifact type. Once that's done, from the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for. We will consider the four different types of mapping that you might want to enter in turn: a) Bugzilla's Component Field If your instance of Bugzilla requires that all new bugs are submitted with a 'Component' then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various component names that exist inside Bugzilla. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Component\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Component field in Bugzilla. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the Bugzilla name of the various Components that are configured in Bugzilla. b) Bugzilla's Operating System Field If your instance of Bugzilla requires that all new issues are submitted with an 'Operating System' then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various operating system names that exist inside Bugzilla. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"OperatingSystem\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Operating System field in Bugzilla. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the Bugzilla name of the various Operating System values that are configured in Bugzilla. c) Bugzilla's Hardware Field If your instance of Bugzilla requires that all new issues are submitted with a 'Hardware' value then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various hardware platform names that exist inside Bugzilla. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Hardware\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Hardware field in Bugzilla. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the Bugzilla name of the various Hardware platforms that are configured in Bugzilla. d) Bugzilla's Resolution Field (Optional) When incidents in SpiraTeam are updated with changes made in Bugzilla, the value of the Bugzilla resolution field (FIXED, INVALID, WONTFIX, LATER, REMIND, DUPLICATE, WORKSFORME, MOVED, DEPLOY) is used to populate the Resolution/Comments text box within SpiraTeam. However the Resolution/Comments field in SpiraTeam cannot be displayed in the incident list page as it's a long text-field, so if you would like to be able to see the list of Bugzilla Resolution codes displayed in a list, it is necessary to add a TEXT custom property to Incidents that can be used to store this returned value and then be filtered in the list. The rest of this section describes how to map this text custom property so that it picks up the Resolution field values from Bugzilla. To configure the mapping, click on the hyperlink of this new text custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \"Resolution\" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Resolution field in Bugzilla. Once you have updated the various mapping sections, you are now ready to use the synchronization. Using SpiraTest with Bugzilla Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into Bugzilla. At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the Data Synchronization service will be displayed. If you see any error messages at this point, we recommend immediately stopping the service and checking the various mapping entries. If you cannot see any issues with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with Bugzilla on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTeam, defects found should be logged through the 'Add Incident' option as normal. Once an incident has been created during the running of the test, it will now be populated across into Bugzilla as a bug. It will be populated with the information captured in SpiraTeam. At this point, the incident should not be acted upon inside SpiraTeam, and all data changes to the issue should be made inside Bugzilla. To enforce this, you can modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with Bugzilla after that point. As the issue progresses through the Bugzilla workflow, changes to the status, priority, severity, and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. If you are using the plugin for Bugzilla 4.x, changes to the hardware, operating system and component will also be synchronized back into SpiraTeam. In addition, any comments added to the bug in Bugzilla 4.x will get added to the corresponding incident in SpiraTeam You are now able to perform test coverage and incident reporting inside SpiraTeam using the test cases managed by SpiraTeam and the incidents managed on behalf of SpiraTeam inside Bugzilla.","title":"Bugzilla"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-Bugzilla/#using-spiratest-with-bugzilla","text":"This section outlines how to use SpiraTest in conjunction with the open-source Bugzilla bug tracking system. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTest, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into Bugzilla. Once the incidents are loaded into Bugzilla as bugs, the development team can then manage the lifecycle of these bugs in Bugzilla, and have the status changes in Bugzilla be reflected back in SpiraTest. In addition, if you are using Bugzilla 4.x or higher, any issues logged directly into Bugzilla will get imported into SpiraTeam so that they can be linked to test cases and requirements. STOP! Please make sure you have first read the Instructions in Setup before proceeding!","title":"Using SpiraTest with Bugzilla"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-Bugzilla/#configuring-the-plug-in","text":"The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the Bugzilla server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for BugzillaDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the Bugzilla Data-Synchronization plug-in: You need to fill out the following fields for the Bugzilla Plug-in to operate correctly: Name -- this needs to be set to BugzillaDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the BugzillaDataSync.dll file for any reason, then you need to change the name here to match. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the full URL to the Bugzilla installation's web-service API. This is typically http://<Bugzilla server name>/xmlrpc.cgi Login -- this should be set to a valid login to the Bugzilla installation -- typically an email address. The login needs to have permissions to create and view bugs within Bugzilla. Password -- this should be set to the password of the login specified above. Time Offset -- normally this should be set to zero, but if you find that issues being changed in Bugzilla are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your Bugzilla installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. Auto-Map Users -- this is not currently used by the Bugzilla data-sync plug-in and can be ignored. Custom 01 -- When connecting to Bugzilla, sometimes the connection gets dropped by the server without notifying the plug-in. This happens when using HTTP 1.1 Keep-Alive connections. If you set this property to \" False \", it will tell the plug-in to not-use HTTP keep-alives when connecting to Bugzilla, otherwise set it to \" True \". Custom 02 -- When connecting to a Bugzilla instance that is running under HTTPS (SSL) this custom property can be set to determine if the plug-in should verify that the SSL certificate is a trusted root certificate. Set to \" True \" if you are using an SSL certificate that was issued by a trusted Certification Authority, and set to \" False \" if you are using a self-signed certificate. Custom 03 -- 05 -- these are not currently used by the Bugzilla data-sync plug-in and can be left blank.","title":"Configuring the Plug-In"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-Bugzilla/#configuring-the-data-mapping","text":"Next, you need to configure the data mapping between SpiraTeam and Bugzilla. This allows the various projects, users, releases, incident types, statuses, priorities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Duplicate\" incident in SpiraTeam is the same as an \"UNCONFIRMED\" bug in Bugzilla (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases (equivalent to Bugzilla versions) in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below:","title":"Configuring the Data Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-Bugzilla/#configuring-the-project-mapping","text":"From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the Bugzilla plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with Bugzilla, you need to enter: External Key -- This should be set to the name of the equivalent Product in Bugzilla. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project.","title":"Configuring the Project Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-Bugzilla/#configuring-the-user-mapping","text":"To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing issues in Bugzilla: You will notice that below the Active flag for the user is a list of all the configured data-synchronization plug-ins. In the text box next to the Bugzilla Data-Sync plug-in you need to enter the login for this username in Bugzilla. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in Bugzilla. Click [Update] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems.","title":"Configuring the User Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-Bugzilla/#configuring-the-release-mapping","text":"Now that the projects and users have been mapped correctly, we need to configure the mapping between Releases/Iterations in SpiraTeam and Versions in Bugzilla. To do this, please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties configured for Releases, you will see an additional text property called \" BugzillaDataSync ID \" that is used to store the mapped external identifier for the equivalent Version in Bugzilla. You need to enter the name of the equivalent version in Bugzilla, enter it into this text-box and click [Save]. You should now repeat for all the other releases and iterations in the project. If you are using the plugin for Bugzilla 4.x then any Versions that have already been created in Bugzilla will be automatically imported into SpiraTeam if they do not already exist in SpiraTeam and they have not already been mapped.","title":"Configuring the Release Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-Bugzilla/#configuring-the-standard-field-mapping","text":"Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the BugzillaDataSync plug-in entry: From this screen, you need to click on Priority, Severity and Status in turn to configure their values: a) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching Bugzilla bug status for each one. You can map multiple SpiraTeam fields to the same Bugzilla fields (e.g. New and Open in SpiraTeam are both equivalent to NEW in Bugzilla), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Bugzilla > SpiraTeam). We recommend that you always point the New and Open statuses inside SpiraTeam to point to the NEW status inside Bugzilla and make Open in SpiraTeam the Primary status of the two. This is recommended so that as new incidents in SpiraTeam get synched over to Bugzilla, they will get switched to the NEW status in Bugzilla which will then be synched back to \"Open\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with Bugzilla and those that haven't. b) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching Bugzilla priority for each one. You can map multiple SpiraTeam fields to the same Bugzilla fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Bugzilla > SpiraTeam). c) Incident Severity Click on the \"Severity\" hyperlink under Incident Standard Fields to bring up the Incident severity mapping configuration screen: The table lists each of the incident severities available in SpiraTeam and provides you with the ability to enter the matching Bugzilla severity for each one. You can map multiple SpiraTeam fields to the same Bugzilla fields, in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from Bugzilla > SpiraTeam).","title":"Configuring the Standard Field Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-Bugzilla/#configuring-the-custom-property-mapping","text":"Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for custom properties in SpiraTeam that are used to map to standard fields in Bugzilla (Component, Hardware, Operating System and Resolution) that don't exist in SpiraTeam. You need to make sure that you have first added custom lists in SpiraTeam that contain the list of Components, Hardware platforms and Operating Systems used in Bugzilla and that you have setup those lists as Custom Properties on the Incident artifact type. Once that's done, from the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for. We will consider the four different types of mapping that you might want to enter in turn: a) Bugzilla's Component Field If your instance of Bugzilla requires that all new bugs are submitted with a 'Component' then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various component names that exist inside Bugzilla. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Component\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Component field in Bugzilla. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the Bugzilla name of the various Components that are configured in Bugzilla. b) Bugzilla's Operating System Field If your instance of Bugzilla requires that all new issues are submitted with an 'Operating System' then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various operating system names that exist inside Bugzilla. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"OperatingSystem\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Operating System field in Bugzilla. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the Bugzilla name of the various Operating System values that are configured in Bugzilla. c) Bugzilla's Hardware Field If your instance of Bugzilla requires that all new issues are submitted with a 'Hardware' value then you will need to fill out this section. You first need to create an incident custom property in SpiraTeam of type 'LIST' that contains the various hardware platform names that exist inside Bugzilla. Then click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Hardware\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Hardware field in Bugzilla. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the Bugzilla name of the various Hardware platforms that are configured in Bugzilla. d) Bugzilla's Resolution Field (Optional) When incidents in SpiraTeam are updated with changes made in Bugzilla, the value of the Bugzilla resolution field (FIXED, INVALID, WONTFIX, LATER, REMIND, DUPLICATE, WORKSFORME, MOVED, DEPLOY) is used to populate the Resolution/Comments text box within SpiraTeam. However the Resolution/Comments field in SpiraTeam cannot be displayed in the incident list page as it's a long text-field, so if you would like to be able to see the list of Bugzilla Resolution codes displayed in a list, it is necessary to add a TEXT custom property to Incidents that can be used to store this returned value and then be filtered in the list. The rest of this section describes how to map this text custom property so that it picks up the Resolution field values from Bugzilla. To configure the mapping, click on the hyperlink of this new text custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \"Resolution\" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Resolution field in Bugzilla. Once you have updated the various mapping sections, you are now ready to use the synchronization.","title":"Configuring the Custom Property Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-Bugzilla/#using-spiratest-with-bugzilla_1","text":"Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into Bugzilla. At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the Data Synchronization service will be displayed. If you see any error messages at this point, we recommend immediately stopping the service and checking the various mapping entries. If you cannot see any issues with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with Bugzilla on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTeam, defects found should be logged through the 'Add Incident' option as normal. Once an incident has been created during the running of the test, it will now be populated across into Bugzilla as a bug. It will be populated with the information captured in SpiraTeam. At this point, the incident should not be acted upon inside SpiraTeam, and all data changes to the issue should be made inside Bugzilla. To enforce this, you can modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with Bugzilla after that point. As the issue progresses through the Bugzilla workflow, changes to the status, priority, severity, and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. If you are using the plugin for Bugzilla 4.x, changes to the hardware, operating system and component will also be synchronized back into SpiraTeam. In addition, any comments added to the bug in Bugzilla 4.x will get added to the corresponding incident in SpiraTeam You are now able to perform test coverage and incident reporting inside SpiraTeam using the test cases managed by SpiraTeam and the incidents managed on behalf of SpiraTeam inside Bugzilla.","title":"Using SpiraTest with Bugzilla"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-FogBugz/","text":"Using SpiraTest with FogBugz This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the FogBugz issue/bug tracking system. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into FogBugz. Once the incidents are loaded into FogBugz as cases, the development team can then manage the lifecycle of these cases in FogBugz, and have the status changes in FogBugz be reflected back in SpiraTeam. In addition, any cases logged into FogBugz will get imported into SpiraTeam so that they can be linked to test cases and requirements. STOP! Please make sure you have first read the Instructions in Setup before proceeding! Configuring the Plug-In The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the FogBugz server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for FogBugzDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the FogBugz Data-Synchronization plug-in: You need to fill out the following fields for the FogBugz Plug-in to operate correctly: Name -- this needs to be set to FogBugzDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the FogBugzDataSync.dll file for any reason, then you need to change the name here to match. Caption -- this is the display name of the plugin, typically just \"FogBugz\". If you have multiple instances of FogBugz, they could have different captions. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the URL that you use to access your instance of FogBugz (e.g. https://mycompany.fogbugz.com ) Login -- this should be set to a valid login to the FogBugz installation. The login needs to have permissions to create and view cases and versions within FogBugz. Password -- this should be set to the password of the login specified above. Time Offset -- normally this should be set to zero, but if you find that cases being changed in FogBugz are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your FogBugz installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. Auto-Map Users -- this is not currently used by the FogBugz data-sync plug-in and can be ignored. Custom 01 -- When connecting to FogBugz, sometimes the connection gets dropped by the server without notifying the plug-in. This happens when using HTTP 1.1 Keep-Alive connections. If you set this property to \" False \", it will tell the plug-in to not-use HTTP keep-alives when connecting to FogBugz, otherwise set it to \" True \". Custom 02 -- When connecting to a FogBugz instance that is running under HTTPS (SSL) this custom property can be set to determine if the plug-in should verify that the SSL certificate is a trusted root certificate. Set to \" True \" if you are using an SSL certificate that was issued by a trusted Certification Authority, and set to \" False \" if you are using a self-signed certificate. Custom 03 -- Normally all rich text (HTML) descriptions in SpiraTeam are converted into plain text when added to FogBugz. However, more recent version of FogBugz can now support rich text. So if you have rich-text enabled in your instance of FogBugz, you should enter the world \" True \" in Custom 03 to enable rich text description transfer. Custom 04 -- Normally you can leave this blank. However if you want to prevent the plugin from getting new cases from FogBugz (that did not originate in SpiraTest), set it to \"False\" . Custom 05 -- this is not currently used by the FogBugz data-sync plug-in and can be left blank. Configuring the Data Mapping Next, you need to configure the data mapping between SpiraTeam and FogBugz. This allows the various projects, users, releases, incident types, statuses, priorities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Enhancement\" in SpiraTeam is the same as a \"Feature\" in FogBugz (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases (equivalent to FogBugz releases/fix-fors) in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below: Configuring the Project Mapping From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the FogBugz plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with FogBugz, you need to enter: External Key -- This should be set to the ID of the project in FogBugz. This can be found by navigating to Settings > Projects in FogBugz: Then hover the mouse over the project name. The project ID will be displayed in the URL line as ixProject-X where X is the numeric ID of the project. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project. Configuring the User Mapping To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing cases in FogBugz: You will notice that below the Active flag for the user is a list of all the configured data-synchronization plug-ins. In the text box next to the FogBugz Data-Sync plug-in you need to enter the ID of this user in FogBugz. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in FogBugz. The ID can be found in FogBugz by going to Settings > Users: Then hover the mouse over the user's name. The user ID will be displayed in the URL line as ixPerson-X where X is the numeric ID of the user. Back in SpiraTeam, click [Update] once you've entered the appropriate user ID in the mapping box. You should now repeat for the other users who will be active in both systems. Configuring the Release Mapping When the data-synchronization service runs, when it comes across a release/iteration in SpiraTeam that it has not seen before, it will create a corresponding Release/Fix-For in FogBugz. Similarly if it comes across a new Release/Fix-For in FogBugz that it has not seen before, it will create a new Release in SpiraTeam. Therefore when using both systems together, it is recommended that you only enter new Releases/Versions in one system and let the data-synchronization service add them to the other system. However you may start out with the situation where you already have pre-existing Releases/Versions in both systems that you need to associate in the data-mapping. If you don't do this, you may find that duplicates get created when you first enable the data-synchronization service. Therefore for any Releases/Iterations that already exist in BOTH systems please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties configured for Releases, you will see an additional text property called \" FogBugzDataSync ID \" that is used to store the mapped external identifier for the equivalent Release in FogBugz. You need to locate the ID of the equivalent Release in FogBugz, enter it into this text-box and click [Save]. You should now repeat for all the other pre-existing releases. The FogBugz Release ID can be found by going to Settings > Projects and viewing the releases: Then hover the mouse over the release name. The release ID will be displayed in the URL line as ixFixFor-X where X is the numeric ID of the release. Configuring the Standard Field Mapping Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the FogBugzDataSync plug-in entry: From this screen, you need to click on Priority, Status and Type in turn to configure their values: a) Incident Type Click on the \"Type\" hyperlink under Incident Standard Fields to bring up the Incident type mapping configuration screen: The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching FogBugz case category ID for each one. You can map multiple SpiraTeam fields to the same FogBugz fields (e.g. Bug and Incident in SpiraTeam are both equivalent to Bug in FogBugz), in which case only one of the two values can be listed as Primary - Yes as that's the value that's used on the reverse synchronization (from FogBugz > SpiraTeam). The values for the category ID are fixed for FogBugz and should be: Category Name Category ID Bug > 1 Feature > 2 Inquiry > 3 So, depending on which types have been configured in SpiraTeam, you'll need to adjust the mapping so that the appropriate SpiraTeam types correspond to the equivalent FogBugz category. b) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching FogBugz case status ID for each one. You can map multiple SpiraTeam fields to the same FogBugz fields (e.g. New, Open, Assigned, and Reopen in SpiraTeam are all equivalent to Active in FogBugz), in which case only one of the four values can be listed as Primary - Yes as that's the value that's used on the reverse synchronization (from FogBugz > SpiraTeam). We recommend that you always point the New, Open, Assigned and Reopen statuses inside SpiraTeam to point to the ID for \"Assigned\" inside FogBugz and make Assigned in SpiraTeam the Primary status of the four. This is recommended so that as new incidents in SpiraTeam get synched over to FogBugz, they will get switched to the Active status in FogBugz which will then be synched back to \"Assigned\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with FogBugz and those that haven't. You also might want to consider changing the statuses in SpiraTeam to match the 16 discrete statuses in FogBugz to make things easier for your users. In which case you'll need to create the new statuses and configure the workflow (as described in the SpiraTeam Administration Guide ). The status IDs in FogBugz are fixed and should be: Status ID Status Name > 1 Active > 2 Resolved (Fixed) > 3 Resolved (Not Reproducible) > 4 Resolved (Duplicate) > 5 Resolved (Postponed) > 6 Resolved (Won't Fix) > 7 Resolved (By Design) > 8 Resolved (Implemented) > 9 Resolved (Won't Implement) > 10 Resolved (Already Exists) > 11 Resolved (Responded) > 12 Resolved (Won't Respond) > 13 Resolved (SPAM) > 14 Resolved (Waiting For Info) > 15 Resolved (Completed) > 16 Resolved (Canceled) In addition to these statuses, FogBugz also has the concept of a 'Closed' case which is one where the case has been assigned to the special Closed user (user id 1). If you want to map a SpiraTeam status to this special closed status, for the external key just enter 'Closed' instead of a numeric ID and that will tell the plug-in to associate that SpiraTest status with the special condition of a FogBugz case that is assigned to the 'closed' user. c) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching FogBugz priority ID for each one. You can map multiple SpiraTeam fields to the same FogBugz fields, in which case only one of the two values can be listed as Primary - Yes as that's the value that's used on the reverse synchronization (from FogBugz > SpiraTeam). Since both applications allow you to customize the priority list, we recommend that you modify the list in both systems to be the same and then map them one to one as this will be easier for users to understand. In the example above, we have switched over SpiraTeam to match the priorities in FogBugz, but you could do it the other way around as well. The FogBugz Priority IDs can be found by going to Settings > Priorities and viewing the priorities: The priority ID is the \"priority number\" value displayed in the left hand column. Configuring the Custom Property Mapping Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for custom properties in SpiraTeam that are used to map to standard fields in FogBugz (Computer, Version and Area) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for. We will consider the three different types of mapping that you typically will want to enter: a) FogBugz's Computer Field You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the Computer description within SpiraTeam. Then click on the hyperlink of this new text custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \"Computer\" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Computer field in FogBugz. b) FogBugz's Version Field You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the Version description within SpiraTeam. Then click on the hyperlink of this new text custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \"Version\" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Version field in FogBugz. c) FogBugz's Area Field You first need to create an incident custom property in SpiraTeam of type 'LIST' that will be used to store the list of project areas within SpiraTeam. You will need to create a new custom list to store the different possible values of area and then use that list when creating the new custom property. Then back on the Data Mapping page, click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Area\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Area field in FogBugz. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the FogBugz ID of the various Areas that are configured in FogBugz. The FogBugz Area ID can be found by going to Settings > Projects and viewing the areas in the project: Then hover the mouse over the area name. The area ID will be displayed in the URL line as ixArea-X where X is the numeric ID of the area. d) FogBugz's Parent Case Field FogBugz lets you link a new case with an existing 'parent' case. You can make this possible from within SpiraTeam by simply creating a new custom text property and mapping to the special External Key - Parent : Users will then enter the FogBugz ID of an existing case when they a log a new SpiraTeam incidents and the data-synchronization system will know how to associate the two cases. Once you have updated the various mapping sections, you are now ready to use the synchronization. Using SpiraTeam with FogBugz Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into FogBugz and any existing cases in FogBugz will get loaded into SpiraTeam. At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any cases with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with FogBugz on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTest or SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Developers using FogBugz can log new defects into either SpiraTeam or FogBugz. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam. Since FogBugz is considered the master system for incidents/cases, all data changes to the case should be made inside FogBugz. To enforce this, you should modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with FogBugz after that point. As the case progresses through the FogBugz workflow, changes to the type of case, changes to its status, priority, description and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTest/SpiraTeam using the test cases managed by SpiraTest/SpiraTeam and the incidents managed on behalf of SpiraTest/SpiraTeam inside FogBugz.","title":"FogBugz"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-FogBugz/#using-spiratest-with-fogbugz","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the FogBugz issue/bug tracking system. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into FogBugz. Once the incidents are loaded into FogBugz as cases, the development team can then manage the lifecycle of these cases in FogBugz, and have the status changes in FogBugz be reflected back in SpiraTeam. In addition, any cases logged into FogBugz will get imported into SpiraTeam so that they can be linked to test cases and requirements. STOP! Please make sure you have first read the Instructions in Setup before proceeding!","title":"Using SpiraTest with FogBugz"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-FogBugz/#configuring-the-plug-in","text":"The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the FogBugz server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for FogBugzDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the FogBugz Data-Synchronization plug-in: You need to fill out the following fields for the FogBugz Plug-in to operate correctly: Name -- this needs to be set to FogBugzDataSync . This needs to match the name of the plug-in DLL assembly that was copied into the C:\\Program Files\\SpiraTeam\\Bin folder (minus the .dll file extension). If you renamed the FogBugzDataSync.dll file for any reason, then you need to change the name here to match. Caption -- this is the display name of the plugin, typically just \"FogBugz\". If you have multiple instances of FogBugz, they could have different captions. Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the URL that you use to access your instance of FogBugz (e.g. https://mycompany.fogbugz.com ) Login -- this should be set to a valid login to the FogBugz installation. The login needs to have permissions to create and view cases and versions within FogBugz. Password -- this should be set to the password of the login specified above. Time Offset -- normally this should be set to zero, but if you find that cases being changed in FogBugz are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your FogBugz installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. Auto-Map Users -- this is not currently used by the FogBugz data-sync plug-in and can be ignored. Custom 01 -- When connecting to FogBugz, sometimes the connection gets dropped by the server without notifying the plug-in. This happens when using HTTP 1.1 Keep-Alive connections. If you set this property to \" False \", it will tell the plug-in to not-use HTTP keep-alives when connecting to FogBugz, otherwise set it to \" True \". Custom 02 -- When connecting to a FogBugz instance that is running under HTTPS (SSL) this custom property can be set to determine if the plug-in should verify that the SSL certificate is a trusted root certificate. Set to \" True \" if you are using an SSL certificate that was issued by a trusted Certification Authority, and set to \" False \" if you are using a self-signed certificate. Custom 03 -- Normally all rich text (HTML) descriptions in SpiraTeam are converted into plain text when added to FogBugz. However, more recent version of FogBugz can now support rich text. So if you have rich-text enabled in your instance of FogBugz, you should enter the world \" True \" in Custom 03 to enable rich text description transfer. Custom 04 -- Normally you can leave this blank. However if you want to prevent the plugin from getting new cases from FogBugz (that did not originate in SpiraTest), set it to \"False\" . Custom 05 -- this is not currently used by the FogBugz data-sync plug-in and can be left blank.","title":"Configuring the Plug-In"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-FogBugz/#configuring-the-data-mapping","text":"Next, you need to configure the data mapping between SpiraTeam and FogBugz. This allows the various projects, users, releases, incident types, statuses, priorities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that an \"Enhancement\" in SpiraTeam is the same as a \"Feature\" in FogBugz (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases (equivalent to FogBugz releases/fix-fors) in the system The mapping of the various standard fields in the system The mapping of the various custom properties in the system Each of these is explained in turn below:","title":"Configuring the Data Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-FogBugz/#configuring-the-project-mapping","text":"From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the FogBugz plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with FogBugz, you need to enter: External Key -- This should be set to the ID of the project in FogBugz. This can be found by navigating to Settings > Projects in FogBugz: Then hover the mouse over the project name. The project ID will be displayed in the URL line as ixProject-X where X is the numeric ID of the project. Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project.","title":"Configuring the Project Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-FogBugz/#configuring-the-user-mapping","text":"To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing cases in FogBugz: You will notice that below the Active flag for the user is a list of all the configured data-synchronization plug-ins. In the text box next to the FogBugz Data-Sync plug-in you need to enter the ID of this user in FogBugz. This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in FogBugz. The ID can be found in FogBugz by going to Settings > Users: Then hover the mouse over the user's name. The user ID will be displayed in the URL line as ixPerson-X where X is the numeric ID of the user. Back in SpiraTeam, click [Update] once you've entered the appropriate user ID in the mapping box. You should now repeat for the other users who will be active in both systems.","title":"Configuring the User Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-FogBugz/#configuring-the-release-mapping","text":"When the data-synchronization service runs, when it comes across a release/iteration in SpiraTeam that it has not seen before, it will create a corresponding Release/Fix-For in FogBugz. Similarly if it comes across a new Release/Fix-For in FogBugz that it has not seen before, it will create a new Release in SpiraTeam. Therefore when using both systems together, it is recommended that you only enter new Releases/Versions in one system and let the data-synchronization service add them to the other system. However you may start out with the situation where you already have pre-existing Releases/Versions in both systems that you need to associate in the data-mapping. If you don't do this, you may find that duplicates get created when you first enable the data-synchronization service. Therefore for any Releases/Iterations that already exist in BOTH systems please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Details\" section of the release/iteration: In addition to the standard fields and custom properties configured for Releases, you will see an additional text property called \" FogBugzDataSync ID \" that is used to store the mapped external identifier for the equivalent Release in FogBugz. You need to locate the ID of the equivalent Release in FogBugz, enter it into this text-box and click [Save]. You should now repeat for all the other pre-existing releases. The FogBugz Release ID can be found by going to Settings > Projects and viewing the releases: Then hover the mouse over the release name. The release ID will be displayed in the URL line as ixFixFor-X where X is the numeric ID of the release.","title":"Configuring the Release Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-FogBugz/#configuring-the-standard-field-mapping","text":"Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the FogBugzDataSync plug-in entry: From this screen, you need to click on Priority, Status and Type in turn to configure their values: a) Incident Type Click on the \"Type\" hyperlink under Incident Standard Fields to bring up the Incident type mapping configuration screen: The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching FogBugz case category ID for each one. You can map multiple SpiraTeam fields to the same FogBugz fields (e.g. Bug and Incident in SpiraTeam are both equivalent to Bug in FogBugz), in which case only one of the two values can be listed as Primary - Yes as that's the value that's used on the reverse synchronization (from FogBugz > SpiraTeam). The values for the category ID are fixed for FogBugz and should be: Category Name Category ID Bug > 1 Feature > 2 Inquiry > 3 So, depending on which types have been configured in SpiraTeam, you'll need to adjust the mapping so that the appropriate SpiraTeam types correspond to the equivalent FogBugz category. b) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching FogBugz case status ID for each one. You can map multiple SpiraTeam fields to the same FogBugz fields (e.g. New, Open, Assigned, and Reopen in SpiraTeam are all equivalent to Active in FogBugz), in which case only one of the four values can be listed as Primary - Yes as that's the value that's used on the reverse synchronization (from FogBugz > SpiraTeam). We recommend that you always point the New, Open, Assigned and Reopen statuses inside SpiraTeam to point to the ID for \"Assigned\" inside FogBugz and make Assigned in SpiraTeam the Primary status of the four. This is recommended so that as new incidents in SpiraTeam get synched over to FogBugz, they will get switched to the Active status in FogBugz which will then be synched back to \"Assigned\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with FogBugz and those that haven't. You also might want to consider changing the statuses in SpiraTeam to match the 16 discrete statuses in FogBugz to make things easier for your users. In which case you'll need to create the new statuses and configure the workflow (as described in the SpiraTeam Administration Guide ). The status IDs in FogBugz are fixed and should be: Status ID Status Name > 1 Active > 2 Resolved (Fixed) > 3 Resolved (Not Reproducible) > 4 Resolved (Duplicate) > 5 Resolved (Postponed) > 6 Resolved (Won't Fix) > 7 Resolved (By Design) > 8 Resolved (Implemented) > 9 Resolved (Won't Implement) > 10 Resolved (Already Exists) > 11 Resolved (Responded) > 12 Resolved (Won't Respond) > 13 Resolved (SPAM) > 14 Resolved (Waiting For Info) > 15 Resolved (Completed) > 16 Resolved (Canceled) In addition to these statuses, FogBugz also has the concept of a 'Closed' case which is one where the case has been assigned to the special Closed user (user id 1). If you want to map a SpiraTeam status to this special closed status, for the external key just enter 'Closed' instead of a numeric ID and that will tell the plug-in to associate that SpiraTest status with the special condition of a FogBugz case that is assigned to the 'closed' user. c) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching FogBugz priority ID for each one. You can map multiple SpiraTeam fields to the same FogBugz fields, in which case only one of the two values can be listed as Primary - Yes as that's the value that's used on the reverse synchronization (from FogBugz > SpiraTeam). Since both applications allow you to customize the priority list, we recommend that you modify the list in both systems to be the same and then map them one to one as this will be easier for users to understand. In the example above, we have switched over SpiraTeam to match the priorities in FogBugz, but you could do it the other way around as well. The FogBugz Priority IDs can be found by going to Settings > Priorities and viewing the priorities: The priority ID is the \"priority number\" value displayed in the left hand column.","title":"Configuring the Standard Field Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-FogBugz/#configuring-the-custom-property-mapping","text":"Now that the various SpiraTeam standard fields have been mapped correctly, we need to configure the custom property mappings. This is used for custom properties in SpiraTeam that are used to map to standard fields in FogBugz (Computer, Version and Area) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for. We will consider the three different types of mapping that you typically will want to enter: a) FogBugz's Computer Field You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the Computer description within SpiraTeam. Then click on the hyperlink of this new text custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \"Computer\" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Computer field in FogBugz. b) FogBugz's Version Field You first need to create an incident custom property in SpiraTeam of type 'TEXT' that will be used to store the Version description within SpiraTeam. Then click on the hyperlink of this new text custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: All you need to do on this screen is enter the word \"Version\" in the External Key textbox and the data-sync plug-in will know that this custom property is mapped to the built-in Version field in FogBugz. c) FogBugz's Area Field You first need to create an incident custom property in SpiraTeam of type 'LIST' that will be used to store the list of project areas within SpiraTeam. You will need to create a new custom list to store the different possible values of area and then use that list when creating the new custom property. Then back on the Data Mapping page, click on the hyperlink of this new list custom property under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Area\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Area field in FogBugz. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the FogBugz ID of the various Areas that are configured in FogBugz. The FogBugz Area ID can be found by going to Settings > Projects and viewing the areas in the project: Then hover the mouse over the area name. The area ID will be displayed in the URL line as ixArea-X where X is the numeric ID of the area. d) FogBugz's Parent Case Field FogBugz lets you link a new case with an existing 'parent' case. You can make this possible from within SpiraTeam by simply creating a new custom text property and mapping to the special External Key - Parent : Users will then enter the FogBugz ID of an existing case when they a log a new SpiraTeam incidents and the data-synchronization system will know how to associate the two cases. Once you have updated the various mapping sections, you are now ready to use the synchronization.","title":"Configuring the Custom Property Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-FogBugz/#using-spirateam-with-fogbugz","text":"Now that the integration service has been configured and the service started, initially any incidents created in SpiraTeam for the specified projects will be imported into FogBugz and any existing cases in FogBugz will get loaded into SpiraTeam. At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any cases with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with FogBugz on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTest or SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Developers using FogBugz can log new defects into either SpiraTeam or FogBugz. In either case they will get loaded into the other system. Once created in one of the systems and successfully replicated to the other system, the incident should not be modified again inside SpiraTeam. Since FogBugz is considered the master system for incidents/cases, all data changes to the case should be made inside FogBugz. To enforce this, you should modify the workflows set up in SpiraTeam so that the various fields are marked as inactive for all the incident statuses other than the \"New\" status. This will allow someone to submit an incident in SpiraTeam, but will prevent them making changes in conflict with FogBugz after that point. As the case progresses through the FogBugz workflow, changes to the type of case, changes to its status, priority, description and resolution will be updated automatically in SpiraTeam. In essence, SpiraTeam acts as a read-only viewer of these incidents. You are now able to perform test coverage and incident reporting inside SpiraTest/SpiraTeam using the test cases managed by SpiraTest/SpiraTeam and the incidents managed on behalf of SpiraTest/SpiraTeam inside FogBugz.","title":"Using SpiraTeam with FogBugz"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-MS-TFS/","text":"Using SpiraTest with Microsoft Azure DevOps (TFS) This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the work item tracking functionality of Microsoft Azure DevOps, also known as Microsoft Team Foundation Server (TFS) hereafter referred to as TFS for brevity. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into TFS. Once the incidents are loaded into TFS as work items, the development team can then manage the lifecycle of these work items in TFS, and have the status changes in TFS be reflected back in SpiraTeam. Similarly, as the requirements are decomposed into discrete project tasks in SpiraTeam, the integration service will automatically load these new tasks into TFS as task work items where the development team can manage their lifecycle, with schedule and progress changes in TFS being reflected back in SpiraTeam. STOP! Please make sure you have first read the Instructions in Setup before proceeding! Configuring the Plug-In The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the TFS server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for MsTfsDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the TFS Data-Synchronization plug-in: You need to fill out the following fields for the TFS Plug-in to operate correctly: Name -- this needs to be set to MsTfsDataSync . Caption -- this is the display name of the plugin. Normally you can use something generic such as \"Microsoft TFS\", however if you have multiple TFS instances you might want to name it something specific such as \"TFS External\". If you don't enter a value, the display name will be \"MsTfsDataSync\" Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the URL that you use for connecting Visual Studio to the Team Foundation Server. For Microsoft Azure DevOps Online , it is of the format https://dev.azure.com/mycompany or https://mycompany.visualstudio.com . See our special KB437 regarding Microsoft Azure DevOps Online . For Microsoft Azure DevOps Server , also known as Team Foundation Server (TFS) it is of the format http://servername:8080/tfs/collectionname where \"collectionname\" is the name of the project collection you're integrating with. Login -- this should be set to a valid user that has permissions to access the TFS installation. The login needs to have permissions to create and view work items and iterations within TFS. Note: Do not include the Windows Active Directory Domain in this field if you are using a Windows domain user. Password -- this should be set to the password of the user specified above. Time Offset -- normally this should be set to zero, but if you find that work items being changed in TFS are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your TFS installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. If you are using Microsoft Azure DevOps Online instead of a local TFS instance, you will need to use a Personal Access Token (PAT) to connect to the instance of Azure DevOps from SpiraTeam. To get a PAT, login to Azure DevOps and access your user profile: In the popup menu, Click on the Personal access tokens option. This will display the list of already issued/active personal access tokens: Click on the + New Token button to create a new personal access token: You can give it a logical name (e.g. \"Spira\") and give it permissions to: Read, write & manage Work Items Read, write & manage Releases (or just grant Full Access) Azure Devops will then create a personal access token that you should copy to the clipboard and store somewhere secure (e.g. a password manager): You will now use this personal access token as the \"password\" that SpiraTeam will use to connect to Azure DevOps. For the username, you can just use your standard Azure DevOps login (in fact you can use anything, it will only be checking the PAT). The remaining fields should be completed as follows: Auto-Map Users - This changes the way the plugin maps users in SpiraTeam to those in TFS: Auto-Map = True - With this setting, all users in SpiraTeam need to have the same username as those in TFS. If this is the case then you do not need to perform the user-mapping task outlined in section 5.2.2. This is a big time-saver if you can guarantee that all usernames are the same in both systems. Auto-Map = False - With this setting, users in SpiraTeam and TFS are free to have different usernames because you specify the corresponding TFS name for each user as outlined in 5.2.2. Custom 01 -- This is used to specify the Windows Active Directory Domain that the Windows user specified above is a member of. If you are running TFS on a Windows workgroup, just use the server name and make sure that the Windows user above is a user on that server itself. If you are using a Window Live ID, just leave this field blank Custom 02 -- This field should contain a comma-separated list of work item types that you want to synchronize as SpiraTeam Tasks as opposed to Incidents. Normally you would want to list at least the TFS \"Task\" work item type in this field. Custom 03 -- If you would like the system to display the SpiraTeam artifact ID (e.g. IN5 for incidents or TK36 for tasks) in a custom field inside TFS, you should just enter the name of the appropriate TFS field from your process template (e.g. Spira.IncidentId) and then when the incident or task is added to TFS, the corresponding SpiraTeam ID will be added to that field of the work item. Custom 04 - Depending on your TFS process template, the data-synchronization plugin may not be allowed to set the detector of the incident inside TFS. If you would like the system to display the detector of the incident (as recorded in SpiraTeam) in a custom field inside TFS, you should just enter the name of the appropriate TFS field from your process template (e.g. Spira.Detector) and then when the incident is added to TFS, the corresponding detector's name will be added to that field of the work item. Custom 05 -- This field should contain a comma-separated list of work item types that you want to synchronize as SpiraTeam Requirements as opposed to Incidents. Normally you would want to list at least the TFS \"User Story\" work item type in this field. Configuring the Data Mapping Next, you need to configure the data mapping between SpiraTeam and TFS. This allows the various projects, users, releases, incident types, statuses, priorities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that a \"Not Reproducible\" incident in SpiraTeam is the same as a \"Closed + Cannot Reproduce\" bug work item in TFS (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases (equivalent to TFS iterations) in the system The mapping of the various standard incident fields in the system The mapping of the various custom incident properties in the system The mapping of the various standard requirement fields in the system (if synching requirements) The mapping of the various custom requirement properties in the system (if synching requirements) The mapping of the various standard task fields in the system (if synching tasks) The mapping of the various custom task properties in the system (if synching tasks) Note: If using SpiraTest, you do not need to setup the last two sets of mappings as Tasks are not available in SpiraTest. Configuring the Project Mapping From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the TFS plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with TFS, you need to enter: External Key -- This should be set to the name of the project in TFS as visible from the Visual Studio Team Explorer or web interface: OR Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project. Configuring the User Mapping To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing work items in TFS: You will notice that in the special Data Mapping tab, there is a list of all the configured data-synchronization plug-ins. In the text box next to the TFS Data-Sync plug-in you need to enter the full name of this Windows User (not the login). This is the name of the user as they appear inside work items within TFS: This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in TFS. Click [Update] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems. If you have set the \"Auto-Map Users\" option in the TFS 2012 plugin, you can skip this section completely. Configuring the Release Mapping When the data-synchronization service runs, when it comes across a release/iteration in SpiraTeam that it has not seen before, it will create a corresponding \"Iteration\" in TFS. Similarly if it comes across a new Iteration in TFS that it has not seen before, it will create a new Release/Iteration in SpiraTeam. Therefore when using both systems together, it is recommended that you only enter new Releases/Iterations in one system and let the data-synchronization service add them to the other system. However you may start out with the situation where you already have pre-existing Releases/Iterations in both systems that you need to associate in the data-mapping. If you don't do this, you may find that duplicates get created when you first enable the data-synchronization service. Therefore for any Releases/Iterations that already exist in BOTH systems please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Properties\" section of the release/iteration: In addition to the standard fields and custom properties configured for Releases, you will see an additional text property called \" MsTfsDataSync ID \" that is used to store the mapped external identifier for the equivalent Version in TFS. You need to locate the ID of the equivalent Iteration in TFS, enter it into this text-box and click [Save]. You should now repeat for all the other pre-existing releases. The TFS Iteration ID is not visible in the TFS user interface, but can instead be located by opening up the SQL Server that it's installed on, opening the 'TfsWorkItemTracking' database (in TFS 2010 it will named after your project collection instead) and locating the 'TreeNodes' table: Once you have found the matching Iteration (by name), the numeric value stored in the ID column (the one on the left) is the value that needs to get added as the MsTfsDataSync ID inside SpiraTeam. Configuring the Standard Incident Field Mapping Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the MsTfsDataSync plug-in entry: From this screen, you need to click on Priority, Severity, Status and Type in turn to configure their values: a) Incident Type Click on the \"Type\" hyperlink under Incident Standard Fields to bring up the Incident type mapping configuration screen: The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching TFS work item type name for each one. To make this easier, we recommend that inside the Administration > Edit Incident Statuses screen you first make all incident types inactive except Risk, Issue and Bug since only those types make sense to synchronize with TFS. b) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching TFS work item State + Reason for each one. Since TFS uses separate State (Active, Resolved, Closed) and Reason (Fixed, Duplicate, Not Fixed, etc.) codes and SpiraTeam uses a single status code, you need to concatenate the TFS State and Reason together with a 'plus' (+) sign so that the system knows that the incident status in SpiraTeam corresponds to that specific combination. You can map multiple SpiraTeam fields to the same TFS fields (e.g. New and Open in SpiraTeam are both equivalent to 'Active+New' in TFS), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from TFS > SpiraTeam). We recommend that you always point the New and Open statuses inside SpiraTeam to point to the \"Active+New\" TFS state+reason, and make Open in SpiraTeam the Primary status of the two. This is recommended so that as new incidents in SpiraTeam get synched over to TFS, they will get switched to the \"Active+New\" status in TFS which will then be synched back to \"Open\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with TFS and those that haven't. c) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching TFS priority value for each one. To make this easier, we recommend that inside the Administration > Edit Incident Priorities screen you first make any statuses not used in TFS inactive in SpiraTeam. d) Incident Severity (TFS 2012 plugin only) Click on the \"Severity\" hyperlink under Incident Standard Fields to bring up the Incident Severity mapping configuration screen: The table lists each of the incident severities available in SpiraTeam and provides you with the ability to enter the matching TFS severity value for each one. To make this easier, we recommend that inside the Administration > Edit Incident Severities screen you first make any statuses not used in TFS inactive in SpiraTeam. Configuring the Incident Custom Property Mapping Now that the various SpiraTeam standard incident fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in TFS and also for custom properties in SpiraTeam that are used to map to standard fields in TFS (e.g. Area) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for: a) TFS's Area Field First you need to go to Administration > Edit Custom Lists and create a new custom list that contains all the different Areas that are being used in TFS. Then you need to go to Administration > Edit Custom Properties and add a new list custom property onto the Incident artifact type called 'Area' and link it to the Area custom list you created in the previous step. This will now be available for mapping. Now, back in the data-mapping page, click on the 'Area' hyperlink under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Area\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Area field in TFS. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the ID of the various Areas that are configured in TFS. The TFS Area ID is not visible in the TFS user interface, but can instead be located by opening up the SQL Server that it's installed on, opening the 'TfsWorkItemTracking' database (in TFS 2010 and later it will named after your project collection instead) and locating the 'TreeNodes' table: Once you have found the matching Area (by name), the numeric value stored in the ID column (the one on the left) is the value that needs to get added as the External Key inside SpiraTeam. b) TFS Custom Fields If the custom field in TFS is a list field, first you need to go to Administration > Edit Custom Lists in SpiraTeam and create a new custom list that contains all the different values that are being used in TFS. Then for both list-fields and value-fields you need to go to Administration > Edit Custom Properties and add a new custom property onto the Incident artifact type with the name of the appropriate TFS field (e.g. Triage, Rank, etc.) and if a list-field, link it to the custom list you created in the previous step. The custom property will now be available for data-mapping. Now, back in the data-synchronization data-mapping page, click on the hyperlink under Incident Custom Properties that corresponds to the custom property to bring up the custom property mapping configuration screen: First you need to enter the full Reference Name of the TFS field as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to this specific field in TFS. To see a list of fields and their reference names, you can run the following SQL query against your TFS database: SELECT Name, ReferenceName FROM Fields ORDER BY Name We have included a list of fields in the Agile process template in TFS Field Reference as a helpful reference. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the name of the field values as they appear in TFS as the External Key. Configuring the Standard Task Field Mapping Now that the projects, user, releases and incident fields have been mapped correctly, we need to configure the standard task fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the MsTfsDataSync plug-in entry: From this screen, you need to click on Priority and Status in turn to configure their values: a) Task Status Click on the \"Status\" hyperlink under Task Standard Fields to bring up the Task status mapping configuration screen: The table lists each of the task statuses available in SpiraTeam and provides you with the ability to enter the matching TFS work item State for each one. Unlike the mapping for incidents (see above) SpiraTeam does not track the reason codes associated with the tasks in MS TFS, so you only need to map the State names from TFS with the task status names. You can map multiple SpiraTeam fields to the same TFS fields (e.g. Blocked, Completed and Deferred in SpiraTeam are all equivalent to State = Closed in TFS), in which case only one of the values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from TFS > SpiraTeam). b) Task Priority (TFS 2012 Plugin Only) Click on the \"Priority\" hyperlink under Task Standard Fields to bring up the Task Priority mapping configuration screen: The table lists each of the task priorities available in SpiraTeam and provides you with the ability to enter the matching TFS priority value for each one. Configuring the Task Custom Property Mapping Now that the various SpiraTeam standard task fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in TFS and also for custom properties in SpiraTeam that are used to map to standard fields in TFS (e.g. Area) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Task Custom Property that you want to add data-mapping information for: a) TFS's Area Field First you need to go to Administration > Edit Custom Lists and create a new custom list that contains all the different Areas that are being used in TFS. Then you need to go to Administration > Edit Custom Properties and add a new list custom property onto the Task artifact type called 'Area' and link it to the Area custom list you created in the previous step. This will now be available for mapping. Now, back in the data-mapping page, click on the 'Area' hyperlink under Task Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Area\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Area field in TFS. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the ID of the various Areas that are configured in TFS. The TFS Area ID is not visible in the TFS user interface, but can instead be located by opening up the SQL Server that it's installed on, opening the 'TfsWorkItemTracking' database (in TFS 2010 and later it will named after your project collection instead) and locating the 'TreeNodes' table: Once you have found the matching Area (by name), the numeric value stored in the ID column (the one on the left) is the value that needs to get added as the External Key inside SpiraTeam. b) TFS Custom Fields If the custom field in TFS is a list field, first you need to go to Administration > Edit Custom Lists in SpiraTeam and create a new custom list that contains all the different values that are being used in TFS. Then for both list-fields and value-fields you need to go to Administration > Edit Custom Properties and add a new custom property onto the Task artifact type with the name of the appropriate TFS field (e.g. Discipline, Stack Rank, etc.) and if a list-field, link it to the custom list you created in the previous step. The custom property will now be available for data-mapping. Now, back in the data-synchronization data-mapping page, click on the hyperlink under Task Custom Properties that corresponds to the custom property to bring up the custom property mapping configuration screen: First you need to enter the full Reference Name of the TFS field as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to this specific field in TFS. To see a list of fields and their reference names, you can run the following SQL query against your TFS database: SELECT Name, ReferenceName FROM Fields ORDER BY Name We have included a list of fields in the Agile process template in TFS Field Reference as a helpful reference. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the name of the field values as they appear in TFS as the External Key. Configuring the Standard Requirement Field Mapping (2012 Plugin Only) Now that the projects, user, releases, incident and task fields have been mapped correctly, we need to configure the standard requirement fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the MsTfsDataSync plug-in entry: From this screen, you need to click on Importance and Status in turn to configure their values: a) Requirement Status Click on the \"Status\" hyperlink under Requirement Standard Fields to bring up the Requirement status mapping configuration screen: The table lists each of the requirement statuses available in SpiraTeam and provides you with the ability to enter the matching TFS work item State for each one. Unlike the mapping for incidents (see above) SpiraTeam does not track the reason codes associated with the requirements in MS TFS, so you only need to map the State names from TFS with the requirement status names. You can map multiple SpiraTeam fields to the same TFS fields, in which case only one of the values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from TFS > SpiraTeam). b) Requirement Importance Click on the \"Importance\" hyperlink under Requirement Standard Fields to bring up the Requirement Importance mapping configuration screen: The table lists each of the requirement importance values available in SpiraTeam and provides you with the ability to enter the matching TFS work item priority value for each one. Configuring the Requirement Custom Property Mapping Now that the various SpiraTeam standard requirement fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in TFS and also for custom properties in SpiraTeam that are used to map to standard fields in TFS (e.g. Area) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Requirement Custom Property that you want to add data-mapping information for: a) TFS's Area Field First you need to go to Administration > Edit Custom Lists and create a new custom list that contains all the different Areas that are being used in TFS. Then you need to go to Administration > Edit Custom Properties and add a new list custom property onto the Requirement artifact type called 'Area' and link it to the Area custom list you created in the previous step. This will now be available for mapping. Now, back in the data-mapping page, click on the 'Area' hyperlink under Requirement Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Area\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Area field in TFS. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the ID of the various Areas that are configured in TFS. The TFS Area ID is not visible in the TFS user interface, but can instead be located by opening up the SQL Server that it's installed on, opening the 'TfsWorkItemTracking' database (in TFS 2010 and later it will named after your project collection instead) and locating the 'TreeNodes' table: Once you have found the matching Area (by name), the numeric value stored in the ID column (the one on the left) is the value that needs to get added as the External Key inside SpiraTeam. b) TFS Custom Fields If the custom field in TFS is a list field, first you need to go to Administration > Edit Custom Lists in SpiraTeam and create a new custom list that contains all the different values that are being used in TFS. Then for both list-fields and value-fields you need to go to Administration > Edit Custom Properties and add a new custom property onto the Requirement artifact type with the name of the appropriate TFS field (e.g. Risk, Stack Rank, etc.) and if a list-field, link it to the custom list you created in the previous step. The custom property will now be available for data-mapping. Now, back in the data-synchronization data-mapping page, click on the hyperlink under Requirement Custom Properties that corresponds to the custom property to bring up the custom property mapping configuration screen: First you need to enter the full Reference Name of the TFS field as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to this specific field in TFS. To see a list of fields and their reference names, you can run the following SQL query against your TFS database: SELECT Name, ReferenceName FROM Fields ORDER BY Name We have included a list of fields in the Agile process template in TFS Field Reference as a helpful reference. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the name of the field values as they appear in TFS as the External Key. Once you have updated the various mapping sections, you are now ready to start the service. Using SpiraTeam with TFS Now that the integration service has been configured and the service started, initially any incidents already created in SpiraTeam for the specified projects will be imported into TFS and any requirements, tasks or bugs already created in TFS will be imported into SpiraTeam. At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any work items with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with TFS on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTest or SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Once an incident has been created during the running of the test, it will now be populated across into TFS as a work item of type corresponding to the types setup in the incident type mappings. At this point, the incident can be worked on in either system, with changes being synchronized to the other system. However in general we recommend that the QA/Testing team use SpiraTeam and the development team use TFS. E.g. the developers will mark the bugs as resolved in MSTS once they have completed fixing them and the QA team will either reopen or close then in SpiraTeam once they have had a change to verify the resolution. You are now able to perform test coverage and incident reporting inside SpiraTest/SpiraTeam using the test cases managed by SpiraTest/SpiraTeam and the incidents managed collaboratively between SpiraTest/SpiraTeam and TFS. You can create project requirements and associated tasks in either SpiraTeam or TFS, however the synchronization service is only unidirectional for requirements and tasks, so when you create or update a requirement or task in TFS, the change will be reflected in SpiraTeam, but not the other way around. Troubleshooting In most cases once you have started the service, once it's up and running you will not see any error or warning messages from the Data-Sync service. However, if you have new users created in SpiraTeam that have not been mapped to users in TFS, when you assign incidents, requirements or tasks to those items, you may see warning messages in the Event Viewer letting you know which users needs to be mapped. TFS Field Reference The following fields are available in TFS for data-mapping when using the TFS agile process template: Display Name Reference Name Accepted By Microsoft.VSTS.CodeReview.AcceptedBy Accepted Date Microsoft.VSTS.CodeReview.AcceptedDate Activated By Microsoft.VSTS.Common.ActivatedBy Activated Date Microsoft.VSTS.Common.ActivatedDate Activity Microsoft.VSTS.Common.Activity Application Launch Instructions Microsoft.VSTS.Feedback.ApplicationLaunchInstructions Application Start Information Microsoft.VSTS.Feedback.ApplicationStartInformation Application Type Microsoft.VSTS.Feedback.ApplicationType Area ID System.AreaId Area Level 1 System.AreaLevel1 Area Level 2 System.AreaLevel2 Area Level 3 System.AreaLevel3 Area Level 4 System.AreaLevel4 Area Level 5 System.AreaLevel5 Area Level 6 System.AreaLevel6 Area Level 7 System.AreaLevel7 Area Path System.AreaPath Assigned To System.AssignedTo Associated Context Microsoft.VSTS.CodeReview.Context Associated Context Code Microsoft.VSTS.CodeReview.ContextCode Associated Context Owner Microsoft.VSTS.CodeReview.ContextOwner Associated Context Type Microsoft.VSTS.CodeReview.ContextType Attached File Count System.AttachedFileCount Attached Files System.AttachedFiles Authorized As System.AuthorizedAs Authorized Date System.AuthorizedDate Automated Test Id Microsoft.VSTS.TCM.AutomatedTestId Automated Test Name Microsoft.VSTS.TCM.AutomatedTestName Automated Test Storage Microsoft.VSTS.TCM.AutomatedTestStorage Automated Test Type Microsoft.VSTS.TCM.AutomatedTestType Automation status Microsoft.VSTS.TCM.AutomationStatus BIS Links System.BISLinks Changed By System.ChangedBy Changed Date System.ChangedDate Changed Set System.ChangedSet Closed By Microsoft.VSTS.Common.ClosedBy Closed Date Microsoft.VSTS.Common.ClosedDate Closed Status Microsoft.VSTS.CodeReview.ClosedStatus Closed Status Code Microsoft.VSTS.CodeReview.ClosedStatusCode Closing Comment Microsoft.VSTS.CodeReview.ClosingComment Completed Work Microsoft.VSTS.Scheduling.CompletedWork Created By System.CreatedBy Created Date System.CreatedDate Description System.Description Due Date Microsoft.VSTS.Scheduling.DueDate External Link Count System.ExternalLinkCount Finish Date Microsoft.VSTS.Scheduling.FinishDate Found In Microsoft.VSTS.Build.FoundIn History System.History Hyperlink Count System.HyperLinkCount ID System.Id InAdminOnlyTreeFlag System.InAdminOnlyTreeFlag InDeletedTreeFlag System.InDeletedTreeFlag Integration Build Microsoft.VSTS.Build.IntegrationBuild Issue Microsoft.VSTS.Common.Issue Iteration ID System.IterationId Iteration Level 1 System.IterationLevel1 Iteration Level 2 System.IterationLevel2 Iteration Level 3 System.IterationLevel3 Iteration Level 4 System.IterationLevel4 Iteration Level 5 System.IterationLevel5 Iteration Level 6 System.IterationLevel6 Iteration Level 7 System.IterationLevel7 Iteration Path System.IterationPath Link Type System.Links.LinkType Linked Files System.LinkedFiles Local Data Source Microsoft.VSTS.TCM.LocalDataSource Node Name System.NodeName Node Type System.NodeType Not a field System.NotAField Original Estimate Microsoft.VSTS.Scheduling.OriginalEstimate Parameters Microsoft.VSTS.TCM.Parameters PersonID System.PersonId Priority Microsoft.VSTS.Common.Priority ProjectID System.ProjectId Rating Microsoft.VSTS.Common.Rating Reason System.Reason Related Link Count System.RelatedLinkCount Related Links System.RelatedLinks Remaining Work Microsoft.VSTS.Scheduling.RemainingWork Repro Steps Microsoft.VSTS.TCM.ReproSteps Resolved By Microsoft.VSTS.Common.ResolvedBy Resolved Date Microsoft.VSTS.Common.ResolvedDate Resolved Reason Microsoft.VSTS.Common.ResolvedReason Rev System.Rev Reviewed By Microsoft.VSTS.Common.ReviewedBy Revised Date System.RevisedDate Risk Microsoft.VSTS.Common.Risk Severity Microsoft.VSTS.Common.Severity Stack Rank Microsoft.VSTS.Common.StackRank Start Date Microsoft.VSTS.Scheduling.StartDate State System.State State Change Date Microsoft.VSTS.Common.StateChangeDate State Code Microsoft.VSTS.Common.StateCode Steps Microsoft.VSTS.TCM.Steps Story Points Microsoft.VSTS.Scheduling.StoryPoints System Info Microsoft.VSTS.TCM.SystemInfo Tags System.Tags Team Project System.TeamProject TF Server System.TFServer Title System.Title Tree System.Tree Watermark System.Watermark _Extension Marker System.ExtensionMarker _Kanban Column _Kanban.Column Work Item Form System.WorkItemForm Work Item FormID System.WorkItemFormId Work Item Type System.WorkItemType WorkItem System.WorkItem WorkItemLink System.WorkItemLink WorkItemTypeExtension System.WorkItemTypeExtension For a full list of the available TFS fields in the different process templates, please refer to: http://msdn.microsoft.com/en-us/library/vstudio/dd997792.aspx","title":"Azure DevOps"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-MS-TFS/#using-spiratest-with-microsoft-azure-devops-tfs","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the work item tracking functionality of Microsoft Azure DevOps, also known as Microsoft Team Foundation Server (TFS) hereafter referred to as TFS for brevity. The built-in integration service allows the quality assurance team to manage their requirements and test cases in SpiraTeam, execute test runs in SpiraTest, and then have the new incidents generated during the run be automatically loaded into TFS. Once the incidents are loaded into TFS as work items, the development team can then manage the lifecycle of these work items in TFS, and have the status changes in TFS be reflected back in SpiraTeam. Similarly, as the requirements are decomposed into discrete project tasks in SpiraTeam, the integration service will automatically load these new tasks into TFS as task work items where the development team can manage their lifecycle, with schedule and progress changes in TFS being reflected back in SpiraTeam. STOP! Please make sure you have first read the Instructions in Setup before proceeding!","title":"Using SpiraTest with Microsoft Azure DevOps (TFS)"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-MS-TFS/#configuring-the-plug-in","text":"The next step is to configure the plug-in within SpiraTeam so that the system knows how to access the TFS server. To start the configuration, please open up SpiraTeam in a web browser, log in using a valid account that has System-Administration level privileges and click on the System > Data Synchronization administration option from the left-hand navigation: This screen lists all the plug-ins already configured in the system. Depending on whether you chose the option to include sample data in your installation or not, you will see either an empty screen or a list of sample data-synchronization plug-ins. If you already see an entry for MsTfsDataSync you should click on its \"Edit\" link. If you don't see such an entry in the list, please click on the [Add] button instead. In either case you will be taken to the following screen where you can enter or modify the TFS Data-Synchronization plug-in: You need to fill out the following fields for the TFS Plug-in to operate correctly: Name -- this needs to be set to MsTfsDataSync . Caption -- this is the display name of the plugin. Normally you can use something generic such as \"Microsoft TFS\", however if you have multiple TFS instances you might want to name it something specific such as \"TFS External\". If you don't enter a value, the display name will be \"MsTfsDataSync\" Description -- this should be set to a description of the plug-in. This is an optional field that is used for documentation purposes and is not actually used by the system. Connection Info -- this should the URL that you use for connecting Visual Studio to the Team Foundation Server. For Microsoft Azure DevOps Online , it is of the format https://dev.azure.com/mycompany or https://mycompany.visualstudio.com . See our special KB437 regarding Microsoft Azure DevOps Online . For Microsoft Azure DevOps Server , also known as Team Foundation Server (TFS) it is of the format http://servername:8080/tfs/collectionname where \"collectionname\" is the name of the project collection you're integrating with. Login -- this should be set to a valid user that has permissions to access the TFS installation. The login needs to have permissions to create and view work items and iterations within TFS. Note: Do not include the Windows Active Directory Domain in this field if you are using a Windows domain user. Password -- this should be set to the password of the user specified above. Time Offset -- normally this should be set to zero, but if you find that work items being changed in TFS are not being updated in SpiraTeam, try increasing the value as this will tell the data-synchronization plug-in to add on the time offset (in hours) when comparing date-time stamps. Also if your TFS installation is running on a server set to a different time-zone, then you should add in the number of hours difference between the servers' time-zones here. If you are using Microsoft Azure DevOps Online instead of a local TFS instance, you will need to use a Personal Access Token (PAT) to connect to the instance of Azure DevOps from SpiraTeam. To get a PAT, login to Azure DevOps and access your user profile: In the popup menu, Click on the Personal access tokens option. This will display the list of already issued/active personal access tokens: Click on the + New Token button to create a new personal access token: You can give it a logical name (e.g. \"Spira\") and give it permissions to: Read, write & manage Work Items Read, write & manage Releases (or just grant Full Access) Azure Devops will then create a personal access token that you should copy to the clipboard and store somewhere secure (e.g. a password manager): You will now use this personal access token as the \"password\" that SpiraTeam will use to connect to Azure DevOps. For the username, you can just use your standard Azure DevOps login (in fact you can use anything, it will only be checking the PAT). The remaining fields should be completed as follows: Auto-Map Users - This changes the way the plugin maps users in SpiraTeam to those in TFS: Auto-Map = True - With this setting, all users in SpiraTeam need to have the same username as those in TFS. If this is the case then you do not need to perform the user-mapping task outlined in section 5.2.2. This is a big time-saver if you can guarantee that all usernames are the same in both systems. Auto-Map = False - With this setting, users in SpiraTeam and TFS are free to have different usernames because you specify the corresponding TFS name for each user as outlined in 5.2.2. Custom 01 -- This is used to specify the Windows Active Directory Domain that the Windows user specified above is a member of. If you are running TFS on a Windows workgroup, just use the server name and make sure that the Windows user above is a user on that server itself. If you are using a Window Live ID, just leave this field blank Custom 02 -- This field should contain a comma-separated list of work item types that you want to synchronize as SpiraTeam Tasks as opposed to Incidents. Normally you would want to list at least the TFS \"Task\" work item type in this field. Custom 03 -- If you would like the system to display the SpiraTeam artifact ID (e.g. IN5 for incidents or TK36 for tasks) in a custom field inside TFS, you should just enter the name of the appropriate TFS field from your process template (e.g. Spira.IncidentId) and then when the incident or task is added to TFS, the corresponding SpiraTeam ID will be added to that field of the work item. Custom 04 - Depending on your TFS process template, the data-synchronization plugin may not be allowed to set the detector of the incident inside TFS. If you would like the system to display the detector of the incident (as recorded in SpiraTeam) in a custom field inside TFS, you should just enter the name of the appropriate TFS field from your process template (e.g. Spira.Detector) and then when the incident is added to TFS, the corresponding detector's name will be added to that field of the work item. Custom 05 -- This field should contain a comma-separated list of work item types that you want to synchronize as SpiraTeam Requirements as opposed to Incidents. Normally you would want to list at least the TFS \"User Story\" work item type in this field.","title":"Configuring the Plug-In"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-MS-TFS/#configuring-the-data-mapping","text":"Next, you need to configure the data mapping between SpiraTeam and TFS. This allows the various projects, users, releases, incident types, statuses, priorities and custom property values used in the two applications to be related to each other. This is important, as without a correct mapping, there is no way for the integration service to know that a \"Not Reproducible\" incident in SpiraTeam is the same as a \"Closed + Cannot Reproduce\" bug work item in TFS (for example). The following mapping information needs to be setup in SpiraTeam: The mapping of the project identifiers for the projects that need to be synchronized The mapping of users in the system The mapping of releases (equivalent to TFS iterations) in the system The mapping of the various standard incident fields in the system The mapping of the various custom incident properties in the system The mapping of the various standard requirement fields in the system (if synching requirements) The mapping of the various custom requirement properties in the system (if synching requirements) The mapping of the various standard task fields in the system (if synching tasks) The mapping of the various custom task properties in the system (if synching tasks) Note: If using SpiraTest, you do not need to setup the last two sets of mappings as Tasks are not available in SpiraTest.","title":"Configuring the Data Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-MS-TFS/#configuring-the-project-mapping","text":"From the data synchronization administration page, you need to click on the \"View Project Mappings\" hyperlink next to the TFS plug-in name. This will take you to the data-mapping home page for the currently selected project: If the project name does not match the name of the project you want to configure the data-mapping for, click on the \"(Change Project)\" hyperlink to change the current project. To enable this project for data-synchronization with TFS, you need to enter: External Key -- This should be set to the name of the project in TFS as visible from the Visual Studio Team Explorer or web interface: OR Active Flag -- Set this to 'Yes' so that SpiraTeam knows that you want to synchronize data for this project. Once the project has been completed, setting the value to \"No\" will stop data synchronization, reducing network utilization. Click [Update] to confirm these settings. Once you have enabled the project for data-synchronization, you can now enter the other data mapping values outlined below. Note: Once you have successfully configured the project, when creating a new project, you should choose the option to \"Create Project from Existing Project\" rather than \"Use Default Template\" so that all the project mappings get copied across to the new project.","title":"Configuring the Project Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-MS-TFS/#configuring-the-user-mapping","text":"To configure the mapping of users in the two systems, you need to go to Administration > Users > View Edit Users, which will bring up the list of users in the system. Then click on the \"Edit\" button for a particular user that will be editing work items in TFS: You will notice that in the special Data Mapping tab, there is a list of all the configured data-synchronization plug-ins. In the text box next to the TFS Data-Sync plug-in you need to enter the full name of this Windows User (not the login). This is the name of the user as they appear inside work items within TFS: This will allow the data-synchronization plug-in to know which user in SpiraTeam match which equivalent user in TFS. Click [Update] once you've entered the appropriate login name. You should now repeat for the other users who will be active in both systems. If you have set the \"Auto-Map Users\" option in the TFS 2012 plugin, you can skip this section completely.","title":"Configuring the User Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-MS-TFS/#configuring-the-release-mapping","text":"When the data-synchronization service runs, when it comes across a release/iteration in SpiraTeam that it has not seen before, it will create a corresponding \"Iteration\" in TFS. Similarly if it comes across a new Iteration in TFS that it has not seen before, it will create a new Release/Iteration in SpiraTeam. Therefore when using both systems together, it is recommended that you only enter new Releases/Iterations in one system and let the data-synchronization service add them to the other system. However you may start out with the situation where you already have pre-existing Releases/Iterations in both systems that you need to associate in the data-mapping. If you don't do this, you may find that duplicates get created when you first enable the data-synchronization service. Therefore for any Releases/Iterations that already exist in BOTH systems please navigate to Planning > Releases and click on the Release/Iteration in question. Make sure you have the 'Overview' tab visible and expand the \"Properties\" section of the release/iteration: In addition to the standard fields and custom properties configured for Releases, you will see an additional text property called \" MsTfsDataSync ID \" that is used to store the mapped external identifier for the equivalent Version in TFS. You need to locate the ID of the equivalent Iteration in TFS, enter it into this text-box and click [Save]. You should now repeat for all the other pre-existing releases. The TFS Iteration ID is not visible in the TFS user interface, but can instead be located by opening up the SQL Server that it's installed on, opening the 'TfsWorkItemTracking' database (in TFS 2010 it will named after your project collection instead) and locating the 'TreeNodes' table: Once you have found the matching Iteration (by name), the numeric value stored in the ID column (the one on the left) is the value that needs to get added as the MsTfsDataSync ID inside SpiraTeam.","title":"Configuring the Release Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-MS-TFS/#configuring-the-standard-incident-field-mapping","text":"Now that the projects, user and releases have been mapped correctly, we need to configure the standard incident fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the MsTfsDataSync plug-in entry: From this screen, you need to click on Priority, Severity, Status and Type in turn to configure their values: a) Incident Type Click on the \"Type\" hyperlink under Incident Standard Fields to bring up the Incident type mapping configuration screen: The table lists each of the incident types available in SpiraTeam and provides you with the ability to enter the matching TFS work item type name for each one. To make this easier, we recommend that inside the Administration > Edit Incident Statuses screen you first make all incident types inactive except Risk, Issue and Bug since only those types make sense to synchronize with TFS. b) Incident Status Click on the \"Status\" hyperlink under Incident Standard Fields to bring up the Incident status mapping configuration screen: The table lists each of the incident statuses available in SpiraTeam and provides you with the ability to enter the matching TFS work item State + Reason for each one. Since TFS uses separate State (Active, Resolved, Closed) and Reason (Fixed, Duplicate, Not Fixed, etc.) codes and SpiraTeam uses a single status code, you need to concatenate the TFS State and Reason together with a 'plus' (+) sign so that the system knows that the incident status in SpiraTeam corresponds to that specific combination. You can map multiple SpiraTeam fields to the same TFS fields (e.g. New and Open in SpiraTeam are both equivalent to 'Active+New' in TFS), in which case only one of the two values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from TFS > SpiraTeam). We recommend that you always point the New and Open statuses inside SpiraTeam to point to the \"Active+New\" TFS state+reason, and make Open in SpiraTeam the Primary status of the two. This is recommended so that as new incidents in SpiraTeam get synched over to TFS, they will get switched to the \"Active+New\" status in TFS which will then be synched back to \"Open\" in SpiraTeam. That way you'll be able to see at a glance which incidents have been synched with TFS and those that haven't. c) Incident Priority Click on the \"Priority\" hyperlink under Incident Standard Fields to bring up the Incident Priority mapping configuration screen: The table lists each of the incident priorities available in SpiraTeam and provides you with the ability to enter the matching TFS priority value for each one. To make this easier, we recommend that inside the Administration > Edit Incident Priorities screen you first make any statuses not used in TFS inactive in SpiraTeam. d) Incident Severity (TFS 2012 plugin only) Click on the \"Severity\" hyperlink under Incident Standard Fields to bring up the Incident Severity mapping configuration screen: The table lists each of the incident severities available in SpiraTeam and provides you with the ability to enter the matching TFS severity value for each one. To make this easier, we recommend that inside the Administration > Edit Incident Severities screen you first make any statuses not used in TFS inactive in SpiraTeam.","title":"Configuring the Standard Incident Field Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-MS-TFS/#configuring-the-incident-custom-property-mapping","text":"Now that the various SpiraTeam standard incident fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in TFS and also for custom properties in SpiraTeam that are used to map to standard fields in TFS (e.g. Area) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Incident Custom Property that you want to add data-mapping information for: a) TFS's Area Field First you need to go to Administration > Edit Custom Lists and create a new custom list that contains all the different Areas that are being used in TFS. Then you need to go to Administration > Edit Custom Properties and add a new list custom property onto the Incident artifact type called 'Area' and link it to the Area custom list you created in the previous step. This will now be available for mapping. Now, back in the data-mapping page, click on the 'Area' hyperlink under Incident Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Area\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Area field in TFS. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the ID of the various Areas that are configured in TFS. The TFS Area ID is not visible in the TFS user interface, but can instead be located by opening up the SQL Server that it's installed on, opening the 'TfsWorkItemTracking' database (in TFS 2010 and later it will named after your project collection instead) and locating the 'TreeNodes' table: Once you have found the matching Area (by name), the numeric value stored in the ID column (the one on the left) is the value that needs to get added as the External Key inside SpiraTeam. b) TFS Custom Fields If the custom field in TFS is a list field, first you need to go to Administration > Edit Custom Lists in SpiraTeam and create a new custom list that contains all the different values that are being used in TFS. Then for both list-fields and value-fields you need to go to Administration > Edit Custom Properties and add a new custom property onto the Incident artifact type with the name of the appropriate TFS field (e.g. Triage, Rank, etc.) and if a list-field, link it to the custom list you created in the previous step. The custom property will now be available for data-mapping. Now, back in the data-synchronization data-mapping page, click on the hyperlink under Incident Custom Properties that corresponds to the custom property to bring up the custom property mapping configuration screen: First you need to enter the full Reference Name of the TFS field as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to this specific field in TFS. To see a list of fields and their reference names, you can run the following SQL query against your TFS database: SELECT Name, ReferenceName FROM Fields ORDER BY Name We have included a list of fields in the Agile process template in TFS Field Reference as a helpful reference. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the name of the field values as they appear in TFS as the External Key.","title":"Configuring the Incident Custom Property Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-MS-TFS/#configuring-the-standard-task-field-mapping","text":"Now that the projects, user, releases and incident fields have been mapped correctly, we need to configure the standard task fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the MsTfsDataSync plug-in entry: From this screen, you need to click on Priority and Status in turn to configure their values: a) Task Status Click on the \"Status\" hyperlink under Task Standard Fields to bring up the Task status mapping configuration screen: The table lists each of the task statuses available in SpiraTeam and provides you with the ability to enter the matching TFS work item State for each one. Unlike the mapping for incidents (see above) SpiraTeam does not track the reason codes associated with the tasks in MS TFS, so you only need to map the State names from TFS with the task status names. You can map multiple SpiraTeam fields to the same TFS fields (e.g. Blocked, Completed and Deferred in SpiraTeam are all equivalent to State = Closed in TFS), in which case only one of the values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from TFS > SpiraTeam). b) Task Priority (TFS 2012 Plugin Only) Click on the \"Priority\" hyperlink under Task Standard Fields to bring up the Task Priority mapping configuration screen: The table lists each of the task priorities available in SpiraTeam and provides you with the ability to enter the matching TFS priority value for each one.","title":"Configuring the Standard Task Field Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-MS-TFS/#configuring-the-task-custom-property-mapping","text":"Now that the various SpiraTeam standard task fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in TFS and also for custom properties in SpiraTeam that are used to map to standard fields in TFS (e.g. Area) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Task Custom Property that you want to add data-mapping information for: a) TFS's Area Field First you need to go to Administration > Edit Custom Lists and create a new custom list that contains all the different Areas that are being used in TFS. Then you need to go to Administration > Edit Custom Properties and add a new list custom property onto the Task artifact type called 'Area' and link it to the Area custom list you created in the previous step. This will now be available for mapping. Now, back in the data-mapping page, click on the 'Area' hyperlink under Task Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Area\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Area field in TFS. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the ID of the various Areas that are configured in TFS. The TFS Area ID is not visible in the TFS user interface, but can instead be located by opening up the SQL Server that it's installed on, opening the 'TfsWorkItemTracking' database (in TFS 2010 and later it will named after your project collection instead) and locating the 'TreeNodes' table: Once you have found the matching Area (by name), the numeric value stored in the ID column (the one on the left) is the value that needs to get added as the External Key inside SpiraTeam. b) TFS Custom Fields If the custom field in TFS is a list field, first you need to go to Administration > Edit Custom Lists in SpiraTeam and create a new custom list that contains all the different values that are being used in TFS. Then for both list-fields and value-fields you need to go to Administration > Edit Custom Properties and add a new custom property onto the Task artifact type with the name of the appropriate TFS field (e.g. Discipline, Stack Rank, etc.) and if a list-field, link it to the custom list you created in the previous step. The custom property will now be available for data-mapping. Now, back in the data-synchronization data-mapping page, click on the hyperlink under Task Custom Properties that corresponds to the custom property to bring up the custom property mapping configuration screen: First you need to enter the full Reference Name of the TFS field as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to this specific field in TFS. To see a list of fields and their reference names, you can run the following SQL query against your TFS database: SELECT Name, ReferenceName FROM Fields ORDER BY Name We have included a list of fields in the Agile process template in TFS Field Reference as a helpful reference. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the name of the field values as they appear in TFS as the External Key.","title":"Configuring the Task Custom Property Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-MS-TFS/#configuring-the-standard-requirement-field-mapping-2012-plugin-only","text":"Now that the projects, user, releases, incident and task fields have been mapped correctly, we need to configure the standard requirement fields. To do this, go to Administration > System > Data Synchronization and click on the \"View Project Mappings\" for the MsTfsDataSync plug-in entry: From this screen, you need to click on Importance and Status in turn to configure their values: a) Requirement Status Click on the \"Status\" hyperlink under Requirement Standard Fields to bring up the Requirement status mapping configuration screen: The table lists each of the requirement statuses available in SpiraTeam and provides you with the ability to enter the matching TFS work item State for each one. Unlike the mapping for incidents (see above) SpiraTeam does not track the reason codes associated with the requirements in MS TFS, so you only need to map the State names from TFS with the requirement status names. You can map multiple SpiraTeam fields to the same TFS fields, in which case only one of the values can be listed as Primary = Yes as that's the value that's used on the reverse synchronization (from TFS > SpiraTeam). b) Requirement Importance Click on the \"Importance\" hyperlink under Requirement Standard Fields to bring up the Requirement Importance mapping configuration screen: The table lists each of the requirement importance values available in SpiraTeam and provides you with the ability to enter the matching TFS work item priority value for each one.","title":"Configuring the Standard Requirement Field Mapping (2012 Plugin Only)"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-MS-TFS/#configuring-the-requirement-custom-property-mapping","text":"Now that the various SpiraTeam standard requirement fields have been mapped correctly, we need to configure the custom property mappings. This is used for both custom properties in SpiraTeam that map to custom fields in TFS and also for custom properties in SpiraTeam that are used to map to standard fields in TFS (e.g. Area) that don't exist in SpiraTeam. From the View/Edit Project Data Mapping screen, you need to click on the name of the Requirement Custom Property that you want to add data-mapping information for: a) TFS's Area Field First you need to go to Administration > Edit Custom Lists and create a new custom list that contains all the different Areas that are being used in TFS. Then you need to go to Administration > Edit Custom Properties and add a new list custom property onto the Requirement artifact type called 'Area' and link it to the Area custom list you created in the previous step. This will now be available for mapping. Now, back in the data-mapping page, click on the 'Area' hyperlink under Requirement Custom Properties to bring up the custom property mapping configuration screen: First you need to enter the word \"Area\" as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to built-in Area field in TFS. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the ID of the various Areas that are configured in TFS. The TFS Area ID is not visible in the TFS user interface, but can instead be located by opening up the SQL Server that it's installed on, opening the 'TfsWorkItemTracking' database (in TFS 2010 and later it will named after your project collection instead) and locating the 'TreeNodes' table: Once you have found the matching Area (by name), the numeric value stored in the ID column (the one on the left) is the value that needs to get added as the External Key inside SpiraTeam. b) TFS Custom Fields If the custom field in TFS is a list field, first you need to go to Administration > Edit Custom Lists in SpiraTeam and create a new custom list that contains all the different values that are being used in TFS. Then for both list-fields and value-fields you need to go to Administration > Edit Custom Properties and add a new custom property onto the Requirement artifact type with the name of the appropriate TFS field (e.g. Risk, Stack Rank, etc.) and if a list-field, link it to the custom list you created in the previous step. The custom property will now be available for data-mapping. Now, back in the data-synchronization data-mapping page, click on the hyperlink under Requirement Custom Properties that corresponds to the custom property to bring up the custom property mapping configuration screen: First you need to enter the full Reference Name of the TFS field as the External Key of the custom property. This tells the data-sync plug-in that the custom property in SpiraTeam should be mapped to this specific field in TFS. To see a list of fields and their reference names, you can run the following SQL query against your TFS database: SELECT Name, ReferenceName FROM Fields ORDER BY Name We have included a list of fields in the Agile process template in TFS Field Reference as a helpful reference. Next for each of the Property Values in the table (in the lower half of the page) you need to enter the name of the field values as they appear in TFS as the External Key. Once you have updated the various mapping sections, you are now ready to start the service.","title":"Configuring the Requirement Custom Property Mapping"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-MS-TFS/#using-spirateam-with-tfs","text":"Now that the integration service has been configured and the service started, initially any incidents already created in SpiraTeam for the specified projects will be imported into TFS and any requirements, tasks or bugs already created in TFS will be imported into SpiraTeam. At this point we recommend opening the Windows Event Viewer and choosing the Application Log. In this log any error messages raised by the SpiraTeam Data Sync Service will be displayed. If you see any error messages at this point, we recommend immediately stopping the SpiraTeam service and checking the various mapping entries. If you cannot see any work items with the mapping information, we recommend sending a copy of the event log message(s) to Inflectra customer services ( support@inflectra.com ) who will help you troubleshoot the problem. To use SpiraTeam with TFS on an ongoing basis, we recommend the following general processes be followed: When running tests in SpiraTest or SpiraTeam, defects found should be logged through the Test Execution Wizard as normal. Once an incident has been created during the running of the test, it will now be populated across into TFS as a work item of type corresponding to the types setup in the incident type mappings. At this point, the incident can be worked on in either system, with changes being synchronized to the other system. However in general we recommend that the QA/Testing team use SpiraTeam and the development team use TFS. E.g. the developers will mark the bugs as resolved in MSTS once they have completed fixing them and the QA team will either reopen or close then in SpiraTeam once they have had a change to verify the resolution. You are now able to perform test coverage and incident reporting inside SpiraTest/SpiraTeam using the test cases managed by SpiraTest/SpiraTeam and the incidents managed collaboratively between SpiraTest/SpiraTeam and TFS. You can create project requirements and associated tasks in either SpiraTeam or TFS, however the synchronization service is only unidirectional for requirements and tasks, so when you create or update a requirement or task in TFS, the change will be reflected in SpiraTeam, but not the other way around.","title":"Using SpiraTeam with TFS"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-MS-TFS/#troubleshooting","text":"In most cases once you have started the service, once it's up and running you will not see any error or warning messages from the Data-Sync service. However, if you have new users created in SpiraTeam that have not been mapped to users in TFS, when you assign incidents, requirements or tasks to those items, you may see warning messages in the Event Viewer letting you know which users needs to be mapped.","title":"Troubleshooting"},{"location":"External-Bug-Tracking-Integration/Using-SpiraTest-with-MS-TFS/#tfs-field-reference","text":"The following fields are available in TFS for data-mapping when using the TFS agile process template: Display Name Reference Name Accepted By Microsoft.VSTS.CodeReview.AcceptedBy Accepted Date Microsoft.VSTS.CodeReview.AcceptedDate Activated By Microsoft.VSTS.Common.ActivatedBy Activated Date Microsoft.VSTS.Common.ActivatedDate Activity Microsoft.VSTS.Common.Activity Application Launch Instructions Microsoft.VSTS.Feedback.ApplicationLaunchInstructions Application Start Information Microsoft.VSTS.Feedback.ApplicationStartInformation Application Type Microsoft.VSTS.Feedback.ApplicationType Area ID System.AreaId Area Level 1 System.AreaLevel1 Area Level 2 System.AreaLevel2 Area Level 3 System.AreaLevel3 Area Level 4 System.AreaLevel4 Area Level 5 System.AreaLevel5 Area Level 6 System.AreaLevel6 Area Level 7 System.AreaLevel7 Area Path System.AreaPath Assigned To System.AssignedTo Associated Context Microsoft.VSTS.CodeReview.Context Associated Context Code Microsoft.VSTS.CodeReview.ContextCode Associated Context Owner Microsoft.VSTS.CodeReview.ContextOwner Associated Context Type Microsoft.VSTS.CodeReview.ContextType Attached File Count System.AttachedFileCount Attached Files System.AttachedFiles Authorized As System.AuthorizedAs Authorized Date System.AuthorizedDate Automated Test Id Microsoft.VSTS.TCM.AutomatedTestId Automated Test Name Microsoft.VSTS.TCM.AutomatedTestName Automated Test Storage Microsoft.VSTS.TCM.AutomatedTestStorage Automated Test Type Microsoft.VSTS.TCM.AutomatedTestType Automation status Microsoft.VSTS.TCM.AutomationStatus BIS Links System.BISLinks Changed By System.ChangedBy Changed Date System.ChangedDate Changed Set System.ChangedSet Closed By Microsoft.VSTS.Common.ClosedBy Closed Date Microsoft.VSTS.Common.ClosedDate Closed Status Microsoft.VSTS.CodeReview.ClosedStatus Closed Status Code Microsoft.VSTS.CodeReview.ClosedStatusCode Closing Comment Microsoft.VSTS.CodeReview.ClosingComment Completed Work Microsoft.VSTS.Scheduling.CompletedWork Created By System.CreatedBy Created Date System.CreatedDate Description System.Description Due Date Microsoft.VSTS.Scheduling.DueDate External Link Count System.ExternalLinkCount Finish Date Microsoft.VSTS.Scheduling.FinishDate Found In Microsoft.VSTS.Build.FoundIn History System.History Hyperlink Count System.HyperLinkCount ID System.Id InAdminOnlyTreeFlag System.InAdminOnlyTreeFlag InDeletedTreeFlag System.InDeletedTreeFlag Integration Build Microsoft.VSTS.Build.IntegrationBuild Issue Microsoft.VSTS.Common.Issue Iteration ID System.IterationId Iteration Level 1 System.IterationLevel1 Iteration Level 2 System.IterationLevel2 Iteration Level 3 System.IterationLevel3 Iteration Level 4 System.IterationLevel4 Iteration Level 5 System.IterationLevel5 Iteration Level 6 System.IterationLevel6 Iteration Level 7 System.IterationLevel7 Iteration Path System.IterationPath Link Type System.Links.LinkType Linked Files System.LinkedFiles Local Data Source Microsoft.VSTS.TCM.LocalDataSource Node Name System.NodeName Node Type System.NodeType Not a field System.NotAField Original Estimate Microsoft.VSTS.Scheduling.OriginalEstimate Parameters Microsoft.VSTS.TCM.Parameters PersonID System.PersonId Priority Microsoft.VSTS.Common.Priority ProjectID System.ProjectId Rating Microsoft.VSTS.Common.Rating Reason System.Reason Related Link Count System.RelatedLinkCount Related Links System.RelatedLinks Remaining Work Microsoft.VSTS.Scheduling.RemainingWork Repro Steps Microsoft.VSTS.TCM.ReproSteps Resolved By Microsoft.VSTS.Common.ResolvedBy Resolved Date Microsoft.VSTS.Common.ResolvedDate Resolved Reason Microsoft.VSTS.Common.ResolvedReason Rev System.Rev Reviewed By Microsoft.VSTS.Common.ReviewedBy Revised Date System.RevisedDate Risk Microsoft.VSTS.Common.Risk Severity Microsoft.VSTS.Common.Severity Stack Rank Microsoft.VSTS.Common.StackRank Start Date Microsoft.VSTS.Scheduling.StartDate State System.State State Change Date Microsoft.VSTS.Common.StateChangeDate State Code Microsoft.VSTS.Common.StateCode Steps Microsoft.VSTS.TCM.Steps Story Points Microsoft.VSTS.Scheduling.StoryPoints System Info Microsoft.VSTS.TCM.SystemInfo Tags System.Tags Team Project System.TeamProject TF Server System.TFServer Title System.Title Tree System.Tree Watermark System.Watermark _Extension Marker System.ExtensionMarker _Kanban Column _Kanban.Column Work Item Form System.WorkItemForm Work Item FormID System.WorkItemFormId Work Item Type System.WorkItemType WorkItem System.WorkItem WorkItemLink System.WorkItemLink WorkItemTypeExtension System.WorkItemTypeExtension For a full list of the available TFS fields in the different process templates, please refer to: http://msdn.microsoft.com/en-us/library/vstudio/dd997792.aspx","title":"TFS Field Reference"},{"location":"Help-Desk-Integration/KronoDesk/","text":"KronoDesk This section outlines how to integrate KronoDesk \u00ae into SpiraTeam \u00ae . This will enable KronoDesk agents to log incidents emerging from a ticket directly from the KronoDesk interface into SpiraTeam. They will also be able to see and review any SpiraTeam incidents already linked to existing KronoDesk tickets. The integration is built-in to KronoDesk out of the box, with no add-ons necessary. Configuring SpiraTeam In order for KronoDesk to successfully connect to SpiraTeam to create incidents, you need to first enable the security permissions for REST API access. To do this, please open up SpiraTeam and go to the Administration > System > Security Settings page: You need to enter in the URL domain of your KronoDesk. This tells SpiraTeam that CORS REST API requests from this domain is authorized. For non-production environments, you can also just set the value to (*) to allow all requests: We do not recommend this setting for production. Once you have done this, you also need to get the API Key for the user that will be connecting to SpiraTeam from KronoDesk. Go to the User Profile page (if it's your user) or the Administration > Edit Users page, if you want to connect as a different user: You need to make sure that Enable RSS Feeds is set to Active = Yes, and that there is an RSS Token. This is your REST API Key. Make sure you have the following: User Name RSS Token This is what you will use to connect from KronoDesk. Configuring KronoDesk Now, inside KronoDesk, please go to: Administration > Help Desk Settings > Spira Integration: Enter the following information for your SpiraTeam instance: Spira URL Login API Key (RSS Token) Then when you click [Test], you should see the following: If you see an authentication error, please check the login and RSS Token / API Key and try again. Now you need to associate the support agent in KronoDesk with the specific SpiraTeam user. To do this, each user needs to go to their User Profile in KronoDesk: They should enter the Spira login and RSS Token and click Test: Then click Save Changes to update your profile with this information. Using KronoDesk with SpiraTeam Now when you view a ticket in KronoDesk, you should see the Incidents tab for that ticket: This means that you are connected to SpiraTeam but that there are no incidents logged against this help desk ticket. If you click the + Add New Incident button, you will see the following dialog appear: You can now select the Project, then populate the Incident Name and the various required fields: Note that the Description field is prepopulated by the Ticket Description and associated Notes, this is normally sufficient for SpiraTeam, but you can edit it and tailor the incident description if you need. Once you click +Add , the new incident is logged in SpiraTeam and linked to the current ticket: If you click on the incident hyperlink, you will see that the incident is available in SpiraTeam: In addition, in the Attachments tab is a hyperlink for the developers to see the original help desk ticket:","title":"KronoDesk"},{"location":"Help-Desk-Integration/KronoDesk/#kronodesk","text":"This section outlines how to integrate KronoDesk \u00ae into SpiraTeam \u00ae . This will enable KronoDesk agents to log incidents emerging from a ticket directly from the KronoDesk interface into SpiraTeam. They will also be able to see and review any SpiraTeam incidents already linked to existing KronoDesk tickets. The integration is built-in to KronoDesk out of the box, with no add-ons necessary.","title":"KronoDesk"},{"location":"Help-Desk-Integration/KronoDesk/#configuring-spirateam","text":"In order for KronoDesk to successfully connect to SpiraTeam to create incidents, you need to first enable the security permissions for REST API access. To do this, please open up SpiraTeam and go to the Administration > System > Security Settings page: You need to enter in the URL domain of your KronoDesk. This tells SpiraTeam that CORS REST API requests from this domain is authorized. For non-production environments, you can also just set the value to (*) to allow all requests: We do not recommend this setting for production. Once you have done this, you also need to get the API Key for the user that will be connecting to SpiraTeam from KronoDesk. Go to the User Profile page (if it's your user) or the Administration > Edit Users page, if you want to connect as a different user: You need to make sure that Enable RSS Feeds is set to Active = Yes, and that there is an RSS Token. This is your REST API Key. Make sure you have the following: User Name RSS Token This is what you will use to connect from KronoDesk.","title":"Configuring SpiraTeam"},{"location":"Help-Desk-Integration/KronoDesk/#configuring-kronodesk","text":"Now, inside KronoDesk, please go to: Administration > Help Desk Settings > Spira Integration: Enter the following information for your SpiraTeam instance: Spira URL Login API Key (RSS Token) Then when you click [Test], you should see the following: If you see an authentication error, please check the login and RSS Token / API Key and try again. Now you need to associate the support agent in KronoDesk with the specific SpiraTeam user. To do this, each user needs to go to their User Profile in KronoDesk: They should enter the Spira login and RSS Token and click Test: Then click Save Changes to update your profile with this information.","title":"Configuring KronoDesk"},{"location":"Help-Desk-Integration/KronoDesk/#using-kronodesk-with-spirateam","text":"Now when you view a ticket in KronoDesk, you should see the Incidents tab for that ticket: This means that you are connected to SpiraTeam but that there are no incidents logged against this help desk ticket. If you click the + Add New Incident button, you will see the following dialog appear: You can now select the Project, then populate the Incident Name and the various required fields: Note that the Description field is prepopulated by the Ticket Description and associated Notes, this is normally sufficient for SpiraTeam, but you can edit it and tailor the incident description if you need. Once you click +Add , the new incident is logged in SpiraTeam and linked to the current ticket: If you click on the incident hyperlink, you will see that the incident is available in SpiraTeam: In addition, in the Attachments tab is a hyperlink for the developers to see the original help desk ticket:","title":"Using KronoDesk with SpiraTeam"},{"location":"Help-Desk-Integration/Zendesk/","text":"Zendesk This section outlines how to integrate Zendesk into SpiraTeam \u00ae . This will enable Zendesk agents to log incidents emerging from a ticket directly from the Zendesk interface into SpiraTeam \u00ae . They will also be able to see and review any SpiraTeam \u00ae incidents already linked to existing Zendesk tickets. The integration is in the form of a Zendesk app, available for free, from the Zendesk marketplace. Overview to Get Up and Running Use SpiraTeam version 5+ and Zendesk, using modern browsers Create a new administrator in SpiraTeam (called something like \"Zendesk\") Make sure the Zendesk user has an api-key Install the SpiraTeam app from the Zendesk marketplace Configure the app with url, username, and api-key information Make sure SpiraTeam allows Zendesk to connect to it Get Zendesk to connect to Spirateam (perform an initial handshake) Make sure each relevant SpiraTeam project is set up to work with Zendesk Installing the SpiraTeam app This section outlines the steps required to ensure that the links between Zendesk and Spirateam will work correctly. Summary of requirements There are a number of elements needed for both applications to successfully communicate: A working installation of SpiraTeam v5.0 or later The SpiraTeam server must have an authenticated certificate and be accessible over HTTPS A working account with Zendesk Zendesk agents must be using a modern browser (IE10 or later) A SpiraTeam admin account whose username and API-key ( not password) can be saved inside the Zendesk app settings Initial Configuration of SpiraTeam Zendesk and SpiraTeam need to communicate and post data to one another cross domain. To ensure effective security SpiraTeam therefore needs to be accessible via HTTPS (i.e. using a certificate). If this is not already in place, contact your network administration for support. Note : all SpiraTeam hosted accounts are already accessible via HTTPS (only). Zendesk and SpiraTeam communicate through a security protocol called CORs to ensure that each application only receives data from trusted domains. The subdomain of your Zendesk account is required by SpiraTeam to validate any calls it receives. Log in as a project-level administrator to SpiraTeam, go to the Administration home page and scroll to System > Security Settings. At the bottom of the Security Settings page, enter the Zendesk subdomain in the \"Allowed Domains\" text box, making sure to include the full url (i.e including https:// before the domain address). Click <Update> for the changes to take effect. The url should be in the format of: \" https://yoursubdomain.zendesk.com \" Important: if this field is left blank, NO domains will be allowed to interact with SpiraTeam via CORs. If an asterisk (*) is entered, ALL domains will be able to do so (not recommended). The Zendesk app uses the details of a SpiraTeam user to authenticate with SpiraTeam. This needs to be, for the initial setup, a user with administrator privileges. We recommend creating a specific user account (such as \"Zendesk\"), so that the only incidents created by that account can be traced back to Zendesk. Note : all tickets logged with Zendesk will be marked as originating from this user. This means that the Zendesk team do not need to have individual SpiraTeam logins. Go to the Administration home page and scroll to Users > View / Edit Users. Click the <Add User> button on the bottom right of the page. Fill in the required fields (see below), and make sure that: System Administrator is set to \"Yes\" Active is set to \"Yes\" Locked Out is set to \"No\" RSS Token is enabled That an RSS Token is displayed Click <Insert> to add the new user. Install and Configure the SpiraTeam App in Zendesk First, find an install the free SpiraTeam App from within Zendesk. Only administrators on Zendesk can install apps. Navigate to the Admin panel, and select Marketplace from the Apps menu. Search for \"SpiraTeam\" in the search field on the right, or browse by \"Issues Tracking\". You can also browse the Zendesk app website . Once the application is installed, enter required information in the settings page of the app. Go to Admin > Apps > Manage in Zendesk to see the list of installed applications. Make sure the application is enabled. Right click on the app's gear icon to change settings In the settings screen, make sure all input boxes are correctly filled in. Enter the username and API key that you created inside SpiraTeam above, as well as the address of SpiraTeam. Make sure that the API key is an alphanumeric string contained within curly braces -- { }. Click <Update>. Connecting Zendesk to SpiraTeam Zendesk should now be able to communicate fully with SpiraTeam. In order for SpiraTeam to be informed that you are using the Zendesk app, simply navigate to any ticket, click on the app sidebar (on the right of the Zendesk window) and locate the SpiraTeam app. You should see a screen like that below, giving you a welcome message on the successful connection of Zendesk to SpiraTeam. If you instead see a message like that below (note that you will also see a Zendesk service notification), please check your network settings, and double check through the steps outline above. Connecting SpiraTeam to Zendesk Zendesk can now retrieve information form SpiraTeam. For Zendesk to be able to write all the information it needs to SpiraTeam, you need to grant Zendesk access in each relevant project (i.e. any project that a Zendesk agent may need to submit an incident about). If you wish, at this time you can change the account of the dedicated \"Zendesk\" user to no longer be an administrator. Make sure proper permissions are set so that the user has full access to incidents in all relevant projects. In SpiraTeam, navigate to a project Zendesk will need access to. Go to the SpiraTeam administration panel and then Integration > Data Synchronization. This will show you the list of current external tools that can synchronize custom data directly with SpiraTeam. Zendesk should appear as the last \"Plug-In\" in the table. Click on <View Project Mappings>. Set Active to \"Yes\". Type in any value for External Key (this is a required field but because SpiraTeam does not write to Zendesk it is never used by the app). Click <Update>. NOTES : The screen will return with a selection of configurable fields below the Update button. No changes here are required. There is no need to enter the <Edit> screen for the mapping. Indeed, settings here are automatically generated by the Zendesk app and should not be altered. Repeat the above steps for every project Zendesk will need access to. Creating an Incident in SpiraTeam Zendesk agents are able to create an incident from within Zendesk that is logged directly into SpiraTeam. The app should not be visible to the public. When an agent has a ticket, which raises an issue to pass to a development team, they open the app sidebar on the right hand side of Zendesk. They will see the following screen. In order to log an incident, the agent must decide which project the issue relates to. SpiraTeam will list all active projects in the drop down list. If an agent is unsure which project to select, we recommend that they discuss the issue with the development team first. Select a project and click <Go>. Zendesk will load fields specific to that project, including any custom properties or components. By default, as a minimum, the app collects Incident Type, Priority, Release, and Owner lists, all of which are required to be filled in, along with a subject field and a note. By default, the subject field will be the same as the ticket's current subject, but the agent can change this to make as clear as possible to the developer -- changing the subject in the SpiraTeam app will NOT change the subject of the ticket itself. The Notes to Developers is initially left blank, so that the agent can provide meaningful information. If the agent wants to include the comment history of the ticket after their own notes, click <Add comment history to description>. NOTE: clicking this repeatedly will paste in the comment history multiple times. When a project has additional fields (such as components or custom properties), these are also displayed. The app provides a split view of the fields -- those that are required and those that are optional. The tab at the top of the app lets agents switch between both. If the agent wishes to cancel logging the incident, or has chosen the wrong project, click the <Back> button. Once the form has been filled in, click <Log Incident>. If any of the fields have been left blank a notification will display and the form will not be processed. Once everything has been entered correctly, Zendesk attempts to send the form to SpiraTeam, along with links to any attachments stored with the ticket. If Zendesk is not successful, a warning notification will be displayed (see below), and the agent is asked to attempt again. Reviewing the Incident in SpiraTeam Back in SpiraTeam the new incident should be visible within the main incident log. Details about the incident can be altered as needed, without risk of breaking the connection with Zendesk. NOTE: On the incidents screen, you should notice a new field on the Overview page, called \"Zendesk ID\". This is the ID of the specific Zendesk ticket. Editing this field will break the connection and is not advised. Reviewing SpiraTeam Incidents Linked to a Zendesk Ticket As soon as the incident has been successfully logged to SpiraTeam, the app in Zendesk will return to the screen showing lists of projects, in case another incident needs to be logged. In addition, information about any incidents linked to the ticket are clearly shown, including the most up to date status from SpiraTeam so that the agent can clearly see whether an issue is resolved or not. Hovering over a particular incident pops up the description to give the agent quick access to additional information. Finally, clicking on any incident will display a modal pop up table with fuller details about all linked incidents, including the incident ID to help the agent follow up as needed with the developers. Also shown on this table is the Last Updated date of the incident. Hovering over the data will display a tooltip with the time of the update.","title":"Zendesk"},{"location":"Help-Desk-Integration/Zendesk/#zendesk","text":"This section outlines how to integrate Zendesk into SpiraTeam \u00ae . This will enable Zendesk agents to log incidents emerging from a ticket directly from the Zendesk interface into SpiraTeam \u00ae . They will also be able to see and review any SpiraTeam \u00ae incidents already linked to existing Zendesk tickets. The integration is in the form of a Zendesk app, available for free, from the Zendesk marketplace.","title":"Zendesk"},{"location":"Help-Desk-Integration/Zendesk/#overview-to-get-up-and-running","text":"Use SpiraTeam version 5+ and Zendesk, using modern browsers Create a new administrator in SpiraTeam (called something like \"Zendesk\") Make sure the Zendesk user has an api-key Install the SpiraTeam app from the Zendesk marketplace Configure the app with url, username, and api-key information Make sure SpiraTeam allows Zendesk to connect to it Get Zendesk to connect to Spirateam (perform an initial handshake) Make sure each relevant SpiraTeam project is set up to work with Zendesk","title":"Overview to Get Up and Running"},{"location":"Help-Desk-Integration/Zendesk/#installing-the-spirateam-app","text":"This section outlines the steps required to ensure that the links between Zendesk and Spirateam will work correctly.","title":"Installing the SpiraTeam app"},{"location":"Help-Desk-Integration/Zendesk/#summary-of-requirements","text":"There are a number of elements needed for both applications to successfully communicate: A working installation of SpiraTeam v5.0 or later The SpiraTeam server must have an authenticated certificate and be accessible over HTTPS A working account with Zendesk Zendesk agents must be using a modern browser (IE10 or later) A SpiraTeam admin account whose username and API-key ( not password) can be saved inside the Zendesk app settings","title":"Summary of requirements"},{"location":"Help-Desk-Integration/Zendesk/#initial-configuration-of-spirateam","text":"Zendesk and SpiraTeam need to communicate and post data to one another cross domain. To ensure effective security SpiraTeam therefore needs to be accessible via HTTPS (i.e. using a certificate). If this is not already in place, contact your network administration for support. Note : all SpiraTeam hosted accounts are already accessible via HTTPS (only). Zendesk and SpiraTeam communicate through a security protocol called CORs to ensure that each application only receives data from trusted domains. The subdomain of your Zendesk account is required by SpiraTeam to validate any calls it receives. Log in as a project-level administrator to SpiraTeam, go to the Administration home page and scroll to System > Security Settings. At the bottom of the Security Settings page, enter the Zendesk subdomain in the \"Allowed Domains\" text box, making sure to include the full url (i.e including https:// before the domain address). Click <Update> for the changes to take effect. The url should be in the format of: \" https://yoursubdomain.zendesk.com \" Important: if this field is left blank, NO domains will be allowed to interact with SpiraTeam via CORs. If an asterisk (*) is entered, ALL domains will be able to do so (not recommended). The Zendesk app uses the details of a SpiraTeam user to authenticate with SpiraTeam. This needs to be, for the initial setup, a user with administrator privileges. We recommend creating a specific user account (such as \"Zendesk\"), so that the only incidents created by that account can be traced back to Zendesk. Note : all tickets logged with Zendesk will be marked as originating from this user. This means that the Zendesk team do not need to have individual SpiraTeam logins. Go to the Administration home page and scroll to Users > View / Edit Users. Click the <Add User> button on the bottom right of the page. Fill in the required fields (see below), and make sure that: System Administrator is set to \"Yes\" Active is set to \"Yes\" Locked Out is set to \"No\" RSS Token is enabled That an RSS Token is displayed Click <Insert> to add the new user.","title":"Initial Configuration of SpiraTeam"},{"location":"Help-Desk-Integration/Zendesk/#install-and-configure-the-spirateam-app-in-zendesk","text":"First, find an install the free SpiraTeam App from within Zendesk. Only administrators on Zendesk can install apps. Navigate to the Admin panel, and select Marketplace from the Apps menu. Search for \"SpiraTeam\" in the search field on the right, or browse by \"Issues Tracking\". You can also browse the Zendesk app website . Once the application is installed, enter required information in the settings page of the app. Go to Admin > Apps > Manage in Zendesk to see the list of installed applications. Make sure the application is enabled. Right click on the app's gear icon to change settings In the settings screen, make sure all input boxes are correctly filled in. Enter the username and API key that you created inside SpiraTeam above, as well as the address of SpiraTeam. Make sure that the API key is an alphanumeric string contained within curly braces -- { }. Click <Update>.","title":"Install and Configure the SpiraTeam App in Zendesk"},{"location":"Help-Desk-Integration/Zendesk/#connecting-zendesk-to-spirateam","text":"Zendesk should now be able to communicate fully with SpiraTeam. In order for SpiraTeam to be informed that you are using the Zendesk app, simply navigate to any ticket, click on the app sidebar (on the right of the Zendesk window) and locate the SpiraTeam app. You should see a screen like that below, giving you a welcome message on the successful connection of Zendesk to SpiraTeam. If you instead see a message like that below (note that you will also see a Zendesk service notification), please check your network settings, and double check through the steps outline above.","title":"Connecting Zendesk to SpiraTeam"},{"location":"Help-Desk-Integration/Zendesk/#connecting-spirateam-to-zendesk","text":"Zendesk can now retrieve information form SpiraTeam. For Zendesk to be able to write all the information it needs to SpiraTeam, you need to grant Zendesk access in each relevant project (i.e. any project that a Zendesk agent may need to submit an incident about). If you wish, at this time you can change the account of the dedicated \"Zendesk\" user to no longer be an administrator. Make sure proper permissions are set so that the user has full access to incidents in all relevant projects. In SpiraTeam, navigate to a project Zendesk will need access to. Go to the SpiraTeam administration panel and then Integration > Data Synchronization. This will show you the list of current external tools that can synchronize custom data directly with SpiraTeam. Zendesk should appear as the last \"Plug-In\" in the table. Click on <View Project Mappings>. Set Active to \"Yes\". Type in any value for External Key (this is a required field but because SpiraTeam does not write to Zendesk it is never used by the app). Click <Update>. NOTES : The screen will return with a selection of configurable fields below the Update button. No changes here are required. There is no need to enter the <Edit> screen for the mapping. Indeed, settings here are automatically generated by the Zendesk app and should not be altered. Repeat the above steps for every project Zendesk will need access to.","title":"Connecting SpiraTeam to Zendesk"},{"location":"Help-Desk-Integration/Zendesk/#creating-an-incident-in-spirateam","text":"Zendesk agents are able to create an incident from within Zendesk that is logged directly into SpiraTeam. The app should not be visible to the public.","title":"Creating an Incident in SpiraTeam"},{"location":"Help-Desk-Integration/Zendesk/#when-an-agent-has-a-ticket-which-raises-an-issue-to-pass-to-a-development-team-they-open-the-app-sidebar-on-the-right-hand-side-of-zendesk-they-will-see-the-following-screen","text":"In order to log an incident, the agent must decide which project the issue relates to. SpiraTeam will list all active projects in the drop down list. If an agent is unsure which project to select, we recommend that they discuss the issue with the development team first. Select a project and click <Go>. Zendesk will load fields specific to that project, including any custom properties or components. By default, as a minimum, the app collects Incident Type, Priority, Release, and Owner lists, all of which are required to be filled in, along with a subject field and a note. By default, the subject field will be the same as the ticket's current subject, but the agent can change this to make as clear as possible to the developer -- changing the subject in the SpiraTeam app will NOT change the subject of the ticket itself. The Notes to Developers is initially left blank, so that the agent can provide meaningful information. If the agent wants to include the comment history of the ticket after their own notes, click <Add comment history to description>. NOTE: clicking this repeatedly will paste in the comment history multiple times. When a project has additional fields (such as components or custom properties), these are also displayed. The app provides a split view of the fields -- those that are required and those that are optional. The tab at the top of the app lets agents switch between both. If the agent wishes to cancel logging the incident, or has chosen the wrong project, click the <Back> button. Once the form has been filled in, click <Log Incident>. If any of the fields have been left blank a notification will display and the form will not be processed. Once everything has been entered correctly, Zendesk attempts to send the form to SpiraTeam, along with links to any attachments stored with the ticket. If Zendesk is not successful, a warning notification will be displayed (see below), and the agent is asked to attempt again.","title":"When an agent has a ticket, which raises an issue to pass to a development team, they open the app sidebar on the right hand side of Zendesk. They will see the following screen."},{"location":"Help-Desk-Integration/Zendesk/#reviewing-the-incident-in-spirateam","text":"Back in SpiraTeam the new incident should be visible within the main incident log. Details about the incident can be altered as needed, without risk of breaking the connection with Zendesk. NOTE: On the incidents screen, you should notice a new field on the Overview page, called \"Zendesk ID\". This is the ID of the specific Zendesk ticket. Editing this field will break the connection and is not advised.","title":"Reviewing the Incident in SpiraTeam"},{"location":"Help-Desk-Integration/Zendesk/#reviewing-spirateam-incidents-linked-to-a-zendesk-ticket","text":"As soon as the incident has been successfully logged to SpiraTeam, the app in Zendesk will return to the screen showing lists of projects, in case another incident needs to be logged. In addition, information about any incidents linked to the ticket are clearly shown, including the most up to date status from SpiraTeam so that the agent can clearly see whether an issue is resolved or not. Hovering over a particular incident pops up the description to give the agent quick access to additional information. Finally, clicking on any incident will display a modal pop up table with fuller details about all linked incidents, including the incident ID to help the agent follow up as needed with the developers. Also shown on this table is the Last Updated date of the incident. Hovering over the data will display a tooltip with the time of the update.","title":"Reviewing SpiraTeam Incidents Linked to a Zendesk Ticket"},{"location":"HowTo-Guides/Admins-orientation/","text":"Getting to Know Spira Administration How to know what, if anything, you are an admin of If you are an administrator then you will see three yellow cogs in the far right of the global navigation bar of the application (at the very top of the page) You will always see these cogs if you are a system administrator because you can always access system administration If you are a workspace admin (eg product or program) you will only see the cogs when you are on a workspace that you are an admin of If you do not see the three cogs but think you may be an administrator, then it may be you do not have the correct workspace (product, program, etc) You can quickly tell if you are an administrator of any workspace by opening the workspace selector from the global navigation bar. Look down the list of workspaces. You are an admin for anything in the list that shows a little cog at the end of the workspace name How to access the administration menu Clicking on the three cogs in the far right of the global navigation bar will bring up the administration menu. What it shows will vary based on where you are in the application Once you click on one of the administration links you will open up the relevant administration page When in administration you will still see those three cogs at the top right. You will also see a dark thin bar on the left hand side. Clicking this will open up an identical administration menu to clicking on the three cogs Where relevant, one part of the administration menu may be highlighted. This shows you either the part you are currently on, or the part that most closely matches where you are in the application What are the different sections of administration You can read about the different types of administration here . Admin home pages Each administration section has a dedicated homepage. For workspaces or templates, these homepages change based on the current workspace The administration home page gives you quick access to important information about that administration section through a series of homepage widgets You can click on links in each of these widgets to dive into the detail as needed","title":"Getting to Know Administration"},{"location":"HowTo-Guides/Admins-orientation/#getting-to-know-spira-administration","text":"","title":"Getting to Know Spira Administration"},{"location":"HowTo-Guides/Admins-orientation/#how-to-know-what-if-anything-you-are-an-admin-of","text":"If you are an administrator then you will see three yellow cogs in the far right of the global navigation bar of the application (at the very top of the page) You will always see these cogs if you are a system administrator because you can always access system administration If you are a workspace admin (eg product or program) you will only see the cogs when you are on a workspace that you are an admin of If you do not see the three cogs but think you may be an administrator, then it may be you do not have the correct workspace (product, program, etc) You can quickly tell if you are an administrator of any workspace by opening the workspace selector from the global navigation bar. Look down the list of workspaces. You are an admin for anything in the list that shows a little cog at the end of the workspace name","title":"How to know what, if anything, you are an admin of"},{"location":"HowTo-Guides/Admins-orientation/#how-to-access-the-administration-menu","text":"Clicking on the three cogs in the far right of the global navigation bar will bring up the administration menu. What it shows will vary based on where you are in the application Once you click on one of the administration links you will open up the relevant administration page When in administration you will still see those three cogs at the top right. You will also see a dark thin bar on the left hand side. Clicking this will open up an identical administration menu to clicking on the three cogs Where relevant, one part of the administration menu may be highlighted. This shows you either the part you are currently on, or the part that most closely matches where you are in the application","title":"How to access the administration menu"},{"location":"HowTo-Guides/Admins-orientation/#what-are-the-different-sections-of-administration","text":"You can read about the different types of administration here .","title":"What are the different sections of administration"},{"location":"HowTo-Guides/Admins-orientation/#admin-home-pages","text":"Each administration section has a dedicated homepage. For workspaces or templates, these homepages change based on the current workspace The administration home page gives you quick access to important information about that administration section through a series of homepage widgets You can click on links in each of these widgets to dive into the detail as needed","title":"Admin home pages"},{"location":"HowTo-Guides/Admins-templates/","text":"Template Administration What is a template? Read about the template workspace here . How to create a new template You cannot create a template by itself. You can only create a new template when creating a new product. Log in as a system administrator Go to Administration > System > Workspace > View/Edit Products Click Add to add a new product On the add product page you will see a Template field. From here you can select an existing template or Create New Template . To create a brand new template select this Create New Template option Click Insert How to clone a template To clone a template, you need to clone a product that uses the template you wish to clone Log in as a system administrator Go to Administration > System > Workspace > View/Edit Products Find a product that is using the template you wish to clone Click the Clone button on that product's row In the popup that appears, make sure to select the option Clone product and its template Click Clone This will create a create a copy of the product and a full clone of the template How to move a product to a new template For more information about changing a product's template see here . Log in as a system administrator Go to Administration > System > Workspace > View/Edit Products Find a product that is using the template you wish to move from one template to another Click Edit Click Change Template Read the information in the dialog that pops up, then choose the template you wish to move to Click Next Read carefully the warnings shown on the next screen If you are sure you want to change template follow the instructions How to move a product to a new version of its original template If you have 2+ products using the same template, but decide 1 products needs slightly different template settings, you need to branch its template off into a brand new template. This is possible, but requires a few different steps to make it work smoothly. Clone the existing template - following the steps above Remember what product you cloned in this step (you will be deleting it later) Move the product you wish to have different template settings to this new template - following the steps here Go back and delete the product from step 2 above (you don't need it anymore and it will just create clutter) You now have your product using a new template that is exactly the same as its original template Start making the changes to this new template as needed","title":"Template Administration"},{"location":"HowTo-Guides/Admins-templates/#template-administration","text":"","title":"Template Administration"},{"location":"HowTo-Guides/Admins-templates/#what-is-a-template","text":"Read about the template workspace here .","title":"What is a template?"},{"location":"HowTo-Guides/Admins-templates/#how-to-create-a-new-template","text":"You cannot create a template by itself. You can only create a new template when creating a new product. Log in as a system administrator Go to Administration > System > Workspace > View/Edit Products Click Add to add a new product On the add product page you will see a Template field. From here you can select an existing template or Create New Template . To create a brand new template select this Create New Template option Click Insert","title":"How to create a new template"},{"location":"HowTo-Guides/Admins-templates/#how-to-clone-a-template","text":"To clone a template, you need to clone a product that uses the template you wish to clone Log in as a system administrator Go to Administration > System > Workspace > View/Edit Products Find a product that is using the template you wish to clone Click the Clone button on that product's row In the popup that appears, make sure to select the option Clone product and its template Click Clone This will create a create a copy of the product and a full clone of the template","title":"How to clone a template"},{"location":"HowTo-Guides/Admins-templates/#how-to-move-a-product-to-a-new-template","text":"For more information about changing a product's template see here . Log in as a system administrator Go to Administration > System > Workspace > View/Edit Products Find a product that is using the template you wish to move from one template to another Click Edit Click Change Template Read the information in the dialog that pops up, then choose the template you wish to move to Click Next Read carefully the warnings shown on the next screen If you are sure you want to change template follow the instructions","title":"How to move a product to a new template"},{"location":"HowTo-Guides/Admins-templates/#how-to-move-a-product-to-a-new-version-of-its-original-template","text":"If you have 2+ products using the same template, but decide 1 products needs slightly different template settings, you need to branch its template off into a brand new template. This is possible, but requires a few different steps to make it work smoothly. Clone the existing template - following the steps above Remember what product you cloned in this step (you will be deleting it later) Move the product you wish to have different template settings to this new template - following the steps here Go back and delete the product from step 2 above (you don't need it anymore and it will just create clutter) You now have your product using a new template that is exactly the same as its original template Start making the changes to this new template as needed","title":"How to move a product to a new version of its original template"},{"location":"HowTo-Guides/Users-orientation/","text":"Moving around the application How to use the global navigation bar Spira\u2019s main global navigation is the horizontal bar at the top of the application - visible on every page It lets you move between all pages of the application From left to right, it has links and dropdowns for the following: the My Page (shown by the application icon) the workspace dashboard (shown by the workspace icon - eg product, or program) the workspace selector the artifact selector reporting (if relevant) the user menu (shown by your user avatar) the dynamic administration menu, where relevant What are workspaces and how to pick one To start getting things done in the application you need to select a workspace to explore, manage, or work on. Workspaces can be products (e.g. for a specific application) or programs (that groups a number of products together) Change your workspace by using the workspace selector dropdown on the global navigation bar Each workspace has a dedicated dashboard which provides a \"one-stop shop\" for understanding the overall status of the current workspace, with comprehensive, easily digestible (and customizable) information. Access the workspace dashboard by clicking the large workspace icon on the navigation bar What are artifacts and how to pick one Artifacts are the building blocks of a product or program and contain all of their data. Each artifact holds different data and is used in different ways. For instance, requirements are one artifact, and releases are another. They both work differently, and are not interchangable. Spira has specific artifacts designed to help you do things like test, plan, track bugs and tasks, and more. By using the artifact selector on the global navigation bar you can see all the artifacts available to you for the current workspace. To learn more about each artifact, hover over the artifact name in the artifact selector to see its tooltip If you do not see the artifacts you expect for a particular product, it may be because of your role on the product. Discuss this with your product administrator Using the user menu Clicking on your user avatar on the global navigation bar will open the user menu At the top there is a large user avatar next to your name. Clicking on this will open your user profile Other links in the user menu let you access various help: documentation for the page you are on; keyboard shortcuts; or in-app onboarding tours. From the user menu you can also go to your timecard (SpiraTeam or SpiraPlan only), and change your dark mode settings Artifact list and details pages Each artifact has its own dedicated pages of the Spira application. For example, when viewing a product, you can go to the incident artifact from the artifact selector of the global navigation bar. This will take you to the incident list page. What is an artifact list page? An artifact list page has a table that lists 15-500 artifacts at a time. You can, depending on the specific artifact, move things around this table, sort, or filter the table. On the left hand side of many list pages there are sidebars that help you navigate around the list more quickly or easily, or provide other useful information At the top of each list page there is a toolbar with buttons to do things like add or delete items on the list, apply or remove filters, and more Clicking on a specific artifact from its page or elsewhere will open the artifact details page. What is an artifact details page? An artifact details page shows all the information about a single artifact - you can only view one at a time There are often different tabs on the main part of this page to help you focus on different parts of the page. For instance there maybe an attachments tab, or a test coverage tab On the left hand side of the detail page there will be a sidebar that helps you navigate between other relevant artifacts without having to go back to the artifact list page At the top of each list page there is a toolbar with buttons to do things like save any changes, email the artifact to a teammate, or create a new artifact","title":"Moving Around the Application"},{"location":"HowTo-Guides/Users-orientation/#moving-around-the-application","text":"","title":"Moving around the application"},{"location":"HowTo-Guides/Users-orientation/#how-to-use-the-global-navigation-bar","text":"Spira\u2019s main global navigation is the horizontal bar at the top of the application - visible on every page It lets you move between all pages of the application From left to right, it has links and dropdowns for the following: the My Page (shown by the application icon) the workspace dashboard (shown by the workspace icon - eg product, or program) the workspace selector the artifact selector reporting (if relevant) the user menu (shown by your user avatar) the dynamic administration menu, where relevant","title":"How to use the global navigation bar"},{"location":"HowTo-Guides/Users-orientation/#what-are-workspaces-and-how-to-pick-one","text":"To start getting things done in the application you need to select a workspace to explore, manage, or work on. Workspaces can be products (e.g. for a specific application) or programs (that groups a number of products together) Change your workspace by using the workspace selector dropdown on the global navigation bar Each workspace has a dedicated dashboard which provides a \"one-stop shop\" for understanding the overall status of the current workspace, with comprehensive, easily digestible (and customizable) information. Access the workspace dashboard by clicking the large workspace icon on the navigation bar","title":"What are workspaces and how to pick one"},{"location":"HowTo-Guides/Users-orientation/#what-are-artifacts-and-how-to-pick-one","text":"Artifacts are the building blocks of a product or program and contain all of their data. Each artifact holds different data and is used in different ways. For instance, requirements are one artifact, and releases are another. They both work differently, and are not interchangable. Spira has specific artifacts designed to help you do things like test, plan, track bugs and tasks, and more. By using the artifact selector on the global navigation bar you can see all the artifacts available to you for the current workspace. To learn more about each artifact, hover over the artifact name in the artifact selector to see its tooltip If you do not see the artifacts you expect for a particular product, it may be because of your role on the product. Discuss this with your product administrator","title":"What are artifacts and how to pick one"},{"location":"HowTo-Guides/Users-orientation/#using-the-user-menu","text":"Clicking on your user avatar on the global navigation bar will open the user menu At the top there is a large user avatar next to your name. Clicking on this will open your user profile Other links in the user menu let you access various help: documentation for the page you are on; keyboard shortcuts; or in-app onboarding tours. From the user menu you can also go to your timecard (SpiraTeam or SpiraPlan only), and change your dark mode settings","title":"Using the user menu"},{"location":"HowTo-Guides/Users-orientation/#artifact-list-and-details-pages","text":"Each artifact has its own dedicated pages of the Spira application. For example, when viewing a product, you can go to the incident artifact from the artifact selector of the global navigation bar. This will take you to the incident list page. What is an artifact list page? An artifact list page has a table that lists 15-500 artifacts at a time. You can, depending on the specific artifact, move things around this table, sort, or filter the table. On the left hand side of many list pages there are sidebars that help you navigate around the list more quickly or easily, or provide other useful information At the top of each list page there is a toolbar with buttons to do things like add or delete items on the list, apply or remove filters, and more Clicking on a specific artifact from its page or elsewhere will open the artifact details page. What is an artifact details page? An artifact details page shows all the information about a single artifact - you can only view one at a time There are often different tabs on the main part of this page to help you focus on different parts of the page. For instance there maybe an attachments tab, or a test coverage tab On the left hand side of the detail page there will be a sidebar that helps you navigate between other relevant artifacts without having to go back to the artifact list page At the top of each list page there is a toolbar with buttons to do things like save any changes, email the artifact to a teammate, or create a new artifact","title":"Artifact list and details pages"},{"location":"HowTo-Guides/Users-profile-management/","text":"Managing Your Spira Profile How to reset your password Go to the main login page for your Spira application Click on the \u201cForgot your password?\u201d link beneath the Login button On the next page, enter your username and click Submit You should receive an email with information about resetting the password If you do not know your username or do not get an email, contact your Spira system administrator How to edit your profile Make sure you are logged in to your Spira application Click on your user avatar from the top right of any page in the app From the dropdown click your name This opens your user profile ready to review and edit Once you have made any changes, make sure to click \u201cSave\u201d to commit the changes How to change the regional settings of the application Make sure you are logged in to your Spira application Click on your user avatar from the top right of any page in the app From the dropdown click your name This opens your user profile. At the bottom of the page are a number of tabs. Click on the \u201cRegional Settings\u201d tab. By default your language, date formats, and time zone use the same ones that your system administrator have set for everyone. You can override those choices here. Once you have made any changes, make sure to click \u201cSave\u201d to commit the changes","title":"Managing Your User Profile"},{"location":"HowTo-Guides/Users-profile-management/#managing-your-spira-profile","text":"","title":"Managing Your Spira Profile"},{"location":"HowTo-Guides/Users-profile-management/#how-to-reset-your-password","text":"Go to the main login page for your Spira application Click on the \u201cForgot your password?\u201d link beneath the Login button On the next page, enter your username and click Submit You should receive an email with information about resetting the password If you do not know your username or do not get an email, contact your Spira system administrator","title":"How to reset your password"},{"location":"HowTo-Guides/Users-profile-management/#how-to-edit-your-profile","text":"Make sure you are logged in to your Spira application Click on your user avatar from the top right of any page in the app From the dropdown click your name This opens your user profile ready to review and edit Once you have made any changes, make sure to click \u201cSave\u201d to commit the changes","title":"How to edit your profile"},{"location":"HowTo-Guides/Users-profile-management/#how-to-change-the-regional-settings-of-the-application","text":"Make sure you are logged in to your Spira application Click on your user avatar from the top right of any page in the app From the dropdown click your name This opens your user profile. At the bottom of the page are a number of tabs. Click on the \u201cRegional Settings\u201d tab. By default your language, date formats, and time zone use the same ones that your system administrator have set for everyone. You can override those choices here. Once you have made any changes, make sure to click \u201cSave\u201d to commit the changes","title":"How to change the regional settings of the application"},{"location":"IDE-Integration/Eclipse--Mylyn/","text":"Eclipse / Mylyn This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Eclipse integrated development environment (IDE) for implementing Requirements, completing Tasks and fixing Incidents. Rather than develop a new user-interface from scratch, the SpiraTeam plug-in uses the generic Mylyn task-based interface that allows Eclipse users to manage their local tasks and tasks from any compatible repository in a single interface. Installing the Eclipse Plug-In This section outlines how to install the SpiraTeam plug-in for Eclipse. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam v5.0 or later and a working installation of Eclipse v4.6 (Neon) or later with the Mylyn plug-in installed. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v5.0 before trying to integrate with Eclipse. To obtain the Eclipse plug-in, open up the Eclipse application and click on Help > Eclipse Marketplace. Enter \"SpiraTeam\" in the 'Find' text box. Once you hit enter, you should see the following result: Click the Install button, accept the terms of the license and click \"Finish\". Eclipse will advise you that our software contains unsigned content, press \"OK\" to continue the installation. After you restart Eclipse, you can start to use our plug-in. Alternatively, you can click Help > Install New Software. This will display the Eclipse installation wizard: Enter https://www.inflectra.com/Downloads/Eclipse as the download site in the \"Work with:\" text box and uncheck the \"Group items by category\" checkbox. Once you hit enter, the wizard should display \"SpiraTeam\". Select the Feature's checkbox and click \"Next\" or \"Finish\" to tell Eclipse to download and install the feature and dependent plug-ins. During this process you may be asked to agree to our software license and to allow the installation of unsigned software. Once you have completed these steps, you should now have our SpiraTeam plug-in installed and ready to use. To check that the individual plugins have been installed, you can go to Help > About Eclipse and then click on the [Installation Details] button. On the page that appears, click on the Plugins tab and you will see the two Inflectra plugins listed (Core and UI). Now that you have the plug-ins installed, the next steps are: Connect to the appropriate SpiraTeam repository Download your assigned SpiraTeam artifacts (Requirements, Tasks and Incidents) Work on the downloaded SpiraTeam artifacts Connecting to the SpiraTeam Repository To connect to a SpiraTeam repository, you need to first display the appropriate Eclipse views. To do this, go to Window > Show View > \"Other...\" and then under the Tasks section, display both the Task Repositories view and the Task List view: Once you have chosen to select the Task Repositories, the following tab will be displayed: Where any existing repositories will listed along with the built-in \"Local\" repository that is used to manage tasks created natively within Eclipse/Mylyn. To connect to a new SpiraTeam repository, right-click on the window and choose \"Add Task Repository...\" which will bring up the following selection box: Choose the \"Spira\" repository entry and click [Next]. This will bring up the repository configuration dialog box: On this screen, you need to fill out the information used to connect to your SpiraTeam server: Server -- This should be the URL to the SpiraTeam instance that you are accessing. Label -- This is a \"friendly\" name for that server that will be used inside Eclipse. User ID -- This needs to be a valid username that has access to SpiraTeam. Password -- This needs to be the correct password for the username specified. Once you have entered the information, click [Finish] to complete the \"Add Repository\" wizard. Once this has been done, Eclipse will ask you if you would like to add a new query for this repository. You can choose either Yes or No. The process for adding a new query to the SpiraTeam repository is described in the next section. Adding Queries to the Repository Once you have added the SpiraTeam repository, the repository list view should now look something like: You can now add a new query by right-clicking on the SpiraTeam repository instance and choosing \"New Query...\". This will bring up the new query wizard: Currently the SpiraTeam Eclipse/Mylyn plugin only supports the three predefined queries listed above. You can choose to add a list of Requirements, Incidents or Tasks that are assigned to you. Once you have added the appropriate queries (depending on which types of artifact get assigned to you), the list of Requirements, Incidents and or Tasks will be downloaded from the server and added to your Task List in Eclipse: When you hover the mouse over any of the items in the list of Requirements, Incidents or Tasks, you will see a popup tooltip that provides additional information: Artifacts in the list have various states, based on your interaction with them. Unread artifacts are those with new changes, which you haven't seen yet. These artifacts are denoted as having \"incoming changes\" (coming from repository). When you open and edit the artifact, it will have local modifications which haven't been sent to SpiraTeam repository yet (outgoing changes). The following UI Legend explains meaning of various icons which are displayed in the Eclipse/Mylyn Task List: As you can see, the different SpiraTeam artifacts are represented by different graphic overlays that let you know if the Eclipse/Mylyn task is really a SpiraTeam Requirement, Incident or Task. To refresh the list of tasks in Eclipse, you can either right-click on the appropriate query folder and choose \"Synchronize\" or just press the F5 key on the keyboard. Each of the different artifacts (Requirements, Incidents and Tasks) works slightly differently, so please refer to the appropriate section for details on how to view and edit. Viewing and Editing Requirements in Eclipse When you view the list of Requirements in the Eclipse task list, it will have the following general form: Each Requirement is listed by name and number, together with its importance indicated by the equivalent Eclipse/Mylyn priority icon. To view the details of a specific Requirement, you should double-click on the Requirement, and the Requirements editor will be opened: The Requirements editor screen is divided up into several sections: Header -- this displays the name and ID of the Requirement, together with a graphical indication of its priority, its status, creation date and last-update date. Attributes -- this displays the various SpiraTeam-specific attributes of the Requirement, including status, importance, scheduled release, component ID and planned effort. Any custom properties defined for the requirement will also be displayed. Attachments -- this displays the list of documents, web-links and screenshots attached to the Requirement. You can also upload new files and screenshots to the Requirement from within Eclipse. Description -- this displays the detailed description of the Requirement. Comments -- this displays a threaded list of all the comments that have been added to the Requirement in SpiraTeam. New Comment -- this allows you to add a new comment to the Requirement. The new comments will be sent to the SpiraTeam server when [Submit] is clicked. People -- this displays the name and email address of the person who wrote the Requirement (author) and the person who it's currently assigned-to (owner). Operations -- this contains the list of operations that can be performed on the Requirement. More information on operations can be found below. You can make changes to the Requirement by simply changing the values in the appropriate dropdown list or editing the information in any of the text boxes. Once you have happy with the changes, you can update the version on the SpiraTeam server by clicking the [Submit] button. If there are any data validation errors, they will be displayed. Once you have corrected them, the Requirement changes will be accepted by the system. In addition to making updates, you can perform the following actions on the Requirement: Workflow Transitions -- these are the blue hyperlinks displayed directly above the [Submit] button in the actions tab. These allow you to change the status of the Requirement and when clicked, the fields in the Attributes section will change based on the new status. Note: changing the Type of the Requirement will disable the workflow transition hyperlinks until [Submit] is clicked. Refresh the Requirement from the version on the server. This will update the local copy of the Requirement with the latest changes made on the SpiraTeam server. Browse the version of the Requirement on the server. Clicking the \"globe\" icon will open up a browser and display the Requirement directly in SpiraTeam. Viewing and Editing Tasks in Eclipse When you view the list of Tasks in the Eclipse task list, it will have the following general form: Each Task is listed by name and number, together with its priority indicated by the equivalent Eclipse/Mylyn priority icon. To view the details of a specific Task, you should double-click on the Task, and the Tasks editor will be opened: The Tasks editor screen is divided up into several sections: Header -- this displays the name and ID of the Task, together with a graphical indication of its priority, its status, creation date and last-update date. Attributes -- this displays the various SpiraTeam-specific attributes of the Task, including status, scheduled release, priority, start-date, end-date, % complete, estimated effort, actual effort, the name/id of the Requirement it belongs to and its component. Any custom properties defined for the task will also be displayed. Attachments -- this displays the list of documents, web-links and screenshots attached to the Task. You can also upload new files and screenshots to the Task from within Eclipse. Description -- this displays the detailed description of the Task. Comments -- this displays a threaded list of all the comments that have been added to the Task in SpiraTeam. New Comment -- this allows you to add a new comment to the Task. The new comments will be sent to the SpiraTeam server when [Submit] is clicked. People -- this displays the name and email address of the person who created the Task (creator) and the person who it's currently assigned-to (owner). Operations -- this contains the list of operations that can be performed on the Task. More information on operations can be found below. You can make changes to the task by simply changing the values in the appropriate dropdown list or editing the information in any of the text boxes. Once you have happy with the changes, you can update the version on the SpiraTeam server by clicking the [Submit] button. If there are any data validation errors (e.g. you have to enter a start-date to make the Task In-Progress), they will be displayed. Once you have corrected them, the Task changes will be accepted by the system. In addition to making updates, you can perform the following actions on the Task: Workflow Transitions -- these are the blue hyperlinks displayed directly above the [Submit] button in the actions tab. These allow you to change the status of the Task and when clicked, the fields in the Attributes section will change based on the new status. Note: changing the Type of the Task will disable the workflow transition hyperlinks until [Submit] is clicked. Refresh the Task from the version on the server. This will update the local copy of the Task with the latest changes made on the SpiraTeam server. Browse the version of the Task on the server. Clicking the \"globe\" icon will open up a browser and display the Task directly in SpiraTeam. Viewing and Editing Incidents in Eclipse When you view the list of Incidents in the Eclipse task list, it will have the following general form: Each Incident is listed by name and number, together with its priority indicated by the equivalent Eclipse/Mylyn priority icon. To view the details of a specific Incident, you should double-click on the Incident, and the Incidents editor will be opened: The Incidents editor screen is divided up into several sections: Header -- this displays the name and ID of the Incident, together with a graphical indication of its priority, its status, creation date and last-update date. Attributes -- this displays the various SpiraTeam-specific attributes of the Incident, including priority, severity, status, type, detected release, resolved release, verified release, start-date, closed-date, % complete, estimated effort, actual effort and component Id's. Any custom properties defined for the incident will also be displayed. Attachments -- this displays the list of documents, web-links and screenshots attached to the Incident. You can also upload new files and screenshots to the Task from within Eclipse. Description -- this displays the detailed description of the Incident. Comments -- this displays a threaded list of all the comments that have been added to the Incident in SpiraTeam. New Comment -- this allows you to add a new comment to the Incident. The new comments will be sent to the SpiraTeam server when [Submit] is clicked. People -- this displays the name and email address of the person who found the Incident (detector) and the person who it's currently assigned-to (owner). Operations -- this contains the list of operations that can be performed on the Incident. See below for more information on how to use this section. You can make changes to the Incident by simply changing the values in the appropriate dropdown list or editing the information in any of the text boxes. Once you have happy with the changes, you can update the version on the SpiraTeam server by clicking the [Submit] button. If there are any data validation errors (e.g. you have to enter a start-date to make the Incident In-Progress), they will be displayed. Once you have corrected them, the Incident changes will be accepted by the system. In addition to making simple updates, you can perform the following actions on the Incident: Submit -- clicking the submit button will commit the changes made on the Incident to the SpiraTeam Server. Workflow Transitions -- these are the blue hyperlinks displayed directly above the [Submit] button in the actions tab. These allow you to change the status of the Incident and when clicked, the fields in the Attributes section will change based on the new status. Note: changing the Type of the Incident will disable the workflow transition hyperlinks until [Submit] is clicked. Refresh the Incident from the version on the server. This will update the local copy of the Incident with the latest changes made on the SpiraTeam server. Browse the version of the Incident on the server. Clicking the \"globe\" icon will open up a browser and display the Incident directly in SpiraTeam.","title":"Eclipse"},{"location":"IDE-Integration/Eclipse--Mylyn/#eclipse-mylyn","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Eclipse integrated development environment (IDE) for implementing Requirements, completing Tasks and fixing Incidents. Rather than develop a new user-interface from scratch, the SpiraTeam plug-in uses the generic Mylyn task-based interface that allows Eclipse users to manage their local tasks and tasks from any compatible repository in a single interface.","title":"Eclipse / Mylyn"},{"location":"IDE-Integration/Eclipse--Mylyn/#installing-the-eclipse-plug-in","text":"This section outlines how to install the SpiraTeam plug-in for Eclipse. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam v5.0 or later and a working installation of Eclipse v4.6 (Neon) or later with the Mylyn plug-in installed. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v5.0 before trying to integrate with Eclipse. To obtain the Eclipse plug-in, open up the Eclipse application and click on Help > Eclipse Marketplace. Enter \"SpiraTeam\" in the 'Find' text box. Once you hit enter, you should see the following result: Click the Install button, accept the terms of the license and click \"Finish\". Eclipse will advise you that our software contains unsigned content, press \"OK\" to continue the installation. After you restart Eclipse, you can start to use our plug-in. Alternatively, you can click Help > Install New Software. This will display the Eclipse installation wizard: Enter https://www.inflectra.com/Downloads/Eclipse as the download site in the \"Work with:\" text box and uncheck the \"Group items by category\" checkbox. Once you hit enter, the wizard should display \"SpiraTeam\". Select the Feature's checkbox and click \"Next\" or \"Finish\" to tell Eclipse to download and install the feature and dependent plug-ins. During this process you may be asked to agree to our software license and to allow the installation of unsigned software. Once you have completed these steps, you should now have our SpiraTeam plug-in installed and ready to use. To check that the individual plugins have been installed, you can go to Help > About Eclipse and then click on the [Installation Details] button. On the page that appears, click on the Plugins tab and you will see the two Inflectra plugins listed (Core and UI). Now that you have the plug-ins installed, the next steps are: Connect to the appropriate SpiraTeam repository Download your assigned SpiraTeam artifacts (Requirements, Tasks and Incidents) Work on the downloaded SpiraTeam artifacts","title":"Installing the Eclipse Plug-In"},{"location":"IDE-Integration/Eclipse--Mylyn/#connecting-to-the-spirateam-repository","text":"To connect to a SpiraTeam repository, you need to first display the appropriate Eclipse views. To do this, go to Window > Show View > \"Other...\" and then under the Tasks section, display both the Task Repositories view and the Task List view: Once you have chosen to select the Task Repositories, the following tab will be displayed: Where any existing repositories will listed along with the built-in \"Local\" repository that is used to manage tasks created natively within Eclipse/Mylyn. To connect to a new SpiraTeam repository, right-click on the window and choose \"Add Task Repository...\" which will bring up the following selection box: Choose the \"Spira\" repository entry and click [Next]. This will bring up the repository configuration dialog box: On this screen, you need to fill out the information used to connect to your SpiraTeam server: Server -- This should be the URL to the SpiraTeam instance that you are accessing. Label -- This is a \"friendly\" name for that server that will be used inside Eclipse. User ID -- This needs to be a valid username that has access to SpiraTeam. Password -- This needs to be the correct password for the username specified. Once you have entered the information, click [Finish] to complete the \"Add Repository\" wizard. Once this has been done, Eclipse will ask you if you would like to add a new query for this repository. You can choose either Yes or No. The process for adding a new query to the SpiraTeam repository is described in the next section.","title":"Connecting to the SpiraTeam Repository"},{"location":"IDE-Integration/Eclipse--Mylyn/#adding-queries-to-the-repository","text":"Once you have added the SpiraTeam repository, the repository list view should now look something like: You can now add a new query by right-clicking on the SpiraTeam repository instance and choosing \"New Query...\". This will bring up the new query wizard: Currently the SpiraTeam Eclipse/Mylyn plugin only supports the three predefined queries listed above. You can choose to add a list of Requirements, Incidents or Tasks that are assigned to you. Once you have added the appropriate queries (depending on which types of artifact get assigned to you), the list of Requirements, Incidents and or Tasks will be downloaded from the server and added to your Task List in Eclipse: When you hover the mouse over any of the items in the list of Requirements, Incidents or Tasks, you will see a popup tooltip that provides additional information: Artifacts in the list have various states, based on your interaction with them. Unread artifacts are those with new changes, which you haven't seen yet. These artifacts are denoted as having \"incoming changes\" (coming from repository). When you open and edit the artifact, it will have local modifications which haven't been sent to SpiraTeam repository yet (outgoing changes). The following UI Legend explains meaning of various icons which are displayed in the Eclipse/Mylyn Task List: As you can see, the different SpiraTeam artifacts are represented by different graphic overlays that let you know if the Eclipse/Mylyn task is really a SpiraTeam Requirement, Incident or Task. To refresh the list of tasks in Eclipse, you can either right-click on the appropriate query folder and choose \"Synchronize\" or just press the F5 key on the keyboard. Each of the different artifacts (Requirements, Incidents and Tasks) works slightly differently, so please refer to the appropriate section for details on how to view and edit.","title":"Adding Queries to the Repository"},{"location":"IDE-Integration/Eclipse--Mylyn/#viewing-and-editing-requirements-in-eclipse","text":"When you view the list of Requirements in the Eclipse task list, it will have the following general form: Each Requirement is listed by name and number, together with its importance indicated by the equivalent Eclipse/Mylyn priority icon. To view the details of a specific Requirement, you should double-click on the Requirement, and the Requirements editor will be opened: The Requirements editor screen is divided up into several sections: Header -- this displays the name and ID of the Requirement, together with a graphical indication of its priority, its status, creation date and last-update date. Attributes -- this displays the various SpiraTeam-specific attributes of the Requirement, including status, importance, scheduled release, component ID and planned effort. Any custom properties defined for the requirement will also be displayed. Attachments -- this displays the list of documents, web-links and screenshots attached to the Requirement. You can also upload new files and screenshots to the Requirement from within Eclipse. Description -- this displays the detailed description of the Requirement. Comments -- this displays a threaded list of all the comments that have been added to the Requirement in SpiraTeam. New Comment -- this allows you to add a new comment to the Requirement. The new comments will be sent to the SpiraTeam server when [Submit] is clicked. People -- this displays the name and email address of the person who wrote the Requirement (author) and the person who it's currently assigned-to (owner). Operations -- this contains the list of operations that can be performed on the Requirement. More information on operations can be found below. You can make changes to the Requirement by simply changing the values in the appropriate dropdown list or editing the information in any of the text boxes. Once you have happy with the changes, you can update the version on the SpiraTeam server by clicking the [Submit] button. If there are any data validation errors, they will be displayed. Once you have corrected them, the Requirement changes will be accepted by the system. In addition to making updates, you can perform the following actions on the Requirement: Workflow Transitions -- these are the blue hyperlinks displayed directly above the [Submit] button in the actions tab. These allow you to change the status of the Requirement and when clicked, the fields in the Attributes section will change based on the new status. Note: changing the Type of the Requirement will disable the workflow transition hyperlinks until [Submit] is clicked. Refresh the Requirement from the version on the server. This will update the local copy of the Requirement with the latest changes made on the SpiraTeam server. Browse the version of the Requirement on the server. Clicking the \"globe\" icon will open up a browser and display the Requirement directly in SpiraTeam.","title":"Viewing and Editing Requirements in Eclipse"},{"location":"IDE-Integration/Eclipse--Mylyn/#viewing-and-editing-tasks-in-eclipse","text":"When you view the list of Tasks in the Eclipse task list, it will have the following general form: Each Task is listed by name and number, together with its priority indicated by the equivalent Eclipse/Mylyn priority icon. To view the details of a specific Task, you should double-click on the Task, and the Tasks editor will be opened: The Tasks editor screen is divided up into several sections: Header -- this displays the name and ID of the Task, together with a graphical indication of its priority, its status, creation date and last-update date. Attributes -- this displays the various SpiraTeam-specific attributes of the Task, including status, scheduled release, priority, start-date, end-date, % complete, estimated effort, actual effort, the name/id of the Requirement it belongs to and its component. Any custom properties defined for the task will also be displayed. Attachments -- this displays the list of documents, web-links and screenshots attached to the Task. You can also upload new files and screenshots to the Task from within Eclipse. Description -- this displays the detailed description of the Task. Comments -- this displays a threaded list of all the comments that have been added to the Task in SpiraTeam. New Comment -- this allows you to add a new comment to the Task. The new comments will be sent to the SpiraTeam server when [Submit] is clicked. People -- this displays the name and email address of the person who created the Task (creator) and the person who it's currently assigned-to (owner). Operations -- this contains the list of operations that can be performed on the Task. More information on operations can be found below. You can make changes to the task by simply changing the values in the appropriate dropdown list or editing the information in any of the text boxes. Once you have happy with the changes, you can update the version on the SpiraTeam server by clicking the [Submit] button. If there are any data validation errors (e.g. you have to enter a start-date to make the Task In-Progress), they will be displayed. Once you have corrected them, the Task changes will be accepted by the system. In addition to making updates, you can perform the following actions on the Task: Workflow Transitions -- these are the blue hyperlinks displayed directly above the [Submit] button in the actions tab. These allow you to change the status of the Task and when clicked, the fields in the Attributes section will change based on the new status. Note: changing the Type of the Task will disable the workflow transition hyperlinks until [Submit] is clicked. Refresh the Task from the version on the server. This will update the local copy of the Task with the latest changes made on the SpiraTeam server. Browse the version of the Task on the server. Clicking the \"globe\" icon will open up a browser and display the Task directly in SpiraTeam.","title":"Viewing and Editing Tasks in Eclipse"},{"location":"IDE-Integration/Eclipse--Mylyn/#viewing-and-editing-incidents-in-eclipse","text":"When you view the list of Incidents in the Eclipse task list, it will have the following general form: Each Incident is listed by name and number, together with its priority indicated by the equivalent Eclipse/Mylyn priority icon. To view the details of a specific Incident, you should double-click on the Incident, and the Incidents editor will be opened: The Incidents editor screen is divided up into several sections: Header -- this displays the name and ID of the Incident, together with a graphical indication of its priority, its status, creation date and last-update date. Attributes -- this displays the various SpiraTeam-specific attributes of the Incident, including priority, severity, status, type, detected release, resolved release, verified release, start-date, closed-date, % complete, estimated effort, actual effort and component Id's. Any custom properties defined for the incident will also be displayed. Attachments -- this displays the list of documents, web-links and screenshots attached to the Incident. You can also upload new files and screenshots to the Task from within Eclipse. Description -- this displays the detailed description of the Incident. Comments -- this displays a threaded list of all the comments that have been added to the Incident in SpiraTeam. New Comment -- this allows you to add a new comment to the Incident. The new comments will be sent to the SpiraTeam server when [Submit] is clicked. People -- this displays the name and email address of the person who found the Incident (detector) and the person who it's currently assigned-to (owner). Operations -- this contains the list of operations that can be performed on the Incident. See below for more information on how to use this section. You can make changes to the Incident by simply changing the values in the appropriate dropdown list or editing the information in any of the text boxes. Once you have happy with the changes, you can update the version on the SpiraTeam server by clicking the [Submit] button. If there are any data validation errors (e.g. you have to enter a start-date to make the Incident In-Progress), they will be displayed. Once you have corrected them, the Incident changes will be accepted by the system. In addition to making simple updates, you can perform the following actions on the Incident: Submit -- clicking the submit button will commit the changes made on the Incident to the SpiraTeam Server. Workflow Transitions -- these are the blue hyperlinks displayed directly above the [Submit] button in the actions tab. These allow you to change the status of the Incident and when clicked, the fields in the Attributes section will change based on the new status. Note: changing the Type of the Incident will disable the workflow transition hyperlinks until [Submit] is clicked. Refresh the Incident from the version on the server. This will update the local copy of the Incident with the latest changes made on the SpiraTeam server. Browse the version of the Incident on the server. Clicking the \"globe\" icon will open up a browser and display the Incident directly in SpiraTeam.","title":"Viewing and Editing Incidents in Eclipse"},{"location":"IDE-Integration/Jetbrains-IDEs/","text":"Jetbrains IDEs This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with any Jetbrains integrated development environment (IDE) for viewing Requirements, Tasks and Incidents. Rather than develop a new user-interface from scratch, the SpiraTeam plug-in uses the robust tool window functionality in Jetbrains IDEs which allows users to customize their experience. Installing the Jetbrains Plug-In This section outlines how to install the SpiraTeam plug-in for Jetbrains. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam v5.0 or later and an up-to-date version of your Jetbrains IDE. For this tutorial we will be installing the plug-in in IntelliJ, Jetbrains' Java IDE. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v5.0 before trying to integrate with Jetbrains. To obtain the Jetbrains plug-in, open up the Jetbrains settings dialog at File > Settings. This will open the settings dialog. Click on the \"Plugins\" section on the left. Your screen should look something like this: Click on the \"Browse repositories\" button on the bottom of the screen, and enter \"SpiraTeam\" into the search bar. You should see the following result: Click the Install button. After it has installed you will be asked to restart your IDE. After your IDE has restarted, go to View > Tool Windows > SpiraTeam to open up the SpiraTeam Tool Window. Click on the \"View Credentials\" button and put in your log-in credentials. Please note that you can obtain the RSS Token by going to your user profile inside SpiraTeam. If the RSS Token is blank, make sure to enable RSS, and click Save. NOTE: this plugin lets users create artifacts in Spira, so please make sure that the user has create permissions for incidents and tasks to make full use of it. Once you press the OK button, wait for the window to close. If your log-in information is correct, you should see the following screen in the SpiraTeam Tool Window: Viewing Requirements, Tasks and Incidents in Jetbrains Clicking on Requirements, Tasks or Incidents will expand a list of their respective item's that are open and are assigned to you. If, for instance, you have no open requirements assigned to you, you will not see the \"Requirements\" title in the SpiraTeam window. Here is an example of all three expanded: Clicking on any requirement, task or incident will open up additional information in the bottom of the tool window. Clicking the title in this additional information panel will open the relevant item in SpiraTeam in your default browser. Creating new Requirements, Tasks, and Incidents in Jetbrains Clicking the \"New\" button at the top of the SpiraTeam window or navigating to Tools > SpiraTeam > New Item will bring up the new item popup. After you select your project and item type, the type, priority and owner fields will populate appropriately. If you do not wish to select a priority or owner, simply select \"---None --\" for either of them, and the field will not be populated in SpiraTeam. Once you press OK, your artifact will be created and you will get a notification in the SpiraTeam Tool Window like this one: Clicking on the notification label will dismiss it. Miscellaneous Functions If you want to change the user you are signed in as, you simply need to click on your username on the right of the \"Signed in as\" label. Clicking the \"Refresh\" button will refresh your assigned items from the server, while the \"Home\" button will take you to your My Page in your default browser. Navigating to Tools > SpiraTeam will bring up another way of interacting with SpiraTeam","title":"Jetbrains"},{"location":"IDE-Integration/Jetbrains-IDEs/#jetbrains-ides","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with any Jetbrains integrated development environment (IDE) for viewing Requirements, Tasks and Incidents. Rather than develop a new user-interface from scratch, the SpiraTeam plug-in uses the robust tool window functionality in Jetbrains IDEs which allows users to customize their experience.","title":"Jetbrains IDEs"},{"location":"IDE-Integration/Jetbrains-IDEs/#installing-the-jetbrains-plug-in","text":"This section outlines how to install the SpiraTeam plug-in for Jetbrains. It assumes that you already have a working installation of SpiraTest, SpiraPlan or SpiraTeam v5.0 or later and an up-to-date version of your Jetbrains IDE. For this tutorial we will be installing the plug-in in IntelliJ, Jetbrains' Java IDE. If you have an earlier version of SpiraTeam, you will need to upgrade to at least v5.0 before trying to integrate with Jetbrains. To obtain the Jetbrains plug-in, open up the Jetbrains settings dialog at File > Settings. This will open the settings dialog. Click on the \"Plugins\" section on the left. Your screen should look something like this: Click on the \"Browse repositories\" button on the bottom of the screen, and enter \"SpiraTeam\" into the search bar. You should see the following result: Click the Install button. After it has installed you will be asked to restart your IDE. After your IDE has restarted, go to View > Tool Windows > SpiraTeam to open up the SpiraTeam Tool Window. Click on the \"View Credentials\" button and put in your log-in credentials. Please note that you can obtain the RSS Token by going to your user profile inside SpiraTeam. If the RSS Token is blank, make sure to enable RSS, and click Save. NOTE: this plugin lets users create artifacts in Spira, so please make sure that the user has create permissions for incidents and tasks to make full use of it. Once you press the OK button, wait for the window to close. If your log-in information is correct, you should see the following screen in the SpiraTeam Tool Window:","title":"Installing the Jetbrains Plug-In"},{"location":"IDE-Integration/Jetbrains-IDEs/#viewing-requirements-tasks-and-incidents-in-jetbrains","text":"Clicking on Requirements, Tasks or Incidents will expand a list of their respective item's that are open and are assigned to you. If, for instance, you have no open requirements assigned to you, you will not see the \"Requirements\" title in the SpiraTeam window. Here is an example of all three expanded: Clicking on any requirement, task or incident will open up additional information in the bottom of the tool window. Clicking the title in this additional information panel will open the relevant item in SpiraTeam in your default browser.","title":"Viewing Requirements, Tasks and Incidents in Jetbrains"},{"location":"IDE-Integration/Jetbrains-IDEs/#creating-new-requirements-tasks-and-incidents-in-jetbrains","text":"Clicking the \"New\" button at the top of the SpiraTeam window or navigating to Tools > SpiraTeam > New Item will bring up the new item popup. After you select your project and item type, the type, priority and owner fields will populate appropriately. If you do not wish to select a priority or owner, simply select \"---None --\" for either of them, and the field will not be populated in SpiraTeam. Once you press OK, your artifact will be created and you will get a notification in the SpiraTeam Tool Window like this one: Clicking on the notification label will dismiss it.","title":"Creating new Requirements, Tasks, and Incidents in Jetbrains"},{"location":"IDE-Integration/Jetbrains-IDEs/#miscellaneous-functions","text":"If you want to change the user you are signed in as, you simply need to click on your username on the right of the \"Signed in as\" label. Clicking the \"Refresh\" button will refresh your assigned items from the server, while the \"Home\" button will take you to your My Page in your default browser. Navigating to Tools > SpiraTeam will bring up another way of interacting with SpiraTeam","title":"Miscellaneous Functions"},{"location":"IDE-Integration/Visual-Studio-2005---2008/","text":"Visual Studio 2005 - 2008 This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Visual Studio (VS) integrated development environment (IDE) for viewing Requirements, completing Tasks and fixing Incidents. The Add-In will operate in Visual Studio 2005 and 2008 but does require that the .NET framework version 3.5 SP1 is installed. It is normally installed with Visual Studio 2008 SP1 and Visual Studio 2010, but can be separately installed on a system with Visual Studio 2005 by downloading the installation file from Microsoft: http://www.microsoft.com/downloads/details.aspx?FamilyID=ab99342f-5d1a-413d-8319-81da479ab0d7 Visual Studio Express versions cannot support Add-Ins, you must at least have the standard version of the IDE for the Add-In to appear in the menu bar. Installing the Visual Studio Add-In Download and execute the Add-In installation file from the Inflectra website. The add-in will be automatically added to VS's menu bar. Adding and Assigning SpiraTeam Projects To view the Project Explorer, select \"SpiraTeam Project Explorer\" from the View menu. The tool window will open, and can be docked with any existing tool windows. When a solution is loaded that hasn't had any SpiraTeam projects assigned to it -- or if no solution is open -- the dialog will report so. If you have already assigned SpiraTeam projects to the open solution, they will each be loaded in a tree format in the tool window. Visual Studio will remember the docking and location of the window, so that if you close it you can re-open it by selecting the menu option a second time. The window will re-open in the last position before it was closed. Once the Project Explorer is open, click the \"Configuration\" button ( ) in the Project Explorer's toolbar to open the SpiraTeam project dialog. Note that if you have no solution open, you can add, remove, and edit SpiraTeam projects, but you can only assign them to a solution when that solution is open: Click the New button ( ) to link to a new SpiraTeam project. The \"new SpiraTeam Project\" dialog will open. In the fields, enter in the following: Server URL : The root address of your SpiraTeam installation. For example: https://server1/SpiraTeam/ Do not put \"login.aspx\" or any other page address in this field. User ID : Your user ID you use to log into the SpiraTeam application. Password : Your password you use to log into the SpiraTeam application. Once entered, click the \"Get Projects\" button. The add-in will connect to the server and get a list of projects that you are assigned to. Select the SpiraTeam project that you want to add, and click the \"Save\" button. Your project will appear in the dialog in the format of \"Project Name [Server]\". With a project selected in the left box, you can also Edit ( ) and Delete ( ) the project. With a solution loaded, you can select any number of SpiraTeam projects and assign them to the open Solution, by highlighting them, and clicking the \"Add >\" button. All projects assigned to the open solution will appear in the right side. Clicking \"Save\" will return you to the IDE, and if you made any changes in the configuration, the Project Explorer will refresh and update its display. Viewing SpiraTeam Project Artifacts Once a solution is opened and there is a SpiraTeam project assigned, you can view the project's contents. At this time, the add-in will display the following items: Incidents : Assigned to you, unassigned. Tasks : Assigned to you, unassigned. Requirements : Assigned to you. By default, the Project Explorer will not show closed and completed items. However, by clicking the 'View Closed' ( ) button in the toolbar, the Project Explorer will be updated to show closed and completed items as well. Double-clicking on a node (or clicking on the item's arrow) will open that item up and show all the sub-items. Clicking the Refresh ( ) button on the toolbar will refresh the SpiraTeam projects in the Project Explorer. Double-clicking an artifact will open its details in the main tabbed document area for viewing and editing. Viewing Artifact Details By double-clicking an artifact in the Project Explorer, you can open the details for the item in the main tabbed-document view. All the details screens are very similar, here is the Incident Details view for reference: The top of the window has the \"Save\" button, and any informational or warning messages will appear to the right of the Save button. The rest of the window has detail fields relating to the item, and depending on the current workflow, some fields may be required or disabled. (Note that at this time, Requirements are read-only.) Once you make changes to the artifact, changes are saved to the server when the \"Save\" button is clicked. Note that due to platform architecture differences, the HTML description may not appear and save exactly as entered, and there is no 'Source HTML' view. If visual integrity/layout is important, then we recommend editing the description and resolution fields in SpiraTeam's Web user interface instead. Data Concurrency Warnings When trying to save an artifact, you may get a warning at the top of the window stating that the item was modified by another user. This error is telling you that changes were made to the item after the data on your screen was pulled from the server. When this happens, you may see some fields highlighted in yellow or red. The colors represent data collisions: Yellow -- Any field highlighted yellow is a field that you tried to change that wasn't changed by the other user. Red -- Any field highlighted in red is a field that both you and the other user tried to change. No Highlight -- Fields without a highlight were possibly changed by the other user, but you did not make any changes to those fields. When a concurrency issue occurs, the new data is loaded from the server, losing your changes due to possible workflow collisions. Simply review the changed data and make your changes accordingly. Troubleshooting The add-in is designed to capture all errors so that when something unexpected happens, work isn't lost. In most situations where an error occurs, a notification will be displayed of the error. In the Project Explorer, hover the mouse over the error node to get a full description of the error. Errors will also be logged to the desktop's Application Event Log. A common symptom of an internal error is a blank or empty Details screen -- if this occurs when opening an artifact, save all your open work and restart Visual Studio. Contact support with the Application Event Log and inform them of the issue.","title":"Visual Studio 2005-2008"},{"location":"IDE-Integration/Visual-Studio-2005---2008/#visual-studio-2005-2008","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Visual Studio (VS) integrated development environment (IDE) for viewing Requirements, completing Tasks and fixing Incidents. The Add-In will operate in Visual Studio 2005 and 2008 but does require that the .NET framework version 3.5 SP1 is installed. It is normally installed with Visual Studio 2008 SP1 and Visual Studio 2010, but can be separately installed on a system with Visual Studio 2005 by downloading the installation file from Microsoft: http://www.microsoft.com/downloads/details.aspx?FamilyID=ab99342f-5d1a-413d-8319-81da479ab0d7 Visual Studio Express versions cannot support Add-Ins, you must at least have the standard version of the IDE for the Add-In to appear in the menu bar.","title":"Visual Studio 2005 - 2008"},{"location":"IDE-Integration/Visual-Studio-2005---2008/#installing-the-visual-studio-add-in","text":"Download and execute the Add-In installation file from the Inflectra website. The add-in will be automatically added to VS's menu bar.","title":"Installing the Visual Studio Add-In"},{"location":"IDE-Integration/Visual-Studio-2005---2008/#adding-and-assigning-spirateam-projects","text":"To view the Project Explorer, select \"SpiraTeam Project Explorer\" from the View menu. The tool window will open, and can be docked with any existing tool windows. When a solution is loaded that hasn't had any SpiraTeam projects assigned to it -- or if no solution is open -- the dialog will report so. If you have already assigned SpiraTeam projects to the open solution, they will each be loaded in a tree format in the tool window. Visual Studio will remember the docking and location of the window, so that if you close it you can re-open it by selecting the menu option a second time. The window will re-open in the last position before it was closed. Once the Project Explorer is open, click the \"Configuration\" button ( ) in the Project Explorer's toolbar to open the SpiraTeam project dialog. Note that if you have no solution open, you can add, remove, and edit SpiraTeam projects, but you can only assign them to a solution when that solution is open: Click the New button ( ) to link to a new SpiraTeam project. The \"new SpiraTeam Project\" dialog will open. In the fields, enter in the following: Server URL : The root address of your SpiraTeam installation. For example: https://server1/SpiraTeam/ Do not put \"login.aspx\" or any other page address in this field. User ID : Your user ID you use to log into the SpiraTeam application. Password : Your password you use to log into the SpiraTeam application. Once entered, click the \"Get Projects\" button. The add-in will connect to the server and get a list of projects that you are assigned to. Select the SpiraTeam project that you want to add, and click the \"Save\" button. Your project will appear in the dialog in the format of \"Project Name [Server]\". With a project selected in the left box, you can also Edit ( ) and Delete ( ) the project. With a solution loaded, you can select any number of SpiraTeam projects and assign them to the open Solution, by highlighting them, and clicking the \"Add >\" button. All projects assigned to the open solution will appear in the right side. Clicking \"Save\" will return you to the IDE, and if you made any changes in the configuration, the Project Explorer will refresh and update its display.","title":"Adding and Assigning SpiraTeam Projects"},{"location":"IDE-Integration/Visual-Studio-2005---2008/#viewing-spirateam-project-artifacts","text":"Once a solution is opened and there is a SpiraTeam project assigned, you can view the project's contents. At this time, the add-in will display the following items: Incidents : Assigned to you, unassigned. Tasks : Assigned to you, unassigned. Requirements : Assigned to you. By default, the Project Explorer will not show closed and completed items. However, by clicking the 'View Closed' ( ) button in the toolbar, the Project Explorer will be updated to show closed and completed items as well. Double-clicking on a node (or clicking on the item's arrow) will open that item up and show all the sub-items. Clicking the Refresh ( ) button on the toolbar will refresh the SpiraTeam projects in the Project Explorer. Double-clicking an artifact will open its details in the main tabbed document area for viewing and editing.","title":"Viewing SpiraTeam Project Artifacts"},{"location":"IDE-Integration/Visual-Studio-2005---2008/#viewing-artifact-details","text":"By double-clicking an artifact in the Project Explorer, you can open the details for the item in the main tabbed-document view. All the details screens are very similar, here is the Incident Details view for reference: The top of the window has the \"Save\" button, and any informational or warning messages will appear to the right of the Save button. The rest of the window has detail fields relating to the item, and depending on the current workflow, some fields may be required or disabled. (Note that at this time, Requirements are read-only.) Once you make changes to the artifact, changes are saved to the server when the \"Save\" button is clicked. Note that due to platform architecture differences, the HTML description may not appear and save exactly as entered, and there is no 'Source HTML' view. If visual integrity/layout is important, then we recommend editing the description and resolution fields in SpiraTeam's Web user interface instead.","title":"Viewing Artifact Details"},{"location":"IDE-Integration/Visual-Studio-2005---2008/#data-concurrency-warnings","text":"When trying to save an artifact, you may get a warning at the top of the window stating that the item was modified by another user. This error is telling you that changes were made to the item after the data on your screen was pulled from the server. When this happens, you may see some fields highlighted in yellow or red. The colors represent data collisions: Yellow -- Any field highlighted yellow is a field that you tried to change that wasn't changed by the other user. Red -- Any field highlighted in red is a field that both you and the other user tried to change. No Highlight -- Fields without a highlight were possibly changed by the other user, but you did not make any changes to those fields. When a concurrency issue occurs, the new data is loaded from the server, losing your changes due to possible workflow collisions. Simply review the changed data and make your changes accordingly.","title":"Data Concurrency Warnings"},{"location":"IDE-Integration/Visual-Studio-2005---2008/#troubleshooting","text":"The add-in is designed to capture all errors so that when something unexpected happens, work isn't lost. In most situations where an error occurs, a notification will be displayed of the error. In the Project Explorer, hover the mouse over the error node to get a full description of the error. Errors will also be logged to the desktop's Application Event Log. A common symptom of an internal error is a blank or empty Details screen -- if this occurs when opening an artifact, save all your open work and restart Visual Studio. Contact support with the Application Event Log and inform them of the issue.","title":"Troubleshooting"},{"location":"IDE-Integration/Visual-Studio-2010/","text":"Visual Studio 2010 This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Visual Studio (VS) integrated development environment (IDE) for viewing Requirements, completing Tasks and fixing Incidents. This add-in is meant for use with Visual Studio 2010 or later and SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) version v4.0 or later. It does require that .NET v4.0 is installed; however this is required by Visual Studio 2010 by default. Installing the Visual Studio Add-In The Visual Studio 2010 version can be downloaded from the Inflectra SpiraTeam add-ons webpage: Please do not use the version in the Visual Studio gallery, that is the newer Visual Studio 2012 extension which is not compatible with Visual Studio 2010. Adding and Assigning SpiraTeam Projects After installing, a new menu item will appear under the \"View\" menu. To view the Project Explorer, select \"SpiraTeam Project Explorer\" from the View menu. The tool window will open, and may be docked like any other tool window. When a solution is loaded that hasn't had any SpiraTeam projects assigned to it -- or if no solution is open -- the tool window will give a message saying so. Once a project is loaded that contains linked SpiraTeam projects, or a SpiraTeam project is added to the current open solution, then the tool window will load in the SpiraTeam projects and display them. To add, remove, and assign a SpiraTeam project to the open solution, click the Configuration Button in the Tool Window ( ), which will open the configuration dialog: Click the New button ( ) to link to a new SpiraTeam project. The \"new SpiraTeam Project\" dialog will open. In the fields, enter in the following: Server URL : The root address of your SpiraTeam installation. For example: https://server1/SpiraTeam/ Do not put \"login.aspx\" or any other page address in this field. User ID : Your user ID you use to log into the SpiraTeam application. Password : Your password you use to log into the SpiraTeam application. Once entered, click the \"Get Projects\" button. The add-in will connect to the server and get a list of projects that you are assigned to. Select the SpiraTeam project that you want to add, and click the \"Save\" button. Your project will appear in the dialog in the format of \"Project Name [Server]\". With a project selected in the left box, you can also Edit ( ) and Delete ( ) the project. With a solution loaded, you can select any number of SpiraTeam projects and assign them to the open Solution, by highlighting them, and clicking the \"Add >\" button. All projects assigned to the open solution will appear in the right side. Clicking \"Save\" will return you to the IDE, and if you made any changes in the configuration, the Project Explorer will refresh and update its display. Viewing SpiraTeam Project Artifacts Once a solution is opened and there is a SpiraTeam project assigned, you can view the project's contents. At this time, the add-in will display the following items: Incidents : Assigned to you and unassigned. Tasks : Assigned to you and unassigned. Requirements : Assigned to you and unassigned. By default, the Project Explorer will not show closed and completed items. However, by clicking the 'View Closed' ( ) button in the toolbar, the Project Explorer will be updated to show closed and completed items as well. Double-clicking on a node (or clicking on the item's arrow) will open that item up and show all the sub-items: Clicking the Refresh ( ) button on the toolbar will refresh the highlighted item in the tree, and all sub-items contained within it. SpiraTeam projects in the Project Explorer. All items have a right-click menu, and the options available for items are as follows: View Details : Opens the details of the item in a tool window inside the IDE. View in Browser : Opens the details of the item in a browser. Start/Stop Timer : For Tasks and Incidents only. Starts or Stops a work timer for that item. Refresh List : For folders and project only. Refreshes the folder or project's contents. Copy to Clipboard : Copies the artifact's token into the clipboard, for easy pasting into Version Control commits or descriptions. Viewing Artifact Details By double-clicking an artifact in the Project Explorer, you can open the details for the item in the main tabbed-document view. All the details screens are very similar. All of the fields closely match the fields as they appear in SpiraTeam's interface. The toolbar at top lets you Save the item, Refresh the details, and view the item in the browser if you so wish. Tasks and Incidents also have a Work Timer button on the toolbar, which lets a developer mark an item as being worked on, and when the developer stops working, it will update the fields with any time worked. Incident screens also have the Workflow steps up in the toolbar under the \"Change Status\" dropdown. Once you make changes to the artifact, changes are saved to the server when the \"Save\" button is clicked. ***Note:** Due to platform architecture differences, the HTML description may not appear and save exactly as entered, and there is no 'Source HTML' view. If visual integrity/layout is important, then we recommend editing the description and resolution fields in SpiraTeam's Web user interface instead.* Data Concurrency and Errors while Saving In the case an item was changed by someone else while the details screen was open, you will get an error indicating that the item was changed. There are two possible options at this point: If the data that was changed locally does not conflict with any changes made by the other user, then you will be given the option to Merge or Reload the data. If a field was changed locally that was also changed by another user, the only option that will be given will be to reload the data. If you opt to merge, then changes taken from the other user will be merged with your changes, and the item will be saved to the server. However, if you choose to reload, then your changes will be lost and you will need to make your changes again. For incidents, some fields may be marked as being required by the current workflow. In this case, the labels will be highlighted in bold. If you try to save an item without all required fields, an error will be displayed, and the field in error will be highlighted in red. Troubleshooting The add-in is designed to capture all errors so that when something unexpected happens, work isn't lost. In most situations where an error occurs, a notification will be displayed of the error. In the Project Explorer, hover the mouse over the error node to get a full description of the error. Errors will also be logged to the desktop's Application Event Log or a text file in case there was a problem connecting to the Event Log on the local computer. A common symptom of an internal error is a blank or empty Details screen -- if this occurs when opening an artifact, save all your open work and restart Visual Studio. Contact support with the Application Event Log and inform them of the issue.","title":"Visual Studio 2010"},{"location":"IDE-Integration/Visual-Studio-2010/#visual-studio-2010","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Visual Studio (VS) integrated development environment (IDE) for viewing Requirements, completing Tasks and fixing Incidents. This add-in is meant for use with Visual Studio 2010 or later and SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) version v4.0 or later. It does require that .NET v4.0 is installed; however this is required by Visual Studio 2010 by default.","title":"Visual Studio 2010"},{"location":"IDE-Integration/Visual-Studio-2010/#installing-the-visual-studio-add-in","text":"The Visual Studio 2010 version can be downloaded from the Inflectra SpiraTeam add-ons webpage: Please do not use the version in the Visual Studio gallery, that is the newer Visual Studio 2012 extension which is not compatible with Visual Studio 2010.","title":"Installing the Visual Studio Add-In"},{"location":"IDE-Integration/Visual-Studio-2010/#adding-and-assigning-spirateam-projects","text":"After installing, a new menu item will appear under the \"View\" menu. To view the Project Explorer, select \"SpiraTeam Project Explorer\" from the View menu. The tool window will open, and may be docked like any other tool window. When a solution is loaded that hasn't had any SpiraTeam projects assigned to it -- or if no solution is open -- the tool window will give a message saying so. Once a project is loaded that contains linked SpiraTeam projects, or a SpiraTeam project is added to the current open solution, then the tool window will load in the SpiraTeam projects and display them. To add, remove, and assign a SpiraTeam project to the open solution, click the Configuration Button in the Tool Window ( ), which will open the configuration dialog: Click the New button ( ) to link to a new SpiraTeam project. The \"new SpiraTeam Project\" dialog will open. In the fields, enter in the following: Server URL : The root address of your SpiraTeam installation. For example: https://server1/SpiraTeam/ Do not put \"login.aspx\" or any other page address in this field. User ID : Your user ID you use to log into the SpiraTeam application. Password : Your password you use to log into the SpiraTeam application. Once entered, click the \"Get Projects\" button. The add-in will connect to the server and get a list of projects that you are assigned to. Select the SpiraTeam project that you want to add, and click the \"Save\" button. Your project will appear in the dialog in the format of \"Project Name [Server]\". With a project selected in the left box, you can also Edit ( ) and Delete ( ) the project. With a solution loaded, you can select any number of SpiraTeam projects and assign them to the open Solution, by highlighting them, and clicking the \"Add >\" button. All projects assigned to the open solution will appear in the right side. Clicking \"Save\" will return you to the IDE, and if you made any changes in the configuration, the Project Explorer will refresh and update its display.","title":"Adding and Assigning SpiraTeam Projects"},{"location":"IDE-Integration/Visual-Studio-2010/#viewing-spirateam-project-artifacts","text":"Once a solution is opened and there is a SpiraTeam project assigned, you can view the project's contents. At this time, the add-in will display the following items: Incidents : Assigned to you and unassigned. Tasks : Assigned to you and unassigned. Requirements : Assigned to you and unassigned. By default, the Project Explorer will not show closed and completed items. However, by clicking the 'View Closed' ( ) button in the toolbar, the Project Explorer will be updated to show closed and completed items as well. Double-clicking on a node (or clicking on the item's arrow) will open that item up and show all the sub-items: Clicking the Refresh ( ) button on the toolbar will refresh the highlighted item in the tree, and all sub-items contained within it. SpiraTeam projects in the Project Explorer. All items have a right-click menu, and the options available for items are as follows: View Details : Opens the details of the item in a tool window inside the IDE. View in Browser : Opens the details of the item in a browser. Start/Stop Timer : For Tasks and Incidents only. Starts or Stops a work timer for that item. Refresh List : For folders and project only. Refreshes the folder or project's contents. Copy to Clipboard : Copies the artifact's token into the clipboard, for easy pasting into Version Control commits or descriptions.","title":"Viewing SpiraTeam Project Artifacts"},{"location":"IDE-Integration/Visual-Studio-2010/#viewing-artifact-details","text":"By double-clicking an artifact in the Project Explorer, you can open the details for the item in the main tabbed-document view. All the details screens are very similar. All of the fields closely match the fields as they appear in SpiraTeam's interface. The toolbar at top lets you Save the item, Refresh the details, and view the item in the browser if you so wish. Tasks and Incidents also have a Work Timer button on the toolbar, which lets a developer mark an item as being worked on, and when the developer stops working, it will update the fields with any time worked. Incident screens also have the Workflow steps up in the toolbar under the \"Change Status\" dropdown. Once you make changes to the artifact, changes are saved to the server when the \"Save\" button is clicked. ***Note:** Due to platform architecture differences, the HTML description may not appear and save exactly as entered, and there is no 'Source HTML' view. If visual integrity/layout is important, then we recommend editing the description and resolution fields in SpiraTeam's Web user interface instead.*","title":"Viewing Artifact Details"},{"location":"IDE-Integration/Visual-Studio-2010/#data-concurrency-and-errors-while-saving","text":"In the case an item was changed by someone else while the details screen was open, you will get an error indicating that the item was changed. There are two possible options at this point: If the data that was changed locally does not conflict with any changes made by the other user, then you will be given the option to Merge or Reload the data. If a field was changed locally that was also changed by another user, the only option that will be given will be to reload the data. If you opt to merge, then changes taken from the other user will be merged with your changes, and the item will be saved to the server. However, if you choose to reload, then your changes will be lost and you will need to make your changes again. For incidents, some fields may be marked as being required by the current workflow. In this case, the labels will be highlighted in bold. If you try to save an item without all required fields, an error will be displayed, and the field in error will be highlighted in red.","title":"Data Concurrency and Errors while Saving"},{"location":"IDE-Integration/Visual-Studio-2010/#troubleshooting","text":"The add-in is designed to capture all errors so that when something unexpected happens, work isn't lost. In most situations where an error occurs, a notification will be displayed of the error. In the Project Explorer, hover the mouse over the error node to get a full description of the error. Errors will also be logged to the desktop's Application Event Log or a text file in case there was a problem connecting to the Event Log on the local computer. A common symptom of an internal error is a blank or empty Details screen -- if this occurs when opening an artifact, save all your open work and restart Visual Studio. Contact support with the Application Event Log and inform them of the issue.","title":"Troubleshooting"},{"location":"IDE-Integration/Visual-Studio-Code/","text":"Visual Studio Code This plugin creates a new custom view which allows you to seamlessly view your assigned Spira Tasks, Requirements, and Incidents as well as create brand new Tasks right from Visual Studio Code. Guide Basics Unfortunately, this plugin only works with version 5.3 and above of the Spira ALM suite. If you have an older version, you need to update to use this plugin. This guide assumes you are familiar with Visual Studio Code and have already installed our plugin from the store. Logging in Open the command palette and type in 'credentials' as shown: Hit return to begin the Spira authentication process. You should see an input box that asks you to type the base URL of your Spira service. This should access the 'root' directory of your Spira, not including the ending slash. An example is provided below: Hit return when you typed in your URL to move on to the next step. You will be prompted to enter your Spira username, which you use when signing into your Spira subscription. See the example below for assistance. After you entered your username, hit return to move onto your final step. You will be prompted to enter your RSS Token, which must be enabled in your user profile to work. Here is the location of the RSS Token in your profile: Here is a sample image of a (fake) RSS Token: Viewing your Assigned Requirements, Tasks, and Incidents You should see a new icon on the left menu where the explorer, search bar, version control, etc are expanded from. Alternatively, you can expand the view by pressing alt+s Here is an image of the Spira icon: Click on the new icon to open the Spira panel where you can see all of the Tasks, Requirements, and Incidents that are assigned to you. You can expand/collapse any of the different types of items. You should now see a view similar to this: Clicking on one of the different items, 'Cannot log into the application' for instance will bring up a view similar to this: Ctrl clicking on the url for the artifact will open the selected item in your default browser. Refreshing your Assigned Items from Spira Refreshing Automatically By default, your assigned items are refreshed every 60 seconds. If you would like to change this, see Changing Auto-Refresh Time Changing the setting will affect how often the server is pinged to refresh the list. If you put in 0 or below, the list will never automatically refresh, and a value between 1 and 5 will default to 5 seconds. If you changed the setting from 0 or below to above 0, please refresh manually as shown below: Refreshing Manually Running 'Spira - Refresh' in the command palette or hitting alt+s, alt+r by default on windows will refresh manually. Creating a new Task You can easily create a new task in VS Code by running 'Spira - Create New Task' in the command palette or by hitting alt+s, alt+t on windows. This will take any highlighted text and dump it into the name prompt. Feel free to change the name if you like. Hit return and select a project from the dropdown as shown below: Hit return and you should see it in the Spira panel on the left and get a popup in the bottom right telling you it was a success! Settings Changing Auto-Refresh Time By default, the panel will refresh every 60 seconds, but this can easily be changed or disabled altogether through settings. To change this, open up your settings and search for 'spira' as shown below: Disabling an Item Type If you like, you can prevent displaying a particular item type. This can be particularly useful if you only want to view your assigned tasks, which should also decrease load times. To accomplish this, simply search 'spira' in settings and switch any of the 'showType' settings to false. See the image below for an example:","title":"Visual Studio Code"},{"location":"IDE-Integration/Visual-Studio-Code/#visual-studio-code","text":"This plugin creates a new custom view which allows you to seamlessly view your assigned Spira Tasks, Requirements, and Incidents as well as create brand new Tasks right from Visual Studio Code.","title":"Visual Studio Code"},{"location":"IDE-Integration/Visual-Studio-Code/#guide-basics","text":"Unfortunately, this plugin only works with version 5.3 and above of the Spira ALM suite. If you have an older version, you need to update to use this plugin. This guide assumes you are familiar with Visual Studio Code and have already installed our plugin from the store.","title":"Guide Basics"},{"location":"IDE-Integration/Visual-Studio-Code/#logging-in","text":"Open the command palette and type in 'credentials' as shown: Hit return to begin the Spira authentication process. You should see an input box that asks you to type the base URL of your Spira service. This should access the 'root' directory of your Spira, not including the ending slash. An example is provided below: Hit return when you typed in your URL to move on to the next step. You will be prompted to enter your Spira username, which you use when signing into your Spira subscription. See the example below for assistance. After you entered your username, hit return to move onto your final step. You will be prompted to enter your RSS Token, which must be enabled in your user profile to work. Here is the location of the RSS Token in your profile: Here is a sample image of a (fake) RSS Token:","title":"Logging in"},{"location":"IDE-Integration/Visual-Studio-Code/#viewing-your-assigned-requirements-tasks-and-incidents","text":"You should see a new icon on the left menu where the explorer, search bar, version control, etc are expanded from. Alternatively, you can expand the view by pressing alt+s Here is an image of the Spira icon: Click on the new icon to open the Spira panel where you can see all of the Tasks, Requirements, and Incidents that are assigned to you. You can expand/collapse any of the different types of items. You should now see a view similar to this: Clicking on one of the different items, 'Cannot log into the application' for instance will bring up a view similar to this: Ctrl clicking on the url for the artifact will open the selected item in your default browser.","title":"Viewing your Assigned Requirements, Tasks, and Incidents"},{"location":"IDE-Integration/Visual-Studio-Code/#refreshing-your-assigned-items-from-spira","text":"","title":"Refreshing your Assigned Items from Spira"},{"location":"IDE-Integration/Visual-Studio-Code/#refreshing-automatically","text":"By default, your assigned items are refreshed every 60 seconds. If you would like to change this, see Changing Auto-Refresh Time Changing the setting will affect how often the server is pinged to refresh the list. If you put in 0 or below, the list will never automatically refresh, and a value between 1 and 5 will default to 5 seconds. If you changed the setting from 0 or below to above 0, please refresh manually as shown below:","title":"Refreshing Automatically"},{"location":"IDE-Integration/Visual-Studio-Code/#refreshing-manually","text":"Running 'Spira - Refresh' in the command palette or hitting alt+s, alt+r by default on windows will refresh manually.","title":"Refreshing Manually"},{"location":"IDE-Integration/Visual-Studio-Code/#creating-a-new-task","text":"You can easily create a new task in VS Code by running 'Spira - Create New Task' in the command palette or by hitting alt+s, alt+t on windows. This will take any highlighted text and dump it into the name prompt. Feel free to change the name if you like. Hit return and select a project from the dropdown as shown below: Hit return and you should see it in the Spira panel on the left and get a popup in the bottom right telling you it was a success!","title":"Creating a new Task"},{"location":"IDE-Integration/Visual-Studio-Code/#settings","text":"","title":"Settings"},{"location":"IDE-Integration/Visual-Studio-Code/#changing-auto-refresh-time","text":"By default, the panel will refresh every 60 seconds, but this can easily be changed or disabled altogether through settings. To change this, open up your settings and search for 'spira' as shown below:","title":"Changing Auto-Refresh Time"},{"location":"IDE-Integration/Visual-Studio-Code/#disabling-an-item-type","text":"If you like, you can prevent displaying a particular item type. This can be particularly useful if you only want to view your assigned tasks, which should also decrease load times. To accomplish this, simply search 'spira' in settings and switch any of the 'showType' settings to false. See the image below for an example:","title":"Disabling an Item Type"},{"location":"IDE-Integration/Visual-Studio/","text":"Visual Studio This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Visual Studio (VS) integrated development environment (IDE) for viewing Requirements, completing Tasks and fixing Incidents. This add-in is meant for use with Visual Studio 2012 or later and SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) version v5.0 or later. It does require that .NET v4.5 be installed; however this is required by Visual Studio 2012 by default. Installing the Visual Studio Add-In The addin is downloadable from Microsoft's Visual Studio Gallery , or from within Visual Studio by going to Tools -> Extension Manager and searching for \"SpiraTeam\". If downloaded from within Visual Studio, after installation the IDE will need to be restarted. If downloaded from the browser, double-click on the VSIP file and it will walk you through the installation process. Adding and Assigning SpiraTeam Projects After installing, a new menu item will appear under the \"View\" menu: To view the Project Explorer, select \"SpiraTeam Project Explorer\" from the View menu. The tool window will open, and may be docked like any other tool window. When a solution is loaded that hasn't a SpiraTeam project assigned to it -- or if no solution is open -- the tool window will give a message saying so: Once a project is loaded that contains linked SpiraTeam projects, or a SpiraTeam project is added to the current open solution, then the tool window will load in the SpiraTeam projects and display them. To add, remove, and assign a SpiraTeam project to the open solution, click the SpiraTeam Configuration Button in the Tool Window (looks like a cog), which will open the configuration dialog: In the fields, enter in the following: Server URL : The root address of your SpiraTeam installation. For example: https://server1/SpiraTeam/ Do not put \"login.aspx\" or any other page address in this field. User ID : Your user ID you use to log into the SpiraTeam application. Password : Your password you use to log into the SpiraTeam application. Once entered, click the \"Get Projects\" button. The add-in will connect to the server and get a list of projects that you are assigned to. Select the SpiraTeam project that you want to add, and click the \"Save\" button. Clicking \"Save\" will return you to the IDE, and if you made any changes in the configuration, the Project Explorer will refresh and update its display. Viewing SpiraTeam Project Artifacts Once a solution is opened and there is a SpiraTeam project assigned, you can view the project's contents. At this time, the add-in will display the following items: Users: Users in your Spira contacts list Incidents : Assigned to you and open. Tasks : Assigned to you and not completed. Requirements : Assigned to you and not developed yet. Double-clicking on a node (or clicking on the item's arrow) will open that item up and show all the sub-items: Clicking the Refresh button on the toolbar will refresh the highlighted item in the tree, and all sub-items contained within it. SpiraTeam projects in the Project Explorer. All items have a right-click menu, and the options available for items are as follows: View in Browser : Opens the details of the item in your current web browser. Refresh List : For folders and project only. Refreshes the folder or project's contents. Copy to Clipboard : Copies the artifact's token into the clipboard, for easy pasting into Version Control commits or descriptions. Viewing Artifact Details By double-clicking an artifact in the Project Explorer (or choosing View in Browser), you can open the details for the item in the current tab of your web browser: In addition, when you select one of the items in the add-in treeview, the add-in will display the properties for that item in the standard Visual Studio properties window: This lets you decide whether you want to open the item in SpiraTeam before actually doing so. In a similar vein, there is a helpful tooltip displayed for all items in the tree: Creating a Task If you click on the (+) icon in the extension toolbar you will be able to quickly log a new task in SpiraTeam or SpiraPlan, making it easier to track new developer tasks and have them sync across machines: Just enter the name of the new task and it will be created in SpiraTeam, then displayed in the task list: Troubleshooting The add-in is designed to capture all errors so that when something unexpected happens, work isn't lost. In most situations where an error occurs, a notification will be displayed of the error. In the Project Explorer, hover the mouse over the error node to get a full description of the error. Errors will also be logged to the desktop's Application Event Log or a text file in case there was a problem connecting to the Event Log on the local computer. Contact support with the Application Event Log and inform them of the issue.","title":"Visual Studio"},{"location":"IDE-Integration/Visual-Studio/#visual-studio","text":"This section outlines how to use SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) in conjunction with the Visual Studio (VS) integrated development environment (IDE) for viewing Requirements, completing Tasks and fixing Incidents. This add-in is meant for use with Visual Studio 2012 or later and SpiraTest, SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) version v5.0 or later. It does require that .NET v4.5 be installed; however this is required by Visual Studio 2012 by default.","title":"Visual Studio"},{"location":"IDE-Integration/Visual-Studio/#installing-the-visual-studio-add-in","text":"The addin is downloadable from Microsoft's Visual Studio Gallery , or from within Visual Studio by going to Tools -> Extension Manager and searching for \"SpiraTeam\". If downloaded from within Visual Studio, after installation the IDE will need to be restarted. If downloaded from the browser, double-click on the VSIP file and it will walk you through the installation process.","title":"Installing the Visual Studio Add-In"},{"location":"IDE-Integration/Visual-Studio/#adding-and-assigning-spirateam-projects","text":"After installing, a new menu item will appear under the \"View\" menu: To view the Project Explorer, select \"SpiraTeam Project Explorer\" from the View menu. The tool window will open, and may be docked like any other tool window. When a solution is loaded that hasn't a SpiraTeam project assigned to it -- or if no solution is open -- the tool window will give a message saying so: Once a project is loaded that contains linked SpiraTeam projects, or a SpiraTeam project is added to the current open solution, then the tool window will load in the SpiraTeam projects and display them. To add, remove, and assign a SpiraTeam project to the open solution, click the SpiraTeam Configuration Button in the Tool Window (looks like a cog), which will open the configuration dialog: In the fields, enter in the following: Server URL : The root address of your SpiraTeam installation. For example: https://server1/SpiraTeam/ Do not put \"login.aspx\" or any other page address in this field. User ID : Your user ID you use to log into the SpiraTeam application. Password : Your password you use to log into the SpiraTeam application. Once entered, click the \"Get Projects\" button. The add-in will connect to the server and get a list of projects that you are assigned to. Select the SpiraTeam project that you want to add, and click the \"Save\" button. Clicking \"Save\" will return you to the IDE, and if you made any changes in the configuration, the Project Explorer will refresh and update its display.","title":"Adding and Assigning SpiraTeam Projects"},{"location":"IDE-Integration/Visual-Studio/#viewing-spirateam-project-artifacts","text":"Once a solution is opened and there is a SpiraTeam project assigned, you can view the project's contents. At this time, the add-in will display the following items: Users: Users in your Spira contacts list Incidents : Assigned to you and open. Tasks : Assigned to you and not completed. Requirements : Assigned to you and not developed yet. Double-clicking on a node (or clicking on the item's arrow) will open that item up and show all the sub-items: Clicking the Refresh button on the toolbar will refresh the highlighted item in the tree, and all sub-items contained within it. SpiraTeam projects in the Project Explorer. All items have a right-click menu, and the options available for items are as follows: View in Browser : Opens the details of the item in your current web browser. Refresh List : For folders and project only. Refreshes the folder or project's contents. Copy to Clipboard : Copies the artifact's token into the clipboard, for easy pasting into Version Control commits or descriptions.","title":"Viewing SpiraTeam Project Artifacts"},{"location":"IDE-Integration/Visual-Studio/#viewing-artifact-details","text":"By double-clicking an artifact in the Project Explorer (or choosing View in Browser), you can open the details for the item in the current tab of your web browser: In addition, when you select one of the items in the add-in treeview, the add-in will display the properties for that item in the standard Visual Studio properties window: This lets you decide whether you want to open the item in SpiraTeam before actually doing so. In a similar vein, there is a helpful tooltip displayed for all items in the tree:","title":"Viewing Artifact Details"},{"location":"IDE-Integration/Visual-Studio/#creating-a-task","text":"If you click on the (+) icon in the extension toolbar you will be able to quickly log a new task in SpiraTeam or SpiraPlan, making it easier to track new developer tasks and have them sync across machines: Just enter the name of the new task and it will be created in SpiraTeam, then displayed in the task list:","title":"Creating a Task"},{"location":"IDE-Integration/Visual-Studio/#troubleshooting","text":"The add-in is designed to capture all errors so that when something unexpected happens, work isn't lost. In most situations where an error occurs, a notification will be displayed of the error. In the Project Explorer, hover the mouse over the error node to get a full description of the error. Errors will also be logged to the desktop's Application Event Log or a text file in case there was a problem connecting to the Event Log on the local computer. Contact support with the Application Event Log and inform them of the issue.","title":"Troubleshooting"},{"location":"Migration-and-Integration/Importing-from-Google-Sheets/","text":"Importing from Google Sheets The web-based interface of SpiraTeam\u00ae is ideal for creating and managing all aspects of your projects. However when migrating requirements, release, tasks, incidents, and test cases with test steps for an existing project from another system, it is useful to be able to retrieve and load in a batch of artifacts, rather than having to manually enter them one at a time. To simplify this task we've created a Google sheets add-on for SpiraTeam\u00ae that can import requirements, releases, tasks, and test cases with test steps from a generated spreadsheet into SpiraTeam\u00ae. *This guide assumes you have a Google account with access to Google Drive and persistent access to the internet. It also assumes your instance of SpiraTeam (or SpiraTest, or SpiraPlan) is accessible over the internet so that Google Sheets can send data to it. Installing the SpiraTeam\u00ae Google Sheets Integration Add-on Like most Google services installation is very simple and straightforward as long as you have a Google account. Open a new spreadsheet, navigate to the add-on menu, and click the \"Get add-ons\" option. From there the Add-on store will launch, simply search for \"SpiraTeam\" and you will find the SpiraTeam Import Tool Add-on. Click install and authorize the add-on to work with documents related to your account. Connecting to SpiraTeam\u00ae Before connecting to SpiraTeam\u00ae with the add-on make sure that you're working on the first tab in the spreadsheet . Launch the add-on from the add-on menu with the \"Start\" option. The add-on will launch into a window docked to the side of your current spreadsheet. When the add-on fully loads you will be able to enter your SpiraTeam\u00ae log in credentials. Spira URL : Please enter the web address that you use to access SpiraTeam\u00ae in your browser. This is usually of the form http://<hostname>/SpiraTeam. Make sure that you remove any suffixes from the address (e.g. Default.aspx). User Name : Please enter the username that you use when logging into SpiraTeam. RSS Token : Please enter your RSS token including the curly braces i.e {ExampleRSS}. To activate your RSS Token: Click on the User Profile menu in the application header Click on \"My Profile\" The string of numbers including the brackets listed in the RSS Token text box is your token. If you don't see an RSS Token in that box, then click on 'Enable RSS Feeds' so that it is checked. Click the button 'Generate New' to get a new RSS token. Click [Update] to save your changes Once you have entered the necessary information, please click [ Log In ] to authenticate with the server. If the login information is invalid, you will see an error message appear, otherwise you will be connected and the list of projects and artifacts will be populated. Choosing the project and artifact Once you have successfully connected to SpiraTeam, you should now choose the appropriate Project and Artifact in the system to which you will be importing into SpiraTeam. As you make your selections more buttons will be enabled. After the project and artifact have been selected both buttons below these dropdowns should now be clickable. One let's you start entering data to send to SpiraPlan, the other gets data from SpiraPlan. Preparing your Template The SpiraTeam Google Sheets Integration add-on dynamically generates a template for each artifact with the click of a button. After a valid project and artifact have been selected the [ Prepare Template ] button will be enabled. Click this button to generate the required template on the currently selected sheet. Warning: make sure no data on this sheet is needed as the entire sheet will be wiped Filling in The Template The above template is for requirements. Fields which have list of values to select from have dropdowns to make choosing the right values easy. For an artifact to be created successfully in SpiraPlan it has to have certain fields filled in. These required fields are highlighted in bold black text. For example, the above screenshot is for requirements, where both the Name and Type field are required. Different artifacts have different factors to take account of when entering the data: Requirements : SpiraPlan allows a hierarchy of requirements (where each requirement can have children, who can, in turn, have child requirements of their own). To designate the hierarchy level of requirements, use the \">\" character. For example: \"Parent Requirement\" \"> Child of Parent\" \"> Another child of parent\" \">> Child of \"Another Child\"\" \"A second parent requirement\" Releases : are also hierarchical, and this is set on the sheet in the same way as requirements Incidents and Tasks : neither of these artifacts have any special factors to take into account Test Cases with Test Steps : The screenshot below shows the basic template for Test Cases. Please note the following points: A test step must have a test case parent to be linked to and all test steps below a test case will become the steps for that test case. There is no need to number the test steps -- SpiraPlan adds this information automatically Because each row can either be a case or a step, there are columns for both -- some are only for test cases, others are only for tests steps The lighter orange column names are ONLY for test step creation Fields with black text are required: darker orange ones are needed for a test case, lighter orange ones for a test step If a row has a mix of required fields in for both test cases and test steps, the addon won't know if it is a test case or a test step, so it will flag this an error Below is a partially filled in test case with test steps template -- it is visually easy to see which rows are steps to which case. Import Into SpiraPlan Before importing new artifacts, make sure that you're on the correct tab and the dropdowns in the sidebar show the correct project and artifact type. After the correct/required fields have been entered, click the [ Send to SpiraPlan] button to send your data to SpiraPlan\u00ae. You will see a popup showing overall progress. When the artifact has been successfully created an ID number will be placed in the ID column. This is the ID straight from SpiraPlan. If there are any errors for a particular row (eg if required fields have not all been filled in, or if there was some other problem with the data or on the SpiraPlan server) that row will be highlighted with a comment in column A explain the problem. For hierarchical artifacts (ones with parents and children), the import process will stop as soon as any error is found, to ensure SpiraPlan does not create an incorrect hierarchy Get data From SpiraPlan To get all the data for the specified project and artifact from SpiraPlan, instead of going through the steps outlined in Preparing your Template to Import Into SpiraPlan above, click the [ Get From SpiraPlan ] button. This will first load up the template on the current sheet then automatically retrieve all data from SpiraPlan and add it to the sheet.","title":"Google Sheets"},{"location":"Migration-and-Integration/Importing-from-Google-Sheets/#importing-from-google-sheets","text":"The web-based interface of SpiraTeam\u00ae is ideal for creating and managing all aspects of your projects. However when migrating requirements, release, tasks, incidents, and test cases with test steps for an existing project from another system, it is useful to be able to retrieve and load in a batch of artifacts, rather than having to manually enter them one at a time. To simplify this task we've created a Google sheets add-on for SpiraTeam\u00ae that can import requirements, releases, tasks, and test cases with test steps from a generated spreadsheet into SpiraTeam\u00ae. *This guide assumes you have a Google account with access to Google Drive and persistent access to the internet. It also assumes your instance of SpiraTeam (or SpiraTest, or SpiraPlan) is accessible over the internet so that Google Sheets can send data to it.","title":"Importing from Google Sheets"},{"location":"Migration-and-Integration/Importing-from-Google-Sheets/#installing-the-spirateam-google-sheets-integration-add-on","text":"Like most Google services installation is very simple and straightforward as long as you have a Google account. Open a new spreadsheet, navigate to the add-on menu, and click the \"Get add-ons\" option. From there the Add-on store will launch, simply search for \"SpiraTeam\" and you will find the SpiraTeam Import Tool Add-on. Click install and authorize the add-on to work with documents related to your account.","title":"Installing the SpiraTeam\u00ae Google Sheets Integration Add-on"},{"location":"Migration-and-Integration/Importing-from-Google-Sheets/#connecting-to-spirateam","text":"Before connecting to SpiraTeam\u00ae with the add-on make sure that you're working on the first tab in the spreadsheet . Launch the add-on from the add-on menu with the \"Start\" option. The add-on will launch into a window docked to the side of your current spreadsheet. When the add-on fully loads you will be able to enter your SpiraTeam\u00ae log in credentials. Spira URL : Please enter the web address that you use to access SpiraTeam\u00ae in your browser. This is usually of the form http://<hostname>/SpiraTeam. Make sure that you remove any suffixes from the address (e.g. Default.aspx). User Name : Please enter the username that you use when logging into SpiraTeam. RSS Token : Please enter your RSS token including the curly braces i.e {ExampleRSS}. To activate your RSS Token: Click on the User Profile menu in the application header Click on \"My Profile\" The string of numbers including the brackets listed in the RSS Token text box is your token. If you don't see an RSS Token in that box, then click on 'Enable RSS Feeds' so that it is checked. Click the button 'Generate New' to get a new RSS token. Click [Update] to save your changes Once you have entered the necessary information, please click [ Log In ] to authenticate with the server. If the login information is invalid, you will see an error message appear, otherwise you will be connected and the list of projects and artifacts will be populated.","title":"Connecting to SpiraTeam\u00ae"},{"location":"Migration-and-Integration/Importing-from-Google-Sheets/#choosing-the-project-and-artifact","text":"Once you have successfully connected to SpiraTeam, you should now choose the appropriate Project and Artifact in the system to which you will be importing into SpiraTeam. As you make your selections more buttons will be enabled. After the project and artifact have been selected both buttons below these dropdowns should now be clickable. One let's you start entering data to send to SpiraPlan, the other gets data from SpiraPlan.","title":"Choosing the project and artifact"},{"location":"Migration-and-Integration/Importing-from-Google-Sheets/#preparing-your-template","text":"The SpiraTeam Google Sheets Integration add-on dynamically generates a template for each artifact with the click of a button. After a valid project and artifact have been selected the [ Prepare Template ] button will be enabled. Click this button to generate the required template on the currently selected sheet. Warning: make sure no data on this sheet is needed as the entire sheet will be wiped","title":"Preparing your Template"},{"location":"Migration-and-Integration/Importing-from-Google-Sheets/#filling-in-the-template","text":"The above template is for requirements. Fields which have list of values to select from have dropdowns to make choosing the right values easy. For an artifact to be created successfully in SpiraPlan it has to have certain fields filled in. These required fields are highlighted in bold black text. For example, the above screenshot is for requirements, where both the Name and Type field are required. Different artifacts have different factors to take account of when entering the data: Requirements : SpiraPlan allows a hierarchy of requirements (where each requirement can have children, who can, in turn, have child requirements of their own). To designate the hierarchy level of requirements, use the \">\" character. For example: \"Parent Requirement\" \"> Child of Parent\" \"> Another child of parent\" \">> Child of \"Another Child\"\" \"A second parent requirement\" Releases : are also hierarchical, and this is set on the sheet in the same way as requirements Incidents and Tasks : neither of these artifacts have any special factors to take into account Test Cases with Test Steps : The screenshot below shows the basic template for Test Cases. Please note the following points: A test step must have a test case parent to be linked to and all test steps below a test case will become the steps for that test case. There is no need to number the test steps -- SpiraPlan adds this information automatically Because each row can either be a case or a step, there are columns for both -- some are only for test cases, others are only for tests steps The lighter orange column names are ONLY for test step creation Fields with black text are required: darker orange ones are needed for a test case, lighter orange ones for a test step If a row has a mix of required fields in for both test cases and test steps, the addon won't know if it is a test case or a test step, so it will flag this an error Below is a partially filled in test case with test steps template -- it is visually easy to see which rows are steps to which case.","title":"Filling in The Template"},{"location":"Migration-and-Integration/Importing-from-Google-Sheets/#import-into-spiraplan","text":"Before importing new artifacts, make sure that you're on the correct tab and the dropdowns in the sidebar show the correct project and artifact type. After the correct/required fields have been entered, click the [ Send to SpiraPlan] button to send your data to SpiraPlan\u00ae. You will see a popup showing overall progress. When the artifact has been successfully created an ID number will be placed in the ID column. This is the ID straight from SpiraPlan. If there are any errors for a particular row (eg if required fields have not all been filled in, or if there was some other problem with the data or on the SpiraPlan server) that row will be highlighted with a comment in column A explain the problem. For hierarchical artifacts (ones with parents and children), the import process will stop as soon as any error is found, to ensure SpiraPlan does not create an incorrect hierarchy","title":"Import Into SpiraPlan"},{"location":"Migration-and-Integration/Importing-from-Google-Sheets/#get-data-from-spiraplan","text":"To get all the data for the specified project and artifact from SpiraPlan, instead of going through the steps outlined in Preparing your Template to Import Into SpiraPlan above, click the [ Get From SpiraPlan ] button. This will first load up the template on the current sheet then automatically retrieve all data from SpiraPlan and add it to the sheet.","title":"Get data From SpiraPlan"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel-(Office365)/","text":"Importing from Microsoft Excel (Office 2016+, iOS, web) If you are using Microsoft Excel 2016+, or in the cloud (via a web browser) or on iPad OS, you can use the dedicated Microsoft Excel 2016+ add-in. With this add-in you can import or export data to and from any product in your SpiraTest, SpiraTeam, or SpiraPlan application. The add-in works for requirements, releases, incidents, tasks, and test cases with their test steps. In legacy versions of this add-in you need to download a static excel template to help make sure you enter data into it in the correct way. This add-in dynamically creates the sheet headers and cell validation based off of the specific selections you make. Installation To install the add-in: Go to the insert tab in Excel Click on \"Office Add-Ins\" and in the window that opens navigate to the store tab Search for \"Spira or SpiraPlan . When you see the correct add-in developed by Inflectra, click on the \"Add\" button associated with it. You should now see the SpiraPlan icon labeled \"Show add-in\" in your home tab. Click on it to begin. 1. Connect to your Spira app You can use this add-on with SpiraTest\u00ae, SpiraTeam\u00ae, or SpiraPlan\u00ae. If you are using Excel in the browser, your Spira app needs to be accessible over the internet. Your Spira Url: The web address that you use to access SpiraPlan\u00ae in your browser. Use the web address you use to access Spira in your browser. This is usually of the form 'http://(company).spiraservice.net'. Make sure you remove any suffixes from the address (e.g. Default.aspx or \"/\") Your Username: This is the exact same username you use to log in to Spira. (Not Case Sensitive) Enter your RSS token: You can find or generate this from your user profile page inside Spira. Make sure to include the curly braces - {ExampleRSS} You will be notified if there is an issue with your url or the user information you provided. 2. Choose which mode to use This add-in has two separate modes: exporting; and importing. Once you have successfully logged in to your Spira application, you need to decide what you want to use this add-in for. You can go back and change your mind at any time. Get data from Spira (exporting) : This button will prompt you to pick a product and artifact to LOAD FROM Spira loaded into the spreadsheet (on the current active sheet). Exporting data in this way can be helpful to share with colleagues who are not using Spira. Please note that this will bring over 100% of the artifacts in that product so it may take some time. Send data to Spira (importing) : This will button will prompt you to pick a product and artifact to SEND TO Spira from the current active sheet. Before you can enter data to send, the add-in creates a dynamic template for that specific product and artifact to make it easier to enter data correctly. Logout : Close your connection with Spira and take you back to the add-in's login page 3. Prepare for the data transfer If you are getting data from or sending data to Spira you first have to select the product and artifact to use from the dropdown menus. Products : lists all products in Spira that you are a member of Artifacts : this menu does not dynamically change based on your permissions, so if you cannot add data to an artifact this could be why. Getting data from Spira : once you have your product and artifact selected, click the button to start the export process. The add-in gets every entry of that artifact in the chosen product so it may take some time. Sending data to Spira : before you can enter data into the sheet click \"Prepare Sheet\" to create a template for that product and artifact. Once the sheet is ready click the Send button to add that data to Spira. Fields: working with required fields Required fields are marked by their name in the title row shown as bold black text (standard fields are regular light text) For test steps, required fields are shown in black, but not bold text. Fields: how certain 'special' fields work ID Fields : This field MUST be left blank to add new items to Spira. Any rows with entries in the ID fields are skipped over. Test Step Fields : have their header row shown in a lighter background color. Do not put any information in these fields when creating a test case. If the system cannot tell whether an entry is a test case or step it is skipped over when sending to Spira. Name : For REQUIREMENTS and RELEASES this field supports indentation, add a \u201c > \u201c symbol to indicate how the items in the artifact hierarchy are organized. 1 2 3 4 5 Example : Item 1 > Item 2 child of item 1 > Item 3 child of item 1 > > Item 4 child of item 3 Other actions you can do on this page Back : Go back to select which add-in mode to run Help : Open the add-ins help menu to this page Logout : Close your connection with Spira and take you back to the login page Entering Data for different artifacts Requirements : SpiraPlan allows a hierarchy of requirements (where each requirement can have children, who can, in turn, have child requirements of their own). To designate the hierarchy level of requirements, use the \">\" character at the start of the name field. See above for an example of how to do this ***Releases**: like Requirements, Releases in SpiraPlan are hierarchical. You designate hierarchy in the exact same way as for requirements. Test Cases and Test Steps : A test step must have a test case parent to be linked to and all test steps below a test case will become the steps for that test case. There is no need to number the test steps -- SpiraPlan adds this information automatically Because each row can either be a case or a step, there are columns for both -- some are only for test cases, others are only for tests steps The lighter orange column names are ONLY for test step creation Fields with black text are required: darker orange ones are needed for a test case, lighter orange ones for a test step If a row has a mix of required fields in for both test cases and test steps, the addon won't know if it is a test case or a test step, so it will flag this an error Incidents and Tasks : neither of these artifacts have any special factors to take into account Privacy Policy Inflectra respects the privacy of its customers. This Excel add-in does not collect or transmit any user information. Nothing about the user is stored in the add-in once you have closed it or logged out. If you are using a cloud hosted Spira application then by using this add-in you will be required to connect to your cloud application, managed by Inflectra to import or export the required data. Inflectra does not collect any of this data. For more information about our policies for cloud hosted customers, please refer to our hosting terms of service","title":"Excel (Office 365)"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel-(Office365)/#importing-from-microsoft-excel-office-2016-ios-web","text":"If you are using Microsoft Excel 2016+, or in the cloud (via a web browser) or on iPad OS, you can use the dedicated Microsoft Excel 2016+ add-in. With this add-in you can import or export data to and from any product in your SpiraTest, SpiraTeam, or SpiraPlan application. The add-in works for requirements, releases, incidents, tasks, and test cases with their test steps. In legacy versions of this add-in you need to download a static excel template to help make sure you enter data into it in the correct way. This add-in dynamically creates the sheet headers and cell validation based off of the specific selections you make.","title":"Importing from Microsoft Excel (Office 2016+, iOS, web)"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel-(Office365)/#installation","text":"To install the add-in: Go to the insert tab in Excel Click on \"Office Add-Ins\" and in the window that opens navigate to the store tab Search for \"Spira or SpiraPlan . When you see the correct add-in developed by Inflectra, click on the \"Add\" button associated with it. You should now see the SpiraPlan icon labeled \"Show add-in\" in your home tab. Click on it to begin.","title":"Installation"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel-(Office365)/#1-connect-to-your-spira-app","text":"You can use this add-on with SpiraTest\u00ae, SpiraTeam\u00ae, or SpiraPlan\u00ae. If you are using Excel in the browser, your Spira app needs to be accessible over the internet. Your Spira Url: The web address that you use to access SpiraPlan\u00ae in your browser. Use the web address you use to access Spira in your browser. This is usually of the form 'http://(company).spiraservice.net'. Make sure you remove any suffixes from the address (e.g. Default.aspx or \"/\") Your Username: This is the exact same username you use to log in to Spira. (Not Case Sensitive) Enter your RSS token: You can find or generate this from your user profile page inside Spira. Make sure to include the curly braces - {ExampleRSS} You will be notified if there is an issue with your url or the user information you provided.","title":"1. Connect to your Spira app"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel-(Office365)/#2-choose-which-mode-to-use","text":"This add-in has two separate modes: exporting; and importing. Once you have successfully logged in to your Spira application, you need to decide what you want to use this add-in for. You can go back and change your mind at any time. Get data from Spira (exporting) : This button will prompt you to pick a product and artifact to LOAD FROM Spira loaded into the spreadsheet (on the current active sheet). Exporting data in this way can be helpful to share with colleagues who are not using Spira. Please note that this will bring over 100% of the artifacts in that product so it may take some time. Send data to Spira (importing) : This will button will prompt you to pick a product and artifact to SEND TO Spira from the current active sheet. Before you can enter data to send, the add-in creates a dynamic template for that specific product and artifact to make it easier to enter data correctly. Logout : Close your connection with Spira and take you back to the add-in's login page","title":"2. Choose which mode to use"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel-(Office365)/#3-prepare-for-the-data-transfer","text":"If you are getting data from or sending data to Spira you first have to select the product and artifact to use from the dropdown menus. Products : lists all products in Spira that you are a member of Artifacts : this menu does not dynamically change based on your permissions, so if you cannot add data to an artifact this could be why. Getting data from Spira : once you have your product and artifact selected, click the button to start the export process. The add-in gets every entry of that artifact in the chosen product so it may take some time. Sending data to Spira : before you can enter data into the sheet click \"Prepare Sheet\" to create a template for that product and artifact. Once the sheet is ready click the Send button to add that data to Spira.","title":"3. Prepare for the data transfer"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel-(Office365)/#fields-working-with-required-fields","text":"Required fields are marked by their name in the title row shown as bold black text (standard fields are regular light text) For test steps, required fields are shown in black, but not bold text.","title":"Fields: working with required fields"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel-(Office365)/#fields-how-certain-special-fields-work","text":"ID Fields : This field MUST be left blank to add new items to Spira. Any rows with entries in the ID fields are skipped over. Test Step Fields : have their header row shown in a lighter background color. Do not put any information in these fields when creating a test case. If the system cannot tell whether an entry is a test case or step it is skipped over when sending to Spira. Name : For REQUIREMENTS and RELEASES this field supports indentation, add a \u201c > \u201c symbol to indicate how the items in the artifact hierarchy are organized. 1 2 3 4 5 Example : Item 1 > Item 2 child of item 1 > Item 3 child of item 1 > > Item 4 child of item 3","title":"Fields: how certain 'special' fields work"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel-(Office365)/#other-actions-you-can-do-on-this-page","text":"Back : Go back to select which add-in mode to run Help : Open the add-ins help menu to this page Logout : Close your connection with Spira and take you back to the login page","title":"Other actions you can do on this page"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel-(Office365)/#entering-data-for-different-artifacts","text":"Requirements : SpiraPlan allows a hierarchy of requirements (where each requirement can have children, who can, in turn, have child requirements of their own). To designate the hierarchy level of requirements, use the \">\" character at the start of the name field. See above for an example of how to do this ***Releases**: like Requirements, Releases in SpiraPlan are hierarchical. You designate hierarchy in the exact same way as for requirements. Test Cases and Test Steps : A test step must have a test case parent to be linked to and all test steps below a test case will become the steps for that test case. There is no need to number the test steps -- SpiraPlan adds this information automatically Because each row can either be a case or a step, there are columns for both -- some are only for test cases, others are only for tests steps The lighter orange column names are ONLY for test step creation Fields with black text are required: darker orange ones are needed for a test case, lighter orange ones for a test step If a row has a mix of required fields in for both test cases and test steps, the addon won't know if it is a test case or a test step, so it will flag this an error Incidents and Tasks : neither of these artifacts have any special factors to take into account","title":"Entering Data for different artifacts"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel-(Office365)/#privacy-policy","text":"Inflectra respects the privacy of its customers. This Excel add-in does not collect or transmit any user information. Nothing about the user is stored in the add-in once you have closed it or logged out. If you are using a cloud hosted Spira application then by using this add-in you will be required to connect to your cloud application, managed by Inflectra to import or export the required data. Inflectra does not collect any of this data. For more information about our policies for cloud hosted customers, please refer to our hosting terms of service","title":"Privacy Policy"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel/","text":"Importing from Microsoft Excel The web-based interface of SpiraTeam\u00ae is ideal for creating and managing requirements, test cases and incidents for a new project. However when migrating requirements, test cases, test steps and incidents for an existing project from another system or Microsoft Office document (e.g. Excel), it is useful to be able to load in a batch of artifacts, rather than having to manually enter them one at a time. To simplify this task, SpiraTeam\u00ae comes with a Microsoft Excel Add-In that can export requirements, test cases, test steps and incidents from a populated Excel sheet into SpiraTeam\u00ae. In addition, the Add-In allows you to import those same artifacts back into the Excel sheet to make batch updates which can then be used to update the master copies on the server. Note that this guide refers to SpiraTeam\u00ae, but the Excel Add-In can be used with SpiraTest\u00ae and SpiraPlan\u00ae as well. The only difference is that some of the artifact types may not be available in SpiraPlan/Test. Installing the Microsoft Excel Add-In The first thing you need to do is to go to the \"Add-Ons and Downloads\" page of the Inflectra Website (it can be found in the SpiraTest, SpiraPlan or SpiraTeam sections), and download the MS-Office Add-Ins installation package. There are separate packages for the following versions of MS Office: MS-Office 2003 Add-Ins -- these are compatible with Microsoft Office 2003 and 2007. They can connect to SpiraTeam v2.3 or later. They also require Microsoft .NET 3.5. MS-Office 2007 Add-Ins -- these are compatible with Microsoft Office 2007 and 2010. They can connect to SpiraTeam v3.0 or later. They also require Microsoft .NET 4.0. MS-Office 2010 Add-Ins -- these are compatible with Microsoft Office 2010 and later. They can connect to SpiraTeam v5.0 or later. They also require Microsoft .NET 4.0. This installation package will install the add-ins for Microsoft Excel, Word and Project at the same time. If you don't have the correct version of Microsoft .NET installed or some of the necessary prerequisites, you will be given the opportunity to install them when you first run the installation package. Once you have the Excel Add-In installed, the second thing you'll need to download is the SpiraImportTemplate Excel Sheet. This spreadsheet contains the necessary pre-formatted columns that are needed for the Add-In to easily recognize the data and know how to handle it. There are three versions of the template available - SpiraImportTemplate.xls for the Excel 2003 Add-In, SpiraImportTemplate.xlsx for the Excel 2007 Add-In and SpiraImportTemplate2010.xslx for the Excel 2010 Add-In. Once you have downloaded the template, please double-click on it to open it up in MS-Excel. You will notice that there is an additional toolbar displayed in Excel which is used for importing/exporting data to/from SpiraTeam: If you are using the MS-Excel 2007 or 2010 Add-In, you will see a modified version of the toolbar that makes use of the MS-Office Ribbon: This toolbar allows you to connect to SpiraTeam, and perform the import/export. The process for using this toolbar is described below: Connecting to SpiraTeam\u00ae The first thing you need to do is to click on the [Connect] button to specify the information used to connect to your instance of SpiraTeam: Please enter the following information into the dialog box: Spira URL: Please enter the web address that you use to access SpiraTeam\u00ae in your browser. This is usually of the form http://<hostname>/SpiraTeam. Make sure that you remove any suffixes from the address (e.g. Default.aspx). User Name: Please enter the username that you use for logging in to SpiraTeam Password: Please enter the password that you use for logging in to SpiraTeam Remember Password: If you are using this Add-In on a private computer, you can check this option to have the system remember your credentials locally. Please do not use this option on a public computer and it will compromise the security of your SpiraTeam installation. Once you have entered the necessary information, please click [Connect] to authenticate with the server. If the login information is invalid, you will see an error message appear, otherwise you will be connected and the list of projects and artifacts will be populated. If you want to end your session, you should just click the [Disconnect] button and the Add-In will close your connection. Choosing the Project and Artifact Once you have successfully connected to SpiraTeam, you should now choose the appropriate Project and Artifact in the system that you will be importing / exporting: Or The artifact choice will match the name of the Excel sheet in the template, so if you are going to be importing/exporting Requirements, you should choose \"Requirements\" from the dropdown list and then click on the \"Requirements\" tab inside the Excel import template. Once you have selected the project and artifact, there are three buttons that you can now use: Import: Clicking this button will retrieve the data from the SpiraTeam server and use that to populate the spreadsheet. Export: Clicking this button will take the data in the spreadsheet and use it to add/update items in SpiraTeam. Clear: This button allows you to quickly clear the data in the import template while leaving all the necessary headings and other information that the Add-In needs to be able to import/export data. Options: (Only in MS-Excel 2007/2010 Add-Inx). This button allows you to change some of the import/export options. Importing / Exporting Data The Excel Add-In is capable of either importing data from SpiraTeam into the Excel template or exporting data from the Excel template to SpiraTeam. However it is important to understand how the system knows whether to add new items to SpiraTeam or whether to update existing items: If you start with a blank import spreadsheet and enter items into it, they will not have a value set on their ID column in the spreadsheet (this is always the first column in each sheet). When you perform an Export, it will add these as new items in SpiraTeam If you start with a blank import spreadsheet and choose to Import data from SpiraTeam, those rows will include the ID of the item in the first column of the spreadsheet. You can either update those rows or add new rows in between. Any rows that have the ID column populated will be updated in SpiraTeam when you choose Export, whereas any newly added rows will be inserted in SpiraTeam. Importing/Exporting Releases To import/export releases, first you need to click on the \"Releases\" tab in the Excel sheet: Next if you want to import the list of existing Releases from SpiraTeam, you should click on the [Clear] icon to first remove the sample information from the spreadsheet, then click [Import] to load the list of existing releases into the sheet. These items will all have the \"Rel #\" column populated so that the system knows to update them rather than insert them when you subsequently click [Export]. If you want to simply export a list of releases from a spreadsheet, then you need to either enter the releases into this specially formatted spreadsheet or cut and paste them in from another existing Excel sheet that you've been using to manage releases previously. Then click [Export] and the new items will be added to your instance of SpiraTeam. The various columns that can be imported, and the rules for entering data are listed below: Field name Description Rel # Stores the ID of the release. Should be left blank for new items being added to SpiraTeam Release Name The name of the release. This field supports indentation, so you need to use Excel's ability to Indent text fields to indicate how the items in the release hierarchy are organized Release Description The long description of the release. If you want it formatted, you need to add HTML tags such as <b> for bold Version Number The version number for the release; acts as the short name Active Whether this release is active or not. Should be set to either Y/N Iteration Whether this release is an Iteration or not. Should be set to either Y/N Creator The user that should listed as the release's creator. Needs to be the ID of the user (e.g. user US00005 would be entered as just 5) Start Date The date that work on the release is scheduled to start End Date The date that work on the release is scheduled to end # Resources The number of people / resources that are scheduled to work on the release. Non-Wk Days The number of non-working days that should be subtracted from the # available hours for work performed on the release. MS-Excel 2003/2007 Add-In Specific Fields TEXT-01 -- TEXT-10 The ten (10) custom text properties available in the project LIST-01 -- LIST-10 The ten (10) drop-down list properties available in the project. You need to enter the ID value of the custom property not the display name. E.g. if you have a custom property with ID - PV00005 you would enter just 5 in these boxes. MS-Excel 2010 Add-In Specific Fields Status The status of the release. It needs to be one of the values from the dropdown list Type The type of the release (major, minor, iteration or phase). It needs to be one of the values from the dropdown list CUS-01 -- CUS-30 The thirty (30) custom fields defined in the project. The value entered depends on the type of custom property: - List -- provide the numeric ID of the custom list value (e.g. PV00005 would be entered as just \"5\") - MultiList -- provide a comma-separated list of the numeric IDs of the custom list values (e.g. PV00005 and PV00003 would be entered as just \"5,3\") - Text -- enter the text, include HTML tags if rich-text - Decimal -- enter the number (e.g. 1.0) - Integer -- enter the number (e.g. 2) - Date -- enter the number in the current local time format (e.g. m/d/yyyy for the US, d/m/yyyy for Europe) - User -- enter the ID of the user - Boolean -- Enter either \"True\" or \"False\" Comment The description of a comment that should be appended to the item. If you want it formatted, you need to add HTML tags such as <b> for bold. Note that this field always appends, so if you want to add two comments, just enter the first value and click [Export], then replace it with the second value and click [Export] Note: the columns that are required are listed in bold type. Importing/Exporting Requirements To import/export requirements, first you need to click on the \"Requirements\" tab in the Excel sheet: Next if you want to import the list of existing Requirements from SpiraTeam, you should click on the [Clear] icon to first remove the sample information from the spreadsheet, then click [Import] to load the list of existing requirements into the sheet. These items will all have the \"Req #\" column populated so that the system knows to update them rather than insert them when you subsequently click [Export]. If you want to simply export a list of requirements from a spreadsheet, then you need to either enter the requirements into this specially formatted spreadsheet or cut and paste them in from another existing Excel sheet that you've been using to manage requirements previously. Then click [Export] and the new items will be added to your instance of SpiraTeam. The various columns that can be imported, and the rules for entering data are listed below: Field name Description Req # Stores the ID of the requirement. Should be left blank for new items being added to SpiraTeam Requirement Name The name of the requirement. This field supports indentation, so you need to use Excel's ability to Indent text fields to indicate how the items in the requirement hierarchy are organized Requirement Description The long description of the requirement. If you want it formatted, you need to add HTML tags such as <b> for bold Importance The importance / priority of the requirement. It needs to be one of the values from the dropdown list. Status The status of the requirement. It needs to be one of the values from the dropdown list. If this is not specified, the requirement will default to the \"Requested\" status. Author The user that should listed as the requirement's author. Needs to be the ID of the user (e.g. user US00005 would be entered as just 5) Owner The user that should listed as the requirement's owner. Needs to be the ID of the user (e.g. user US00005 would be entered as just 5) MS-Excel 2003/2007 Add-In Specific Fields Release # The release that this requirement is scheduled for. Needs to be the ID of the release (e.g. release RL00005 would be entered as just 5) TEXT-01 -- TEXT-10 The ten (10) custom text properties available in the project LIST-01 -- LIST-10 The ten (10) drop-down list properties available in the project. You need to enter the ID value of the custom property not the display name. E.g. if you have a custom property with ID - PV00005 you would enter just 5 in these boxes. MS-Excel 2010 Add-In Specific Fields Release Version The release/iteration that this requirement is scheduled for. Needs to be the version number of the release (e.g. 1.0.1.1) Type The type of the requirement. It needs to be one of the values from the dropdown list. Estimate The estimate (in points) of the requirement. It should be a decimal number with one decimal place (e.g. 1.0, 2.5, etc.) Component This should be the Name of the Component the requirement is assigned-to. E.g. \"Component 1\" Linked Requirements Comma-separated list of requirement IDs (without the RQ prefix) that this requirement should be linked to (e.g. 204, 891) Note: This field only Exports to Spira and not the other way around CUS-01 -- CUS-30 The thirty (30) custom fields defined in the project. The value entered depends on the type of custom property: - List -- provide the numeric ID of the custom list value (e.g. PV00005 would be entered as just \"5\") - MultiList -- provide a comma-separated list of the numeric IDs of the custom list values (e.g. PV00005 and PV00003 would be entered as just \"5,3\") - Text -- enter the text, include HTML tags if rich-text - Decimal -- enter the number (e.g. 1.0) - Integer -- enter the number (e.g. 2) - Date -- enter the number in the current local time format (e.g. m/d/yyyy for the US, d/m/yyyy for Europe) - User -- enter the ID of the user - Boolean -- Enter either \"True\" or \"False\" Comment The description of a comment that should be appended to the item. If you want it formatted, you need to add HTML tags such as <b> for bold. Note that this field always appends, so if you want to add two comments, just enter the first value and click [Export], then replace it with the second value and click [Export] Note: the columns that are required are listed in bold type. Importing/Exporting Test Sets To import/export test sets, first you need to click on the \"Test Sets\" tab in the Excel sheet: Next if you want to import the list of existing Test Sets from SpiraTeam, you should click on the [Clear] icon to first remove the sample information from the spreadsheet, then click [Import] to load the list of existing test sets into the sheet. These items will all have the \"TX #\" column populated so that the system knows to update them rather than insert them when you subsequently click [Export]. If you want to simply export a list of test sets from a spreadsheet, then you need to either enter the test sets into this specially formatted spreadsheet or cut and paste them in from another existing Excel sheet that you've been using to manage test sets previously. Then click [Export] and the new items will be added to your instance of SpiraTeam. The various columns that can be imported, and the rules for entering data are listed below: Field name Description TX # Stores the ID of the test set. Should be left blank for new items being added to SpiraTeam Test Set Name The name of the test set. This field supports indentation, so you need to use Excel's ability to Indent text fields to indicate how the items in the test set hierarchy are organized Test Set Description The long description of the test set. If you want it formatted, you need to add HTML tags such as <b> for bold Folder Whether this item is a folder or not. Should be set to either Y/N Status The status of the test set. It needs to be one of the values from the dropdown list. Creator The user that should listed as the test set's creator. Needs to be the ID of the user (e.g. user US00005 would be entered as just 5) Owner The user that should listed as the test set's owner. Needs to be the ID of the user (e.g. user US00005 would be entered as just 5) Planned Date The date that the test set needs to be completed by. MS-Excel 2003/2007 Add-In Specific Fields Release # The release that this test set is scheduled for. Needs to be the ID of the release (e.g. release RL00005 would be entered as just 5) TEXT-01 -- TEXT-10 The ten (10) custom text properties available in the project LIST-01 -- LIST-10 The ten (10) drop-down list properties available in the project. You need to enter the ID value of the custom property not the display name. E.g. if you have a custom property with ID - PV00005 you would enter just 5 in these boxes. MS-Excel 2010 Add-In Specific Fields Release Version The release/iteration that this test set is scheduled for. Needs to be the version number of the release (e.g. 1.0.1.1) CUS-01 -- CUS-30 The thirty (30) custom fields defined in the project. The value entered depends on the type of custom property: - List -- provide the numeric ID of the custom list value (e.g. PV00005 would be entered as just \"5\") - MultiList -- provide a comma-separated list of the numeric IDs of the custom list values (e.g. PV00005 and PV00003 would be entered as just \"5,3\") - Text -- enter the text, include HTML tags if rich-text - Decimal -- enter the number (e.g. 1.0) - Integer -- enter the number (e.g. 2) - Date -- enter the number in the current local time format (e.g. m/d/yyyy for the US, d/m/yyyy for Europe) - User -- enter the ID of the user - Boolean -- Enter either \"True\" or \"False\" Comment The description of a comment that should be appended to the item. If you want it formatted, you need to add HTML tags such as <b> for bold. Note that this field always appends, so if you want to add two comments, just enter the first value and click [Export], then replace it with the second value and click [Export] Note: the columns that are required are listed in bold type. Importing/Exporting Test Cases To import/export test cases, first you need to click on the \"Test Cases\" tab in the Excel sheet: Next if you want to import the list of existing Test Cases from SpiraTeam, you should click on the [Clear] icon to first remove the sample information from the spreadsheet, then click [Import] to load the list of existing test cases into the sheet. These items will all have the \"Test #\" and \"Step #\" columns populated so that the system knows to update them rather than insert them when you subsequently click [Export]. If you want to simply export a list of test cases from a spreadsheet, then you need to either enter the test cases (including any test steps) into this specially formatted spreadsheet or cut and paste them in from another existing Excel sheet that you've been using to manage test cases previously. Then click [Export] and the new items will be added to your instance of SpiraTeam. The various columns that can be imported, and the rules for entering data are listed below: Field name Description Test # Stores the ID of the test case. Should be left blank for new items being added to SpiraTeam Test Case Name The name of the test case. This field supports indentation, so you need to use Excel's ability to Indent text fields to indicate how the items in the test case hierarchy are organized Test Case Description The long description of the test case. If you want it formatted, you need to add HTML tags such as <b> for bold Priority The priority of the test case. It needs to be one of the values from the dropdown list. Owner The user that should listed as the test case's owner. Needs to be the ID of the user (e.g. user US00005 would be entered as just 5) Row Type This is used to tell the Add-In what type of row this is. You should enter \"FOLDER\" if this row is a test folder, \"TestCase\" if it is a test case and \">TestStep\" if it is a test step belonging to a test case. These values should be selected from the dropdown list. Note: You should make sure that test step rows are located directly underneath the test case they are a part of. Step # Stores the ID of the test step. Should be left blank for new test steps being added to a test case Test Step Description The description of the test step. This should contain the description of the actions that the tester needs to take. If you want it formatted, you need to add HTML tags such as <b> for bold Expected Result The expected result of the test step. This should contain the description of what the tester should see if the step succeeds. If you want it formatted, you need to add HTML tags such as <b> for bold Sample Data The sample date for the test step. This should contain any sample data that the tester can use when testing the step. If you want it formatted, you need to add HTML tags such as <b> for bold MS-Excel 2003/2007 Add-In Specific Fields** Requirement The requirement that this test case should be mapped to. Needs to be the ID of the requirement (e.g. requirement RQ00005 would be entered as just 5). *Note that this field always appends, so if you want to add a test case to two requirements, run the export twice, once for each requirement. *Note: This field only Exports to Spira and not the other way around Release The release that this test case should be mapped to. Needs to be the ID of the release (e.g. release RL00005 would be entered as just 5). *Note that this field always appends, so if you want to add a test case to two releases, run the export twice, once for each release. *Note: This field only Exports to Spira and not the other way around Test Set The test set that this test case should be added to. Needs to be the ID of the test set (e.g. test set TX00005 would be entered as just 5). *Note that this field always appends, so if you want to add a test case to two test sets, run the export twice, once for each test set. *Note: This field only Exports to Spira and not the other way around TEXT-01 -- TEXT-10 The ten (10) custom text properties available in the project LIST-01 -- LIST-10 The ten (10) drop-down list properties available in the project. You need to enter the ID value of the custom property not the display name. E.g. if you have a custom property with ID - PV00005 you would enter just 5 in these boxes. MS-Excel 2010 Add-In Specific Fields Type The type of the test case. It needs to be one of the values from the dropdown list. Status The status of the test case. It needs to be one of the values from the dropdown list. Requirement The requirement(s) that this test case should be mapped to. Needs to be a comma-separated list of requirement IDs (e.g. requirements RQ00005 and RQ00008 would be entered as just \"5,8\"). Note: This field only Exports to Spira and not the other way around Release The release(s) that this test case should be mapped to. Needs to be a comma-separated list of release version numbers (e.g. releases 1.1.0.0 and 1.2.0.0 would be entered as \"1.1.0.0,1.2.0.0\"). Note: This field only Exports to Spira and not the other way around Test Set The test set(s) that this test case should be added to. Needs to be a comma-separated list of test set IDs (e.g. test sets TX00005 and TX00008 would be entered as just \"5,8\"). Note: This field only Exports to Spira and not the other way around Components This should be a comma-separated list of the Name of the Components the test case is assigned-to. E.g. Component 1, Component 2 CUS-01 -- CUS-30 The thirty (30) custom fields defined in the project. The value entered depends on the type of custom property: - List -- provide the numeric ID of the custom list value (e.g. PV00005 would be entered as just \"5\") - MultiList -- provide a comma-separated list of the numeric IDs of the custom list values (e.g. PV00005 and PV00003 would be entered as just \"5,3\") - Text -- enter the text, include HTML tags if rich-text - Decimal -- enter the number (e.g. 1.0) - Integer -- enter the number (e.g. 2) - Date -- enter the number in the current local time format (e.g. m/d/yyyy for the US, d/m/yyyy for Europe) - User -- enter the ID of the user - Boolean -- Enter either \"True\" or \"False\" Note: the columns that are required are listed in bold type. Importing/Exporting Incidents To import/export incidents, first you need to click on the \"Incidents\" tab in the Excel sheet: Next if you want to import the list of existing Incidents from SpiraTeam, you should click on the [Clear] icon to first remove the sample information from the spreadsheet, then click [Import] to load the list of existing incidents into the sheet. These items will all have the \"Inc #\" column populated so that the system knows to update them rather than insert them when you subsequently click [Export]. If you want to simply export a list of incidents from a spreadsheet, then you need to either enter the incidents into this specially formatted spreadsheet or cut and paste them in from another existing Excel sheet that you've been using to manage incidents previously. Then click [Export] and the new items will be added to your instance of SpiraTeam. The various columns that can be imported/exported, and the rules for entering data are listed below: Field name Description Inc # Stores the ID of the incident. Should be left blank for new items being added to SpiraTeam Incident Name The name of the incident. Incident Description The long description of the incident. If you want it formatted, you need to add HTML tags such as <b> for bold Type The type of the incident. It needs to be one of the values from the dropdown list. Status The status of the incident. It needs to be one of the values from the dropdown list. Priority The priority of the incident. It needs to be one of the values from the dropdown list. Severity The severity of the incident. It needs to be one of the values from the dropdown list. Detector The user that found the incident. Needs to be the ID of the user (e.g. user US00005 would be entered as just 5). If left blank, it will default to the user logged in through the Add-In. Owner The user that the incident should be assigned to Needs to be the ID of the user (e.g. user US00005 would be entered as just 5) Detected Date The date that the incident was found. If this field is not populated, the current date is used instead Closed Date The date that the incident was closed. Do not enter a value in this field if the incident is not in a closed status. MS-Excel 2003 Add-In Specific Fields % Complete The completion percentage of the incident Detected Release The release that this incident was found in. Needs to be the ID of the release (e.g. release RL00005 would be entered as just 5) Resolved Release The release that this incident is scheduled to be fixed in. Needs to be the ID of the release (e.g. release RL00005 would be entered as just 5) TEXT-01 -- TEXT-10 The ten (10) custom text properties available in the project LIST-01 -- LIST-10 The ten (10) drop-down list properties available in the project. You need to enter the ID value of the custom property not the display name. E.g. if you have a custom property with ID - PV00005 you would enter just 5 in these boxes. Resolution The description of a resolution/comment that should be appended to the incident. If you want it formatted, you need to add HTML tags such as <b> for bold. Note that this field always appends, so if you want to add two comments, just enter the first value and click [Export], then replace it with the second value and click [Export] MS-Excel 2007 Add-In Specific Fields Detected Release The release that this incident was found in. Needs to be the ID of the release (e.g. release RL00005 would be entered as just 5) Resolved Release The release that this incident is scheduled to be fixed in. Needs to be the ID of the release (e.g. release RL00005 would be entered as just 5) Est. Effort The estimated effort associated with the task (entered as a whole number of minutes) Act. Effort The actual effort associated with number of minutes) Rem. Effort The remaining effort associated with the task (entered as a whole number of minutes) TEXT-01 -- TEXT-10 The ten (10) custom text properties available in the project LIST-01 -- LIST-10 The ten (10) drop-down list properties available in the project. You need to enter the ID value of the custom property not the display name. E.g. if you have a custom property with ID - PV00005 you would enter just 5 in these boxes. Resolution The description of a resolution/comment that should be appended to the incident. If you want it formatted, you need to add HTML tags such as <b> for bold. Note that this field always appends, so if you want to add two comments, just enter the first value and click [Export], then replace it with the second value and click [Export] MS-Excel 2010 Add-In Specific Fields Detected Release The release/iteration that this incident was found in. Needs to be the version number of the release (e.g. 1.0.1.1) Resolved Release The release/iteration that this is planned to be fixed in. Needs to be the version number of the release (e.g. 1.0.1.1) Components This should be a comma-separated list of the Name of the Components the incident is assigned-to. E.g. Component 1, Component 2 Est. Effort The estimated effort associated with the task (entered as a whole number of minutes) Act. Effort The actual effort associated with the task (entered as a whole number of minutes) Rem. Effort The remaining effort associated with the task (entered as a whole number of minutes) CUS-01 -- CUS-30 The thirty (30) custom fields defined in the project. The value entered depends on the type of custom property: - List -- provide the numeric ID of the custom list value (e.g. PV00005 would be entered as just \"5\") - MultiList -- provide a comma-separated list of the numeric IDs of the custom list values (e.g. PV00005 and PV00003 would be entered as just \"5,3\") - Text -- enter the text, include HTML tags if rich-text - Decimal -- enter the number (e.g. 1.0) - Integer -- enter the number (e.g. 2) - Date -- enter the number in the current local time format (e.g. m/d/yyyy for the US, d/m/yyyy for Europe) - User -- enter the ID of the user - Boolean -- Enter either \"True\" or \"False\" Comment The description of a comment that should be appended to the incident. If you want it formatted, you need to add HTML tags such as <b> for bold. Note that this field always appends, so if you want to add two comments, just enter the first value and click [Export], then replace it with the second value and click [Export] Note: the columns that are required are listed in bold type. Importing/Exporting Tasks To import/export tasks, first you need to click on the \"Tasks\" tab in the Excel sheet: Next if you want to import the list of existing Tasks from SpiraTeam, you should click on the [Clear] icon to first remove the sample information from the spreadsheet, then click [Import] to load the list of existing tasks into the sheet. These items will all have the \"Inc #\" column populated so that the system knows to update them rather than insert them when you subsequently click [Export]. If you want to simply export a list of tasks from a spreadsheet, then you need to either enter the tasks into this specially formatted spreadsheet or cut and paste them in from another existing Excel sheet that you've been using to manage tasks previously. Then click [Export] and the new items will be added to your instance of SpiraTeam. The various columns that can be imported, and the rules for entering data are listed below: Field name Description Task # Stores the ID of the task. Should be left blank for new items being added to SpiraTeam Task Name The name of the task. Task Description The long description of the task. If you want it formatted, you need to add HTML tags such as <b> for bold Status The status of the task. It needs to be one of the values from the dropdown list. Priority The priority of the task. It needs to be one of the values from the dropdown list. Requirement The requirement that this task should be associated with. Needs to be the ID of the requirement (e.g. requirement RQ00005 would be entered as just 5). Owner The user that the task should be assigned to Needs to be the ID of the user (e.g. user US00005 would be entered as just 5) Start Date The date that work on the task is scheduled to start End Date The date that work on the task is scheduled to end Est. Effort The estimated effort associated with the task (entered as a whole number of minutes) Act. Effort The actual effort associated with the task (entered as a whole number of minutes) MS-Excel 2003 Add-In Specific Fields % Complete The completion percentage of the task Release # The release/iteration that this task is scheduled for. Needs to be the ID of the release/iteration (e.g. release RL00005 would be entered as just 5). TEXT-01 -- TEXT-10 The ten (10) custom text properties available in the project LIST-01 -- LIST-10 The ten (10) drop-down list properties available in the project. You need to enter the ID value of the custom property not the display name. E.g. if you have a custom property with ID - PV00005 you would enter just 5 in these boxes. **MS-Excel 2007 Add-In Specific Fields** Rem. Effort The remaining effort associated with the task (entered as a whole number of minutes) Release # The release/iteration that this task is scheduled for. Needs to be the ID of the release/iteration (e.g. release RL00005 would be entered as just 5). TEXT-01 -- TEXT-10 The ten (10) custom text properties available in the project LIST-01 -- LIST-10 The ten (10) drop-down list properties available in the project. You need to enter the ID value of the custom property not the display name. E.g. if you have a custom property with ID - PV00005 you would enter just 5 in these boxes. MS-Excel 2010 Add-In Specific Fields Type The type of the task. It needs to be one of the values from the dropdown list. Rem. Effort The remaining effort associated with the task (entered as a whole number of minutes) Release Version The release/iteration that this task is scheduled for. Needs to be the version number of the release (e.g. 1.0.1.1) CUS-01 -- CUS-30 The thirty (30) custom fields defined in the project. The value entered depends on the type of custom property: - List -- provide the numeric ID of the custom list value (e.g. PV00005 would be entered as just \"5\") - MultiList -- provide a comma-separated list of the numeric IDs of the custom list values (e.g. PV00005 and PV00003 would be entered as just \"5,3\") - Text -- enter the text, include HTML tags if rich-text - Decimal -- enter the number (e.g. 1.0) - Integer -- enter the number (e.g. 2) - Date -- enter the number in the current local time format (e.g. m/d/yyyy for the US, d/m/yyyy for Europe) - User -- enter the ID of the user - Boolean -- Enter either \"True\" or \"False\" Comment The description of a comment that should be appended to the task. If you want it formatted, you need to add HTML tags such as <b> for bold. Note that this field always appends, so if you want to add two comments, just enter the first value and click [Export], then replace it with the second value and click [Export] Note: the columns that are required are listed in bold type. Execute Test Cases Offline As well as being able to import/export data, you can also use the import spreadsheet to execute test cases while disconnected from your network and then upload the results to SpiraTeam as a single batch. To do this, when connected to the network, connect to the server using the Add-In [Connect] icon, select the project and \"Test Runs\", then click on the \"Test Runs\" in the spreadsheet: Now you should click on the [Import] button, and the Add-In will load the list of Test Cases (and in the case of the MS-Office 2007/2010 Add-Ins, any Test Sets as well) that are currently assigned to you together with open cells (marked in green) that you can use to record the actual results of testing: You can now disconnect from the network and perform the testing activities offline. Enter the following entries into the spreadsheet: Status The execution status of that test step. It should be selected drop the dropdown list. The allowed values are: Failed / Passed / Blocked / Caution. Actual Result The long description of the actual result experienced during testing. If you want it formatted, you need to add HTML tags such as <b> for bold Incident Name If you want to log an incident associated with the test failure, enter the name of the incident here. The description of the incident will be pre-populated with the Test Step Description, Expected Result, and Actual Result. Once you have finished testing and are connected back on the network, just click on the [Connect] icon to have the Add-In connect with the SpiraTeam server, choose the project name and \"Test Runs\" and then click [Export]. The test results will now be uploaded to the server. Note: If you are using the MS-Excel 2007/2010 Add-Ins, you will also see the Test Set ID, Release ID and TX TC ID (Test-Set, Test Case unique ID). You can manually set a Release ID on test cases that were not part of a test set. Importing Custom Property List Values To import/export custom property values (for list custom properties), first you need to click on the \"Custom Values\" tab in the Excel sheet: Next if you want to import the list of existing custom list values from SpiraTeam, you should click on the [Clear] icon to first remove the sample information from the spreadsheet, then click [Import] to load the list of existing custom list values into the sheet. These items will all have the \"Value #\" column populated so that the system knows to update them rather than insert them when you subsequently click [Export]. If you want to export a list of custom list values from a spreadsheet you first need to make sure that a list exists in the right template in Spira. You can only edit a list that already exists in Spira. Then you need to either enter the custom list ID and value name into this specially formatted spreadsheet or cut and paste them in from another existing Excel sheet that you've been using to manage the values previously. Then click [Export] and the new items will be added to your instance of SpiraTeam. NOTE: These values are initially added as inactive on the list. You will need to log into Spira to make the list values required active. The various columns that can be imported, and the rules for entering data are listed below: Field name Description Value # Stores the ID of the custom list value. Should be left blank for new items being added to SpiraTeam Custom List # The ID of the custom list that the value is being added to (with the CL prefix removed). For example custom list CL00005 would be entered as just \"5\" Custom Value Name The name of the custom value that you are inserting/updating in SpiraTeam Note: the columns that are required are listed in bold type. Changing the Import/Export Options In the MS-Excel 2007 and 2010 Add-Ins, you can change how the import/export works by clicking on the Options icon. This brings up the Options dialog box: Rich Text Setting When you import artifacts from SpiraTeam into MS-Excel, if they have a formatted description, by default all the HTML tags that are used to describe the formatting will be loaded into the Excel cell. This is useful if you plan on making changes and then updating SpiraTeam (since it will preserve the formatting). However if you want to be able to more easily read the descriptions in Excel and do not plan on updating SpiraTeam, you can select the option to Remove the Formatting, which will convert the descriptions to plain-text before loading them into Excel. Test Run Date Setting If you set a date for the 'Test Run Date', the importer will use that date to be the date the test runs were executed on, rather than the current date/time, which is used by default.","title":"Excel"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel/#importing-from-microsoft-excel","text":"The web-based interface of SpiraTeam\u00ae is ideal for creating and managing requirements, test cases and incidents for a new project. However when migrating requirements, test cases, test steps and incidents for an existing project from another system or Microsoft Office document (e.g. Excel), it is useful to be able to load in a batch of artifacts, rather than having to manually enter them one at a time. To simplify this task, SpiraTeam\u00ae comes with a Microsoft Excel Add-In that can export requirements, test cases, test steps and incidents from a populated Excel sheet into SpiraTeam\u00ae. In addition, the Add-In allows you to import those same artifacts back into the Excel sheet to make batch updates which can then be used to update the master copies on the server. Note that this guide refers to SpiraTeam\u00ae, but the Excel Add-In can be used with SpiraTest\u00ae and SpiraPlan\u00ae as well. The only difference is that some of the artifact types may not be available in SpiraPlan/Test.","title":"Importing from Microsoft Excel"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel/#installing-the-microsoft-excel-add-in","text":"The first thing you need to do is to go to the \"Add-Ons and Downloads\" page of the Inflectra Website (it can be found in the SpiraTest, SpiraPlan or SpiraTeam sections), and download the MS-Office Add-Ins installation package. There are separate packages for the following versions of MS Office: MS-Office 2003 Add-Ins -- these are compatible with Microsoft Office 2003 and 2007. They can connect to SpiraTeam v2.3 or later. They also require Microsoft .NET 3.5. MS-Office 2007 Add-Ins -- these are compatible with Microsoft Office 2007 and 2010. They can connect to SpiraTeam v3.0 or later. They also require Microsoft .NET 4.0. MS-Office 2010 Add-Ins -- these are compatible with Microsoft Office 2010 and later. They can connect to SpiraTeam v5.0 or later. They also require Microsoft .NET 4.0. This installation package will install the add-ins for Microsoft Excel, Word and Project at the same time. If you don't have the correct version of Microsoft .NET installed or some of the necessary prerequisites, you will be given the opportunity to install them when you first run the installation package. Once you have the Excel Add-In installed, the second thing you'll need to download is the SpiraImportTemplate Excel Sheet. This spreadsheet contains the necessary pre-formatted columns that are needed for the Add-In to easily recognize the data and know how to handle it. There are three versions of the template available - SpiraImportTemplate.xls for the Excel 2003 Add-In, SpiraImportTemplate.xlsx for the Excel 2007 Add-In and SpiraImportTemplate2010.xslx for the Excel 2010 Add-In. Once you have downloaded the template, please double-click on it to open it up in MS-Excel. You will notice that there is an additional toolbar displayed in Excel which is used for importing/exporting data to/from SpiraTeam: If you are using the MS-Excel 2007 or 2010 Add-In, you will see a modified version of the toolbar that makes use of the MS-Office Ribbon: This toolbar allows you to connect to SpiraTeam, and perform the import/export. The process for using this toolbar is described below:","title":"Installing the Microsoft Excel Add-In"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel/#connecting-to-spirateam","text":"The first thing you need to do is to click on the [Connect] button to specify the information used to connect to your instance of SpiraTeam: Please enter the following information into the dialog box: Spira URL: Please enter the web address that you use to access SpiraTeam\u00ae in your browser. This is usually of the form http://<hostname>/SpiraTeam. Make sure that you remove any suffixes from the address (e.g. Default.aspx). User Name: Please enter the username that you use for logging in to SpiraTeam Password: Please enter the password that you use for logging in to SpiraTeam Remember Password: If you are using this Add-In on a private computer, you can check this option to have the system remember your credentials locally. Please do not use this option on a public computer and it will compromise the security of your SpiraTeam installation. Once you have entered the necessary information, please click [Connect] to authenticate with the server. If the login information is invalid, you will see an error message appear, otherwise you will be connected and the list of projects and artifacts will be populated. If you want to end your session, you should just click the [Disconnect] button and the Add-In will close your connection.","title":"Connecting to SpiraTeam\u00ae"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel/#choosing-the-project-and-artifact","text":"Once you have successfully connected to SpiraTeam, you should now choose the appropriate Project and Artifact in the system that you will be importing / exporting: Or The artifact choice will match the name of the Excel sheet in the template, so if you are going to be importing/exporting Requirements, you should choose \"Requirements\" from the dropdown list and then click on the \"Requirements\" tab inside the Excel import template. Once you have selected the project and artifact, there are three buttons that you can now use: Import: Clicking this button will retrieve the data from the SpiraTeam server and use that to populate the spreadsheet. Export: Clicking this button will take the data in the spreadsheet and use it to add/update items in SpiraTeam. Clear: This button allows you to quickly clear the data in the import template while leaving all the necessary headings and other information that the Add-In needs to be able to import/export data. Options: (Only in MS-Excel 2007/2010 Add-Inx). This button allows you to change some of the import/export options.","title":"Choosing the Project and Artifact"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel/#importing-exporting-data","text":"The Excel Add-In is capable of either importing data from SpiraTeam into the Excel template or exporting data from the Excel template to SpiraTeam. However it is important to understand how the system knows whether to add new items to SpiraTeam or whether to update existing items: If you start with a blank import spreadsheet and enter items into it, they will not have a value set on their ID column in the spreadsheet (this is always the first column in each sheet). When you perform an Export, it will add these as new items in SpiraTeam If you start with a blank import spreadsheet and choose to Import data from SpiraTeam, those rows will include the ID of the item in the first column of the spreadsheet. You can either update those rows or add new rows in between. Any rows that have the ID column populated will be updated in SpiraTeam when you choose Export, whereas any newly added rows will be inserted in SpiraTeam.","title":"Importing / Exporting Data"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel/#importingexporting-releases","text":"To import/export releases, first you need to click on the \"Releases\" tab in the Excel sheet: Next if you want to import the list of existing Releases from SpiraTeam, you should click on the [Clear] icon to first remove the sample information from the spreadsheet, then click [Import] to load the list of existing releases into the sheet. These items will all have the \"Rel #\" column populated so that the system knows to update them rather than insert them when you subsequently click [Export]. If you want to simply export a list of releases from a spreadsheet, then you need to either enter the releases into this specially formatted spreadsheet or cut and paste them in from another existing Excel sheet that you've been using to manage releases previously. Then click [Export] and the new items will be added to your instance of SpiraTeam. The various columns that can be imported, and the rules for entering data are listed below: Field name Description Rel # Stores the ID of the release. Should be left blank for new items being added to SpiraTeam Release Name The name of the release. This field supports indentation, so you need to use Excel's ability to Indent text fields to indicate how the items in the release hierarchy are organized Release Description The long description of the release. If you want it formatted, you need to add HTML tags such as <b> for bold Version Number The version number for the release; acts as the short name Active Whether this release is active or not. Should be set to either Y/N Iteration Whether this release is an Iteration or not. Should be set to either Y/N Creator The user that should listed as the release's creator. Needs to be the ID of the user (e.g. user US00005 would be entered as just 5) Start Date The date that work on the release is scheduled to start End Date The date that work on the release is scheduled to end # Resources The number of people / resources that are scheduled to work on the release. Non-Wk Days The number of non-working days that should be subtracted from the # available hours for work performed on the release. MS-Excel 2003/2007 Add-In Specific Fields TEXT-01 -- TEXT-10 The ten (10) custom text properties available in the project LIST-01 -- LIST-10 The ten (10) drop-down list properties available in the project. You need to enter the ID value of the custom property not the display name. E.g. if you have a custom property with ID - PV00005 you would enter just 5 in these boxes. MS-Excel 2010 Add-In Specific Fields Status The status of the release. It needs to be one of the values from the dropdown list Type The type of the release (major, minor, iteration or phase). It needs to be one of the values from the dropdown list CUS-01 -- CUS-30 The thirty (30) custom fields defined in the project. The value entered depends on the type of custom property: - List -- provide the numeric ID of the custom list value (e.g. PV00005 would be entered as just \"5\") - MultiList -- provide a comma-separated list of the numeric IDs of the custom list values (e.g. PV00005 and PV00003 would be entered as just \"5,3\") - Text -- enter the text, include HTML tags if rich-text - Decimal -- enter the number (e.g. 1.0) - Integer -- enter the number (e.g. 2) - Date -- enter the number in the current local time format (e.g. m/d/yyyy for the US, d/m/yyyy for Europe) - User -- enter the ID of the user - Boolean -- Enter either \"True\" or \"False\" Comment The description of a comment that should be appended to the item. If you want it formatted, you need to add HTML tags such as <b> for bold. Note that this field always appends, so if you want to add two comments, just enter the first value and click [Export], then replace it with the second value and click [Export] Note: the columns that are required are listed in bold type.","title":"Importing/Exporting Releases"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel/#importingexporting-requirements","text":"To import/export requirements, first you need to click on the \"Requirements\" tab in the Excel sheet: Next if you want to import the list of existing Requirements from SpiraTeam, you should click on the [Clear] icon to first remove the sample information from the spreadsheet, then click [Import] to load the list of existing requirements into the sheet. These items will all have the \"Req #\" column populated so that the system knows to update them rather than insert them when you subsequently click [Export]. If you want to simply export a list of requirements from a spreadsheet, then you need to either enter the requirements into this specially formatted spreadsheet or cut and paste them in from another existing Excel sheet that you've been using to manage requirements previously. Then click [Export] and the new items will be added to your instance of SpiraTeam. The various columns that can be imported, and the rules for entering data are listed below: Field name Description Req # Stores the ID of the requirement. Should be left blank for new items being added to SpiraTeam Requirement Name The name of the requirement. This field supports indentation, so you need to use Excel's ability to Indent text fields to indicate how the items in the requirement hierarchy are organized Requirement Description The long description of the requirement. If you want it formatted, you need to add HTML tags such as <b> for bold Importance The importance / priority of the requirement. It needs to be one of the values from the dropdown list. Status The status of the requirement. It needs to be one of the values from the dropdown list. If this is not specified, the requirement will default to the \"Requested\" status. Author The user that should listed as the requirement's author. Needs to be the ID of the user (e.g. user US00005 would be entered as just 5) Owner The user that should listed as the requirement's owner. Needs to be the ID of the user (e.g. user US00005 would be entered as just 5) MS-Excel 2003/2007 Add-In Specific Fields Release # The release that this requirement is scheduled for. Needs to be the ID of the release (e.g. release RL00005 would be entered as just 5) TEXT-01 -- TEXT-10 The ten (10) custom text properties available in the project LIST-01 -- LIST-10 The ten (10) drop-down list properties available in the project. You need to enter the ID value of the custom property not the display name. E.g. if you have a custom property with ID - PV00005 you would enter just 5 in these boxes. MS-Excel 2010 Add-In Specific Fields Release Version The release/iteration that this requirement is scheduled for. Needs to be the version number of the release (e.g. 1.0.1.1) Type The type of the requirement. It needs to be one of the values from the dropdown list. Estimate The estimate (in points) of the requirement. It should be a decimal number with one decimal place (e.g. 1.0, 2.5, etc.) Component This should be the Name of the Component the requirement is assigned-to. E.g. \"Component 1\" Linked Requirements Comma-separated list of requirement IDs (without the RQ prefix) that this requirement should be linked to (e.g. 204, 891) Note: This field only Exports to Spira and not the other way around CUS-01 -- CUS-30 The thirty (30) custom fields defined in the project. The value entered depends on the type of custom property: - List -- provide the numeric ID of the custom list value (e.g. PV00005 would be entered as just \"5\") - MultiList -- provide a comma-separated list of the numeric IDs of the custom list values (e.g. PV00005 and PV00003 would be entered as just \"5,3\") - Text -- enter the text, include HTML tags if rich-text - Decimal -- enter the number (e.g. 1.0) - Integer -- enter the number (e.g. 2) - Date -- enter the number in the current local time format (e.g. m/d/yyyy for the US, d/m/yyyy for Europe) - User -- enter the ID of the user - Boolean -- Enter either \"True\" or \"False\" Comment The description of a comment that should be appended to the item. If you want it formatted, you need to add HTML tags such as <b> for bold. Note that this field always appends, so if you want to add two comments, just enter the first value and click [Export], then replace it with the second value and click [Export] Note: the columns that are required are listed in bold type.","title":"Importing/Exporting Requirements"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel/#importingexporting-test-sets","text":"To import/export test sets, first you need to click on the \"Test Sets\" tab in the Excel sheet: Next if you want to import the list of existing Test Sets from SpiraTeam, you should click on the [Clear] icon to first remove the sample information from the spreadsheet, then click [Import] to load the list of existing test sets into the sheet. These items will all have the \"TX #\" column populated so that the system knows to update them rather than insert them when you subsequently click [Export]. If you want to simply export a list of test sets from a spreadsheet, then you need to either enter the test sets into this specially formatted spreadsheet or cut and paste them in from another existing Excel sheet that you've been using to manage test sets previously. Then click [Export] and the new items will be added to your instance of SpiraTeam. The various columns that can be imported, and the rules for entering data are listed below: Field name Description TX # Stores the ID of the test set. Should be left blank for new items being added to SpiraTeam Test Set Name The name of the test set. This field supports indentation, so you need to use Excel's ability to Indent text fields to indicate how the items in the test set hierarchy are organized Test Set Description The long description of the test set. If you want it formatted, you need to add HTML tags such as <b> for bold Folder Whether this item is a folder or not. Should be set to either Y/N Status The status of the test set. It needs to be one of the values from the dropdown list. Creator The user that should listed as the test set's creator. Needs to be the ID of the user (e.g. user US00005 would be entered as just 5) Owner The user that should listed as the test set's owner. Needs to be the ID of the user (e.g. user US00005 would be entered as just 5) Planned Date The date that the test set needs to be completed by. MS-Excel 2003/2007 Add-In Specific Fields Release # The release that this test set is scheduled for. Needs to be the ID of the release (e.g. release RL00005 would be entered as just 5) TEXT-01 -- TEXT-10 The ten (10) custom text properties available in the project LIST-01 -- LIST-10 The ten (10) drop-down list properties available in the project. You need to enter the ID value of the custom property not the display name. E.g. if you have a custom property with ID - PV00005 you would enter just 5 in these boxes. MS-Excel 2010 Add-In Specific Fields Release Version The release/iteration that this test set is scheduled for. Needs to be the version number of the release (e.g. 1.0.1.1) CUS-01 -- CUS-30 The thirty (30) custom fields defined in the project. The value entered depends on the type of custom property: - List -- provide the numeric ID of the custom list value (e.g. PV00005 would be entered as just \"5\") - MultiList -- provide a comma-separated list of the numeric IDs of the custom list values (e.g. PV00005 and PV00003 would be entered as just \"5,3\") - Text -- enter the text, include HTML tags if rich-text - Decimal -- enter the number (e.g. 1.0) - Integer -- enter the number (e.g. 2) - Date -- enter the number in the current local time format (e.g. m/d/yyyy for the US, d/m/yyyy for Europe) - User -- enter the ID of the user - Boolean -- Enter either \"True\" or \"False\" Comment The description of a comment that should be appended to the item. If you want it formatted, you need to add HTML tags such as <b> for bold. Note that this field always appends, so if you want to add two comments, just enter the first value and click [Export], then replace it with the second value and click [Export] Note: the columns that are required are listed in bold type.","title":"Importing/Exporting Test Sets"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel/#importingexporting-test-cases","text":"To import/export test cases, first you need to click on the \"Test Cases\" tab in the Excel sheet: Next if you want to import the list of existing Test Cases from SpiraTeam, you should click on the [Clear] icon to first remove the sample information from the spreadsheet, then click [Import] to load the list of existing test cases into the sheet. These items will all have the \"Test #\" and \"Step #\" columns populated so that the system knows to update them rather than insert them when you subsequently click [Export]. If you want to simply export a list of test cases from a spreadsheet, then you need to either enter the test cases (including any test steps) into this specially formatted spreadsheet or cut and paste them in from another existing Excel sheet that you've been using to manage test cases previously. Then click [Export] and the new items will be added to your instance of SpiraTeam. The various columns that can be imported, and the rules for entering data are listed below: Field name Description Test # Stores the ID of the test case. Should be left blank for new items being added to SpiraTeam Test Case Name The name of the test case. This field supports indentation, so you need to use Excel's ability to Indent text fields to indicate how the items in the test case hierarchy are organized Test Case Description The long description of the test case. If you want it formatted, you need to add HTML tags such as <b> for bold Priority The priority of the test case. It needs to be one of the values from the dropdown list. Owner The user that should listed as the test case's owner. Needs to be the ID of the user (e.g. user US00005 would be entered as just 5) Row Type This is used to tell the Add-In what type of row this is. You should enter \"FOLDER\" if this row is a test folder, \"TestCase\" if it is a test case and \">TestStep\" if it is a test step belonging to a test case. These values should be selected from the dropdown list. Note: You should make sure that test step rows are located directly underneath the test case they are a part of. Step # Stores the ID of the test step. Should be left blank for new test steps being added to a test case Test Step Description The description of the test step. This should contain the description of the actions that the tester needs to take. If you want it formatted, you need to add HTML tags such as <b> for bold Expected Result The expected result of the test step. This should contain the description of what the tester should see if the step succeeds. If you want it formatted, you need to add HTML tags such as <b> for bold Sample Data The sample date for the test step. This should contain any sample data that the tester can use when testing the step. If you want it formatted, you need to add HTML tags such as <b> for bold MS-Excel 2003/2007 Add-In Specific Fields** Requirement The requirement that this test case should be mapped to. Needs to be the ID of the requirement (e.g. requirement RQ00005 would be entered as just 5). *Note that this field always appends, so if you want to add a test case to two requirements, run the export twice, once for each requirement. *Note: This field only Exports to Spira and not the other way around Release The release that this test case should be mapped to. Needs to be the ID of the release (e.g. release RL00005 would be entered as just 5). *Note that this field always appends, so if you want to add a test case to two releases, run the export twice, once for each release. *Note: This field only Exports to Spira and not the other way around Test Set The test set that this test case should be added to. Needs to be the ID of the test set (e.g. test set TX00005 would be entered as just 5). *Note that this field always appends, so if you want to add a test case to two test sets, run the export twice, once for each test set. *Note: This field only Exports to Spira and not the other way around TEXT-01 -- TEXT-10 The ten (10) custom text properties available in the project LIST-01 -- LIST-10 The ten (10) drop-down list properties available in the project. You need to enter the ID value of the custom property not the display name. E.g. if you have a custom property with ID - PV00005 you would enter just 5 in these boxes. MS-Excel 2010 Add-In Specific Fields Type The type of the test case. It needs to be one of the values from the dropdown list. Status The status of the test case. It needs to be one of the values from the dropdown list. Requirement The requirement(s) that this test case should be mapped to. Needs to be a comma-separated list of requirement IDs (e.g. requirements RQ00005 and RQ00008 would be entered as just \"5,8\"). Note: This field only Exports to Spira and not the other way around Release The release(s) that this test case should be mapped to. Needs to be a comma-separated list of release version numbers (e.g. releases 1.1.0.0 and 1.2.0.0 would be entered as \"1.1.0.0,1.2.0.0\"). Note: This field only Exports to Spira and not the other way around Test Set The test set(s) that this test case should be added to. Needs to be a comma-separated list of test set IDs (e.g. test sets TX00005 and TX00008 would be entered as just \"5,8\"). Note: This field only Exports to Spira and not the other way around Components This should be a comma-separated list of the Name of the Components the test case is assigned-to. E.g. Component 1, Component 2 CUS-01 -- CUS-30 The thirty (30) custom fields defined in the project. The value entered depends on the type of custom property: - List -- provide the numeric ID of the custom list value (e.g. PV00005 would be entered as just \"5\") - MultiList -- provide a comma-separated list of the numeric IDs of the custom list values (e.g. PV00005 and PV00003 would be entered as just \"5,3\") - Text -- enter the text, include HTML tags if rich-text - Decimal -- enter the number (e.g. 1.0) - Integer -- enter the number (e.g. 2) - Date -- enter the number in the current local time format (e.g. m/d/yyyy for the US, d/m/yyyy for Europe) - User -- enter the ID of the user - Boolean -- Enter either \"True\" or \"False\" Note: the columns that are required are listed in bold type.","title":"Importing/Exporting Test Cases"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel/#importingexporting-incidents","text":"To import/export incidents, first you need to click on the \"Incidents\" tab in the Excel sheet: Next if you want to import the list of existing Incidents from SpiraTeam, you should click on the [Clear] icon to first remove the sample information from the spreadsheet, then click [Import] to load the list of existing incidents into the sheet. These items will all have the \"Inc #\" column populated so that the system knows to update them rather than insert them when you subsequently click [Export]. If you want to simply export a list of incidents from a spreadsheet, then you need to either enter the incidents into this specially formatted spreadsheet or cut and paste them in from another existing Excel sheet that you've been using to manage incidents previously. Then click [Export] and the new items will be added to your instance of SpiraTeam. The various columns that can be imported/exported, and the rules for entering data are listed below: Field name Description Inc # Stores the ID of the incident. Should be left blank for new items being added to SpiraTeam Incident Name The name of the incident. Incident Description The long description of the incident. If you want it formatted, you need to add HTML tags such as <b> for bold Type The type of the incident. It needs to be one of the values from the dropdown list. Status The status of the incident. It needs to be one of the values from the dropdown list. Priority The priority of the incident. It needs to be one of the values from the dropdown list. Severity The severity of the incident. It needs to be one of the values from the dropdown list. Detector The user that found the incident. Needs to be the ID of the user (e.g. user US00005 would be entered as just 5). If left blank, it will default to the user logged in through the Add-In. Owner The user that the incident should be assigned to Needs to be the ID of the user (e.g. user US00005 would be entered as just 5) Detected Date The date that the incident was found. If this field is not populated, the current date is used instead Closed Date The date that the incident was closed. Do not enter a value in this field if the incident is not in a closed status. MS-Excel 2003 Add-In Specific Fields % Complete The completion percentage of the incident Detected Release The release that this incident was found in. Needs to be the ID of the release (e.g. release RL00005 would be entered as just 5) Resolved Release The release that this incident is scheduled to be fixed in. Needs to be the ID of the release (e.g. release RL00005 would be entered as just 5) TEXT-01 -- TEXT-10 The ten (10) custom text properties available in the project LIST-01 -- LIST-10 The ten (10) drop-down list properties available in the project. You need to enter the ID value of the custom property not the display name. E.g. if you have a custom property with ID - PV00005 you would enter just 5 in these boxes. Resolution The description of a resolution/comment that should be appended to the incident. If you want it formatted, you need to add HTML tags such as <b> for bold. Note that this field always appends, so if you want to add two comments, just enter the first value and click [Export], then replace it with the second value and click [Export] MS-Excel 2007 Add-In Specific Fields Detected Release The release that this incident was found in. Needs to be the ID of the release (e.g. release RL00005 would be entered as just 5) Resolved Release The release that this incident is scheduled to be fixed in. Needs to be the ID of the release (e.g. release RL00005 would be entered as just 5) Est. Effort The estimated effort associated with the task (entered as a whole number of minutes) Act. Effort The actual effort associated with number of minutes) Rem. Effort The remaining effort associated with the task (entered as a whole number of minutes) TEXT-01 -- TEXT-10 The ten (10) custom text properties available in the project LIST-01 -- LIST-10 The ten (10) drop-down list properties available in the project. You need to enter the ID value of the custom property not the display name. E.g. if you have a custom property with ID - PV00005 you would enter just 5 in these boxes. Resolution The description of a resolution/comment that should be appended to the incident. If you want it formatted, you need to add HTML tags such as <b> for bold. Note that this field always appends, so if you want to add two comments, just enter the first value and click [Export], then replace it with the second value and click [Export] MS-Excel 2010 Add-In Specific Fields Detected Release The release/iteration that this incident was found in. Needs to be the version number of the release (e.g. 1.0.1.1) Resolved Release The release/iteration that this is planned to be fixed in. Needs to be the version number of the release (e.g. 1.0.1.1) Components This should be a comma-separated list of the Name of the Components the incident is assigned-to. E.g. Component 1, Component 2 Est. Effort The estimated effort associated with the task (entered as a whole number of minutes) Act. Effort The actual effort associated with the task (entered as a whole number of minutes) Rem. Effort The remaining effort associated with the task (entered as a whole number of minutes) CUS-01 -- CUS-30 The thirty (30) custom fields defined in the project. The value entered depends on the type of custom property: - List -- provide the numeric ID of the custom list value (e.g. PV00005 would be entered as just \"5\") - MultiList -- provide a comma-separated list of the numeric IDs of the custom list values (e.g. PV00005 and PV00003 would be entered as just \"5,3\") - Text -- enter the text, include HTML tags if rich-text - Decimal -- enter the number (e.g. 1.0) - Integer -- enter the number (e.g. 2) - Date -- enter the number in the current local time format (e.g. m/d/yyyy for the US, d/m/yyyy for Europe) - User -- enter the ID of the user - Boolean -- Enter either \"True\" or \"False\" Comment The description of a comment that should be appended to the incident. If you want it formatted, you need to add HTML tags such as <b> for bold. Note that this field always appends, so if you want to add two comments, just enter the first value and click [Export], then replace it with the second value and click [Export] Note: the columns that are required are listed in bold type.","title":"Importing/Exporting Incidents"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel/#importingexporting-tasks","text":"To import/export tasks, first you need to click on the \"Tasks\" tab in the Excel sheet: Next if you want to import the list of existing Tasks from SpiraTeam, you should click on the [Clear] icon to first remove the sample information from the spreadsheet, then click [Import] to load the list of existing tasks into the sheet. These items will all have the \"Inc #\" column populated so that the system knows to update them rather than insert them when you subsequently click [Export]. If you want to simply export a list of tasks from a spreadsheet, then you need to either enter the tasks into this specially formatted spreadsheet or cut and paste them in from another existing Excel sheet that you've been using to manage tasks previously. Then click [Export] and the new items will be added to your instance of SpiraTeam. The various columns that can be imported, and the rules for entering data are listed below: Field name Description Task # Stores the ID of the task. Should be left blank for new items being added to SpiraTeam Task Name The name of the task. Task Description The long description of the task. If you want it formatted, you need to add HTML tags such as <b> for bold Status The status of the task. It needs to be one of the values from the dropdown list. Priority The priority of the task. It needs to be one of the values from the dropdown list. Requirement The requirement that this task should be associated with. Needs to be the ID of the requirement (e.g. requirement RQ00005 would be entered as just 5). Owner The user that the task should be assigned to Needs to be the ID of the user (e.g. user US00005 would be entered as just 5) Start Date The date that work on the task is scheduled to start End Date The date that work on the task is scheduled to end Est. Effort The estimated effort associated with the task (entered as a whole number of minutes) Act. Effort The actual effort associated with the task (entered as a whole number of minutes) MS-Excel 2003 Add-In Specific Fields % Complete The completion percentage of the task Release # The release/iteration that this task is scheduled for. Needs to be the ID of the release/iteration (e.g. release RL00005 would be entered as just 5). TEXT-01 -- TEXT-10 The ten (10) custom text properties available in the project LIST-01 -- LIST-10 The ten (10) drop-down list properties available in the project. You need to enter the ID value of the custom property not the display name. E.g. if you have a custom property with ID - PV00005 you would enter just 5 in these boxes. **MS-Excel 2007 Add-In Specific Fields** Rem. Effort The remaining effort associated with the task (entered as a whole number of minutes) Release # The release/iteration that this task is scheduled for. Needs to be the ID of the release/iteration (e.g. release RL00005 would be entered as just 5). TEXT-01 -- TEXT-10 The ten (10) custom text properties available in the project LIST-01 -- LIST-10 The ten (10) drop-down list properties available in the project. You need to enter the ID value of the custom property not the display name. E.g. if you have a custom property with ID - PV00005 you would enter just 5 in these boxes. MS-Excel 2010 Add-In Specific Fields Type The type of the task. It needs to be one of the values from the dropdown list. Rem. Effort The remaining effort associated with the task (entered as a whole number of minutes) Release Version The release/iteration that this task is scheduled for. Needs to be the version number of the release (e.g. 1.0.1.1) CUS-01 -- CUS-30 The thirty (30) custom fields defined in the project. The value entered depends on the type of custom property: - List -- provide the numeric ID of the custom list value (e.g. PV00005 would be entered as just \"5\") - MultiList -- provide a comma-separated list of the numeric IDs of the custom list values (e.g. PV00005 and PV00003 would be entered as just \"5,3\") - Text -- enter the text, include HTML tags if rich-text - Decimal -- enter the number (e.g. 1.0) - Integer -- enter the number (e.g. 2) - Date -- enter the number in the current local time format (e.g. m/d/yyyy for the US, d/m/yyyy for Europe) - User -- enter the ID of the user - Boolean -- Enter either \"True\" or \"False\" Comment The description of a comment that should be appended to the task. If you want it formatted, you need to add HTML tags such as <b> for bold. Note that this field always appends, so if you want to add two comments, just enter the first value and click [Export], then replace it with the second value and click [Export] Note: the columns that are required are listed in bold type.","title":"Importing/Exporting Tasks"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel/#execute-test-cases-offline","text":"As well as being able to import/export data, you can also use the import spreadsheet to execute test cases while disconnected from your network and then upload the results to SpiraTeam as a single batch. To do this, when connected to the network, connect to the server using the Add-In [Connect] icon, select the project and \"Test Runs\", then click on the \"Test Runs\" in the spreadsheet: Now you should click on the [Import] button, and the Add-In will load the list of Test Cases (and in the case of the MS-Office 2007/2010 Add-Ins, any Test Sets as well) that are currently assigned to you together with open cells (marked in green) that you can use to record the actual results of testing: You can now disconnect from the network and perform the testing activities offline. Enter the following entries into the spreadsheet: Status The execution status of that test step. It should be selected drop the dropdown list. The allowed values are: Failed / Passed / Blocked / Caution. Actual Result The long description of the actual result experienced during testing. If you want it formatted, you need to add HTML tags such as <b> for bold Incident Name If you want to log an incident associated with the test failure, enter the name of the incident here. The description of the incident will be pre-populated with the Test Step Description, Expected Result, and Actual Result. Once you have finished testing and are connected back on the network, just click on the [Connect] icon to have the Add-In connect with the SpiraTeam server, choose the project name and \"Test Runs\" and then click [Export]. The test results will now be uploaded to the server. Note: If you are using the MS-Excel 2007/2010 Add-Ins, you will also see the Test Set ID, Release ID and TX TC ID (Test-Set, Test Case unique ID). You can manually set a Release ID on test cases that were not part of a test set.","title":"Execute Test Cases Offline"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel/#importing-custom-property-list-values","text":"To import/export custom property values (for list custom properties), first you need to click on the \"Custom Values\" tab in the Excel sheet: Next if you want to import the list of existing custom list values from SpiraTeam, you should click on the [Clear] icon to first remove the sample information from the spreadsheet, then click [Import] to load the list of existing custom list values into the sheet. These items will all have the \"Value #\" column populated so that the system knows to update them rather than insert them when you subsequently click [Export]. If you want to export a list of custom list values from a spreadsheet you first need to make sure that a list exists in the right template in Spira. You can only edit a list that already exists in Spira. Then you need to either enter the custom list ID and value name into this specially formatted spreadsheet or cut and paste them in from another existing Excel sheet that you've been using to manage the values previously. Then click [Export] and the new items will be added to your instance of SpiraTeam. NOTE: These values are initially added as inactive on the list. You will need to log into Spira to make the list values required active. The various columns that can be imported, and the rules for entering data are listed below: Field name Description Value # Stores the ID of the custom list value. Should be left blank for new items being added to SpiraTeam Custom List # The ID of the custom list that the value is being added to (with the CL prefix removed). For example custom list CL00005 would be entered as just \"5\" Custom Value Name The name of the custom value that you are inserting/updating in SpiraTeam Note: the columns that are required are listed in bold type.","title":"Importing Custom Property List Values"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel/#changing-the-importexport-options","text":"In the MS-Excel 2007 and 2010 Add-Ins, you can change how the import/export works by clicking on the Options icon. This brings up the Options dialog box:","title":"Changing the Import/Export Options"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel/#rich-text-setting","text":"When you import artifacts from SpiraTeam into MS-Excel, if they have a formatted description, by default all the HTML tags that are used to describe the formatting will be loaded into the Excel cell. This is useful if you plan on making changes and then updating SpiraTeam (since it will preserve the formatting). However if you want to be able to more easily read the descriptions in Excel and do not plan on updating SpiraTeam, you can select the option to Remove the Formatting, which will convert the descriptions to plain-text before loading them into Excel.","title":"Rich Text Setting"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Excel/#test-run-date-setting","text":"If you set a date for the 'Test Run Date', the importer will use that date to be the date the test runs were executed on, rather than the current date/time, which is used by default.","title":"Test Run Date Setting"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Project/","text":"Importing from Microsoft Project The web-based interface of SpiraTeam\u00ae is ideal for creating and managing requirements, releases/iterations and tasks for a new project. However when migrating requirements and tasks from an existing project, it is useful to be able to load in an existing project plan in batch and have SpiraTeam be able to interpret the data. To simplify this task, SpiraTeam\u00ae comes with a Microsoft Project Add-In that can export requirements, releases and tasks from a populated MS-Project plan into SpiraTeam\u00ae. In addition, the Add-In allows you to import those same artifacts back into the MS-Project plan to make batch updates which can then be used to update the master copies on the server. Note that this guide refers to SpiraTeam\u00ae, but the MS-Project Add-In can be used with SpiraPlan\u00ae as well. Installing the Microsoft Project Add-In The first thing you need to do is to go to the \"Add-Ons and Downloads\" page of the Inflectra Website (it can be found in the SpiraPlan or SpiraTeam sections), and download the MS-Office Add-Ins installation package. There are separate packages for the following versions of MS Office: MS-Office 2003 Add-Ins -- these are compatible with Microsoft Office 2003 and 2007. They can connect to SpiraTeam v2.3 or later. They also require Microsoft .NET 3.5. MS-Office 2007 Add-Ins -- these are compatible with Microsoft Office 2007 and 2010. They can connect to SpiraTeam v3.0 or later. They also require Microsoft .NET 4.0. MS-Office 2010 Add-Ins -- these are compatible with Microsoft Office 2010 and all later versions. They can connect to SpiraTeam v5.0 or later. They also require Microsoft .NET 4.0. This installation package will install the add-ins for Microsoft Excel, Word and Project at the same time. If you don't have the correct version of Microsoft .NET installed or some of the necessary prerequisites, you will be given the opportunity to install them when you first run the installation package. Once you have the MS-Project Add-In installed, the second thing you may want to download is the SampleProjectFile.mpp MS-Project plan. This project file contains a fully-populated project plan and is a good sample to test the import/export before using a real project plan. Once you have downloaded the project file, please double-click on it to open it up in MS-Project. You will notice that there is an additional toolbar displayed in MS-Project which is used for importing/exporting data to/from SpiraTeam: If you are using the MS-Project 2010 Add-In, you will see a modified version of the toolbar that makes use of the MS-Office Ribbon: This toolbar allows you to connect to SpiraTeam, and perform the import/export. The process for using this toolbar is described below: Connecting to SpiraTeam\u00ae The first thing you need to do is to click on the [Connect] button to specify the information used to connect to your instance of SpiraTeam: Please enter the following information into the dialog box: Spira URL: Please enter the web address that you use to access SpiraTeam\u00ae in your browser. This is usually of the form http://<hostname>/SpiraTeam. Make sure that you remove any suffixes from the address (e.g. Default.aspx). User Name: Please enter the username that you use for logging in to SpiraTeam Password: Please enter the password that you use for logging in to SpiraTeam Remember Password: If you are using this Add-In on a private computer, you can check this option to have the system remember your credentials locally. Please do not use this option on a public computer and it will compromise the security of your SpiraTeam installation. Once you have entered the necessary information, please click [Connect] to authenticate with the server. If the login information is invalid, you will see an error message appear, otherwise you will be connected and the list of projects and artifacts will be populated. If you want to end your session, you should just click the [Disconnect] button and the Add-In will close your connection. Choosing the Project Once you have successfully connected to SpiraTeam, you should now choose the appropriate Project in the system that you will be importing / exporting to / from: Or Once you have selected the project, there are three buttons that you can now use: Import: Clicking this button will retrieve the data from the SpiraTeam server and use that to populate the MS-Project file. Export: Clicking this button will take the data in the currently opened MS-Project file and use it to add/update items in SpiraTeam. Clear: This button allows you to quickly clear the data in the current Project file so that you can import a clean version from the server. Importing/Exporting Data The MS-Project Add-In is capable of either importing data from SpiraTeam into the project file or exporting data from the project file to SpiraTeam. However it is important to understand how the system knows whether to add new items to SpiraTeam or whether to update existing items: If you start with a blank MS-Project file and enter tasks into it, they will not have a value set on their Text1 custom field. When you perform an Export, it will add these as new items in SpiraTeam If you start with a blank import MS-Project file and choose to Import data from SpiraTeam, those tasks imported will include the ID of the item in SpiraTeam as their Text1 custom field. You can either update those tasks or add new tasks in between. Any tasks that have the Text1 custom property populated will be updated in SpiraTeam when you choose Export, whereas any newly added tasks will be inserted in SpiraTeam. Importing from SpiraTeam The Add-In will import the tasks from SpiraTeam into the MS-Project file based on the following rules: Any Releases/Iterations in SpiraTeam will be added as zero-effort (milestone) tasks in the MS-Project plan. Any Requirements in SpiraTeam that have at least one task under them, will be added as summary tasks in the MS-Project plan. Their indentation in the project plan will match the requirements' indentation in SpiraTeam Any Tasks in SpiraTeam will be added as tasks in the MS-Project plan. The tasks will be nested directly under their parent requirement's equivalent task in MS-Project. Any Requirements in SpiraTeam that have no tasks under them, will be added as zero-effort (milestone) tasks in the MS-Project plan. Their indentation in the project plan will match the requirements' indentation in SpiraTeam Exporting to SpiraTeam The Add-In will export the tasks in the MS-Project file into SpiraTeam based on the following rules: Any summary tasks or top-level tasks in the MS-Project file will be treated as Requirements when being exported to SpiraTeam. Any non-summary tasks that have zero-effort (milestones) that are not originally Releases/Iterations will be treated as Requirements when being exported to SpiraTeam. Any non-summary tasks that are NOT at the top-level will be treated as Tasks when being exported to SpiraTeam. They will be attached to the requirement that is their parent task in MS-Project. The export function does not update any of the Release/Iteration items. They need to be updated in SpiraTeam. If you want to prevent an MS-Project Task from being imported into SpiraTeam simply set the value of its Text1 column to the text \"IGNORE\" (without the quotes). Be careful when you indent/outdent a task in MS-Project. If you take a non-summary item (which would be represented by a Task in SpiraTeam) and make it a summary item by adding child tasks, when you next run Export, it will get added as a new Requirement in SpiraTeam, with the child tasks added as Tasks. The old task will still remain in SpiraTeam and will need to be manually removed.","title":"Microsoft Project"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Project/#importing-from-microsoft-project","text":"The web-based interface of SpiraTeam\u00ae is ideal for creating and managing requirements, releases/iterations and tasks for a new project. However when migrating requirements and tasks from an existing project, it is useful to be able to load in an existing project plan in batch and have SpiraTeam be able to interpret the data. To simplify this task, SpiraTeam\u00ae comes with a Microsoft Project Add-In that can export requirements, releases and tasks from a populated MS-Project plan into SpiraTeam\u00ae. In addition, the Add-In allows you to import those same artifacts back into the MS-Project plan to make batch updates which can then be used to update the master copies on the server. Note that this guide refers to SpiraTeam\u00ae, but the MS-Project Add-In can be used with SpiraPlan\u00ae as well.","title":"Importing from Microsoft Project"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Project/#installing-the-microsoft-project-add-in","text":"The first thing you need to do is to go to the \"Add-Ons and Downloads\" page of the Inflectra Website (it can be found in the SpiraPlan or SpiraTeam sections), and download the MS-Office Add-Ins installation package. There are separate packages for the following versions of MS Office: MS-Office 2003 Add-Ins -- these are compatible with Microsoft Office 2003 and 2007. They can connect to SpiraTeam v2.3 or later. They also require Microsoft .NET 3.5. MS-Office 2007 Add-Ins -- these are compatible with Microsoft Office 2007 and 2010. They can connect to SpiraTeam v3.0 or later. They also require Microsoft .NET 4.0. MS-Office 2010 Add-Ins -- these are compatible with Microsoft Office 2010 and all later versions. They can connect to SpiraTeam v5.0 or later. They also require Microsoft .NET 4.0. This installation package will install the add-ins for Microsoft Excel, Word and Project at the same time. If you don't have the correct version of Microsoft .NET installed or some of the necessary prerequisites, you will be given the opportunity to install them when you first run the installation package. Once you have the MS-Project Add-In installed, the second thing you may want to download is the SampleProjectFile.mpp MS-Project plan. This project file contains a fully-populated project plan and is a good sample to test the import/export before using a real project plan. Once you have downloaded the project file, please double-click on it to open it up in MS-Project. You will notice that there is an additional toolbar displayed in MS-Project which is used for importing/exporting data to/from SpiraTeam: If you are using the MS-Project 2010 Add-In, you will see a modified version of the toolbar that makes use of the MS-Office Ribbon: This toolbar allows you to connect to SpiraTeam, and perform the import/export. The process for using this toolbar is described below:","title":"Installing the Microsoft Project Add-In"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Project/#connecting-to-spirateam","text":"The first thing you need to do is to click on the [Connect] button to specify the information used to connect to your instance of SpiraTeam: Please enter the following information into the dialog box: Spira URL: Please enter the web address that you use to access SpiraTeam\u00ae in your browser. This is usually of the form http://<hostname>/SpiraTeam. Make sure that you remove any suffixes from the address (e.g. Default.aspx). User Name: Please enter the username that you use for logging in to SpiraTeam Password: Please enter the password that you use for logging in to SpiraTeam Remember Password: If you are using this Add-In on a private computer, you can check this option to have the system remember your credentials locally. Please do not use this option on a public computer and it will compromise the security of your SpiraTeam installation. Once you have entered the necessary information, please click [Connect] to authenticate with the server. If the login information is invalid, you will see an error message appear, otherwise you will be connected and the list of projects and artifacts will be populated. If you want to end your session, you should just click the [Disconnect] button and the Add-In will close your connection.","title":"Connecting to SpiraTeam\u00ae"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Project/#choosing-the-project","text":"Once you have successfully connected to SpiraTeam, you should now choose the appropriate Project in the system that you will be importing / exporting to / from: Or Once you have selected the project, there are three buttons that you can now use: Import: Clicking this button will retrieve the data from the SpiraTeam server and use that to populate the MS-Project file. Export: Clicking this button will take the data in the currently opened MS-Project file and use it to add/update items in SpiraTeam. Clear: This button allows you to quickly clear the data in the current Project file so that you can import a clean version from the server.","title":"Choosing the Project"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Project/#importingexporting-data","text":"The MS-Project Add-In is capable of either importing data from SpiraTeam into the project file or exporting data from the project file to SpiraTeam. However it is important to understand how the system knows whether to add new items to SpiraTeam or whether to update existing items: If you start with a blank MS-Project file and enter tasks into it, they will not have a value set on their Text1 custom field. When you perform an Export, it will add these as new items in SpiraTeam If you start with a blank import MS-Project file and choose to Import data from SpiraTeam, those tasks imported will include the ID of the item in SpiraTeam as their Text1 custom field. You can either update those tasks or add new tasks in between. Any tasks that have the Text1 custom property populated will be updated in SpiraTeam when you choose Export, whereas any newly added tasks will be inserted in SpiraTeam.","title":"Importing/Exporting Data"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Project/#importing-from-spirateam","text":"The Add-In will import the tasks from SpiraTeam into the MS-Project file based on the following rules: Any Releases/Iterations in SpiraTeam will be added as zero-effort (milestone) tasks in the MS-Project plan. Any Requirements in SpiraTeam that have at least one task under them, will be added as summary tasks in the MS-Project plan. Their indentation in the project plan will match the requirements' indentation in SpiraTeam Any Tasks in SpiraTeam will be added as tasks in the MS-Project plan. The tasks will be nested directly under their parent requirement's equivalent task in MS-Project. Any Requirements in SpiraTeam that have no tasks under them, will be added as zero-effort (milestone) tasks in the MS-Project plan. Their indentation in the project plan will match the requirements' indentation in SpiraTeam","title":"Importing from SpiraTeam"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Project/#exporting-to-spirateam","text":"The Add-In will export the tasks in the MS-Project file into SpiraTeam based on the following rules: Any summary tasks or top-level tasks in the MS-Project file will be treated as Requirements when being exported to SpiraTeam. Any non-summary tasks that have zero-effort (milestones) that are not originally Releases/Iterations will be treated as Requirements when being exported to SpiraTeam. Any non-summary tasks that are NOT at the top-level will be treated as Tasks when being exported to SpiraTeam. They will be attached to the requirement that is their parent task in MS-Project. The export function does not update any of the Release/Iteration items. They need to be updated in SpiraTeam. If you want to prevent an MS-Project Task from being imported into SpiraTeam simply set the value of its Text1 column to the text \"IGNORE\" (without the quotes). Be careful when you indent/outdent a task in MS-Project. If you take a non-summary item (which would be represented by a Task in SpiraTeam) and make it a summary item by adding child tasks, when you next run Export, it will get added as a new Requirement in SpiraTeam, with the child tasks added as Tasks. The old task will still remain in SpiraTeam and will need to be manually removed.","title":"Exporting to SpiraTeam"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Word/","text":"Importing from Microsoft Word The web-based interface of SpiraTeam\u00ae is ideal for creating and managing requirements, test cases and incidents for a new project. However often an organization will often have existing requirements documentation and test case templates in Microsoft Word format that need to get easily migrated into SpiraTeam. To simplify this task, SpiraTeam\u00ae comes with a Microsoft Word Add-In that can export requirements and test cases from a populated Word document into SpiraTeam\u00ae. Note that this guide refers to SpiraTeam\u00ae, but the Word Add-In can be used with SpiraTest\u00ae and SpiraPlan\u00ae as well. The only difference is that the Test Case import functionality will not be applicable for SpiraPlan\u00ae users. 10Installing the Microsoft Word Add-In The first thing you need to do is to go to the \"Add-Ons and Downloads\" page of the Inflectra Website (it can be found in the SpiraTest, SpiraPlan or SpiraTeam sections), and download the MS-Office Add-Ins installation package. There are separate packages for the following versions of MS Office: MS-Office 2003 Add-Ins -- these are compatible with Microsoft Office 2003 and 2007. They can connect to SpiraTeam v2.3 or later. They also require Microsoft .NET 3.5. MS-Office 2007 Add-Ins -- these are compatible with Microsoft Office 2007 and 2010. They can connect to SpiraTeam v3.0 or later. They also require Microsoft .NET 4.0. MS-Office 2010 Add-Ins -- these are compatible with Microsoft Office 2010 and later. They can connect to SpiraTeam v5.0 or later. They also require Microsoft .NET 4.0. This installation package will install the add-ins for Microsoft Excel, Word and Project at the same time. If you don't have the correct version of Microsoft .NET installed or some of the necessary prerequisites, you will be given the opportunity to install them when you first run the installation package. Once you have the Word Add-In installed, the second thing you'll need to download is the SampleWordDocument document. This sample document contains some example requirements and test cases that be exported into SpiraTeam. Also the documents make good templates if you're looking for a way to standardize the import of requirements and test cases. There are two versions of the document available - SampleWordDocument.doc for Word 2003 and SampleWordDocument.docx for Word 2007 and later. Once you have downloaded the template, please double-click on it to open it up in MS-Word. You will notice that there is an additional toolbar displayed in Word which is used for exporting requirements and test cases to SpiraTeam: If you are using the MS-Word 2007 or 2010 Add-In, you will see a modified version of the toolbar that makes use of the MS-Office Ribbon: This toolbar allows you to connect to SpiraTeam, and perform the export. The process for using this toolbar is described below: Connecting to SpiraTeam\u00ae The first thing you need to do is to click on the [Connect] button to specify the information used to connect to your instance of SpiraTeam: Please enter the following information into the dialog box: Spira URL: Please enter the web address that you use to access SpiraTeam\u00ae in your browser. This is usually of the form http://<hostname>/SpiraTeam. Make sure that you remove any suffixes from the address (e.g. Default.aspx). User Name: Please enter the username that you use for logging in to SpiraTeam Password: Please enter the password that you use for logging in to SpiraTeam Remember Password: If you are using this Add-In on a private computer, you can check this option to have the system remember your credentials locally. Please do not use this option on a public computer and it will compromise the security of your SpiraTeam installation. Once you have entered the necessary information, please click [Connect] to authenticate with the server. If the login information is invalid, you will see an error message appear, otherwise you will be connected and the list of projects and artifacts will be populated. If you want to end your session, you should just click the [Disconnect] button and the Add-In will close your connection. Choosing the Project and Artifact Once you have successfully connected to SpiraTeam, you should now choose the appropriate Project and Artifact in the system that you will be importing / exporting: Or Once you have selected the project and artifact, there are two buttons that you can now use: Export: Clicking this button will take the currently selected data in the document and use it to add new items in SpiraTeam. Style Mappings: This button allows you to change the parameters used by the Add-In when scanning the Word document to know where each requirement, test case and test step beings and ends. The parameters selection varies by the type of information being exported, and will be discussed in the relevant artifact section below: Exporting Requirements into SpiraTeam To export requirements, first you need to open up the MS-Word document that contains the requirements to be exported. Then you need to click on the \"Style Mappings\" icon to display the style mapping configuration dialog box: This dialog box allows you to tell the Add-In which styles are being used in the document to describe each level of Requirements in the hierarchy. When you run the Export, the Add-In will examine each paragraph in the document, and any item that matches one of these styles will be considered the start of a new requirement, and its indentation level will be based on the appropriate style. Once you have verified that the styles match those used in your document, highlight the areas of the document that you wish to import and click the [Import] button. Once you have done this, the Add-In will scan the selected portions of the document and export the requirements into the system. During the export, the Add-In uses the following rules for dealing with the content: The text that matches the selected style will be loaded as the Name field of the requirement Any text located between the selected styles will be loaded into the Description field of the requirement. The Add-In will attempt to match the formatted used in the Word document. However because of some differences between MS-Word and HTML, it may not be exact. Any embedded images will be added to the requirement as a file Attachment, with an embedded image tag added to Description field Exporting Test Cases into SpiraTeam To export test cases (and their test steps), first you need to open up the MS-Word document that contains the test cases to be exported. Then you need to click on the \"Style Mappings\" icon to display the style mapping configuration dialog box: This dialog box allows you to tell the Add-In which styles are being used in the document to denote the name of the Test Folder and the name of the Test Case. For the test steps, the Add-In currently requires that they be organized in tables, with each column in the table being used consistently to describe one of the three Test Step fields. For the import to work correct, your tables need to have at least three (3) columns so that it can map them correctly. You can use the same column multiple times (e.g. the contents of column 2 would be imported into both the expected result and sample data). Once you have verified that the styles and table columns match those used in your document, highlight the areas of the document that you wish to import and click the [Import] button. Once you have done this, the Add-In will scan the selected portions of the document and export the test cases and test steps into the system. During the export, the Add-In uses the following rules for dealing with the content: The text that matches the selected style will be loaded as the Name field of the Test Folder or Test Case Any text located between the selected styles will be loaded into the Description field of the Test Case. The Add-In will attempt to match the formatted used in the Word document. However because of some differences between MS-Word and HTML, it may not be exact. Any embedded images will be added to the Test Case as a file Attachment, with an embedded image tag added to Description field Any tables located between the selected styles will be treated as the Test Steps belonging to the previous test case. The fields for the Test Steps will be populated based on the index of the column. Any text located in the table cells into the appropriate field of the Test Step. The Add-In will attempt to match the formatted used in the Word document. However because of some differences between MS-Word and HTML, it may not be exact. The first row of the table is assumed to be a header row , so if you are seeing the first step of your document being omitted, it means that you need to add a header rows. Error Reporting If there is an error during the import of either requirements or test cases, the error message will be stored in a text file called Spira_WordImport.log that can be found on the desktop of the user running the import:","title":"Microsoft Word"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Word/#importing-from-microsoft-word","text":"The web-based interface of SpiraTeam\u00ae is ideal for creating and managing requirements, test cases and incidents for a new project. However often an organization will often have existing requirements documentation and test case templates in Microsoft Word format that need to get easily migrated into SpiraTeam. To simplify this task, SpiraTeam\u00ae comes with a Microsoft Word Add-In that can export requirements and test cases from a populated Word document into SpiraTeam\u00ae. Note that this guide refers to SpiraTeam\u00ae, but the Word Add-In can be used with SpiraTest\u00ae and SpiraPlan\u00ae as well. The only difference is that the Test Case import functionality will not be applicable for SpiraPlan\u00ae users.","title":"Importing from Microsoft Word"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Word/#10installing-the-microsoft-word-add-in","text":"The first thing you need to do is to go to the \"Add-Ons and Downloads\" page of the Inflectra Website (it can be found in the SpiraTest, SpiraPlan or SpiraTeam sections), and download the MS-Office Add-Ins installation package. There are separate packages for the following versions of MS Office: MS-Office 2003 Add-Ins -- these are compatible with Microsoft Office 2003 and 2007. They can connect to SpiraTeam v2.3 or later. They also require Microsoft .NET 3.5. MS-Office 2007 Add-Ins -- these are compatible with Microsoft Office 2007 and 2010. They can connect to SpiraTeam v3.0 or later. They also require Microsoft .NET 4.0. MS-Office 2010 Add-Ins -- these are compatible with Microsoft Office 2010 and later. They can connect to SpiraTeam v5.0 or later. They also require Microsoft .NET 4.0. This installation package will install the add-ins for Microsoft Excel, Word and Project at the same time. If you don't have the correct version of Microsoft .NET installed or some of the necessary prerequisites, you will be given the opportunity to install them when you first run the installation package. Once you have the Word Add-In installed, the second thing you'll need to download is the SampleWordDocument document. This sample document contains some example requirements and test cases that be exported into SpiraTeam. Also the documents make good templates if you're looking for a way to standardize the import of requirements and test cases. There are two versions of the document available - SampleWordDocument.doc for Word 2003 and SampleWordDocument.docx for Word 2007 and later. Once you have downloaded the template, please double-click on it to open it up in MS-Word. You will notice that there is an additional toolbar displayed in Word which is used for exporting requirements and test cases to SpiraTeam: If you are using the MS-Word 2007 or 2010 Add-In, you will see a modified version of the toolbar that makes use of the MS-Office Ribbon: This toolbar allows you to connect to SpiraTeam, and perform the export. The process for using this toolbar is described below:","title":"10Installing the Microsoft Word Add-In"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Word/#connecting-to-spirateam","text":"The first thing you need to do is to click on the [Connect] button to specify the information used to connect to your instance of SpiraTeam: Please enter the following information into the dialog box: Spira URL: Please enter the web address that you use to access SpiraTeam\u00ae in your browser. This is usually of the form http://<hostname>/SpiraTeam. Make sure that you remove any suffixes from the address (e.g. Default.aspx). User Name: Please enter the username that you use for logging in to SpiraTeam Password: Please enter the password that you use for logging in to SpiraTeam Remember Password: If you are using this Add-In on a private computer, you can check this option to have the system remember your credentials locally. Please do not use this option on a public computer and it will compromise the security of your SpiraTeam installation. Once you have entered the necessary information, please click [Connect] to authenticate with the server. If the login information is invalid, you will see an error message appear, otherwise you will be connected and the list of projects and artifacts will be populated. If you want to end your session, you should just click the [Disconnect] button and the Add-In will close your connection.","title":"Connecting to SpiraTeam\u00ae"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Word/#choosing-the-project-and-artifact","text":"Once you have successfully connected to SpiraTeam, you should now choose the appropriate Project and Artifact in the system that you will be importing / exporting: Or Once you have selected the project and artifact, there are two buttons that you can now use: Export: Clicking this button will take the currently selected data in the document and use it to add new items in SpiraTeam. Style Mappings: This button allows you to change the parameters used by the Add-In when scanning the Word document to know where each requirement, test case and test step beings and ends. The parameters selection varies by the type of information being exported, and will be discussed in the relevant artifact section below:","title":"Choosing the Project and Artifact"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Word/#exporting-requirements-into-spirateam","text":"To export requirements, first you need to open up the MS-Word document that contains the requirements to be exported. Then you need to click on the \"Style Mappings\" icon to display the style mapping configuration dialog box: This dialog box allows you to tell the Add-In which styles are being used in the document to describe each level of Requirements in the hierarchy. When you run the Export, the Add-In will examine each paragraph in the document, and any item that matches one of these styles will be considered the start of a new requirement, and its indentation level will be based on the appropriate style. Once you have verified that the styles match those used in your document, highlight the areas of the document that you wish to import and click the [Import] button. Once you have done this, the Add-In will scan the selected portions of the document and export the requirements into the system. During the export, the Add-In uses the following rules for dealing with the content: The text that matches the selected style will be loaded as the Name field of the requirement Any text located between the selected styles will be loaded into the Description field of the requirement. The Add-In will attempt to match the formatted used in the Word document. However because of some differences between MS-Word and HTML, it may not be exact. Any embedded images will be added to the requirement as a file Attachment, with an embedded image tag added to Description field","title":"Exporting Requirements into SpiraTeam"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Word/#exporting-test-cases-into-spirateam","text":"To export test cases (and their test steps), first you need to open up the MS-Word document that contains the test cases to be exported. Then you need to click on the \"Style Mappings\" icon to display the style mapping configuration dialog box: This dialog box allows you to tell the Add-In which styles are being used in the document to denote the name of the Test Folder and the name of the Test Case. For the test steps, the Add-In currently requires that they be organized in tables, with each column in the table being used consistently to describe one of the three Test Step fields. For the import to work correct, your tables need to have at least three (3) columns so that it can map them correctly. You can use the same column multiple times (e.g. the contents of column 2 would be imported into both the expected result and sample data). Once you have verified that the styles and table columns match those used in your document, highlight the areas of the document that you wish to import and click the [Import] button. Once you have done this, the Add-In will scan the selected portions of the document and export the test cases and test steps into the system. During the export, the Add-In uses the following rules for dealing with the content: The text that matches the selected style will be loaded as the Name field of the Test Folder or Test Case Any text located between the selected styles will be loaded into the Description field of the Test Case. The Add-In will attempt to match the formatted used in the Word document. However because of some differences between MS-Word and HTML, it may not be exact. Any embedded images will be added to the Test Case as a file Attachment, with an embedded image tag added to Description field Any tables located between the selected styles will be treated as the Test Steps belonging to the previous test case. The fields for the Test Steps will be populated based on the index of the column. Any text located in the table cells into the appropriate field of the Test Step. The Add-In will attempt to match the formatted used in the Word document. However because of some differences between MS-Word and HTML, it may not be exact. The first row of the table is assumed to be a header row , so if you are seeing the first step of your document being omitted, it means that you need to add a header rows.","title":"Exporting Test Cases into SpiraTeam"},{"location":"Migration-and-Integration/Importing-from-Microsoft-Word/#error-reporting","text":"If there is an error during the import of either requirements or test cases, the error message will be stored in a text file called Spira_WordImport.log that can be found on the desktop of the user running the import:","title":"Error Reporting"},{"location":"Migration-and-Integration/Migrating-from-HP-ALM/","text":"Migrating from HP ALM This section outlines how to use the included Migration Tool for importing Releases, Hosts, Requirements, Test Cases, Test Runs and Incidents from HP ALM (formerly known as HP Quality Center). Installing the HP ALM Migration Tool This section outlines how to install the migration tool for HP ALM onto a workstation so that you can then migrate whole projects from HP ALM to either SpiraTest or SpiraTeam (hereafter referred to as SpiraTest). It assumes that you already have a working installation of SpiraTest v4.0 or later and a working version of HP ALM 11.5 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v4.0 before trying to migrate projects. If you are using HP QualityCenter 10.0 or older, please refer to the migration tool for this version in Using the HP QualityCenter Migration Tool . The Windows installation package can be downloaded from the 'Add-Ons & Downloads\" section of the Inflectra website. Once you have obtained the Windows Installer package, simply double-click on the package to begin the installation wizard which should display the following welcome page: Click the <Next> button, accept the software license, then click <Next> again to choose the folder to install the migration tool to: Choose the folder to install to, and then decide whether the application should be accessible by all users on the workstation or just the current user. Then click the <Install> button to start the installation process. It will confirm if you want to proceed, click <Next> then wait for it to finish. Using the HP QualityCenter Migration Tool Now that you have installed the migration tool, you can launch it at any time by going to Start > Programs > Inflectra > SpiraTest > Tools > HP ALM Importer. This will launch the migration tool application itself: The first thing you need to do is to enter the URL for the instance of HP ALM that you want to import the information from (typically of the form http://<server name>/qcbin) together with a valid username and password. Once you have entered this information, click the <Authenticate> button and the list of possible domains and projects will be populated. Select the HP ALM domain and project that you want to import from and click the <Login> button. Assuming that the user name selected has permission to access this project, you will be prompted with a message box indicating that the login was successful. Now choose the types of artifact you want to import and then click the <Next> button to move to the next page in the import wizard: This page allows you to enter the URL, user name and password that you want to use to access the instance of SpiraTest that you want to import to and click <Login>. Typically the URL is of the form (http://<server name>/SpiraTest). The version of the importer being used must be compatible with the version of SpiraTest you're importing into; if not you will receive an error message. In addition, you need to enter the default password for all users that the importer will create in SpiraTest. You need to make sure that this password meets the minimum complexity requirements of your SpiraTest installation or the import will fail with an error message indicating the password is not allowed. Assuming that the login was successful, click the <Start Import> button to actually begin the process of importing the various artifacts from HP ALM into SpiraTest. Note that the importer will automatically create a new project in SpiraTest to hold all the artifacts with the same name as that used in HP ALM. During the import process, as each of the types of artifact are imported, the progress display will change (as illustrated above). Once the import has finished, you will receive a message to that effect and the <Done> button will be enabled. Clicking this button closed the importer. You should now log into SpiraTest using the same user name and password that was used for the import to view the imported project. The migration tool will import the following artifacts: Custom Properties and Custom Lists Users (but not their roles and permissions) Releases Requirements Automation Hosts Test Cases and their associated manual design steps (but not any automated test scripts) Test Runs and their associated manual test steps Test Sets and the association with the test cases Defects, together with their associated lists of priorities and statuses The coverage relationship between requirements and test cases The linkages between any defects and test runs Any attachments associated with the requirements, test cases, test sets or design steps. Note: Once you have migrated a project into SpiraTest you will have the definitions of incident priorities and statuses from both SpiraTest and HP ALM (this is because HP ALM doesn't use the same codes as SpiraTest, so they will be imported). You should go back in to the Administration screen and make all the standard SpiraTest statuses and priorities inactive, and then create a new incident workflow using the imported HP ALM statuses.","title":"HP ALM"},{"location":"Migration-and-Integration/Migrating-from-HP-ALM/#migrating-from-hp-alm","text":"This section outlines how to use the included Migration Tool for importing Releases, Hosts, Requirements, Test Cases, Test Runs and Incidents from HP ALM (formerly known as HP Quality Center).","title":"Migrating from HP ALM"},{"location":"Migration-and-Integration/Migrating-from-HP-ALM/#installing-the-hp-alm-migration-tool","text":"This section outlines how to install the migration tool for HP ALM onto a workstation so that you can then migrate whole projects from HP ALM to either SpiraTest or SpiraTeam (hereafter referred to as SpiraTest). It assumes that you already have a working installation of SpiraTest v4.0 or later and a working version of HP ALM 11.5 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v4.0 before trying to migrate projects. If you are using HP QualityCenter 10.0 or older, please refer to the migration tool for this version in Using the HP QualityCenter Migration Tool . The Windows installation package can be downloaded from the 'Add-Ons & Downloads\" section of the Inflectra website. Once you have obtained the Windows Installer package, simply double-click on the package to begin the installation wizard which should display the following welcome page: Click the <Next> button, accept the software license, then click <Next> again to choose the folder to install the migration tool to: Choose the folder to install to, and then decide whether the application should be accessible by all users on the workstation or just the current user. Then click the <Install> button to start the installation process. It will confirm if you want to proceed, click <Next> then wait for it to finish.","title":"Installing the HP ALM Migration Tool"},{"location":"Migration-and-Integration/Migrating-from-HP-ALM/#using-the-hp-qualitycenter-migration-tool","text":"Now that you have installed the migration tool, you can launch it at any time by going to Start > Programs > Inflectra > SpiraTest > Tools > HP ALM Importer. This will launch the migration tool application itself: The first thing you need to do is to enter the URL for the instance of HP ALM that you want to import the information from (typically of the form http://<server name>/qcbin) together with a valid username and password. Once you have entered this information, click the <Authenticate> button and the list of possible domains and projects will be populated. Select the HP ALM domain and project that you want to import from and click the <Login> button. Assuming that the user name selected has permission to access this project, you will be prompted with a message box indicating that the login was successful. Now choose the types of artifact you want to import and then click the <Next> button to move to the next page in the import wizard: This page allows you to enter the URL, user name and password that you want to use to access the instance of SpiraTest that you want to import to and click <Login>. Typically the URL is of the form (http://<server name>/SpiraTest). The version of the importer being used must be compatible with the version of SpiraTest you're importing into; if not you will receive an error message. In addition, you need to enter the default password for all users that the importer will create in SpiraTest. You need to make sure that this password meets the minimum complexity requirements of your SpiraTest installation or the import will fail with an error message indicating the password is not allowed. Assuming that the login was successful, click the <Start Import> button to actually begin the process of importing the various artifacts from HP ALM into SpiraTest. Note that the importer will automatically create a new project in SpiraTest to hold all the artifacts with the same name as that used in HP ALM. During the import process, as each of the types of artifact are imported, the progress display will change (as illustrated above). Once the import has finished, you will receive a message to that effect and the <Done> button will be enabled. Clicking this button closed the importer. You should now log into SpiraTest using the same user name and password that was used for the import to view the imported project. The migration tool will import the following artifacts: Custom Properties and Custom Lists Users (but not their roles and permissions) Releases Requirements Automation Hosts Test Cases and their associated manual design steps (but not any automated test scripts) Test Runs and their associated manual test steps Test Sets and the association with the test cases Defects, together with their associated lists of priorities and statuses The coverage relationship between requirements and test cases The linkages between any defects and test runs Any attachments associated with the requirements, test cases, test sets or design steps. Note: Once you have migrated a project into SpiraTest you will have the definitions of incident priorities and statuses from both SpiraTest and HP ALM (this is because HP ALM doesn't use the same codes as SpiraTest, so they will be imported). You should go back in to the Administration screen and make all the standard SpiraTest statuses and priorities inactive, and then create a new incident workflow using the imported HP ALM statuses.","title":"Using the HP QualityCenter Migration Tool"},{"location":"Migration-and-Integration/Migrating-from-HP-QualityCenter/","text":"Migrating from HP QualityCenter This section outlines how to use the included Migration Tool for importing Requirements, Test Cases, Test Runs and Incidents from HP QualityCenter (formerly known as Mercury TestDirector). Installing the QualityCenter Migration Tool This section outlines how to install the migration tool for QualityCenter onto a workstation so that you can then migrate whole projects from QualityCenter to SpiraTest. It assumes that you already have a working installation of SpiraTest v3.0 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v3.0 before trying to migrate projects. The Windows installation package can be downloaded from the 'Add-Ons & Downloads\" section of the Inflectra website. Once you have obtained the Windows Installer package, simply double-click on the package to begin the installation wizard which should display the following welcome page: Click the <Next> button, accept the software license, then click <Next> again to choose the folder to install the migration tool to: Choose the folder to install to, and then decide whether the application should be accessible by all users on the workstation or just the current user. Then click the <Install> button to start the installation process. It will confirm if you want to proceed, click <Next> then wait for it to finish. Using the HP QualityCenter Migration Tool Now that you have installed the migration tool, you can launch it at any time by going to Start > Programs > SpiraTest > Tools > QualityCenter Importer. This will launch the migration tool application itself: The first thing you need to do is to enter the URL for the instance of HP QualityCenter that you want to import the information from (typically of the form http://<server name>/qcbin) together with a valid username and password. Note that the importer has only been tested against version 9.0 of Quality Center or later. It may not work correctly against previous versions. Once you have entered this information, click the <Authenticate> button and the list of possible domains and projects will be populated. Select the QualityCenter domain and project that you want to import from and click the <Login> button: Assuming that the user name selected has permission to access this project, you will be prompted with a message box indicating that the login was successful. Now choose the types of artifact you want to import and then click the <Next> button to move to the next page in the import wizard: This page allows you to enter the URL, user name and password that you want to use to access the instance of SpiraTest that you want to import to and click <Login>. Typically the URL is of the form (http://<server name>/SpiraTest). The version of the importer being used must be compatible with the version of SpiraTest you're importing into; if not you will receive an error message. Assuming that the login was successful, click the <Start Import> button to actually begin the process of importing the various artifacts from QualityCenter into SpiraTest. Note that the importer will automatically create a new project in SpiraTest to hold all the artifacts with the same name as that used in QualityCenter. During the import process, as each of the types of artifact are imported, the progress display will change (as illustrated above). Once the import has finished, you will receive a message to that effect and the <Done> button will be enabled. Clicking this button closed the importer. You should now log into SpiraTest using the same user name and password that was used for the import to view the imported project. The migration tool will import the following artifacts: Users (but not their roles and permissions) Requirements Test Cases and their associated manual design steps (but not any automated test scripts) Test Runs and their associated manual test steps Test Sets and the association with the test cases Defects, together with their associated lists of priorities and statuses The coverage relationship between requirements and test cases The linkages between any defects and test runs The first ten (10) user-defined fields on each of the above artifact types. Any attachments associated with the requirements, test cases, test sets or design steps. Note: Once you have migrated a project into SpiraTest you will have the definitions of incident priorities and statuses from both SpiraTest and QualityCenter (this is because QualityCenter doesn't use the same codes as SpiraTest, so they will be imported). You should go back in to the Administration screen and make all the SpiraTest statuses and priorities inactive.","title":"HP QualityCenter"},{"location":"Migration-and-Integration/Migrating-from-HP-QualityCenter/#migrating-from-hp-qualitycenter","text":"This section outlines how to use the included Migration Tool for importing Requirements, Test Cases, Test Runs and Incidents from HP QualityCenter (formerly known as Mercury TestDirector).","title":"Migrating from HP QualityCenter"},{"location":"Migration-and-Integration/Migrating-from-HP-QualityCenter/#installing-the-qualitycenter-migration-tool","text":"This section outlines how to install the migration tool for QualityCenter onto a workstation so that you can then migrate whole projects from QualityCenter to SpiraTest. It assumes that you already have a working installation of SpiraTest v3.0 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v3.0 before trying to migrate projects. The Windows installation package can be downloaded from the 'Add-Ons & Downloads\" section of the Inflectra website. Once you have obtained the Windows Installer package, simply double-click on the package to begin the installation wizard which should display the following welcome page: Click the <Next> button, accept the software license, then click <Next> again to choose the folder to install the migration tool to: Choose the folder to install to, and then decide whether the application should be accessible by all users on the workstation or just the current user. Then click the <Install> button to start the installation process. It will confirm if you want to proceed, click <Next> then wait for it to finish.","title":"Installing the QualityCenter Migration Tool"},{"location":"Migration-and-Integration/Migrating-from-HP-QualityCenter/#using-the-hp-qualitycenter-migration-tool","text":"Now that you have installed the migration tool, you can launch it at any time by going to Start > Programs > SpiraTest > Tools > QualityCenter Importer. This will launch the migration tool application itself: The first thing you need to do is to enter the URL for the instance of HP QualityCenter that you want to import the information from (typically of the form http://<server name>/qcbin) together with a valid username and password. Note that the importer has only been tested against version 9.0 of Quality Center or later. It may not work correctly against previous versions. Once you have entered this information, click the <Authenticate> button and the list of possible domains and projects will be populated. Select the QualityCenter domain and project that you want to import from and click the <Login> button: Assuming that the user name selected has permission to access this project, you will be prompted with a message box indicating that the login was successful. Now choose the types of artifact you want to import and then click the <Next> button to move to the next page in the import wizard: This page allows you to enter the URL, user name and password that you want to use to access the instance of SpiraTest that you want to import to and click <Login>. Typically the URL is of the form (http://<server name>/SpiraTest). The version of the importer being used must be compatible with the version of SpiraTest you're importing into; if not you will receive an error message. Assuming that the login was successful, click the <Start Import> button to actually begin the process of importing the various artifacts from QualityCenter into SpiraTest. Note that the importer will automatically create a new project in SpiraTest to hold all the artifacts with the same name as that used in QualityCenter. During the import process, as each of the types of artifact are imported, the progress display will change (as illustrated above). Once the import has finished, you will receive a message to that effect and the <Done> button will be enabled. Clicking this button closed the importer. You should now log into SpiraTest using the same user name and password that was used for the import to view the imported project. The migration tool will import the following artifacts: Users (but not their roles and permissions) Requirements Test Cases and their associated manual design steps (but not any automated test scripts) Test Runs and their associated manual test steps Test Sets and the association with the test cases Defects, together with their associated lists of priorities and statuses The coverage relationship between requirements and test cases The linkages between any defects and test runs The first ten (10) user-defined fields on each of the above artifact types. Any attachments associated with the requirements, test cases, test sets or design steps. Note: Once you have migrated a project into SpiraTest you will have the definitions of incident priorities and statuses from both SpiraTest and QualityCenter (this is because QualityCenter doesn't use the same codes as SpiraTest, so they will be imported). You should go back in to the Administration screen and make all the SpiraTest statuses and priorities inactive.","title":"Using the HP QualityCenter Migration Tool"},{"location":"Migration-and-Integration/Migrating-from-MS-Test-Manager/","text":"Migrating from MS Test Manager This section outlines how to use the free Migration Tool for importing users, test plans, test suites, test cases and test runs from Microsoft Test Manager (MTM) 2010 or later. Installing the MTM Migration Tool This section outlines how to install the migration tool for MTM onto a workstation so that you can then migrate whole projects from MTM into SpiraTest (or SpiraTeam). It assumes that you already have a working installation of SpiraTest v4.0 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v4.0 before trying to migrate projects. The Windows installation package can be downloaded from the 'Add-Ons & Downloads\" section of the Inflectra website. Once you have obtained the Windows Installer package, simply double-click on the package to begin the installation wizard which should display the following welcome page: Click the <Next> button, accept the software license, then click <Next> again to choose the folder to install the migration tool to: Choose the folder to install to, and then decide whether the application should be accessible by all users on the workstation or just the current user. Then click the <Install> button to start the installation process. It will confirm if you want to proceed, click <Next> then wait for it to finish. Using the MTM Migration Tool Now that you have installed the migration tool, you can launch it at any time by going to Start > Programs > SpiraTest > Tools > MTM Importer. This will launch the migration tool application itself: The first thing you need to do is to enter the URL for the instance of Microsoft Team Foundation Server (TFS) that MTM is running on. The URL should include the project collection that you want to import the information from (typically of the form http://server:8080/tfs ) together with a valid username, Windows\u00ae domain and password. Once you have entered this information, click the <Authenticate> button and the list of possible projects will be populated in the Project dropdown list. Select the MTM project that you want to import from and either keep the Test Plan dropdown set to 'All Test Plans' or pick a specific test plan to import. You can also at this point choose which optional items will be imported from MTM (users, test runs, attachments or test sets) -- test cases are always imported. Once you have chosen the project and/or test plan, click the <Next> button to go to the SpiraTest configuration screen. This page allows you to enter the URL, user name and password that you want to use to access the instance of SpiraTest that you want to import to and click <Login>. Typically the URL is of the form (http://<server name>/SpiraTest). The version of the importer being used must be compatible with the version of SpiraTest you're importing into; if not you will receive an error message. Assuming that the login was successful, click the <Start Import> button to actually begin the process of importing the various artifacts from MTM into SpiraTest. Note that the importer will automatically create a new project in SpiraTest to hold all the artifacts with the same name as that used in MTM. During the import process, as each of the types of artifact are imported, the progress display will change (as illustrated above). Once the import has finished, you will receive a message to that effect and the <Done> button will be enabled. Clicking this button closed the importer. You should now log into SpiraTest using the same user name and password that was used for the import to view the imported project. The migration tool will import the following artifacts: Users (but not their roles and permissions) Test Plans and their associated Test Suites Test Cases and their associated steps, including any shared test steps Test Runs and their associated test results Test Sets and the association with the test cases Any attachments associated with the requirements, test cases, test sets or design steps.","title":"MS Test Manager"},{"location":"Migration-and-Integration/Migrating-from-MS-Test-Manager/#migrating-from-ms-test-manager","text":"This section outlines how to use the free Migration Tool for importing users, test plans, test suites, test cases and test runs from Microsoft Test Manager (MTM) 2010 or later.","title":"Migrating from MS Test Manager"},{"location":"Migration-and-Integration/Migrating-from-MS-Test-Manager/#installing-the-mtm-migration-tool","text":"This section outlines how to install the migration tool for MTM onto a workstation so that you can then migrate whole projects from MTM into SpiraTest (or SpiraTeam). It assumes that you already have a working installation of SpiraTest v4.0 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v4.0 before trying to migrate projects. The Windows installation package can be downloaded from the 'Add-Ons & Downloads\" section of the Inflectra website. Once you have obtained the Windows Installer package, simply double-click on the package to begin the installation wizard which should display the following welcome page: Click the <Next> button, accept the software license, then click <Next> again to choose the folder to install the migration tool to: Choose the folder to install to, and then decide whether the application should be accessible by all users on the workstation or just the current user. Then click the <Install> button to start the installation process. It will confirm if you want to proceed, click <Next> then wait for it to finish.","title":"Installing the MTM Migration Tool"},{"location":"Migration-and-Integration/Migrating-from-MS-Test-Manager/#using-the-mtm-migration-tool","text":"Now that you have installed the migration tool, you can launch it at any time by going to Start > Programs > SpiraTest > Tools > MTM Importer. This will launch the migration tool application itself: The first thing you need to do is to enter the URL for the instance of Microsoft Team Foundation Server (TFS) that MTM is running on. The URL should include the project collection that you want to import the information from (typically of the form http://server:8080/tfs ) together with a valid username, Windows\u00ae domain and password. Once you have entered this information, click the <Authenticate> button and the list of possible projects will be populated in the Project dropdown list. Select the MTM project that you want to import from and either keep the Test Plan dropdown set to 'All Test Plans' or pick a specific test plan to import. You can also at this point choose which optional items will be imported from MTM (users, test runs, attachments or test sets) -- test cases are always imported. Once you have chosen the project and/or test plan, click the <Next> button to go to the SpiraTest configuration screen. This page allows you to enter the URL, user name and password that you want to use to access the instance of SpiraTest that you want to import to and click <Login>. Typically the URL is of the form (http://<server name>/SpiraTest). The version of the importer being used must be compatible with the version of SpiraTest you're importing into; if not you will receive an error message. Assuming that the login was successful, click the <Start Import> button to actually begin the process of importing the various artifacts from MTM into SpiraTest. Note that the importer will automatically create a new project in SpiraTest to hold all the artifacts with the same name as that used in MTM. During the import process, as each of the types of artifact are imported, the progress display will change (as illustrated above). Once the import has finished, you will receive a message to that effect and the <Done> button will be enabled. Clicking this button closed the importer. You should now log into SpiraTest using the same user name and password that was used for the import to view the imported project. The migration tool will import the following artifacts: Users (but not their roles and permissions) Test Plans and their associated Test Suites Test Cases and their associated steps, including any shared test steps Test Runs and their associated test results Test Sets and the association with the test cases Any attachments associated with the requirements, test cases, test sets or design steps.","title":"Using the MTM Migration Tool"},{"location":"Migration-and-Integration/Migrating-from-TestLink/","text":"Migrating from TestLink This section outlines how to use the free Migration Tool for importing Projects, Test Suites, Test Cases, and Test Steps from the open source TestLink application into SpiraTest. Installing the TestLink Migration Tool This section outlines how to install the migration tool for TestLink onto a workstation so that you can then migrate whole projects from TestLink to either SpiraTest, SpiraTeam or SpiraPlan (hereafter referred to as SpiraTest). It assumes that you already have a working installation of SpiraTest v5.0 or later and a live instance of TestLink to migrate from. If you have an earlier version of SpiraTest you will need to upgrade to at least v5.0 before trying to migrate projects. The Windows installation package can be downloaded from the 'Add-Ons & Downloads\" section of the Inflectra website. Once you have obtained the Windows Installer package, simply double-click on the package to begin the installation wizard which should display the following welcome page: Click the <Next> button, accept the software license, then click <Next> again to choose the folder to install the migration tool to: Choose the folder to install to, and then decide whether the application should be accessible by all users on the workstation or just the current user. Then click the <Install> button to start the installation process. It will confirm if you want to proceed, click <Next> then wait for it to finish. Using the TestLink Migration Tool Now that you have installed the migration tool, you can launch it at any time by going to Start > Programs > Inflectra > SpiraTest > Tools > TestLink Importer. This will launch the migration tool application itself: The first thing you need to do is to enter the URL for the instance of TestLink that you want to import the information from (typically of the form http://myserver/testlink) together with a valid API Key. If you don't have an API Key, you need to first login to TestLink using your normal username and password, then generate an API on the user profile page: Once you have entered this information, click the <Authenticate> button and the list of projects will be populated. Select TestLink project that you want to import from then click the <Next> button to move to the next page in the import wizard: This page allows you to enter the URL, user name and password that you want to use to access the instance of SpiraTest that you want to import to and click <Login>. Typically, the URL is of the form ( https://xxxx.spiraservice.net ). The version of the importer being used must be compatible with the version of SpiraTest you're importing into; if not you will receive an error message. In addition, you need to enter the default password for all users that the importer will create in SpiraTest. You need to make sure that this password meets the minimum complexity requirements of your SpiraTest installation or the import will fail with an error message indicating the password is not allowed. Assuming that the login was successful, click the <Start Import> button to actually begin the process of importing the various artifacts from TestLink into SpiraTest. Note that the importer will automatically create a new project in SpiraTest to hold all the artifacts with the same name as that used in TestLink. During the import process, as each of the types of artifact are imported, the progress display will change (as illustrated above). Once the import has finished, you will receive a message to that effect and the <Done> button will be enabled. Clicking this button closed the importer. You should now log into SpiraTest using the same user name and password that was used for the import to view the imported project. The migration tool will import the following artifacts from TestLink: The project name and description Test suites Test cases with their steps (if defined) For example, the following TestLink project: Now looks like this in SpiraTest (v5.4): Should the import fail for any reason, there will be a log file created on the Desktop of the person doing the import. The filename is usually: **Spira_TestLink_Import.log* .*","title":"TestLink"},{"location":"Migration-and-Integration/Migrating-from-TestLink/#migrating-from-testlink","text":"This section outlines how to use the free Migration Tool for importing Projects, Test Suites, Test Cases, and Test Steps from the open source TestLink application into SpiraTest.","title":"Migrating from TestLink"},{"location":"Migration-and-Integration/Migrating-from-TestLink/#installing-the-testlink-migration-tool","text":"This section outlines how to install the migration tool for TestLink onto a workstation so that you can then migrate whole projects from TestLink to either SpiraTest, SpiraTeam or SpiraPlan (hereafter referred to as SpiraTest). It assumes that you already have a working installation of SpiraTest v5.0 or later and a live instance of TestLink to migrate from. If you have an earlier version of SpiraTest you will need to upgrade to at least v5.0 before trying to migrate projects. The Windows installation package can be downloaded from the 'Add-Ons & Downloads\" section of the Inflectra website. Once you have obtained the Windows Installer package, simply double-click on the package to begin the installation wizard which should display the following welcome page: Click the <Next> button, accept the software license, then click <Next> again to choose the folder to install the migration tool to: Choose the folder to install to, and then decide whether the application should be accessible by all users on the workstation or just the current user. Then click the <Install> button to start the installation process. It will confirm if you want to proceed, click <Next> then wait for it to finish.","title":"Installing the TestLink Migration Tool"},{"location":"Migration-and-Integration/Migrating-from-TestLink/#using-the-testlink-migration-tool","text":"Now that you have installed the migration tool, you can launch it at any time by going to Start > Programs > Inflectra > SpiraTest > Tools > TestLink Importer. This will launch the migration tool application itself: The first thing you need to do is to enter the URL for the instance of TestLink that you want to import the information from (typically of the form http://myserver/testlink) together with a valid API Key. If you don't have an API Key, you need to first login to TestLink using your normal username and password, then generate an API on the user profile page: Once you have entered this information, click the <Authenticate> button and the list of projects will be populated. Select TestLink project that you want to import from then click the <Next> button to move to the next page in the import wizard: This page allows you to enter the URL, user name and password that you want to use to access the instance of SpiraTest that you want to import to and click <Login>. Typically, the URL is of the form ( https://xxxx.spiraservice.net ). The version of the importer being used must be compatible with the version of SpiraTest you're importing into; if not you will receive an error message. In addition, you need to enter the default password for all users that the importer will create in SpiraTest. You need to make sure that this password meets the minimum complexity requirements of your SpiraTest installation or the import will fail with an error message indicating the password is not allowed. Assuming that the login was successful, click the <Start Import> button to actually begin the process of importing the various artifacts from TestLink into SpiraTest. Note that the importer will automatically create a new project in SpiraTest to hold all the artifacts with the same name as that used in TestLink. During the import process, as each of the types of artifact are imported, the progress display will change (as illustrated above). Once the import has finished, you will receive a message to that effect and the <Done> button will be enabled. Clicking this button closed the importer. You should now log into SpiraTest using the same user name and password that was used for the import to view the imported project. The migration tool will import the following artifacts from TestLink: The project name and description Test suites Test cases with their steps (if defined) For example, the following TestLink project: Now looks like this in SpiraTest (v5.4): Should the import fail for any reason, there will be a log file created on the Desktop of the person doing the import. The filename is usually: **Spira_TestLink_Import.log* .*","title":"Using the TestLink Migration Tool"},{"location":"Migration-and-Integration/Migrating-from-TestRail/","text":"Migrating from TestRail This section outlines how to use the free Migration Tool for importing Milestones, Test Cases, Test Suites, Test Plans, Test Runs, and Test Results from Gurock TestRail into SpiraTest. Installing the TestRail Migration Tool This section outlines how to install the migration tool for TestRail onto a workstation so that you can then migrate whole projects from TestRail to either SpiraTest or SpiraTeam (hereafter referred to as SpiraTest). It assumes that you already have a working installation of SpiraTest v5.0 or later and a live instance of TestRail to migrate from. If you have an earlier version of SpiraTest you will need to upgrade to at least v5.0 before trying to migrate projects. The Windows installation package can be downloaded from the 'Add-Ons & Downloads\" section of the Inflectra website. Once you have obtained the Windows Installer package, simply double-click on the package to begin the installation wizard which should display the following welcome page: Click the <Next> button, accept the software license, then click <Next> again to choose the folder to install the migration tool to: Choose the folder to install to, and then decide whether the application should be accessible by all users on the workstation or just the current user. Then click the <Install> button to start the installation process. It will confirm if you want to proceed, click <Next> then wait for it to finish. Using the TestRail Migration Tool Now that you have installed the migration tool, you can launch it at any time by going to Start > Programs > Inflectra > SpiraTest > Tools > TestRail Importer. This will launch the migration tool application itself: The first thing you need to do is to enter the URL for the instance of TestRail that you want to import the information from (typically of the form https://xxxxx.testrail.net ) together with a valid username and password. Once you have entered this information, click the <Authenticate> button and the list of projects will be populated. Select TestRail project that you want to import from You can also choose to not import certain artifacts from TestRail (e.g. Milestones, etc.) then click the <Next> button to move to the next page in the import wizard: This page allows you to enter the URL, user name and password that you want to use to access the instance of SpiraTest that you want to import to and click <Login>. Typically, the URL is of the form ( https://xxxx.spiraservice.net ). The version of the importer being used must be compatible with the version of SpiraTest you're importing into; if not you will receive an error message. In addition, you need to enter the default password for all users that the importer will create in SpiraTest. You need to make sure that this password meets the minimum complexity requirements of your SpiraTest installation or the import will fail with an error message indicating the password is not allowed. Assuming that the login was successful, click the <Start Import> button to actually begin the process of importing the various artifacts from TestRail into SpiraTest. Note that the importer will automatically create a new project in SpiraTest to hold all the artifacts with the same name as that used in TestRail. During the import process, as each of the types of artifact are imported, the progress display will change (as illustrated above). Once the import has finished, you will receive a message to that effect and the <Done> button will be enabled. Clicking this button closed the importer. You should now log into SpiraTest using the same user name and password that was used for the import to view the imported project. The migration tool will import the following artifacts from TestRail: The project name and description Users (but not their roles and permissions) Milestones Test suites and their sections Test cases with their steps (if defined) Test plans with associated tests and test results Should the import fail for any reason, there will be a log file created on the Desktop of the person doing the import. The filename is usually: **Spira_TestRail_Import.log* .*","title":"TestRail"},{"location":"Migration-and-Integration/Migrating-from-TestRail/#migrating-from-testrail","text":"This section outlines how to use the free Migration Tool for importing Milestones, Test Cases, Test Suites, Test Plans, Test Runs, and Test Results from Gurock TestRail into SpiraTest.","title":"Migrating from TestRail"},{"location":"Migration-and-Integration/Migrating-from-TestRail/#installing-the-testrail-migration-tool","text":"This section outlines how to install the migration tool for TestRail onto a workstation so that you can then migrate whole projects from TestRail to either SpiraTest or SpiraTeam (hereafter referred to as SpiraTest). It assumes that you already have a working installation of SpiraTest v5.0 or later and a live instance of TestRail to migrate from. If you have an earlier version of SpiraTest you will need to upgrade to at least v5.0 before trying to migrate projects. The Windows installation package can be downloaded from the 'Add-Ons & Downloads\" section of the Inflectra website. Once you have obtained the Windows Installer package, simply double-click on the package to begin the installation wizard which should display the following welcome page: Click the <Next> button, accept the software license, then click <Next> again to choose the folder to install the migration tool to: Choose the folder to install to, and then decide whether the application should be accessible by all users on the workstation or just the current user. Then click the <Install> button to start the installation process. It will confirm if you want to proceed, click <Next> then wait for it to finish.","title":"Installing the TestRail Migration Tool"},{"location":"Migration-and-Integration/Migrating-from-TestRail/#using-the-testrail-migration-tool","text":"Now that you have installed the migration tool, you can launch it at any time by going to Start > Programs > Inflectra > SpiraTest > Tools > TestRail Importer. This will launch the migration tool application itself: The first thing you need to do is to enter the URL for the instance of TestRail that you want to import the information from (typically of the form https://xxxxx.testrail.net ) together with a valid username and password. Once you have entered this information, click the <Authenticate> button and the list of projects will be populated. Select TestRail project that you want to import from You can also choose to not import certain artifacts from TestRail (e.g. Milestones, etc.) then click the <Next> button to move to the next page in the import wizard: This page allows you to enter the URL, user name and password that you want to use to access the instance of SpiraTest that you want to import to and click <Login>. Typically, the URL is of the form ( https://xxxx.spiraservice.net ). The version of the importer being used must be compatible with the version of SpiraTest you're importing into; if not you will receive an error message. In addition, you need to enter the default password for all users that the importer will create in SpiraTest. You need to make sure that this password meets the minimum complexity requirements of your SpiraTest installation or the import will fail with an error message indicating the password is not allowed. Assuming that the login was successful, click the <Start Import> button to actually begin the process of importing the various artifacts from TestRail into SpiraTest. Note that the importer will automatically create a new project in SpiraTest to hold all the artifacts with the same name as that used in TestRail. During the import process, as each of the types of artifact are imported, the progress display will change (as illustrated above). Once the import has finished, you will receive a message to that effect and the <Done> button will be enabled. Clicking this button closed the importer. You should now log into SpiraTest using the same user name and password that was used for the import to view the imported project. The migration tool will import the following artifacts from TestRail: The project name and description Users (but not their roles and permissions) Milestones Test suites and their sections Test cases with their steps (if defined) Test plans with associated tests and test results Should the import fail for any reason, there will be a log file created on the Desktop of the person doing the import. The filename is usually: **Spira_TestRail_Import.log* .*","title":"Using the TestRail Migration Tool"},{"location":"Migration-and-Integration/Project-Backup-and-Migration/","text":"Project Backup and Migration This application allows an entire project to be exported to a backup file, for archiving and offline storage of SpiraTeam projects. The base minimum SpiraTeam version required is 3.2 (014), and there is some data that is not backed up . Also there are separate versions of the backup and migration tool for SpiraTeam v3.2, v4.x and v5.x, and you need to use the appropriate version that matches your installations. The migration tool does not support upgrading versions , i.e. you need to have the same version of SpiraTeam for both the import and export phase. If you have two different versions of SpiraTeam, you must first upgrade the older installation to the same version as the newer one. Main Screen When running the application, you will see the main screen, which gives you three main options: Export, Import, and Transfer: Project Export Clicking the Export button will start the Export wizard, allowing you to save the project to a file. On the first screen, enter in the SpiraTeam server URL, and the administrator account password. The administrator account must be used, so make sure that it is an active account (Active: Yes) in the application. When clicking the 'Next' button, it will verify the server and login information. The second screen gives you the selection of the project to export. Select the project, and then click the 'Next' button. On the third screen, select the location and name of the file you wish to export the project to. If the file already exists, it will be overwritten. The next screen is the verification screen -- make sure you wish to start the export, and then click the 'Next' button. Once started, you cannot cancel or change any options. To change an option, click the 'Back' button at any time before starting the process to go back a screen. Once finished, your output file will be created. You can store and backup the file as you need. Project Import To import a project file into a new project in SpiraTeam, select the Import button on the main screen. This will start the Import wizard: On the first screen, enter in the SpiraTeam server URL, and the administrator account password. The administrator account must be used, so make sure that it is an active account (Active: Yes) in the application. When clicking the 'Next' button, it will verify the server and login information. The second screen allows you to enter in a name for the project created. You can enter in the name of an existing project, but a new project by that name will be created -- it will not import the project into an existing project. The third screen is only present on the SpiraTeam v4.0 version of the migration tool. This is because the SpiraTeam 4.0 API requires that new user's be created with passwords of specific strength. Any user in the project file that is not present in the destination system will be created with the password that you specify: You should enter a password, click the 'Test' button to make sure it will be accepted by SpiraTeam, and then click the 'Next' button. This will then display the fourth screen: The fourth screen will let you select the PRJ Project file. Select the file by clicking on the folder button, and the application will verify the integrity of the file before performing the import: The last screen will let you verify your settings before starting the import. If any changes need to be made, click the Back button. Once ready to import the project, click the 'Finish button to start the import. If any error occurs during import, it's not recommended to use the project created in the application, although you can log in and view the data that was imported. Project Transfer Selecting the 'Transfer' button will start the transfer wizard, which contains screens from both the Import and Export wizards, above. The first two screens will let you select the SpiraTeam application to pull the project from, following the same information as the first two screens in the Export wizard. The next three screens will ask for the new SpiraTeam application to create the project in and the default password for any new users that need to be created. These three screens follow the first three screens of the Import wizard, above. Note that the application will try to determine if you're trying to re-import the project into the same server, and advise that copying the project in the SpiraTeam UI is a better choice. The final screen will provide a summary of the chosen settings. Once you click 'Next', the transfer process will start: Once transfer starts, the entire project will be unloaded into a temporary directory on the computer running the application, and then the project will be imported into the new system. Data Transferred SpiraTeam v3.2 Exported Imported Incidents \u2713 \u2713 Requirements \u2713 \u2713 Tasks \u2713 \u2713 Releases \u2713 \u2713 Test Cases \u2713 \u2713 Test Sets \u2713 \u2713 Test Runs \u2713 \u2713 Custom Properties \u2713 \u2713 Custom Lists \u2713 \u2713 Document Files \u2713 \u2713 Document Folders \u2713 \u2713 Document Types \u2713 Comments / Resolutions \u2713 \u2713 Datasync Mappings \u2713 Automation Hosts \u2713 \u2713 Automation Engines \u2713 \u2713 Project Roles \u2713 Project Users \u2713 \u2713 1 The table on the left shows what data is backed up and restored. Future versions of the Migration tool and SpiraTeam may support exporting and importing more data. The exported project file may be large, since the binary data of all the attachments are downloaded and contained within the file. Once an export is completed, the migration tool will not delete the project from the system -- you must still do that through the UI. Any changes in the project will not automatically be updated in the export file; you must re-run the export. Notes: 1 Users imported back into v3.2 will be marked Active, even if they were originally inactive.","title":"Project Backup and Migration"},{"location":"Migration-and-Integration/Project-Backup-and-Migration/#project-backup-and-migration","text":"This application allows an entire project to be exported to a backup file, for archiving and offline storage of SpiraTeam projects. The base minimum SpiraTeam version required is 3.2 (014), and there is some data that is not backed up . Also there are separate versions of the backup and migration tool for SpiraTeam v3.2, v4.x and v5.x, and you need to use the appropriate version that matches your installations. The migration tool does not support upgrading versions , i.e. you need to have the same version of SpiraTeam for both the import and export phase. If you have two different versions of SpiraTeam, you must first upgrade the older installation to the same version as the newer one.","title":"Project Backup and Migration"},{"location":"Migration-and-Integration/Project-Backup-and-Migration/#main-screen","text":"When running the application, you will see the main screen, which gives you three main options: Export, Import, and Transfer:","title":"Main Screen"},{"location":"Migration-and-Integration/Project-Backup-and-Migration/#project-export","text":"Clicking the Export button will start the Export wizard, allowing you to save the project to a file. On the first screen, enter in the SpiraTeam server URL, and the administrator account password. The administrator account must be used, so make sure that it is an active account (Active: Yes) in the application. When clicking the 'Next' button, it will verify the server and login information. The second screen gives you the selection of the project to export. Select the project, and then click the 'Next' button. On the third screen, select the location and name of the file you wish to export the project to. If the file already exists, it will be overwritten. The next screen is the verification screen -- make sure you wish to start the export, and then click the 'Next' button. Once started, you cannot cancel or change any options. To change an option, click the 'Back' button at any time before starting the process to go back a screen. Once finished, your output file will be created. You can store and backup the file as you need.","title":"Project Export"},{"location":"Migration-and-Integration/Project-Backup-and-Migration/#project-import","text":"To import a project file into a new project in SpiraTeam, select the Import button on the main screen. This will start the Import wizard: On the first screen, enter in the SpiraTeam server URL, and the administrator account password. The administrator account must be used, so make sure that it is an active account (Active: Yes) in the application. When clicking the 'Next' button, it will verify the server and login information. The second screen allows you to enter in a name for the project created. You can enter in the name of an existing project, but a new project by that name will be created -- it will not import the project into an existing project. The third screen is only present on the SpiraTeam v4.0 version of the migration tool. This is because the SpiraTeam 4.0 API requires that new user's be created with passwords of specific strength. Any user in the project file that is not present in the destination system will be created with the password that you specify: You should enter a password, click the 'Test' button to make sure it will be accepted by SpiraTeam, and then click the 'Next' button. This will then display the fourth screen: The fourth screen will let you select the PRJ Project file. Select the file by clicking on the folder button, and the application will verify the integrity of the file before performing the import: The last screen will let you verify your settings before starting the import. If any changes need to be made, click the Back button. Once ready to import the project, click the 'Finish button to start the import. If any error occurs during import, it's not recommended to use the project created in the application, although you can log in and view the data that was imported.","title":"Project Import"},{"location":"Migration-and-Integration/Project-Backup-and-Migration/#project-transfer","text":"Selecting the 'Transfer' button will start the transfer wizard, which contains screens from both the Import and Export wizards, above. The first two screens will let you select the SpiraTeam application to pull the project from, following the same information as the first two screens in the Export wizard. The next three screens will ask for the new SpiraTeam application to create the project in and the default password for any new users that need to be created. These three screens follow the first three screens of the Import wizard, above. Note that the application will try to determine if you're trying to re-import the project into the same server, and advise that copying the project in the SpiraTeam UI is a better choice. The final screen will provide a summary of the chosen settings. Once you click 'Next', the transfer process will start: Once transfer starts, the entire project will be unloaded into a temporary directory on the computer running the application, and then the project will be imported into the new system.","title":"Project Transfer"},{"location":"Migration-and-Integration/Project-Backup-and-Migration/#data-transferred","text":"SpiraTeam v3.2 Exported Imported Incidents \u2713 \u2713 Requirements \u2713 \u2713 Tasks \u2713 \u2713 Releases \u2713 \u2713 Test Cases \u2713 \u2713 Test Sets \u2713 \u2713 Test Runs \u2713 \u2713 Custom Properties \u2713 \u2713 Custom Lists \u2713 \u2713 Document Files \u2713 \u2713 Document Folders \u2713 \u2713 Document Types \u2713 Comments / Resolutions \u2713 \u2713 Datasync Mappings \u2713 Automation Hosts \u2713 \u2713 Automation Engines \u2713 \u2713 Project Roles \u2713 Project Users \u2713 \u2713 1 The table on the left shows what data is backed up and restored. Future versions of the Migration tool and SpiraTeam may support exporting and importing more data. The exported project file may be large, since the binary data of all the attachments are downloaded and contained within the file. Once an export is completed, the migration tool will not delete the project from the system -- you must still do that through the UI. Any changes in the project will not automatically be updated in the export file; you must re-run the export. Notes: 1 Users imported back into v3.2 will be marked Active, even if they were originally inactive.","title":"Data Transferred"},{"location":"RemoteLaunch-User-Guide/BadBoy/","text":"BadBoy Badboy is an automated website functional test automation system that lets you record website operations in Internet Explorer and generate test automation scripts that can be used to playback the test script against the website. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of Badboy on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated Badboy tests. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 2.1 of Badboy. Installing the Badboy Engine This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the BadboyAutomationEngine.zip file from the Inflectra website and locate the appropriate BadboyX.dll for the version of Badboy that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"*Badboy*X.dll\" (where X is the appropriate version) into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For Badboy this should be BadboyX where 'X' is the version number of the DLL file that you are using. Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with Badboy listed as an available automation engine. Advanced Settings You can modify the Badboy configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The Badboy 2.x engine adds its own tab to this page which allows you to configure how Badboy operates: The following fields can be specified on this screen: Trace Logging -- When selected, this will log additional trace and debugging information to the Windows Event Log. This should not be selected in a production environment. Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated Badboy test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Badboy Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with Badboy only supports referencing Badboy test script files and not physically uploading the test scripts into SpiraTeam. Filename -- This needs to be the full path to the Badboy test script. To make this easier across different machines, you can use several constants for standard Windows locations (see example in screenshot): [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- This allows you to choose which document type the automated test script will be categorized under. Document Folder --This allows you to choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the Badboy Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Using Parameterized Test Cases There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your Badboy automated test script. This is very useful if you have a data-driven Badboy test script that defines input variables from an external data source. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${login} needs to match the name of the variable defined within the Badboy script in its variables configuration. Executing the Badboy Test Sets from SpiraTeam There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the Badboy automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination: Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the Badboy test: Passed -- The Badboy automated test ran successfully and all the test steps in the test script passed and no assertions were thrown. Failed -- The Badboy automated test ran successfully, but at least one test step failed or at least one assertion failed. Caution -- The Badboy automated test run successfully, but at least one warning was logged in one of the test steps. Blocked -- The Badboy automated test did not run successfully or at least one timeout error was recorded. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you will see browser windows launch as Badboy executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by Badboy, you will see the following information: This screen indicates the status of the test run that was reported back from Badboy together with any messages or other information. The Test Name indicates the name of the test inside Badboy and the execution status corresponds the matching status inside Badboy as illustrated below: Badboy Status SpiraTeam Status Succeeded Passed Failure Failed Warning Caution Assertion Failed Timeout Blocked In addition, the detailed test report from Badboy is below. It will contain messages such as: Suite: Test Suite 1 ============================================== Test: Test 3 ---------------------------------- ------------ 12 played, 12 succeeded, 0 failures, 0 assertions, 0 warnings, 0 timeouts ---------------------------------- ------------ Step: Step 2 ---------------------------------- ------------ 12 played, 12 succeeded, 0 failures, 0 assertions, 0 warnings, 0 timeouts ---------------------------------- ------------ Congratulations... You are now able to run Badboy automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"BadBoy"},{"location":"RemoteLaunch-User-Guide/BadBoy/#badboy","text":"Badboy is an automated website functional test automation system that lets you record website operations in Internet Explorer and generate test automation scripts that can be used to playback the test script against the website. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of Badboy on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated Badboy tests. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 2.1 of Badboy.","title":"BadBoy"},{"location":"RemoteLaunch-User-Guide/BadBoy/#installing-the-badboy-engine","text":"This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the BadboyAutomationEngine.zip file from the Inflectra website and locate the appropriate BadboyX.dll for the version of Badboy that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"*Badboy*X.dll\" (where X is the appropriate version) into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For Badboy this should be BadboyX where 'X' is the version number of the DLL file that you are using. Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with Badboy listed as an available automation engine.","title":"Installing the Badboy Engine"},{"location":"RemoteLaunch-User-Guide/BadBoy/#advanced-settings","text":"You can modify the Badboy configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The Badboy 2.x engine adds its own tab to this page which allows you to configure how Badboy operates: The following fields can be specified on this screen: Trace Logging -- When selected, this will log additional trace and debugging information to the Windows Event Log. This should not be selected in a production environment.","title":"Advanced Settings"},{"location":"RemoteLaunch-User-Guide/BadBoy/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated Badboy test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Badboy Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with Badboy only supports referencing Badboy test script files and not physically uploading the test scripts into SpiraTeam. Filename -- This needs to be the full path to the Badboy test script. To make this easier across different machines, you can use several constants for standard Windows locations (see example in screenshot): [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- This allows you to choose which document type the automated test script will be categorized under. Document Folder --This allows you to choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the Badboy Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/BadBoy/#using-parameterized-test-cases","text":"There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your Badboy automated test script. This is very useful if you have a data-driven Badboy test script that defines input variables from an external data source. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${login} needs to match the name of the variable defined within the Badboy script in its variables configuration.","title":"Using Parameterized Test Cases"},{"location":"RemoteLaunch-User-Guide/BadBoy/#executing-the-badboy-test-sets-from-spirateam","text":"There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the Badboy Test Sets from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/BadBoy/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the Badboy automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination:","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/BadBoy/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the Badboy test: Passed -- The Badboy automated test ran successfully and all the test steps in the test script passed and no assertions were thrown. Failed -- The Badboy automated test ran successfully, but at least one test step failed or at least one assertion failed. Caution -- The Badboy automated test run successfully, but at least one warning was logged in one of the test steps. Blocked -- The Badboy automated test did not run successfully or at least one timeout error was recorded. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you will see browser windows launch as Badboy executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by Badboy, you will see the following information: This screen indicates the status of the test run that was reported back from Badboy together with any messages or other information. The Test Name indicates the name of the test inside Badboy and the execution status corresponds the matching status inside Badboy as illustrated below: Badboy Status SpiraTeam Status Succeeded Passed Failure Failed Warning Caution Assertion Failed Timeout Blocked In addition, the detailed test report from Badboy is below. It will contain messages such as: Suite: Test Suite 1 ============================================== Test: Test 3 ---------------------------------- ------------ 12 played, 12 succeeded, 0 failures, 0 assertions, 0 warnings, 0 timeouts ---------------------------------- ------------ Step: Step 2 ---------------------------------- ------------ 12 played, 12 succeeded, 0 failures, 0 assertions, 0 warnings, 0 timeouts ---------------------------------- ------------ Congratulations... You are now able to run Badboy automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Executing the Test Sets"},{"location":"RemoteLaunch-User-Guide/Command-Line/","text":"Command-Line In addition to the various pre-built plug-ins for different test automation engines, there is a generic command-line engine available that lets RemoteLaunch execute an arbitrary command-line program, capture the console output and send the output back to SpiraTeam as the test results. This is useful when you want to be able to use SpiraTeam to manage the scheduling and execution of automated testing using an in-house tool or a third-party tool that Inflectra has not yet built a plug-in for. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of a command-line application on different computers and have the \"testing\" results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automation Note: This integration requires at least version 4.0 of SpiraTest/Team and RemoteLaunch. Installing the Command-Line Engine This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the CommandLineAutomationEngine.zip file from the Inflectra website and locate the CommandLine.dll Copy the file \"CommandLine.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For Command-Line this should be simply \"CommandLine\" . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with Command-Line listed as an available automation engine. Command-Line RemoteLaunch Settings You may need to modify the Command-Line configuration for some of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The Command-Line engine adds its own tab to this page which allows you to configure how the Command-Line engine operates: The following fields can be specified on this screen: RunAs Administrator -- This normally should not be checked. However if your automation tool requires Windows UAC elevation to operate, you will need to select this option. We recommend initially trying your tool with the value unchecked. Then, if you get an error message \"requires elevation\" in the test results you will need to select the option. Log Results -- Normally the command-line engine will capture the output results from the command-line and send the results back to SpiraTeam as the test result. When you are executing a tool that directly integrates with SpiraTeam (e.g. a NUnit test suite that is already integrated with SpiraTeam) you don't want two different results to be sent back. In such a scenario, deselecting this option will prevent the command-line engine from sending back its own test result. Default Status -- This specifies the execution status that will be returned to SpiraTeam in the event that none of the regular expressions (Regex) specified match the results returned from the test application. By default, the system will return \"Passed\" if none of the other regular expressions match correctly. Pass Regex -- This is the regular expression that is used to match a passed test result. By default the system will search for the phrase \"Pass\" in the test output and return a Passed status if the match is successful. Fail Regex -- This is the regular expression that is used to match a failed test result. By default the system will search for the phrases \"Fail\", \"Error\" and \"Fatal\" in the test output and return a Fail status if any of the matches are successful. Caution Regex -- This is the regular expression that is used to match a caution test result. By default the system will search for the phrases \"Warning\" and \"Caution\" in the test output and return a Caution status if any of the matches are successful. Blocked Regex -- This is the regular expression that is used to match a blocked test result. By default the system will search for the phrase \"Blocked\" in the test output and return a Blocked status if the match is successful. Test Regular Expressions -- This text box lets you enter in some sample text and see how the Command-Line extension would interpret it. Once you have entered in the text, click \"Test Regular Expression...\" and the system will display a popup message box letting you know what the outcome of such a test would be interpreted as: Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and either linking it to an existing test script file or entering a test script directly into SpiraTeam. Attaching a Command-Line Test Script First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Command-Line Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Attached for this case Filename -- This needs to consist of the following sections separated by a pipe (|) character: The full path to the command-line tool. To make this easier across different machines, you can use several constants for standard Windows locations: [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Any arguments for the command-line tool, with the filename specified as ${filename}. This special token will be replaced by the actual filename of the test script when RemoteLaunch downloads it from SpiraTeam. In addition, you can use the following additional tokens for some of the special SpiraTeam ID values: [TestCaseId] -- the ID of the test case [TestSetId] -- the ID of the test set [ReleaseId] -- the ID of the release (if specified) [ProjectId] -- the ID of the project An example filename would be: C:\\Temp\\TestApp.exe|-arg1 -arg2 \"-arg3=${filename}\"| Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This needs to contain the complete test script in whatever language and syntax is being expected by the command-line application If you would like to have SpiraTeam pass any parameter values to this test script (this will be discussed in more detail later) you can specify them by using the syntax ${parameterName} inside the test script. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Linking a Command-Line Test Script First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Command-Line Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked for this case Filename -- This needs to consist of the following sections separated by a pipe (|) character: The full path to the command-line tool. To make this easier across different machines, you can use several constants for standard Windows locations: [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Any arguments for the command-line tool, including the filepath of the test script file that the command-line tool will be executing. In addition, you can use the following additional tokens for some of the special SpiraTeam ID values: [TestCaseId] -- the ID of the test case [TestSetId] -- the ID of the test set [ReleaseId] -- the ID of the release (if specified) [ProjectId] -- the ID of the project The mask for converting any parameter values from SpiraTeam into valid command line arguments. If parameters are not accepted by the command-line tool, you can leave this section out. The mask can include any symbols together with \"name\" to refer to the parameter name and \"value\" to refer to the parameter value. Example 1: If you want parameters to provided in the form: -param1=value1 --param2=value2 you would use the following mask: -name=value Example 2: If you want parameters to provided in the form: /param1:value1 /param2:value2 you would use the following mask: /name:value An example filename would be: C:\\Temp\\TestApp.exe|-arg1 -arg2|-name=value Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used when you are using the linked test script option Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Using Parameterized Test Cases There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your command-line automated testing tool. This is very useful if you want to have a data-driven test script that be executed multiple times with different parameter values. To setup the automated test case for parameters, click on the \"Edit Parameters\" hyperlink above the \"Test Script\" box: The name of the parameter ${login} needs to match the name of a parameter accepted by the command-line tool. Executing the Command-Line Test Sets from SpiraTeam There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the Command-Line automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination: Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the command-line test: Passed -- The automated test ran successfully and the results output to the console did not include any of the phrases -- FAIL, ERROR, FATAL, WARNING, CAUTION Failed -- The automated test ran successfully, but one of the phrases -- FAIL, ERROR, FATAL -- was included in the console output Caution -- The automated test ran successfully, but one of the phrases -- WARNING, CAUTION -- was included in the console output Blocked -- The automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see application windows launch as the command-line tool server executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by the command-line tool, you will see the following information: This screen indicates the status of the test run that was reported back from command-line tool together with any messages or other information. The execution status will be set according to the rules described above, the Message field will contain the first line of console output and the large details box will contain the full console output from the command-line tool. Congratulations... You are now able to run a custom command-line run tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Command-Line"},{"location":"RemoteLaunch-User-Guide/Command-Line/#command-line","text":"In addition to the various pre-built plug-ins for different test automation engines, there is a generic command-line engine available that lets RemoteLaunch execute an arbitrary command-line program, capture the console output and send the output back to SpiraTeam as the test results. This is useful when you want to be able to use SpiraTeam to manage the scheduling and execution of automated testing using an in-house tool or a third-party tool that Inflectra has not yet built a plug-in for. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of a command-line application on different computers and have the \"testing\" results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automation Note: This integration requires at least version 4.0 of SpiraTest/Team and RemoteLaunch.","title":"Command-Line"},{"location":"RemoteLaunch-User-Guide/Command-Line/#installing-the-command-line-engine","text":"This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the CommandLineAutomationEngine.zip file from the Inflectra website and locate the CommandLine.dll Copy the file \"CommandLine.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For Command-Line this should be simply \"CommandLine\" . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with Command-Line listed as an available automation engine.","title":"Installing the Command-Line Engine"},{"location":"RemoteLaunch-User-Guide/Command-Line/#command-line-remotelaunch-settings","text":"You may need to modify the Command-Line configuration for some of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The Command-Line engine adds its own tab to this page which allows you to configure how the Command-Line engine operates: The following fields can be specified on this screen: RunAs Administrator -- This normally should not be checked. However if your automation tool requires Windows UAC elevation to operate, you will need to select this option. We recommend initially trying your tool with the value unchecked. Then, if you get an error message \"requires elevation\" in the test results you will need to select the option. Log Results -- Normally the command-line engine will capture the output results from the command-line and send the results back to SpiraTeam as the test result. When you are executing a tool that directly integrates with SpiraTeam (e.g. a NUnit test suite that is already integrated with SpiraTeam) you don't want two different results to be sent back. In such a scenario, deselecting this option will prevent the command-line engine from sending back its own test result. Default Status -- This specifies the execution status that will be returned to SpiraTeam in the event that none of the regular expressions (Regex) specified match the results returned from the test application. By default, the system will return \"Passed\" if none of the other regular expressions match correctly. Pass Regex -- This is the regular expression that is used to match a passed test result. By default the system will search for the phrase \"Pass\" in the test output and return a Passed status if the match is successful. Fail Regex -- This is the regular expression that is used to match a failed test result. By default the system will search for the phrases \"Fail\", \"Error\" and \"Fatal\" in the test output and return a Fail status if any of the matches are successful. Caution Regex -- This is the regular expression that is used to match a caution test result. By default the system will search for the phrases \"Warning\" and \"Caution\" in the test output and return a Caution status if any of the matches are successful. Blocked Regex -- This is the regular expression that is used to match a blocked test result. By default the system will search for the phrase \"Blocked\" in the test output and return a Blocked status if the match is successful. Test Regular Expressions -- This text box lets you enter in some sample text and see how the Command-Line extension would interpret it. Once you have entered in the text, click \"Test Regular Expression...\" and the system will display a popup message box letting you know what the outcome of such a test would be interpreted as:","title":"Command-Line RemoteLaunch Settings"},{"location":"RemoteLaunch-User-Guide/Command-Line/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and either linking it to an existing test script file or entering a test script directly into SpiraTeam.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/Command-Line/#attaching-a-command-line-test-script","text":"First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Command-Line Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Attached for this case Filename -- This needs to consist of the following sections separated by a pipe (|) character: The full path to the command-line tool. To make this easier across different machines, you can use several constants for standard Windows locations: [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Any arguments for the command-line tool, with the filename specified as ${filename}. This special token will be replaced by the actual filename of the test script when RemoteLaunch downloads it from SpiraTeam. In addition, you can use the following additional tokens for some of the special SpiraTeam ID values: [TestCaseId] -- the ID of the test case [TestSetId] -- the ID of the test set [ReleaseId] -- the ID of the release (if specified) [ProjectId] -- the ID of the project An example filename would be: C:\\Temp\\TestApp.exe|-arg1 -arg2 \"-arg3=${filename}\"| Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This needs to contain the complete test script in whatever language and syntax is being expected by the command-line application If you would like to have SpiraTeam pass any parameter values to this test script (this will be discussed in more detail later) you can specify them by using the syntax ${parameterName} inside the test script. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Attaching a Command-Line Test Script"},{"location":"RemoteLaunch-User-Guide/Command-Line/#linking-a-command-line-test-script","text":"First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Command-Line Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked for this case Filename -- This needs to consist of the following sections separated by a pipe (|) character: The full path to the command-line tool. To make this easier across different machines, you can use several constants for standard Windows locations: [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Any arguments for the command-line tool, including the filepath of the test script file that the command-line tool will be executing. In addition, you can use the following additional tokens for some of the special SpiraTeam ID values: [TestCaseId] -- the ID of the test case [TestSetId] -- the ID of the test set [ReleaseId] -- the ID of the release (if specified) [ProjectId] -- the ID of the project The mask for converting any parameter values from SpiraTeam into valid command line arguments. If parameters are not accepted by the command-line tool, you can leave this section out. The mask can include any symbols together with \"name\" to refer to the parameter name and \"value\" to refer to the parameter value. Example 1: If you want parameters to provided in the form: -param1=value1 --param2=value2 you would use the following mask: -name=value Example 2: If you want parameters to provided in the form: /param1:value1 /param2:value2 you would use the following mask: /name:value An example filename would be: C:\\Temp\\TestApp.exe|-arg1 -arg2|-name=value Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used when you are using the linked test script option Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Linking a Command-Line Test Script"},{"location":"RemoteLaunch-User-Guide/Command-Line/#using-parameterized-test-cases","text":"There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your command-line automated testing tool. This is very useful if you want to have a data-driven test script that be executed multiple times with different parameter values. To setup the automated test case for parameters, click on the \"Edit Parameters\" hyperlink above the \"Test Script\" box: The name of the parameter ${login} needs to match the name of a parameter accepted by the command-line tool.","title":"Using Parameterized Test Cases"},{"location":"RemoteLaunch-User-Guide/Command-Line/#executing-the-command-line-test-sets-from-spirateam","text":"There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the Command-Line Test Sets from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/Command-Line/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the Command-Line automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination:","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/Command-Line/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the command-line test: Passed -- The automated test ran successfully and the results output to the console did not include any of the phrases -- FAIL, ERROR, FATAL, WARNING, CAUTION Failed -- The automated test ran successfully, but one of the phrases -- FAIL, ERROR, FATAL -- was included in the console output Caution -- The automated test ran successfully, but one of the phrases -- WARNING, CAUTION -- was included in the console output Blocked -- The automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see application windows launch as the command-line tool server executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by the command-line tool, you will see the following information: This screen indicates the status of the test run that was reported back from command-line tool together with any messages or other information. The execution status will be set according to the rules described above, the Message field will contain the first line of console output and the large details box will contain the full console output from the command-line tool. Congratulations... You are now able to run a custom command-line run tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Executing the Test Sets"},{"location":"RemoteLaunch-User-Guide/FitNesse/","text":"FitNesse FitNesse is a lightweight, open-source automated software testing framework that uses web-based Wikis to define the inputs and expected results from different combinations of input values and then compare the results with what is actually generated during testing. For more details on FitNesse, please refer to the FitNesse website: http://fitnesse.org This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of FitNesse on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated FitNesse acceptance tests. Note: This integration requires at least version 4.0 of SpiraTest/Team and RemoteLaunch. Installing the FitNesse Engine This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the FitNesseEngine.zip file from the Inflectra website and c*opy the file \"FitNesseEngine.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation.* You may also need to verify that you have the full Microsoft .NET Framework 4.0 installed since that is needed by the FitNesse engine. RemoteLaunch itself only needs the .NET 4.0 Client Profile, so make sure you have the .NET 4.0 Framework Extended entry listed in the Program & Features section of the Windows Control Panel. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For FitNesse this should be simply FitNesse . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with FitNesse listed as an available automation engine. Advanced Settings You can modify the FitNesse configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The FitNesse engine adds its own tab to this page which allows you to configure how FitNesse operates: The following fields can be specified on this screen: Server Host -- This should be the base URL for accessing the installation of FitNesse. Each of the FitNesse test cases will be a URL relative to this base URL. Server Port -- This should be set to the TCP port that the FitNesse web server uses for displaying the FitNesse wiki web pages. FitNesse Timeout -- This allows you to extend the timeout for executing FitNesse tests. This is useful if you find that the FitNesse tests take a long time to execute and RemoteLaunch is aborting the execution before they are finished. Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an existing FitNesse test case wiki page. Note: The FitNesse automation engine only supports Linked test scripts in SpiraTeam (not Attached). First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and go to the \"Automation\" section located in the \"Overview\" tab: You need to enter the following fields: Automation Engine - Choose the FitNesse Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked for FitNesse tests. Filename -- This needs to be the relative URL of the FitNesse test case. I.e. if the FitNesse URL is http://myserver/FitNesse.UserGuide.TwoMinuteExample and the base URL setup in RemoteLaunch is http://myserver then the \"filename\" would be just FitNesse.UserGuide.TwoMinuteExample. Document Type -- You can choose which document type the automated test script will be categorized under. Document Folder -- You can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used when you are using the linked test script option Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Using Parameterized Test Cases The FitNesse automation engine does not currently support the passing of parameter values from SpiraTeam to the FitNesse test. Executing the FitNesse Test Sets from SpiraTeam There are three ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. Execute the test cases from the command-line or a build script We shall outline each of these three scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the FitNesse automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be executed. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the FitNesse test: Passed -- The FitNesse automated test ran successfully and all the test conditions in the test script passed Failed -- The FitNesse automated test ran successfully, but at least one test condition in the test script failed. Blocked -- The FitNesse automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see command windows appear as the FitNesse server executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by FitNesse, you will see the following information: This screen indicates the status of the test run that was reported back from FitNesse together with any messages or other information. The execution status will be set to PASSED if all the FitNesse rows report back OK and all the tests passed. If any of the rows failed or the tests don't pass, the overall execution status will be listed as FAILED. You can see a step-by-step record of what happened by scrolling down to the \"Test Steps\" section: In addition, you can scroll down to the \"Console Output\" section to get the FitNesse specific information: The Message field will contain a summary of the number of tests executed and the number of wrong results and exceptions. The large details box contains the full command execution log as reported back from FitNesse: Congratulations... You are now able to run FitNesse automated acceptance tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"FitNesse"},{"location":"RemoteLaunch-User-Guide/FitNesse/#fitnesse","text":"FitNesse is a lightweight, open-source automated software testing framework that uses web-based Wikis to define the inputs and expected results from different combinations of input values and then compare the results with what is actually generated during testing. For more details on FitNesse, please refer to the FitNesse website: http://fitnesse.org This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of FitNesse on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated FitNesse acceptance tests. Note: This integration requires at least version 4.0 of SpiraTest/Team and RemoteLaunch.","title":"FitNesse"},{"location":"RemoteLaunch-User-Guide/FitNesse/#installing-the-fitnesse-engine","text":"This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the FitNesseEngine.zip file from the Inflectra website and c*opy the file \"FitNesseEngine.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation.* You may also need to verify that you have the full Microsoft .NET Framework 4.0 installed since that is needed by the FitNesse engine. RemoteLaunch itself only needs the .NET 4.0 Client Profile, so make sure you have the .NET 4.0 Framework Extended entry listed in the Program & Features section of the Windows Control Panel. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For FitNesse this should be simply FitNesse . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with FitNesse listed as an available automation engine.","title":"Installing the FitNesse Engine"},{"location":"RemoteLaunch-User-Guide/FitNesse/#advanced-settings","text":"You can modify the FitNesse configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The FitNesse engine adds its own tab to this page which allows you to configure how FitNesse operates: The following fields can be specified on this screen: Server Host -- This should be the base URL for accessing the installation of FitNesse. Each of the FitNesse test cases will be a URL relative to this base URL. Server Port -- This should be set to the TCP port that the FitNesse web server uses for displaying the FitNesse wiki web pages. FitNesse Timeout -- This allows you to extend the timeout for executing FitNesse tests. This is useful if you find that the FitNesse tests take a long time to execute and RemoteLaunch is aborting the execution before they are finished.","title":"Advanced Settings"},{"location":"RemoteLaunch-User-Guide/FitNesse/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an existing FitNesse test case wiki page. Note: The FitNesse automation engine only supports Linked test scripts in SpiraTeam (not Attached). First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and go to the \"Automation\" section located in the \"Overview\" tab: You need to enter the following fields: Automation Engine - Choose the FitNesse Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked for FitNesse tests. Filename -- This needs to be the relative URL of the FitNesse test case. I.e. if the FitNesse URL is http://myserver/FitNesse.UserGuide.TwoMinuteExample and the base URL setup in RemoteLaunch is http://myserver then the \"filename\" would be just FitNesse.UserGuide.TwoMinuteExample. Document Type -- You can choose which document type the automated test script will be categorized under. Document Folder -- You can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used when you are using the linked test script option Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/FitNesse/#using-parameterized-test-cases","text":"The FitNesse automation engine does not currently support the passing of parameter values from SpiraTeam to the FitNesse test.","title":"Using Parameterized Test Cases"},{"location":"RemoteLaunch-User-Guide/FitNesse/#executing-the-fitnesse-test-sets-from-spirateam","text":"There are three ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. Execute the test cases from the command-line or a build script We shall outline each of these three scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the FitNesse Test Sets from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/FitNesse/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the FitNesse automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/FitNesse/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be executed. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the FitNesse test: Passed -- The FitNesse automated test ran successfully and all the test conditions in the test script passed Failed -- The FitNesse automated test ran successfully, but at least one test condition in the test script failed. Blocked -- The FitNesse automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see command windows appear as the FitNesse server executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by FitNesse, you will see the following information: This screen indicates the status of the test run that was reported back from FitNesse together with any messages or other information. The execution status will be set to PASSED if all the FitNesse rows report back OK and all the tests passed. If any of the rows failed or the tests don't pass, the overall execution status will be listed as FAILED. You can see a step-by-step record of what happened by scrolling down to the \"Test Steps\" section: In addition, you can scroll down to the \"Console Output\" section to get the FitNesse specific information: The Message field will contain a summary of the number of tests executed and the number of wrong results and exceptions. The large details box contains the full command execution log as reported back from FitNesse: Congratulations... You are now able to run FitNesse automated acceptance tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Executing the Test Sets"},{"location":"RemoteLaunch-User-Guide/HP-UFT--QTP/","text":"HP UFT / QTP HP\u00ae QuickTest Professional\u00ae (hereafter QTP) is an automated functional test automation system that lets you record application operations and generate VBA test automation scripts that can be used to playback the test script against the test application. HP\u00ae Unified Functional Testing\u00ae (hereafter UFT) is an updated version of QTP that also includes functionality for web service testing. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of QTP and UFT on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated QTP and UFT tests. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 9.0 of Quick Test Professional. For accessing UFT, you'd need at least version 4.0 of SpiraTest/Team and version 11.0 of UFT. Installing the UFT/QTP Engine This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the QuickTestProAutomationEngine.zip file from the Inflectra website and locate the appropriate QuickTestProX.dll or UftX.dll for the version of QTP or UFT that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"QuickTestProX.dll\" or \"UftX.dll\" (where X is the appropriate version) into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For QTP this should be QuickTestProX where 'X' is the version number of the DLL file that you are using. For UFT this should be UftX where 'X' is the version number of the DLL file that you are using. Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with QTP listed as an available automation engine. Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated QTP or UFT test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Overview\" tab and scroll down to the 'Automation' section: You need to enter the following fields: Automation Engine - Choose the QTP/UFT Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with QTP/UFT only supports referencing QTP/UFT test script folder paths and not physically uploading the test scripts into SpiraTeam. Filename -- This needs to be the full path to the QTP/UFT test script folder (i.e. the folder that you open in QTP/UFT to run the test). To make this easier across different machines, you can use several constants for standard Windows locations (see example in screenshot): [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the QTP /UFT Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Using Parameterized Test Cases There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your QTP/UFT automated test script. This is very useful if you have a data-driven QTP/UFT test script that accepts input parameters from an external data source. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${login} needs to match the name of the input parameter defined within the QTP/UFT script in its input parameters configuration. Executing the QTP/UFT Test Sets from SpiraTeam There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the QTP/UFT automated test cases and click on its hyperlink to display the test set details page. You need to add at least one automated test case to the test set: Then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination: Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the QTP/UFT test: Passed -- The QTP/UFT automated test ran successfully and all the test conditions in the test script passed Failed -- The QTP/UFT automated test ran successfully, but at least one test condition in the test script failed. Blocked -- The QTP/UFT automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see browser or application windows launch as QuickTest Pro (QTP) or Unified Functional Testing (UFT) executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by QTP/UFT, you will see the following information: This screen indicates the status of the test run that was reported back from QTP/UFT together with any messages or other information. The Test Name indicates the name of the test inside QTP/UFT, and the execution status corresponds the matching status inside QTP/UFT as illustrated below: QTP/UFT Status SpiraTeam Status Passed Passed Failed Failed Warning Caution Stopped Blocked Not Applicable N/A (Any other status) Not Run In addition, the detailed test report from QTP/UFT is below. It will contain messages such as: QuickTest Professional Test: Test1 Results Name: Res21 Run Started: 10/22/2010 - 11:49:06 Run Ended: 10/22/2010 - 11:49:10 Summary Results ======= ======= Passed: 0 Failed: 0 Warnings: 0 Detailed Results ======= ======= Iteration: 1 ============= Action: Log In To Flight ============= Step: Login: Dialog Step: Agent Name:.SetText: \"Bobba Fett\" Step: Agent Name:.Type: \"&lt__MicTab&gt\" Step: Password:.SetSecureText: \"4cc08e88683135b35bb8a7dab8442c69b8441f3e\" Step: OK.Click: Step: Flight Reservations: Dialog Step: OK.Click: Congratulations... You are now able to run QTP/UFT automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"HP UFT/QTP"},{"location":"RemoteLaunch-User-Guide/HP-UFT--QTP/#hp-uft-qtp","text":"HP\u00ae QuickTest Professional\u00ae (hereafter QTP) is an automated functional test automation system that lets you record application operations and generate VBA test automation scripts that can be used to playback the test script against the test application. HP\u00ae Unified Functional Testing\u00ae (hereafter UFT) is an updated version of QTP that also includes functionality for web service testing. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of QTP and UFT on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated QTP and UFT tests. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 9.0 of Quick Test Professional. For accessing UFT, you'd need at least version 4.0 of SpiraTest/Team and version 11.0 of UFT.","title":"HP UFT / QTP"},{"location":"RemoteLaunch-User-Guide/HP-UFT--QTP/#installing-the-uftqtp-engine","text":"This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the QuickTestProAutomationEngine.zip file from the Inflectra website and locate the appropriate QuickTestProX.dll or UftX.dll for the version of QTP or UFT that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"QuickTestProX.dll\" or \"UftX.dll\" (where X is the appropriate version) into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For QTP this should be QuickTestProX where 'X' is the version number of the DLL file that you are using. For UFT this should be UftX where 'X' is the version number of the DLL file that you are using. Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with QTP listed as an available automation engine.","title":"Installing the UFT/QTP Engine"},{"location":"RemoteLaunch-User-Guide/HP-UFT--QTP/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated QTP or UFT test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Overview\" tab and scroll down to the 'Automation' section: You need to enter the following fields: Automation Engine - Choose the QTP/UFT Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with QTP/UFT only supports referencing QTP/UFT test script folder paths and not physically uploading the test scripts into SpiraTeam. Filename -- This needs to be the full path to the QTP/UFT test script folder (i.e. the folder that you open in QTP/UFT to run the test). To make this easier across different machines, you can use several constants for standard Windows locations (see example in screenshot): [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the QTP /UFT Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/HP-UFT--QTP/#using-parameterized-test-cases","text":"There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your QTP/UFT automated test script. This is very useful if you have a data-driven QTP/UFT test script that accepts input parameters from an external data source. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${login} needs to match the name of the input parameter defined within the QTP/UFT script in its input parameters configuration.","title":"Using Parameterized Test Cases"},{"location":"RemoteLaunch-User-Guide/HP-UFT--QTP/#executing-the-qtpuft-test-sets-from-spirateam","text":"There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the QTP/UFT Test Sets from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/HP-UFT--QTP/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the QTP/UFT automated test cases and click on its hyperlink to display the test set details page. You need to add at least one automated test case to the test set: Then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination:","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/HP-UFT--QTP/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the QTP/UFT test: Passed -- The QTP/UFT automated test ran successfully and all the test conditions in the test script passed Failed -- The QTP/UFT automated test ran successfully, but at least one test condition in the test script failed. Blocked -- The QTP/UFT automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see browser or application windows launch as QuickTest Pro (QTP) or Unified Functional Testing (UFT) executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by QTP/UFT, you will see the following information: This screen indicates the status of the test run that was reported back from QTP/UFT together with any messages or other information. The Test Name indicates the name of the test inside QTP/UFT, and the execution status corresponds the matching status inside QTP/UFT as illustrated below: QTP/UFT Status SpiraTeam Status Passed Passed Failed Failed Warning Caution Stopped Blocked Not Applicable N/A (Any other status) Not Run In addition, the detailed test report from QTP/UFT is below. It will contain messages such as: QuickTest Professional Test: Test1 Results Name: Res21 Run Started: 10/22/2010 - 11:49:06 Run Ended: 10/22/2010 - 11:49:10 Summary Results ======= ======= Passed: 0 Failed: 0 Warnings: 0 Detailed Results ======= ======= Iteration: 1 ============= Action: Log In To Flight ============= Step: Login: Dialog Step: Agent Name:.SetText: \"Bobba Fett\" Step: Agent Name:.Type: \"&lt__MicTab&gt\" Step: Password:.SetSecureText: \"4cc08e88683135b35bb8a7dab8442c69b8441f3e\" Step: OK.Click: Step: Flight Reservations: Dialog Step: OK.Click: Congratulations... You are now able to run QTP/UFT automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Executing the Test Sets"},{"location":"RemoteLaunch-User-Guide/JMeter/","text":"JMeter Apache JMeter is a free, open source Java desktop application designed to load test functional behavior and measure performance. It was originally designed for testing Web Applications but has since expanded to other test functions. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of JMeter on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated JMeter performance tests. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 2.5 of JMeter. Installing the JMeter Engine This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the JMeterEngine.zip file from the Inflectra website and locate the appropriate JMeterX.dll for the version of JMeter that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"*JMeter*X.dll\" (where X is the appropriate version) into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For JMeter this should be JMeterX where 'X' is the version number of the DLL file that you are using. Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with JMeter listed as an available automation engine. Advanced Settings You can modify the JMeter configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The JMeter 2.x engine adds its own tab to this page which allows you to configure how JMeter operates: The following fields can be specified on this screen: JMeter Location -- This should point to the location on the host computer where JMeter is installed. You can click on the browse button and navigate to the location of the JMeter.bat file. Trace Logging -- When selected, this will log additional trace and debugging information to the Windows Event Log. This should not be selected in a production environment. Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated JMeter test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the JMeter Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with JMeter only supports referencing JMeter test script files and not physically uploading the test scripts into SpiraTeam. Filename -- This consists of the following elements: The full path to the JMeter test script. To make this easier across different machines, you can use several constants for standard Windows locations (see example in screenshot): [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Optionally you can include JMeter command-line arguments by separating them with a pipe (|) character. Examples of Filenames you can enter in SpiraTeam include: [MyDocuments]JMeter\\JMeter-SampleScript.jmx [MyDocuments]JMeter\\JMeter-SampleScript.jmx|-P 81 [MyDocuments]JMeter\\JMeter-SampleScript.jmx|-P 81 -H 192.168.117.25 Document Type -- This allows you to choose which document type the automated test script will be categorized under. Document Folder --This allows you to choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the JMeter Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Using Parameterized Test Cases There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your JMeter automated test script. This is very useful if you have a data-driven JMeter test script that expects specific JMeter properties to be passed to the test script. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${login} needs to match the name of the property defined within the JMeter script. Executing the JMeter Test Sets from SpiraTeam There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the JMeter automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination: Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be executed. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the JMeter test: Passed -- The JMeter automated test ran successfully and no failures or errors were logged. Failed -- The JMeter automated test ran successfully, but at least one error or failure was logged. Blocked -- The JMeter automated test did not run successfully. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you will see a Windows command prompt open as JMeter executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by JMeter, you will see the following information: This screen indicates the status of the test run that was reported back from JMeter together with any messages or other information. The Test Name indicates the name of the test inside JMeter and the execution status corresponds the rules described above. In addition, the detailed test report from JMeter is below. It will contain messages such as: Response Assertion ( http://www.inflectra.com/ ): failure=true, error=false, message='Test failed: text expected to contain /(?i)Purchase Our Products Online/' Response Assertion ( http://www.inflectra.com/SpiraTest/Default.aspx ): failure=true, error=false, message='Test failed: text expected to contain /(?i)Purchase Our Products Online/' Response Assertion ( http://www.inflectra.com/Purchase/Default.aspx ): failure=false, error=false, message='' Response Assertion ( https://www.inflectra.com/Purchase/Default.aspx ): failure=false, error=false, message='' Congratulations... You are now able to run JMeter automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"JMeter"},{"location":"RemoteLaunch-User-Guide/JMeter/#jmeter","text":"Apache JMeter is a free, open source Java desktop application designed to load test functional behavior and measure performance. It was originally designed for testing Web Applications but has since expanded to other test functions. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of JMeter on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated JMeter performance tests. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 2.5 of JMeter.","title":"JMeter"},{"location":"RemoteLaunch-User-Guide/JMeter/#installing-the-jmeter-engine","text":"This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the JMeterEngine.zip file from the Inflectra website and locate the appropriate JMeterX.dll for the version of JMeter that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"*JMeter*X.dll\" (where X is the appropriate version) into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For JMeter this should be JMeterX where 'X' is the version number of the DLL file that you are using. Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with JMeter listed as an available automation engine.","title":"Installing the JMeter Engine"},{"location":"RemoteLaunch-User-Guide/JMeter/#advanced-settings","text":"You can modify the JMeter configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The JMeter 2.x engine adds its own tab to this page which allows you to configure how JMeter operates: The following fields can be specified on this screen: JMeter Location -- This should point to the location on the host computer where JMeter is installed. You can click on the browse button and navigate to the location of the JMeter.bat file. Trace Logging -- When selected, this will log additional trace and debugging information to the Windows Event Log. This should not be selected in a production environment.","title":"Advanced Settings"},{"location":"RemoteLaunch-User-Guide/JMeter/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated JMeter test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the JMeter Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with JMeter only supports referencing JMeter test script files and not physically uploading the test scripts into SpiraTeam. Filename -- This consists of the following elements: The full path to the JMeter test script. To make this easier across different machines, you can use several constants for standard Windows locations (see example in screenshot): [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Optionally you can include JMeter command-line arguments by separating them with a pipe (|) character. Examples of Filenames you can enter in SpiraTeam include: [MyDocuments]JMeter\\JMeter-SampleScript.jmx [MyDocuments]JMeter\\JMeter-SampleScript.jmx|-P 81 [MyDocuments]JMeter\\JMeter-SampleScript.jmx|-P 81 -H 192.168.117.25 Document Type -- This allows you to choose which document type the automated test script will be categorized under. Document Folder --This allows you to choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the JMeter Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/JMeter/#using-parameterized-test-cases","text":"There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your JMeter automated test script. This is very useful if you have a data-driven JMeter test script that expects specific JMeter properties to be passed to the test script. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${login} needs to match the name of the property defined within the JMeter script.","title":"Using Parameterized Test Cases"},{"location":"RemoteLaunch-User-Guide/JMeter/#executing-the-jmeter-test-sets-from-spirateam","text":"There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the JMeter Test Sets from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/JMeter/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the JMeter automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination:","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/JMeter/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be executed. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the JMeter test: Passed -- The JMeter automated test ran successfully and no failures or errors were logged. Failed -- The JMeter automated test ran successfully, but at least one error or failure was logged. Blocked -- The JMeter automated test did not run successfully. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you will see a Windows command prompt open as JMeter executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by JMeter, you will see the following information: This screen indicates the status of the test run that was reported back from JMeter together with any messages or other information. The Test Name indicates the name of the test inside JMeter and the execution status corresponds the rules described above. In addition, the detailed test report from JMeter is below. It will contain messages such as: Response Assertion ( http://www.inflectra.com/ ): failure=true, error=false, message='Test failed: text expected to contain /(?i)Purchase Our Products Online/' Response Assertion ( http://www.inflectra.com/SpiraTest/Default.aspx ): failure=true, error=false, message='Test failed: text expected to contain /(?i)Purchase Our Products Online/' Response Assertion ( http://www.inflectra.com/Purchase/Default.aspx ): failure=false, error=false, message='' Response Assertion ( https://www.inflectra.com/Purchase/Default.aspx ): failure=false, error=false, message='' Congratulations... You are now able to run JMeter automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Executing the Test Sets"},{"location":"RemoteLaunch-User-Guide/LoadRunner/","text":"LoadRunner HP\u00ae LoadRunner is a load testing system that lets you record application performance by a number of 'virtual users'. This section covers installing and using the Engine to report back statistics of run scenarios. ***Note**: This integration requires at least version 3.0 of SpiraTest/Team and version 11 of LoadRunner. The extension has not been tested on previous versions of LoadRunner due to lack of availability of previous released versions.* Installing the LoadRunner11 Engine This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the LoadRunner11Engine.zip file from the Inflectra website. Copy the files in the ZIP file into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users, and will be displayed in the dropdown when the user selects the Tester. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For LoadRunner, it needs to be \" LoadRunner11 \". Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with LoadRunner listed as an available automation engine. Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and linking it to a Load Runner Scenario. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the LoadRunner Automation Engine that you created in the previous section from the drop-down list. Script Type -- For LoadRunner, all scenarios must be stored on the local testing machine so 'Linked' must be selected. If you select 'Attached', when the scenario is attempted to be executed it will be marked as blocked and skipped. Filename -- This needs to be the full path to the LoadRunner Scenario (*.lrs) file. Certain tokens are allowed to be able to specify common locations across different operating systems. Note that the tokens are case-sensitive, and there are no spaces in them. A list of tokens are: [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated scenario will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated scenario will be stored in. Version -- The version of the scenario (1.0 is used if no value specified) Test Script -- Not used. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Using Parameterized Test Cases There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your LoadRunner scenario. This is very useful if you have a data-driven LoadRunner scenario that has custom parameters used that you would like to change based on the test. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${login} needs to match the name of the custom parameter defined in the LoadRunner scenario. Invalid parameters will be silently ignored by the LoadRunner engine. Parameters must have a unique name. Executing the LoadRunner Scenario from SpiraTeam There are two ways to execute a scenario in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified as the Host name in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note : Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the LoadRunner test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination: Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be executed. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the LoadRunner execution: Passed -- The Scenario ran and reported no error messages. Warning, Debug, and Informational messages may have been logged, however. Failed -- The Scenario ran and at least one error message was reported. Blocked -- There was an error with the Test Set or LoadRunner application. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. ***Note**: While the tests are executing you may see browser or application windows launch as LoadRunner runs the scenario and connects VUsers to their tasks.* Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by LoadRunner, you will see the following information: This screen indicates the status of the scenario that was reported back from LoadRunner together with any messages or other information. Because LoadRunner only reports statistics on the scenarios that was run, the test set will always be marked as passed -- regardless of how long it took, unless there were errors reported. If any errors are reported, the test will be marked as Failed. The Message of the test will report the duration the scenario took, along with the count of VUsers that reported an error, the number that reported a pass, and the hits per minute on the application. A more detailed report will be included in the test run's details -- the information above, and then any added Execution Messages and messages logged by the script in time order. Note : LoadRunner's engine is very basic at this stage. If you have issues with a scenario not reporting or executing properly, please let Inflectra's support team know.","title":"LoadRunner"},{"location":"RemoteLaunch-User-Guide/LoadRunner/#loadrunner","text":"HP\u00ae LoadRunner is a load testing system that lets you record application performance by a number of 'virtual users'. This section covers installing and using the Engine to report back statistics of run scenarios. ***Note**: This integration requires at least version 3.0 of SpiraTest/Team and version 11 of LoadRunner. The extension has not been tested on previous versions of LoadRunner due to lack of availability of previous released versions.*","title":"LoadRunner"},{"location":"RemoteLaunch-User-Guide/LoadRunner/#installing-the-loadrunner11-engine","text":"This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the LoadRunner11Engine.zip file from the Inflectra website. Copy the files in the ZIP file into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users, and will be displayed in the dropdown when the user selects the Tester. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For LoadRunner, it needs to be \" LoadRunner11 \". Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with LoadRunner listed as an available automation engine.","title":"Installing the LoadRunner11 Engine"},{"location":"RemoteLaunch-User-Guide/LoadRunner/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and linking it to a Load Runner Scenario. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the LoadRunner Automation Engine that you created in the previous section from the drop-down list. Script Type -- For LoadRunner, all scenarios must be stored on the local testing machine so 'Linked' must be selected. If you select 'Attached', when the scenario is attempted to be executed it will be marked as blocked and skipped. Filename -- This needs to be the full path to the LoadRunner Scenario (*.lrs) file. Certain tokens are allowed to be able to specify common locations across different operating systems. Note that the tokens are case-sensitive, and there are no spaces in them. A list of tokens are: [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated scenario will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated scenario will be stored in. Version -- The version of the scenario (1.0 is used if no value specified) Test Script -- Not used. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/LoadRunner/#using-parameterized-test-cases","text":"There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your LoadRunner scenario. This is very useful if you have a data-driven LoadRunner scenario that has custom parameters used that you would like to change based on the test. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${login} needs to match the name of the custom parameter defined in the LoadRunner scenario. Invalid parameters will be silently ignored by the LoadRunner engine. Parameters must have a unique name.","title":"Using Parameterized Test Cases"},{"location":"RemoteLaunch-User-Guide/LoadRunner/#executing-the-loadrunner-scenario-from-spirateam","text":"There are two ways to execute a scenario in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the LoadRunner Scenario from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/LoadRunner/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified as the Host name in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note : Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the LoadRunner test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination:","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/LoadRunner/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be executed. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the LoadRunner execution: Passed -- The Scenario ran and reported no error messages. Warning, Debug, and Informational messages may have been logged, however. Failed -- The Scenario ran and at least one error message was reported. Blocked -- There was an error with the Test Set or LoadRunner application. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. ***Note**: While the tests are executing you may see browser or application windows launch as LoadRunner runs the scenario and connects VUsers to their tasks.* Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by LoadRunner, you will see the following information: This screen indicates the status of the scenario that was reported back from LoadRunner together with any messages or other information. Because LoadRunner only reports statistics on the scenarios that was run, the test set will always be marked as passed -- regardless of how long it took, unless there were errors reported. If any errors are reported, the test will be marked as Failed. The Message of the test will report the duration the scenario took, along with the count of VUsers that reported an error, the number that reported a pass, and the hits per minute on the application. A more detailed report will be included in the test run's details -- the information above, and then any added Execution Messages and messages logged by the script in time order. Note : LoadRunner's engine is very basic at this stage. If you have issues with a scenario not reporting or executing properly, please let Inflectra's support team know.","title":"Executing the Test Sets"},{"location":"RemoteLaunch-User-Guide/NeoLoad/","text":"NeoLoad Neotys NeoLoad is a performance and load testing system that lets you record application performance by a number of 'virtual users' and measure the performance against specified Service Level Agreement (SLA) metrics for the application. When you use NeoLoad with SpiraTest you can report back pass/fail/caution by comparing the actual results against the specified SLA metrics. This section covers installing and using the Engine to report back statistics of run scenarios as well as the results of the test compared to the required SLAs. ***Note**: This integration requires at least version 4.0 of SpiraTest/Team and has been tested against version 5.0 of NeoLoad.* Installing the NeoLoad Engine This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the NeoLoadEngine.zip file from the Inflectra website. Copy the files in the ZIP file into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users, and will be displayed in the dropdown when the user selects the Tester. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For NeoLoad, it needs to be simply \" NeoLoad \". Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with NeoLoad listed as an available automation engine. NeoLoad RemoteLaunch Settings You will need to modify the NeoLoad configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The NeoLoad engine adds its own tab to this page which allows you to configure how NeoLoad operates: The following fields can be specified on this screen: NeoLoad Location -- This should be folder containing the \"NeoLoadCmd.exe\" executable that will be used to actually run the automated tests. Attach PDF Report -- NeoLoad has a built-in report generator that can create detailed Acrobat (PDF) format reports. Enabling this option will attach these reports to the test runs recorded in SpiraTeam. Run as Administrator -- Sometimes NeoLoad needs to be run as a Windows elevated process, in which case, choose the \"Run as Administrator\" option. Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and linking it to a NeoLoad project and scenario. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and go to the \"Automation\" section in the main \"Overview\" tab: You need to enter the following fields: Automation Engine - Choose the NeoLoad Automation Engine that you created in the previous section from the drop-down list. Script Type -- For NeoLoad, all scenarios must be stored on the local testing machine so 'Linked' must be selected. If you select 'Attached', when the scenario is attempted to be executed it will be marked as blocked and skipped. Filename -- This needs to be the full path to the NeoLoad project file (*.nlp) file followed by the name of the NeoLoad scenario. The two components need to be separated by a pipe (|) character. Certain tokens are allowed to be able to specify common locations across different operating systems. Note that the tokens are case-sensitive, and there are no spaces in them. A list of tokens are: [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- You can choose which document type the automated scenario will be categorized under. Document Folder -- You can choose which document folder the automated scenario will be stored in. Version -- The version of the scenario (1.0 is used if no value specified) Test Script -- Not used. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Using Parameterized Test Cases Currently the NeoLoad automation engine does not support the passing of parameter values from SpiraTeam to NeoLoad. Executing the NeoLoad Scenario from SpiraTeam There are three ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. Execute the test cases from the command-line or a build script We shall outline each of these three scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified as the Host name in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note : Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the NeoLoad test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be executed. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the NeoLoad execution: Passed -- The scenario ran and reported no error messages and all SLAs were passed. Caution -- The scenario ran and at least one SLA reported back as acceptable Failed -- The scenario ran and at least one error message was reported or at least one SLA was reported back as failed. Blocked -- There was an error with the Test Set or NeoLoad application. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. ***Note**: While the tests are executing you may see browser or application windows launch as NeoLoad runs the scenario and connects VUsers to their tasks.* Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by NeoLoad, you will see the following test run summary information: This section of the screen indicates how long the test took to execute, the overall status, which release was being executed, which test set it was a part of and each of the key summary statistics, together with information on how they compared to the defined SLA: N/A -- There was no SLA defined for this metric Passed -- There is an SLA defined for this metric and it was passed. Caution -- There is an SLA defined for this metric and it was considered less than a pass, but still acceptable. Failed -- There is an SLA defined for this metric and it was not met successfully. In addition, if you scroll down, in the \"Console Output\" section of the report there is more detailed information: The Message of the test will report the number of total pages, number of total hits, number of total users, number of errors as well as the total count of virtual users. In addition, more detailed information is displayed in the test run details: Top 5 errors by page Top 5 alerts by page Top 5 average response times by page Top 5 maximum response times by page Finally, if you have chosen the option to attach the NeoLoad PDF report, in the Attachments section of the Test Run, that will be listed: Congratulations... You are now able to run automated NeoLoad performance scenarios and have the results be recorded within SpiraTest / SpiraTeam.","title":"NeoLoad"},{"location":"RemoteLaunch-User-Guide/NeoLoad/#neoload","text":"Neotys NeoLoad is a performance and load testing system that lets you record application performance by a number of 'virtual users' and measure the performance against specified Service Level Agreement (SLA) metrics for the application. When you use NeoLoad with SpiraTest you can report back pass/fail/caution by comparing the actual results against the specified SLA metrics. This section covers installing and using the Engine to report back statistics of run scenarios as well as the results of the test compared to the required SLAs. ***Note**: This integration requires at least version 4.0 of SpiraTest/Team and has been tested against version 5.0 of NeoLoad.*","title":"NeoLoad"},{"location":"RemoteLaunch-User-Guide/NeoLoad/#installing-the-neoload-engine","text":"This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the NeoLoadEngine.zip file from the Inflectra website. Copy the files in the ZIP file into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users, and will be displayed in the dropdown when the user selects the Tester. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For NeoLoad, it needs to be simply \" NeoLoad \". Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with NeoLoad listed as an available automation engine.","title":"Installing the NeoLoad Engine"},{"location":"RemoteLaunch-User-Guide/NeoLoad/#neoload-remotelaunch-settings","text":"You will need to modify the NeoLoad configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The NeoLoad engine adds its own tab to this page which allows you to configure how NeoLoad operates: The following fields can be specified on this screen: NeoLoad Location -- This should be folder containing the \"NeoLoadCmd.exe\" executable that will be used to actually run the automated tests. Attach PDF Report -- NeoLoad has a built-in report generator that can create detailed Acrobat (PDF) format reports. Enabling this option will attach these reports to the test runs recorded in SpiraTeam. Run as Administrator -- Sometimes NeoLoad needs to be run as a Windows elevated process, in which case, choose the \"Run as Administrator\" option.","title":"NeoLoad RemoteLaunch Settings"},{"location":"RemoteLaunch-User-Guide/NeoLoad/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and linking it to a NeoLoad project and scenario. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and go to the \"Automation\" section in the main \"Overview\" tab: You need to enter the following fields: Automation Engine - Choose the NeoLoad Automation Engine that you created in the previous section from the drop-down list. Script Type -- For NeoLoad, all scenarios must be stored on the local testing machine so 'Linked' must be selected. If you select 'Attached', when the scenario is attempted to be executed it will be marked as blocked and skipped. Filename -- This needs to be the full path to the NeoLoad project file (*.nlp) file followed by the name of the NeoLoad scenario. The two components need to be separated by a pipe (|) character. Certain tokens are allowed to be able to specify common locations across different operating systems. Note that the tokens are case-sensitive, and there are no spaces in them. A list of tokens are: [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- You can choose which document type the automated scenario will be categorized under. Document Folder -- You can choose which document folder the automated scenario will be stored in. Version -- The version of the scenario (1.0 is used if no value specified) Test Script -- Not used. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/NeoLoad/#using-parameterized-test-cases","text":"Currently the NeoLoad automation engine does not support the passing of parameter values from SpiraTeam to NeoLoad.","title":"Using Parameterized Test Cases"},{"location":"RemoteLaunch-User-Guide/NeoLoad/#executing-the-neoload-scenario-from-spirateam","text":"There are three ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. Execute the test cases from the command-line or a build script We shall outline each of these three scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the NeoLoad Scenario from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/NeoLoad/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified as the Host name in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note : Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the NeoLoad test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/NeoLoad/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be executed. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the NeoLoad execution: Passed -- The scenario ran and reported no error messages and all SLAs were passed. Caution -- The scenario ran and at least one SLA reported back as acceptable Failed -- The scenario ran and at least one error message was reported or at least one SLA was reported back as failed. Blocked -- There was an error with the Test Set or NeoLoad application. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. ***Note**: While the tests are executing you may see browser or application windows launch as NeoLoad runs the scenario and connects VUsers to their tasks.* Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by NeoLoad, you will see the following test run summary information: This section of the screen indicates how long the test took to execute, the overall status, which release was being executed, which test set it was a part of and each of the key summary statistics, together with information on how they compared to the defined SLA: N/A -- There was no SLA defined for this metric Passed -- There is an SLA defined for this metric and it was passed. Caution -- There is an SLA defined for this metric and it was considered less than a pass, but still acceptable. Failed -- There is an SLA defined for this metric and it was not met successfully. In addition, if you scroll down, in the \"Console Output\" section of the report there is more detailed information: The Message of the test will report the number of total pages, number of total hits, number of total users, number of errors as well as the total count of virtual users. In addition, more detailed information is displayed in the test run details: Top 5 errors by page Top 5 alerts by page Top 5 average response times by page Top 5 maximum response times by page Finally, if you have chosen the option to attach the NeoLoad PDF report, in the Attachments section of the Test Run, that will be listed: Congratulations... You are now able to run automated NeoLoad performance scenarios and have the results be recorded within SpiraTest / SpiraTeam.","title":"Executing the Test Sets"},{"location":"RemoteLaunch-User-Guide/Ranorex/","text":"Ranorex Ranorex is an automated functional test automation system that lets you record application operations and generate .NET language (C#, VB.NET) test automation scripts that can be used to playback the test script against the test application. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of Ranorex on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated Ranorex tests. This plugin was developed by one of our partners (step2IT GmbH) but has been formally tested by Inflectra and is fully supported by Inflectra. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 3.0 of Ranorex. Installing the Ranorex Engine This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the RanorexAutomationEngine.zip file from the Inflectra website and locate the appropriate RanorexAutomationEngine.dll for the version of Ranorex that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"RanorexAutomationEngine.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For Ranorex this should always be RanorexEngine . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with Ranorex listed as an available automation engine: Advanced Settings You can modify the Ranorex configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The Ranorex engine adds its own tab to this page which allows you to configure how Ranorex operates: The following fields can be specified on this screen: Result Path -- This is the folder where the results of Ranorex tests will be stored. The currently logged-in user needs to have Read/Write permissions over this folder. Trace Logging -- When selected, this will log additional trace and debugging information to the Windows Event Log. This should not be selected in a production environment. Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated Ranorex test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Ranorex Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with Ranorex only supports referencing Ranorex test script files and not physically uploading the test scripts into SpiraTeam. Filename -- This needs to be the full path to the Ranorex test suite. To make this easier across different machines, you can use several constants for standard Windows locations (see example in screenshot): [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. If you'd like to pass parameters to Ranorex you can specify them by separating them from the filename with a pipe (\"|\") character. For example to run a specific Ranorex test case you can use the following \"filename\": c:\\test\\mytestsuit.exe|/testcase:addDataTest Document Type -- This allows you to choose which document type the automated test script will be categorized under. Document Folder --This allows you to choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the Ranorex Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Using Parameterized Test Cases There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your Ranorex automated test suite. This is very useful if you have a data-driven Ranorex test suite that defines input variables from an external data source. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${login} needs to match the name of the variable defined within the Ranorex script in its variables configuration. Executing the Ranorex Test Sets from SpiraTeam There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the Ranorex automated test cases and click on its hyperlink to display the test set details page: Lower down, the list of test cases in the test set are displayed: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination: Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the Ranorex test: Passed -- The Ranorex automated test ran successfully and all the test steps in the test script passed and no assertions were thrown. Failed -- The Ranorex automated test ran successfully, but at least one test step failed or at least one assertion failed. Caution -- The Ranorex automated test run successfully, but at least one warning was logged in one of the test steps. Blocked -- The Ranorex automated test did not run successfully or at least one timeout error was recorded. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you will see browser windows launch as Ranorex executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by Ranorex, you will see the following information: This screen indicates the status of the test run that was reported back from Ranorex together with any messages or other information. The Test Name indicates the name of the test inside Ranorex and the execution status corresponds the matching status inside Ranorex as illustrated below: Ranorex Status SpiraTeam Status Success Passed Failed Failed In addition, the detailed test report from Ranorex is available in the large text-box below. It will contain messages such as: +-----------------------------------------------------------------------+ | [2011/10/14 14:08:32.795][Debug ][Logger]: Console logger | | starting. | | | | [2011/10/14 14:08:32.874][Info ][Test]: Test Suite 'WinForms | | Test' started. | | | | [2011/10/14 14:08:32.889][Info ][Test]: Test Case | | 'VS2005_Application_Test' started. | | | | [2011/10/14 14:08:33.467][Success][Test]: Test Module | | 'StartWinformsSample' completed with status 'Success'. | | | | [2011/10/14 14:08:33.467][Info ][Test]: Test Module | | 'CheckIfApplicationAlive' started. | | | | [2011/10/14 14:08:33.608][Info ][Validation]: Validating Exists | | on item 'WinFormsApp.ButtonTest_PushButton'. | | | | [2011/10/14 14:09:55.718][Failure][Test]: Test Case | | 'VS2005_Application_Test' completed with status 'Failed'. | | | | [2011/10/14 14:09:55.718][Failure][Test]: Test Suite 'WinForms | | Test' completed with status 'Failed'. | +-----------------------------------------------------------------------+ Congratulations... You are now able to run Ranorex automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Ranorex"},{"location":"RemoteLaunch-User-Guide/Ranorex/#ranorex","text":"Ranorex is an automated functional test automation system that lets you record application operations and generate .NET language (C#, VB.NET) test automation scripts that can be used to playback the test script against the test application. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of Ranorex on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated Ranorex tests. This plugin was developed by one of our partners (step2IT GmbH) but has been formally tested by Inflectra and is fully supported by Inflectra. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 3.0 of Ranorex.","title":"Ranorex"},{"location":"RemoteLaunch-User-Guide/Ranorex/#installing-the-ranorex-engine","text":"This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the RanorexAutomationEngine.zip file from the Inflectra website and locate the appropriate RanorexAutomationEngine.dll for the version of Ranorex that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"RanorexAutomationEngine.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For Ranorex this should always be RanorexEngine . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with Ranorex listed as an available automation engine:","title":"Installing the Ranorex Engine"},{"location":"RemoteLaunch-User-Guide/Ranorex/#advanced-settings","text":"You can modify the Ranorex configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The Ranorex engine adds its own tab to this page which allows you to configure how Ranorex operates: The following fields can be specified on this screen: Result Path -- This is the folder where the results of Ranorex tests will be stored. The currently logged-in user needs to have Read/Write permissions over this folder. Trace Logging -- When selected, this will log additional trace and debugging information to the Windows Event Log. This should not be selected in a production environment.","title":"Advanced Settings"},{"location":"RemoteLaunch-User-Guide/Ranorex/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated Ranorex test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Ranorex Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with Ranorex only supports referencing Ranorex test script files and not physically uploading the test scripts into SpiraTeam. Filename -- This needs to be the full path to the Ranorex test suite. To make this easier across different machines, you can use several constants for standard Windows locations (see example in screenshot): [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. If you'd like to pass parameters to Ranorex you can specify them by separating them from the filename with a pipe (\"|\") character. For example to run a specific Ranorex test case you can use the following \"filename\": c:\\test\\mytestsuit.exe|/testcase:addDataTest Document Type -- This allows you to choose which document type the automated test script will be categorized under. Document Folder --This allows you to choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the Ranorex Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/Ranorex/#using-parameterized-test-cases","text":"There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your Ranorex automated test suite. This is very useful if you have a data-driven Ranorex test suite that defines input variables from an external data source. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${login} needs to match the name of the variable defined within the Ranorex script in its variables configuration.","title":"Using Parameterized Test Cases"},{"location":"RemoteLaunch-User-Guide/Ranorex/#executing-the-ranorex-test-sets-from-spirateam","text":"There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the Ranorex Test Sets from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/Ranorex/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the Ranorex automated test cases and click on its hyperlink to display the test set details page: Lower down, the list of test cases in the test set are displayed: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination:","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/Ranorex/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the Ranorex test: Passed -- The Ranorex automated test ran successfully and all the test steps in the test script passed and no assertions were thrown. Failed -- The Ranorex automated test ran successfully, but at least one test step failed or at least one assertion failed. Caution -- The Ranorex automated test run successfully, but at least one warning was logged in one of the test steps. Blocked -- The Ranorex automated test did not run successfully or at least one timeout error was recorded. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you will see browser windows launch as Ranorex executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by Ranorex, you will see the following information: This screen indicates the status of the test run that was reported back from Ranorex together with any messages or other information. The Test Name indicates the name of the test inside Ranorex and the execution status corresponds the matching status inside Ranorex as illustrated below: Ranorex Status SpiraTeam Status Success Passed Failed Failed In addition, the detailed test report from Ranorex is available in the large text-box below. It will contain messages such as: +-----------------------------------------------------------------------+ | [2011/10/14 14:08:32.795][Debug ][Logger]: Console logger | | starting. | | | | [2011/10/14 14:08:32.874][Info ][Test]: Test Suite 'WinForms | | Test' started. | | | | [2011/10/14 14:08:32.889][Info ][Test]: Test Case | | 'VS2005_Application_Test' started. | | | | [2011/10/14 14:08:33.467][Success][Test]: Test Module | | 'StartWinformsSample' completed with status 'Success'. | | | | [2011/10/14 14:08:33.467][Info ][Test]: Test Module | | 'CheckIfApplicationAlive' started. | | | | [2011/10/14 14:08:33.608][Info ][Validation]: Validating Exists | | on item 'WinFormsApp.ButtonTest_PushButton'. | | | | [2011/10/14 14:09:55.718][Failure][Test]: Test Case | | 'VS2005_Application_Test' completed with status 'Failed'. | | | | [2011/10/14 14:09:55.718][Failure][Test]: Test Suite 'WinForms | | Test' completed with status 'Failed'. | +-----------------------------------------------------------------------+ Congratulations... You are now able to run Ranorex automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Executing the Test Sets"},{"location":"RemoteLaunch-User-Guide/Rational-Functional-Tester/","text":"Rational Functional Tester IBM Rational Functional Tester (hereafter RFT) is software test automation tool used by quality assurance teams to perform automated regression testing. Testers create scripts by using a test recorder which captures a user's actions against their application under test. The recording mechanism creates a test script from the actions. The test script is produced as either a Java or Visual Basic.net application. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of RFT on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated RFT tests. Note: This integration requires at least version 3.0 of SpiraTest/Team. Installing the RFT Engine This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the RFTEngine.zip file from the Inflectra website and locate the appropriate RFTAutomationEngine.dll for the version of RFT that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"RFTAutomationEngine.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For RFT this should always be RFTAutomationEngine . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with RFT listed as an available automation engine. Advanced Settings You can modify the RFT configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The RFT engine adds its own tab to this page which allows you to configure how RFT operates: The following fields can be specified on this screen: RFT Location -- this is where the installation of RFT can be found. Typically it's C:\\Program Files\\IBM\\SDP\\FunctionalTester\\bin Workspace Location -- This is the folder where the RFT test scripts and generated log files will be stored. The currently logged-in user needs to have Read/Write permissions over this folder. Typically it's: C:\\Documents and Settings\\[User Name]\\IBM\\rationalsdp\\workspace on a Windows XP workstation or Windows 2003 server. C:\\Users\\[User Name]\\IBM\\rationalsdp\\workspace on a Windows Vista, 7, 2008 or 2008 R2 computer. Trace Logging -- When selected, this will log additional trace and debugging information to the Windows Event Log. This should not be selected in a production environment. Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated RFT test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the RFT Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with RFT only supports referencing RFT test script files and not physically uploading the test scripts into SpiraTeam. Filename -- This needs to consist of the following three components separated by a pipe (|) character (see the screenshot for an example): The name of the RFT project that the test is mapped to The name of the RFT script in the project that the test is mapped to Either \"java\" or \"net\" depending on whether you have a Java or .NET test script Document Type -- This allows you to choose which document type the automated test script will be categorized under. Document Folder --This allows you to choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the RFT Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Using Parameterized Test Cases There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your RFT automated test suite. This is very useful if you have a data-driven RFT test suite that defines input variables from an external data source. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${login} is actually not used when passing the data to RFT, only the values are passed. Therefore it's important that the parameters are stored in the order they are expected by your RFT test script. Executing the RFT Test Sets from SpiraTeam There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the RFT automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you need to set their values by right-clicking on the test case and choosing \"Edit Parameters\": Enter the parameter values and click \"Update\" to commit the change. This allows you to have the same test case in the test set multiple times with different data for each instance. Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the RFT test: Passed -- The RFT automated test ran successfully and all the test steps in the test script passed and no assertions were thrown. Failed -- The RFT automated test ran successfully, but at least one test step failed or at least one assertion failed. Caution -- The RFT automated test run successfully, but at least one warning was logged in one of the test steps. Blocked -- The RFT automated test did not run successfully. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you will see browser windows launch as RFT executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by RFT, you will see the following information: This screen indicates the status of the test run that was reported back from RFT together with any messages or other information. The Test Name indicates the name of the test inside RFT and the execution status corresponds the matching status inside RFT as illustrated below: RFT Status SpiraTeam Status PASS Passed FAIL Failed WARNING Caution In addition, the detailed test report from RFT is available in the large text-box below. It will contain messages such as: 07-Nov-2011 03:00:05.004 PM: Script Start - INFORMATION - Script start [Script1] 07-Nov-2011 03:00:05.035 PM: Simplified Script Group - INFORMATION - firefox.exe: self improvement - QuickStart Tutorials for Rational Functional Tester (RFT) - Stack Overflow - Mozilla Firefox 07-Nov-2011 03:00:05.035 PM: Timer Start - INFORMATION - Start timer: firefoxexeselfimprovementQuickSta_1 07-Nov-2011 03:00:25.535 PM: General - WARNING - Object Recognition is weak (above the warning threshold) 07-Nov-2011 03:00:49.488 PM: General - FAIL - Script1.testMain had an unhandled exception. 07-Nov-2011 03:00:49.488 PM: Script End - FAIL - Script end [Script1] Exception occurred during playback of script [Script1] [CRFCN0019E: RationalTestScriptException on line 49 of script Script1 - com.rational.test.ft.ObjectNotFoundException: CRFCN0661W: The recognition score of the found object does not qualify the object as a match. Looking for [GuiSubitemTestObject(Name: goToAWebSitetext, Map: GoToAWebSite)], best failing candidate score was [22500] with best failing description [{.class=.Text, .name=Go to a Web Site, .classIndex=0}].]. Congratulations... You are now able to run RFT automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Rational Functional Tester"},{"location":"RemoteLaunch-User-Guide/Rational-Functional-Tester/#rational-functional-tester","text":"IBM Rational Functional Tester (hereafter RFT) is software test automation tool used by quality assurance teams to perform automated regression testing. Testers create scripts by using a test recorder which captures a user's actions against their application under test. The recording mechanism creates a test script from the actions. The test script is produced as either a Java or Visual Basic.net application. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of RFT on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated RFT tests. Note: This integration requires at least version 3.0 of SpiraTest/Team.","title":"Rational Functional Tester"},{"location":"RemoteLaunch-User-Guide/Rational-Functional-Tester/#installing-the-rft-engine","text":"This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the RFTEngine.zip file from the Inflectra website and locate the appropriate RFTAutomationEngine.dll for the version of RFT that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"RFTAutomationEngine.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For RFT this should always be RFTAutomationEngine . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with RFT listed as an available automation engine.","title":"Installing the RFT Engine"},{"location":"RemoteLaunch-User-Guide/Rational-Functional-Tester/#advanced-settings","text":"You can modify the RFT configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The RFT engine adds its own tab to this page which allows you to configure how RFT operates: The following fields can be specified on this screen: RFT Location -- this is where the installation of RFT can be found. Typically it's C:\\Program Files\\IBM\\SDP\\FunctionalTester\\bin Workspace Location -- This is the folder where the RFT test scripts and generated log files will be stored. The currently logged-in user needs to have Read/Write permissions over this folder. Typically it's: C:\\Documents and Settings\\[User Name]\\IBM\\rationalsdp\\workspace on a Windows XP workstation or Windows 2003 server. C:\\Users\\[User Name]\\IBM\\rationalsdp\\workspace on a Windows Vista, 7, 2008 or 2008 R2 computer. Trace Logging -- When selected, this will log additional trace and debugging information to the Windows Event Log. This should not be selected in a production environment.","title":"Advanced Settings"},{"location":"RemoteLaunch-User-Guide/Rational-Functional-Tester/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated RFT test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the RFT Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with RFT only supports referencing RFT test script files and not physically uploading the test scripts into SpiraTeam. Filename -- This needs to consist of the following three components separated by a pipe (|) character (see the screenshot for an example): The name of the RFT project that the test is mapped to The name of the RFT script in the project that the test is mapped to Either \"java\" or \"net\" depending on whether you have a Java or .NET test script Document Type -- This allows you to choose which document type the automated test script will be categorized under. Document Folder --This allows you to choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the RFT Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/Rational-Functional-Tester/#using-parameterized-test-cases","text":"There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your RFT automated test suite. This is very useful if you have a data-driven RFT test suite that defines input variables from an external data source. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${login} is actually not used when passing the data to RFT, only the values are passed. Therefore it's important that the parameters are stored in the order they are expected by your RFT test script.","title":"Using Parameterized Test Cases"},{"location":"RemoteLaunch-User-Guide/Rational-Functional-Tester/#executing-the-rft-test-sets-from-spirateam","text":"There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the RFT Test Sets from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/Rational-Functional-Tester/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the RFT automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you need to set their values by right-clicking on the test case and choosing \"Edit Parameters\": Enter the parameter values and click \"Update\" to commit the change. This allows you to have the same test case in the test set multiple times with different data for each instance.","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/Rational-Functional-Tester/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the RFT test: Passed -- The RFT automated test ran successfully and all the test steps in the test script passed and no assertions were thrown. Failed -- The RFT automated test ran successfully, but at least one test step failed or at least one assertion failed. Caution -- The RFT automated test run successfully, but at least one warning was logged in one of the test steps. Blocked -- The RFT automated test did not run successfully. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you will see browser windows launch as RFT executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by RFT, you will see the following information: This screen indicates the status of the test run that was reported back from RFT together with any messages or other information. The Test Name indicates the name of the test inside RFT and the execution status corresponds the matching status inside RFT as illustrated below: RFT Status SpiraTeam Status PASS Passed FAIL Failed WARNING Caution In addition, the detailed test report from RFT is available in the large text-box below. It will contain messages such as: 07-Nov-2011 03:00:05.004 PM: Script Start - INFORMATION - Script start [Script1] 07-Nov-2011 03:00:05.035 PM: Simplified Script Group - INFORMATION - firefox.exe: self improvement - QuickStart Tutorials for Rational Functional Tester (RFT) - Stack Overflow - Mozilla Firefox 07-Nov-2011 03:00:05.035 PM: Timer Start - INFORMATION - Start timer: firefoxexeselfimprovementQuickSta_1 07-Nov-2011 03:00:25.535 PM: General - WARNING - Object Recognition is weak (above the warning threshold) 07-Nov-2011 03:00:49.488 PM: General - FAIL - Script1.testMain had an unhandled exception. 07-Nov-2011 03:00:49.488 PM: Script End - FAIL - Script end [Script1] Exception occurred during playback of script [Script1] [CRFCN0019E: RationalTestScriptException on line 49 of script Script1 - com.rational.test.ft.ObjectNotFoundException: CRFCN0661W: The recognition score of the found object does not qualify the object as a match. Looking for [GuiSubitemTestObject(Name: goToAWebSitetext, Map: GoToAWebSite)], best failing candidate score was [22500] with best failing description [{.class=.Text, .name=Go to a Web Site, .classIndex=0}].]. Congratulations... You are now able to run RFT automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Executing the Test Sets"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/","text":"RemoteLaunch Guide There are actually two separate versions of RemoteLaunch\u00ae that are available from Inflectra: The Microsoft Windows\u00ae compatible Spira RemoteLaunch\u00ae application that provides a graphic user interface application for executing automated tests on remote computers using various plugins for different testing technologies and have the results be sent to the configured SpiraTest/SpiraTeam server. The cross-platform Spira RemoteLaunchX\u2122 Java application that provides a lightweight console application that can execute simple command line scripts on the target computer and send the results back to the configured SpiraTest/SpiraTeam server. This application can be used in Microsoft Windows\u00ae, Linux or Apple MacOS X\u00ae computers provided that they have the Java 1.7 (or later) runtime installed. The first part of this section will describe how to use the Windows-only RemoteLaunch\u00ae GUI application and the second part will describe how to use the cross-platform RemoteLaunchX**\u2122** console application. Installing RemoteLaunch It is required that you install the program before copying or installing any test extensions for the program. Testing applications, like Selenium and QuickTest Pro can be installed with no regards to the client application -- if they are not installed by the time a test requiring them needs to be executed, the test extension will simply report an error or block for the specified test set. There are no options to the installer except for installation path. If you do not use the default installation path (typically C:\\Program Files\\Inflectra\\Spira RemoteLaunch\\ ), then make a note of where the installation path is, because it will be needed to install test extensions later. Installing a Test Extension A test extension is a single or a set of DLLs that the program will read upon startup and provides a link in which testing applications (like TestComplete and Squish) to report test information and status back to SpiraTeam. When you download a test extension, the ZIP file should contain at least one DLL file. Unless otherwise specified by a readme.txt file included in the compressed file, copy the DLL file to the \\extension directory located within Spira RemoteLaunch installation directory. (If no such folder exists, you must create it.) If an extension is removed or added, the program must be restarted for the any changes to take effect. The program will only load up to the first number of extensions that the license allows. Additional extensions will not be loaded or used during testing. RemoteLaunch runs in the background. To fully close RemoteLaunch you need to exit the application by right clicking on the icon in the task bar (usually in the lower right of your screen). This will cancel any currently running tests. Any scheduled tests, waiting to be executed will be paused until the program is restarted and polling resumed. If, when you restart the application, the new engine tab does not show up in RemoteLaunch, Windows may have blocked the engine dll in the extensions folder. To resolve this block: right click on the engine .dll file you placed in the extensions folder select the properties for the file, and unblock it you should now see the engine name in the RemoteLaunch tab Registration Spira RemoteLaunch has its own License key needed for using the program. You cannot use your existing SpiraTest/Plan/Team key in Spira RemoteLaunch. Upon the first launch of the program, you will be asked to update your license information: Enter in your organization name and license key in the email that was sent when you purchased the license, or as listed on your customer information page at http://inflectra.com . Trial licenses are good until the 28 th day of the listed month. The next time the program is run after the 28 th of the month, you will be prompted to re-enter a new permanent license key, or the program will be unusable. The license key can be updated at any time by going to the Tray Menu and select Help -> About. Once the About screen opens up, click the Update button in the license details section to update or change license information. Using RemoteLaunch Basic Unattended Operation When run, the program will start minimized to the system tray and will start its polling of the server. Polling will occur every 'x' minutes (60 by default) for any automated test sets that are scheduled to be run. When time comes for a test to be launched, it will start the test extension. The installed test extension will then perform the test and report results back to SpiraTeam. At the end of the test, the program will go back and resume scanning for tests that need to be executed. No user input is ever needed from the application itself. However, testing applications may pop up dialogs needing user input. For existing Inflectra testing extensions, effort was put in to avoid as much user-interaction as possible, but in some cases it is unavoidable. Client Configuration By right clicking on the system tray icon and selecting \"Configuration\", the application's window will open to the configuration panel. The panel has the following options: SpiraTeam Server Configuration: Server URL : This is the URL of the SpiraTeam installation. Be sure to not put /Login.aspx or any other page in the string, this should be just the root URL of the application's install. Login Username : This is the SpiraTeam login id of the user that you want the tests reported as. Note that while the application is polling and updating test results, if the user is logged into a web browser session, they will get kicked out. Login Password : The password to the Username above. Test : Clicking this will test the login to make sure the application can connect to the server properly. Server Polling: Automation Host Token : This field is required, and uniquely identifies the local testing machine. Any scheduled tests assigned to the Automation Host on SpiraTeam will get polled for this machine. Except in special circumstances, this ID should be unique among all testing machines. Important : This field must match the string that is entered into the Automation Host Details screen in the Token : field, or scheduled tests will not be recognized. Automatically Run Overdue Tests : When this is checked, any tests that are pulled from the SpiraTest server that has a scheduled date in the past will be marked as Overdue. Normally, overdue tests will not be executed. With this check, they will be executed as soon as the poll is finished. Continue polling server after a connect error: When this is checked, if RemoteLaunch receives an error connecting to the SpiraTest server, it will continue polling in the future. If this is unchecked, RemoteLaunch will switch to the error status upon encountering a connection error. It is important to check this option if your SpiraTest server will be periodically unavailable for server maintenance. Polling Frequency : How often in minutes the application will poll the SpiraTeam server for updates to the automation host's schedule. The default is 60 (1 hour), and should be fine for most installations. Note that tests will still be executed on their scheduled time, this is simply how often the program will talk to the SpiraTeam server to detect schedule changes. Updating the polling frequency will reset the currently running timers. Polling Read Ahead : How far ahead in minutes the program should read the schedule for the Automation host. Tests that are scheduled farther in advance will not show up as a pending test on the status screen. Extension Configuration If an extension has custom configuration options, they will appear as separate tabs located after the Client Setup tab. The contents of each tab will vary depending on the extension. View the extension's documentation for options given in those extensions. Status Screen The status screen is usually hidden, but can be brought up for display by double-clicking on the system tray icon. The top of the screen shows the current status, whether it's running a test or waiting to poll the server for an update. It will also show any errors present on the application, like a registration error or configuration issue. Under the status bar is a list of any pending or executing tests that are scheduled for this testing machine. The list will get cleared at every poll, so tests that have executed since the previous poll will still be on the list, and will show their execution status: Green Arrow : A green arrow indicates that the test is still running, or RemoteLaunch is waiting for a reply from the testing engine / test application. Blue Checkbox : A blue checkbox indicates that the test is completed, regardless of status of the individual test steps in the scheduled test set. Red Error : A red error indicator indicates that the test extension or the testing application ran into an issue (outside of test results). In this case, any further tests that require the extension will be marked as blocked, as the issue needs to be corrected within the extension settings or testing application. No Indication : No indication means that the test is currently awaiting for its scheduled date to start. Note that only one test will be launched at a time, so that if two tests are scheduled at the same time, the one with the lower TestSet ID will be executed first, then as soon as it's finished, the second scheduled test will be run. By highlighting a test that has not been executed yet, you can click the Force Execute button. This will cause the selected test to have its scheduled date to the current time, causing it to be immediately executed (or, if another test is already running, next in line for execution). At any time the Force Poll button can be clicked, causing RemoteLaunch to initiate an immediate poll of the SpiraTeam server to check for pending runs. The timers for the next server poll will be reset when the button is clicked. Tray Icon Menu Instead of operating from the application window, all functions exist on the tray icon menu as well, as well as some additional commands: Pause / Resume : The Pause/Resume option pauses or resumes the timers for polling and executing tests. If a test or server poll is already in progress, it will not cancel these. However, after they are finished, no further polls or tests will be run. Poll Now : This will force a server poll for upcoming tests, and reset the poll timer. Configuration : Opens the main window to the Configuration page. Help -> About : Opens the About window, which displays the current license information and any loaded extensions. Help -> View Help : Opens this PDF file in a browser. Exit : Will completely exit the program. Doing this will cancel any tests currently running and shut down the program. Any tests that were waiting to be executed will not execute until the program is restarted and the polling is resumed. You can double-click the try icon to bring up the main window on the Status page. Test Execution and Reporting All test handling is performed by the extension that the automated tests are configured for. Test Sets that have multiple Test Cases, the Test Cases will all be executed in order, sequentially. (No parallel executing.) At the start of execution for a Test Set, the test set will be updated in SpiraTeam as \"In Progress\". As tests are performed, the Test Cases will be updated with their status. The Test Set on the status screen will be marked with the executing icon. Once the Test Set is completed, the status of the Test Set will be changed to \"Completed\", and will be marked on the status screen with a completed icon. In case of an uncaught exception that is thrown by the testing extension, the Test Set will be marked \"Blocked\", and the Test Case will be recorded as Blocked. All other following tests will not be run and remain as Not Run. The Test Set must be reset to be executed again, and it is recommended to look into the cause of the error (recorded in the Blocked Test Case results) and correct it before rescheduling the test. This Test Set will be marked with and error icon. The same results are applied in the case where a Test Set contains a Test Case that references a testing extension that is not installed. Install the extension and re-run the Test Set. Executing , Completed , and Error Test Sets are marked with the icons next to their scheduled date in the Status screen. They will stay in the list until the next scheduled server poll. You cannot manually re-run them. Running RemoteLaunch from a Build Script Normally you schedule tests in SpiraTeam using the Planned Date field of the test sets and let the various instances of RemoteLaunch poll SpiraTeam for upcoming tests. In addition (as described in the SpiraTeam User Manual ) you can execute a test set on the local machine immediately by clicking the \"Execute\" button within SpiraTeam. However there are situations where you want to be able to launch an automated test script using one of the supported engines from an external batch file or build script (e.g. as part of a continuous integration environment) and have those tests report their results back into SpiraTeam. You can achieve this by using the special command-line argument --testset which is passed to RemoteLaunch. For more details on this parameter see the next section. Command line arguments For debugging and additional options when running the program, the following command-line arguments are available: -status Shows the Status screen upon startup. (Normal action is to run minimized to the system tray. -paused Starts the application with timers Paused instead of active. -poll Forces the program to do an initial poll upon startup. (Normal action is to wait the pending time before doing the initial poll.) -trace Enables tracelogging to the EventLog for debugging and watching tests execute. -logfile Forces events to be written to a text file instead of the Application EventLog. This option enables --trace as well. Files are located in the Local Application Data folder. (C:\\Users\\<user>\\AppData\\Local on Vista/Win7). -testset:[Test Set ID] Allows you to tell RemoteLaunch to execute a specific test set on the remote computer (e.g. -testset:45 runs test set TX00045) <filename> Must be the last item on the command line. This is a TST file downloaded from SpiraTeam to start immediate execution on. Using RemoteLaunchX When you need to run automated tests on a variety of different platforms (Windows, MacOS X, Linux, Unix, etc.) the RemoteLaunchX cross-platform automated testing agent is a better choice than the standard RemoteLaunch\u00ae GUI application. To start using RemoteLaunchX, please go to the Customer Area of the Inflectra website and download the latest version of the RemoteLaunchX application. It will be packaged as a simple .zip compressed folder that you can extract onto the target computer: The following four files are included: RemoteLaunchX.jar -- this is the main application, packaged as a Java JAR file. This version of RemoteLaunch requires Java 1.7 SE or later to be installed. config.properties -- this contains all the settings used by RemoteLaunchX. You will need to edit this file in a text editor to configure RemoteLaunchX for use. RemoteLaunchX.bat -- this is a sample Windows\u00ae batch file that can be used to simplify running RemoteLaunchX on Windows\u00ae systems. RemoteLaunchX.sh -- this is a sample UNIX/Linux/MacOS X shell script that can be used to run RemoteLaunchX on UNIX, Linux or Mac OS X. Configuring RemoteLaunchX Once you have extracted the files listed above, open up the config.properties file in a text editor: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # This file contains the configuration data used by the RemoteLaunch - X application # Spira connection information server - url = http : // vm - win2012r2 / SpiraTeam server - login = fredbloggs server - token = { XXXXXXXX - XXXX - XXXX - XXXX - XXXXXXXXXXXX } # The automation host token host - token = MyHost1 # The license key license - organization : TBD license - key : TBD # The regular expressions for each of the possible execution statuses pass - regex = . * fail - regex = ( ? i ). * ( Error | Fail | Fatal ). * caution - regex = . * ( Warning | Caution ). * blocked - regex = . * ( Blocked ). * # Default status for output not matching any of the regular expressions above default - test - status = Not Run The following changes need to be made to this configuration file: server-url -- This is the URL of the SpiraTest or SpiraTeam installation (hereafter referred to as just SpiraTest). Be sure to not put /Login.aspx or any other page in the string, this should be just the root URL of the application's install. server-login -- This is the SpiraTest login id of the user that you want the tests reported as. Note that while the application is polling and updating test results, if the user is logged into a web browser session, they will get kicked out. server-token -- The RSS Token of the SpiraTest login listed above. Found in users profile page under the \"RSS Token\" field; you must have RSS Feeds enabled for this to work. host-token -- This field is required, and uniquely identifies the local testing machine. Any scheduled tests assigned to the Automation Host on SpiraTest will get polled for this machine. Except in special circumstances, this ID should be unique among all testing machines. Important : This field must match the string that is entered into the Automation Host Details screen in the Token : field, or scheduled tests will not be recognized. license-organization -- The name of the \"Organization\" that your RemoteLaunch license key was issued to. This is listed in the Customer Area of the Inflectra website alongside the license key. Note: RemoteLaunch and RemoteLaunchX use the same license keys, so you don't need to have a separate RemoteLaunchX one. license-key -- The RemoteLaunch license key that is listed in the secure Customer Area of the Inflectra website You should leave the four regex settings alone for now, they can be changed when you start executing tests and need to fine-tune how RemoteLaunchX interprets the results. Now that you have configured the plugin, you can execute the RemoteLaunchX console application by either running the provided batch / shell command or just executing the JAR file directly: Java --jar RemoteLaunchX.jar When you run the application, the following should be output to the console: Starting RemoteLaunch... ======================== Server URL: http://localhost/Spira Server Login: fredbloggs Automation Host: MyHost1 Checking License Key for: Inflectra Corporation Production License Key in Use. Testing connection to Spira... Successfully connected to Spira. WARNING: Unable to retrieve test runs for SpiraTest project PR2, so skipping this project - Automation Host with token 'MyHost1' doesn't exist in project PR2. WARNING: Unable to retrieve test runs for SpiraTest project PR3, so skipping this project - Automation Host with token 'MyHost1' doesn't exist in project PR3. Retrieved 0 test run(s) from SpiraTest. Exiting RemoteLaunch... ======================== The system will report back zero Test Runs at this point because nothing has been scheduled in SpiraTest. In the next section we shall setup an automated test set that contains an automated test case. Setting up Automated Tests in SpiraTest This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunchX on the various test automation hosts following the instructions above. Once those prerequisites are in place, please follow these steps: Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For Command-Line this should be simply \"CommandLine\" . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with Command-Line listed as an available automation engine. Next you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Command-Line Automation Engine that you created in the previous section from the drop-down list. Script Type -- This can be set to Attached or Linked (see below for the difference). Filename -- This needs to consist of the following three sections separated by a pipe (|) character: The full path to the command-line tool being executed. Any arguments for the command-line tool. In addition, you can use the following additional tokens for some of the special RemoteLaunchX values: [TestCaseId] -- the ID of the test case [TestSetId] -- the ID of the test set [ReleaseId] -- the ID of the release (if specified) [Filename] - This special token will be replaced by the actual filename of the test script when RemoteLaunchX downloads it from SpiraTeam. The mask for converting any parameter values from SpiraTeam into valid command line arguments. If parameters are not accepted by the command-line tool, you can leave this section out. The mask can include any symbols together with \"name\" to refer to the parameter name and \"value\" to refer to the parameter value. Example 1: If you want parameters to be provided in the form: -param1=value1 --param2=value2 you would use the following mask: -name=value Example 2: If you want parameters to be provided in the form: /param1:value1 /param2:value2 you would use the following mask: /name:value Some example filenames would be: C:\\Temp\\TestApp.exe|-arg1 -arg2|-name=value C:\\Temp\\TestApp.exe|-arg1 -arg2 \"-arg3=[Filename]\"| where the first one is for a Linked test and the second one is for an Attached test. Document Type -- You can choose which document type the automated test script will be categorized under. Document Folder -- You can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- For Attached test scripts, this needs to contain the complete test script in whatever language and syntax is being expected by the command-line application. For Linked test scripts, you should leave this blank. If you would like to have SpiraTeam pass any parameter values to this test script you can specify them by using the syntax ${parameterName} inside the test script . here is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your command-line automated testing tool. This is very useful if you want to have a data-driven test script that be executed multiple times with different parameter values. To setup the automated test case for parameters, click on the \"Edit Parameters\" hyperlink above the \"Test Script\" box: The name of the parameter ${login} needs to match the name of a parameter accepted by the command-line tool. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunchX application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case. Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the Command-Line automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination: RemoteLaunchX Command Line Options testset -- If you would like to force execution of a test set regardless of its status, you can use the -testset command-line option just as in RemoteLaunch. Simply add - testset : [ ID ] where [ID] is the ID of the test set you would like to execute. e.g. java -jar RemoteLaunchX.jar -testset:24 -testset:37 project -- If you would like to limit the projects scanned by RemoteLaunchX, you can use the -project command-line option. Simply add - project : [ ID ] where [ID] is the ID of the project. e.g. java -jar RemoteLaunchX.jar -project:1 project:6 Running RemoteLaunchX Once you have set the various test set fields (as described above), you are now ready to execute RemoteLaunchX. You can execute the RemoteLaunchX console application by either running the provided batch / shell command or just executing the JAR file directly: Java --jar RemoteLaunchX.jar When you run the application, the following should be output to the console: Starting RemoteLaunch... ======================== Server URL: http://localhost/Spira Server Login: fredbloggs Automation Host: MyHost1 Checking License Key for: Inflectra Corporation Production License Key in Use. Testing connection to Spira... Successfully connected to Spira. WARNING: Unable to retrieve test runs for SpiraTest project PR2, so skipping this project - Automation Host with token 'MyHost1' doesn't exist in projec PR2. WARNING: Unable to retrieve test runs for SpiraTest project PR3, so skipping this project - Automation Host with token 'MyHost1' doesn't exist in projec PR3. Retrieved 1 test run(s) from SpiraTest. Executing test case TC18 with filename 'C:\\Windows\\System32\\ipconfig.exe|/all' This is a Linked test script Executing command 'C:\\Windows\\System32\\ipconfig.exe' with arguments '/all' Execution Status = Passed Exiting RemoteLaunch... ======================== The console output will indicate which test sets are being executed and what the final result was. Inside SpiraTest, once execution begins the status of the test set will change from \"Not Started\" to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed (passed or failed) -- or \"Blocked\" -- RemoteLaunchX was not able to execute the test. In addition, the individual test cases in the set will display a status based on the results of the command-line test that was executed: Passed -- The automated test ran successfully and matched the PASS regular expression. Failed -- The automated test ran successfully, and matched the FAIL regular expression. Caution -- The automated test ran successfully, and matched the CAUTION regular expression. Blocked -- The automated test did not run successfully or it matched the BLOCKED regular expression. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Test Run that was recorded and the Console output section will contain the underlying error message(s). Once the tests have completed, you can log back into SpiraTest and see the execution status of your test cases. If you click on a Test Run that was generated by the command-line tool, you will see the following information: This screen indicates the status of the test run that was reported back from command-line tool together with any messages or other information. The execution status will be set according to the rules described above, the Message field will contain the first line of console output and the large details box will contain the full console output from the command-line tool. Congratulations... You are now able to run a custom command-line test, and have the results be recorded within SpiraTest / SpiraTeam. Scheduling RemoteLaunchX Unlike the main RemoteLaunch application, RemoteLaunchX does not have a built-in timer and so when executed it will run once, check for pending test sets and then exit. If you want to have it run on a periodic basis, you will need to schedule it externally. If you are using Microsoft Windows\u00ae you would use the Windows Task Scheduler and in other operating systems you would setup a CRON job. We recommend scheduling RemoteLaunchX to run every 5 minutes. Customizing the Reporting By default, RemoteLaunchX will use the following rules to determine if a test has passed, failed, blocked or passed with warnings (caution) Note that regular expressions are case sensitive by default. To make them case insensitive, simply add the (?i) flag to the beginning just as in the fail-regex below. Passed -- The test completed and the console output didn't contain any of the error phrases listed in the other rules (below). Failed -- The test completed and the console output contained the phrases \"Error\", \"Fail\" or \"Fatal\". Caution -- The test completed and the console output contained the phrases \"Warning\", or \"Caution\". Blocked -- The automated test did not run successfully or the console output contained the phrase \"Blocked\". You can customize the reporting by changing the Regular Expressions (Regex) and the default test status stored in the config.properties files: 1 2 3 4 5 6 7 8 9 # The regular expressions for each of the possible execution statuses pass - regex = . \\ * fail - regex = ( ? i ). \\ * ( Error \\ | Fail \\ | Fatal ). \\ * caution - regex = . \\ * ( Warning \\ | Caution ). \\ * blocked - regex = . \\ * ( Blocked ). \\ * # Default status for output not matching any of the regular expressions above default - test - status = Not Run","title":"Guide"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#remotelaunch-guide","text":"There are actually two separate versions of RemoteLaunch\u00ae that are available from Inflectra: The Microsoft Windows\u00ae compatible Spira RemoteLaunch\u00ae application that provides a graphic user interface application for executing automated tests on remote computers using various plugins for different testing technologies and have the results be sent to the configured SpiraTest/SpiraTeam server. The cross-platform Spira RemoteLaunchX\u2122 Java application that provides a lightweight console application that can execute simple command line scripts on the target computer and send the results back to the configured SpiraTest/SpiraTeam server. This application can be used in Microsoft Windows\u00ae, Linux or Apple MacOS X\u00ae computers provided that they have the Java 1.7 (or later) runtime installed. The first part of this section will describe how to use the Windows-only RemoteLaunch\u00ae GUI application and the second part will describe how to use the cross-platform RemoteLaunchX**\u2122** console application.","title":"RemoteLaunch Guide"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#installing-remotelaunch","text":"It is required that you install the program before copying or installing any test extensions for the program. Testing applications, like Selenium and QuickTest Pro can be installed with no regards to the client application -- if they are not installed by the time a test requiring them needs to be executed, the test extension will simply report an error or block for the specified test set. There are no options to the installer except for installation path. If you do not use the default installation path (typically C:\\Program Files\\Inflectra\\Spira RemoteLaunch\\ ), then make a note of where the installation path is, because it will be needed to install test extensions later.","title":"Installing RemoteLaunch"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#installing-a-test-extension","text":"A test extension is a single or a set of DLLs that the program will read upon startup and provides a link in which testing applications (like TestComplete and Squish) to report test information and status back to SpiraTeam. When you download a test extension, the ZIP file should contain at least one DLL file. Unless otherwise specified by a readme.txt file included in the compressed file, copy the DLL file to the \\extension directory located within Spira RemoteLaunch installation directory. (If no such folder exists, you must create it.) If an extension is removed or added, the program must be restarted for the any changes to take effect. The program will only load up to the first number of extensions that the license allows. Additional extensions will not be loaded or used during testing. RemoteLaunch runs in the background. To fully close RemoteLaunch you need to exit the application by right clicking on the icon in the task bar (usually in the lower right of your screen). This will cancel any currently running tests. Any scheduled tests, waiting to be executed will be paused until the program is restarted and polling resumed. If, when you restart the application, the new engine tab does not show up in RemoteLaunch, Windows may have blocked the engine dll in the extensions folder. To resolve this block: right click on the engine .dll file you placed in the extensions folder select the properties for the file, and unblock it you should now see the engine name in the RemoteLaunch tab","title":"Installing a Test Extension"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#registration","text":"Spira RemoteLaunch has its own License key needed for using the program. You cannot use your existing SpiraTest/Plan/Team key in Spira RemoteLaunch. Upon the first launch of the program, you will be asked to update your license information: Enter in your organization name and license key in the email that was sent when you purchased the license, or as listed on your customer information page at http://inflectra.com . Trial licenses are good until the 28 th day of the listed month. The next time the program is run after the 28 th of the month, you will be prompted to re-enter a new permanent license key, or the program will be unusable. The license key can be updated at any time by going to the Tray Menu and select Help -> About. Once the About screen opens up, click the Update button in the license details section to update or change license information.","title":"Registration"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#using-remotelaunch","text":"","title":"Using RemoteLaunch"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#basic-unattended-operation","text":"When run, the program will start minimized to the system tray and will start its polling of the server. Polling will occur every 'x' minutes (60 by default) for any automated test sets that are scheduled to be run. When time comes for a test to be launched, it will start the test extension. The installed test extension will then perform the test and report results back to SpiraTeam. At the end of the test, the program will go back and resume scanning for tests that need to be executed. No user input is ever needed from the application itself. However, testing applications may pop up dialogs needing user input. For existing Inflectra testing extensions, effort was put in to avoid as much user-interaction as possible, but in some cases it is unavoidable.","title":"Basic Unattended Operation"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#client-configuration","text":"By right clicking on the system tray icon and selecting \"Configuration\", the application's window will open to the configuration panel. The panel has the following options: SpiraTeam Server Configuration: Server URL : This is the URL of the SpiraTeam installation. Be sure to not put /Login.aspx or any other page in the string, this should be just the root URL of the application's install. Login Username : This is the SpiraTeam login id of the user that you want the tests reported as. Note that while the application is polling and updating test results, if the user is logged into a web browser session, they will get kicked out. Login Password : The password to the Username above. Test : Clicking this will test the login to make sure the application can connect to the server properly. Server Polling: Automation Host Token : This field is required, and uniquely identifies the local testing machine. Any scheduled tests assigned to the Automation Host on SpiraTeam will get polled for this machine. Except in special circumstances, this ID should be unique among all testing machines. Important : This field must match the string that is entered into the Automation Host Details screen in the Token : field, or scheduled tests will not be recognized. Automatically Run Overdue Tests : When this is checked, any tests that are pulled from the SpiraTest server that has a scheduled date in the past will be marked as Overdue. Normally, overdue tests will not be executed. With this check, they will be executed as soon as the poll is finished. Continue polling server after a connect error: When this is checked, if RemoteLaunch receives an error connecting to the SpiraTest server, it will continue polling in the future. If this is unchecked, RemoteLaunch will switch to the error status upon encountering a connection error. It is important to check this option if your SpiraTest server will be periodically unavailable for server maintenance. Polling Frequency : How often in minutes the application will poll the SpiraTeam server for updates to the automation host's schedule. The default is 60 (1 hour), and should be fine for most installations. Note that tests will still be executed on their scheduled time, this is simply how often the program will talk to the SpiraTeam server to detect schedule changes. Updating the polling frequency will reset the currently running timers. Polling Read Ahead : How far ahead in minutes the program should read the schedule for the Automation host. Tests that are scheduled farther in advance will not show up as a pending test on the status screen.","title":"Client Configuration"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#extension-configuration","text":"If an extension has custom configuration options, they will appear as separate tabs located after the Client Setup tab. The contents of each tab will vary depending on the extension. View the extension's documentation for options given in those extensions.","title":"Extension Configuration"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#status-screen","text":"The status screen is usually hidden, but can be brought up for display by double-clicking on the system tray icon. The top of the screen shows the current status, whether it's running a test or waiting to poll the server for an update. It will also show any errors present on the application, like a registration error or configuration issue. Under the status bar is a list of any pending or executing tests that are scheduled for this testing machine. The list will get cleared at every poll, so tests that have executed since the previous poll will still be on the list, and will show their execution status: Green Arrow : A green arrow indicates that the test is still running, or RemoteLaunch is waiting for a reply from the testing engine / test application. Blue Checkbox : A blue checkbox indicates that the test is completed, regardless of status of the individual test steps in the scheduled test set. Red Error : A red error indicator indicates that the test extension or the testing application ran into an issue (outside of test results). In this case, any further tests that require the extension will be marked as blocked, as the issue needs to be corrected within the extension settings or testing application. No Indication : No indication means that the test is currently awaiting for its scheduled date to start. Note that only one test will be launched at a time, so that if two tests are scheduled at the same time, the one with the lower TestSet ID will be executed first, then as soon as it's finished, the second scheduled test will be run. By highlighting a test that has not been executed yet, you can click the Force Execute button. This will cause the selected test to have its scheduled date to the current time, causing it to be immediately executed (or, if another test is already running, next in line for execution). At any time the Force Poll button can be clicked, causing RemoteLaunch to initiate an immediate poll of the SpiraTeam server to check for pending runs. The timers for the next server poll will be reset when the button is clicked.","title":"Status Screen"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#tray-icon-menu","text":"Instead of operating from the application window, all functions exist on the tray icon menu as well, as well as some additional commands: Pause / Resume : The Pause/Resume option pauses or resumes the timers for polling and executing tests. If a test or server poll is already in progress, it will not cancel these. However, after they are finished, no further polls or tests will be run. Poll Now : This will force a server poll for upcoming tests, and reset the poll timer. Configuration : Opens the main window to the Configuration page. Help -> About : Opens the About window, which displays the current license information and any loaded extensions. Help -> View Help : Opens this PDF file in a browser. Exit : Will completely exit the program. Doing this will cancel any tests currently running and shut down the program. Any tests that were waiting to be executed will not execute until the program is restarted and the polling is resumed. You can double-click the try icon to bring up the main window on the Status page.","title":"Tray Icon Menu"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#test-execution-and-reporting","text":"All test handling is performed by the extension that the automated tests are configured for. Test Sets that have multiple Test Cases, the Test Cases will all be executed in order, sequentially. (No parallel executing.) At the start of execution for a Test Set, the test set will be updated in SpiraTeam as \"In Progress\". As tests are performed, the Test Cases will be updated with their status. The Test Set on the status screen will be marked with the executing icon. Once the Test Set is completed, the status of the Test Set will be changed to \"Completed\", and will be marked on the status screen with a completed icon. In case of an uncaught exception that is thrown by the testing extension, the Test Set will be marked \"Blocked\", and the Test Case will be recorded as Blocked. All other following tests will not be run and remain as Not Run. The Test Set must be reset to be executed again, and it is recommended to look into the cause of the error (recorded in the Blocked Test Case results) and correct it before rescheduling the test. This Test Set will be marked with and error icon. The same results are applied in the case where a Test Set contains a Test Case that references a testing extension that is not installed. Install the extension and re-run the Test Set. Executing , Completed , and Error Test Sets are marked with the icons next to their scheduled date in the Status screen. They will stay in the list until the next scheduled server poll. You cannot manually re-run them.","title":"Test Execution and Reporting"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#running-remotelaunch-from-a-build-script","text":"Normally you schedule tests in SpiraTeam using the Planned Date field of the test sets and let the various instances of RemoteLaunch poll SpiraTeam for upcoming tests. In addition (as described in the SpiraTeam User Manual ) you can execute a test set on the local machine immediately by clicking the \"Execute\" button within SpiraTeam. However there are situations where you want to be able to launch an automated test script using one of the supported engines from an external batch file or build script (e.g. as part of a continuous integration environment) and have those tests report their results back into SpiraTeam. You can achieve this by using the special command-line argument --testset which is passed to RemoteLaunch. For more details on this parameter see the next section.","title":"Running RemoteLaunch from a Build Script"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#command-line-arguments","text":"For debugging and additional options when running the program, the following command-line arguments are available: -status Shows the Status screen upon startup. (Normal action is to run minimized to the system tray. -paused Starts the application with timers Paused instead of active. -poll Forces the program to do an initial poll upon startup. (Normal action is to wait the pending time before doing the initial poll.) -trace Enables tracelogging to the EventLog for debugging and watching tests execute. -logfile Forces events to be written to a text file instead of the Application EventLog. This option enables --trace as well. Files are located in the Local Application Data folder. (C:\\Users\\<user>\\AppData\\Local on Vista/Win7). -testset:[Test Set ID] Allows you to tell RemoteLaunch to execute a specific test set on the remote computer (e.g. -testset:45 runs test set TX00045) <filename> Must be the last item on the command line. This is a TST file downloaded from SpiraTeam to start immediate execution on.","title":"Command line arguments"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#using-remotelaunchx","text":"When you need to run automated tests on a variety of different platforms (Windows, MacOS X, Linux, Unix, etc.) the RemoteLaunchX cross-platform automated testing agent is a better choice than the standard RemoteLaunch\u00ae GUI application. To start using RemoteLaunchX, please go to the Customer Area of the Inflectra website and download the latest version of the RemoteLaunchX application. It will be packaged as a simple .zip compressed folder that you can extract onto the target computer: The following four files are included: RemoteLaunchX.jar -- this is the main application, packaged as a Java JAR file. This version of RemoteLaunch requires Java 1.7 SE or later to be installed. config.properties -- this contains all the settings used by RemoteLaunchX. You will need to edit this file in a text editor to configure RemoteLaunchX for use. RemoteLaunchX.bat -- this is a sample Windows\u00ae batch file that can be used to simplify running RemoteLaunchX on Windows\u00ae systems. RemoteLaunchX.sh -- this is a sample UNIX/Linux/MacOS X shell script that can be used to run RemoteLaunchX on UNIX, Linux or Mac OS X.","title":"Using RemoteLaunchX"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#configuring-remotelaunchx","text":"Once you have extracted the files listed above, open up the config.properties file in a text editor: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # This file contains the configuration data used by the RemoteLaunch - X application # Spira connection information server - url = http : // vm - win2012r2 / SpiraTeam server - login = fredbloggs server - token = { XXXXXXXX - XXXX - XXXX - XXXX - XXXXXXXXXXXX } # The automation host token host - token = MyHost1 # The license key license - organization : TBD license - key : TBD # The regular expressions for each of the possible execution statuses pass - regex = . * fail - regex = ( ? i ). * ( Error | Fail | Fatal ). * caution - regex = . * ( Warning | Caution ). * blocked - regex = . * ( Blocked ). * # Default status for output not matching any of the regular expressions above default - test - status = Not Run The following changes need to be made to this configuration file: server-url -- This is the URL of the SpiraTest or SpiraTeam installation (hereafter referred to as just SpiraTest). Be sure to not put /Login.aspx or any other page in the string, this should be just the root URL of the application's install. server-login -- This is the SpiraTest login id of the user that you want the tests reported as. Note that while the application is polling and updating test results, if the user is logged into a web browser session, they will get kicked out. server-token -- The RSS Token of the SpiraTest login listed above. Found in users profile page under the \"RSS Token\" field; you must have RSS Feeds enabled for this to work. host-token -- This field is required, and uniquely identifies the local testing machine. Any scheduled tests assigned to the Automation Host on SpiraTest will get polled for this machine. Except in special circumstances, this ID should be unique among all testing machines. Important : This field must match the string that is entered into the Automation Host Details screen in the Token : field, or scheduled tests will not be recognized. license-organization -- The name of the \"Organization\" that your RemoteLaunch license key was issued to. This is listed in the Customer Area of the Inflectra website alongside the license key. Note: RemoteLaunch and RemoteLaunchX use the same license keys, so you don't need to have a separate RemoteLaunchX one. license-key -- The RemoteLaunch license key that is listed in the secure Customer Area of the Inflectra website You should leave the four regex settings alone for now, they can be changed when you start executing tests and need to fine-tune how RemoteLaunchX interprets the results. Now that you have configured the plugin, you can execute the RemoteLaunchX console application by either running the provided batch / shell command or just executing the JAR file directly: Java --jar RemoteLaunchX.jar When you run the application, the following should be output to the console: Starting RemoteLaunch... ======================== Server URL: http://localhost/Spira Server Login: fredbloggs Automation Host: MyHost1 Checking License Key for: Inflectra Corporation Production License Key in Use. Testing connection to Spira... Successfully connected to Spira. WARNING: Unable to retrieve test runs for SpiraTest project PR2, so skipping this project - Automation Host with token 'MyHost1' doesn't exist in project PR2. WARNING: Unable to retrieve test runs for SpiraTest project PR3, so skipping this project - Automation Host with token 'MyHost1' doesn't exist in project PR3. Retrieved 0 test run(s) from SpiraTest. Exiting RemoteLaunch... ======================== The system will report back zero Test Runs at this point because nothing has been scheduled in SpiraTest. In the next section we shall setup an automated test set that contains an automated test case.","title":"Configuring RemoteLaunchX"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#setting-up-automated-tests-in-spiratest","text":"This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunchX on the various test automation hosts following the instructions above. Once those prerequisites are in place, please follow these steps: Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For Command-Line this should be simply \"CommandLine\" . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with Command-Line listed as an available automation engine. Next you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Command-Line Automation Engine that you created in the previous section from the drop-down list. Script Type -- This can be set to Attached or Linked (see below for the difference). Filename -- This needs to consist of the following three sections separated by a pipe (|) character: The full path to the command-line tool being executed. Any arguments for the command-line tool. In addition, you can use the following additional tokens for some of the special RemoteLaunchX values: [TestCaseId] -- the ID of the test case [TestSetId] -- the ID of the test set [ReleaseId] -- the ID of the release (if specified) [Filename] - This special token will be replaced by the actual filename of the test script when RemoteLaunchX downloads it from SpiraTeam. The mask for converting any parameter values from SpiraTeam into valid command line arguments. If parameters are not accepted by the command-line tool, you can leave this section out. The mask can include any symbols together with \"name\" to refer to the parameter name and \"value\" to refer to the parameter value. Example 1: If you want parameters to be provided in the form: -param1=value1 --param2=value2 you would use the following mask: -name=value Example 2: If you want parameters to be provided in the form: /param1:value1 /param2:value2 you would use the following mask: /name:value Some example filenames would be: C:\\Temp\\TestApp.exe|-arg1 -arg2|-name=value C:\\Temp\\TestApp.exe|-arg1 -arg2 \"-arg3=[Filename]\"| where the first one is for a Linked test and the second one is for an Attached test. Document Type -- You can choose which document type the automated test script will be categorized under. Document Folder -- You can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- For Attached test scripts, this needs to contain the complete test script in whatever language and syntax is being expected by the command-line application. For Linked test scripts, you should leave this blank. If you would like to have SpiraTeam pass any parameter values to this test script you can specify them by using the syntax ${parameterName} inside the test script . here is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your command-line automated testing tool. This is very useful if you want to have a data-driven test script that be executed multiple times with different parameter values. To setup the automated test case for parameters, click on the \"Edit Parameters\" hyperlink above the \"Test Script\" box: The name of the parameter ${login} needs to match the name of a parameter accepted by the command-line tool. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunchX application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case. Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the Command-Line automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination:","title":"Setting up Automated Tests in SpiraTest"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#remotelaunchx-command-line-options","text":"testset -- If you would like to force execution of a test set regardless of its status, you can use the -testset command-line option just as in RemoteLaunch. Simply add - testset : [ ID ] where [ID] is the ID of the test set you would like to execute. e.g. java -jar RemoteLaunchX.jar -testset:24 -testset:37 project -- If you would like to limit the projects scanned by RemoteLaunchX, you can use the -project command-line option. Simply add - project : [ ID ] where [ID] is the ID of the project. e.g. java -jar RemoteLaunchX.jar -project:1 project:6","title":"RemoteLaunchX Command Line Options"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#running-remotelaunchx","text":"Once you have set the various test set fields (as described above), you are now ready to execute RemoteLaunchX. You can execute the RemoteLaunchX console application by either running the provided batch / shell command or just executing the JAR file directly: Java --jar RemoteLaunchX.jar When you run the application, the following should be output to the console: Starting RemoteLaunch... ======================== Server URL: http://localhost/Spira Server Login: fredbloggs Automation Host: MyHost1 Checking License Key for: Inflectra Corporation Production License Key in Use. Testing connection to Spira... Successfully connected to Spira. WARNING: Unable to retrieve test runs for SpiraTest project PR2, so skipping this project - Automation Host with token 'MyHost1' doesn't exist in projec PR2. WARNING: Unable to retrieve test runs for SpiraTest project PR3, so skipping this project - Automation Host with token 'MyHost1' doesn't exist in projec PR3. Retrieved 1 test run(s) from SpiraTest. Executing test case TC18 with filename 'C:\\Windows\\System32\\ipconfig.exe|/all' This is a Linked test script Executing command 'C:\\Windows\\System32\\ipconfig.exe' with arguments '/all' Execution Status = Passed Exiting RemoteLaunch... ======================== The console output will indicate which test sets are being executed and what the final result was. Inside SpiraTest, once execution begins the status of the test set will change from \"Not Started\" to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed (passed or failed) -- or \"Blocked\" -- RemoteLaunchX was not able to execute the test. In addition, the individual test cases in the set will display a status based on the results of the command-line test that was executed: Passed -- The automated test ran successfully and matched the PASS regular expression. Failed -- The automated test ran successfully, and matched the FAIL regular expression. Caution -- The automated test ran successfully, and matched the CAUTION regular expression. Blocked -- The automated test did not run successfully or it matched the BLOCKED regular expression. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Test Run that was recorded and the Console output section will contain the underlying error message(s). Once the tests have completed, you can log back into SpiraTest and see the execution status of your test cases. If you click on a Test Run that was generated by the command-line tool, you will see the following information: This screen indicates the status of the test run that was reported back from command-line tool together with any messages or other information. The execution status will be set according to the rules described above, the Message field will contain the first line of console output and the large details box will contain the full console output from the command-line tool. Congratulations... You are now able to run a custom command-line test, and have the results be recorded within SpiraTest / SpiraTeam.","title":"Running RemoteLaunchX"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#scheduling-remotelaunchx","text":"Unlike the main RemoteLaunch application, RemoteLaunchX does not have a built-in timer and so when executed it will run once, check for pending test sets and then exit. If you want to have it run on a periodic basis, you will need to schedule it externally. If you are using Microsoft Windows\u00ae you would use the Windows Task Scheduler and in other operating systems you would setup a CRON job. We recommend scheduling RemoteLaunchX to run every 5 minutes.","title":"Scheduling RemoteLaunchX"},{"location":"RemoteLaunch-User-Guide/RemoteLaunch-Guide/#customizing-the-reporting","text":"By default, RemoteLaunchX will use the following rules to determine if a test has passed, failed, blocked or passed with warnings (caution) Note that regular expressions are case sensitive by default. To make them case insensitive, simply add the (?i) flag to the beginning just as in the fail-regex below. Passed -- The test completed and the console output didn't contain any of the error phrases listed in the other rules (below). Failed -- The test completed and the console output contained the phrases \"Error\", \"Fail\" or \"Fatal\". Caution -- The test completed and the console output contained the phrases \"Warning\", or \"Caution\". Blocked -- The automated test did not run successfully or the console output contained the phrase \"Blocked\". You can customize the reporting by changing the Regular Expressions (Regex) and the default test status stored in the config.properties files: 1 2 3 4 5 6 7 8 9 # The regular expressions for each of the possible execution statuses pass - regex = . \\ * fail - regex = ( ? i ). \\ * ( Error \\ | Fail \\ | Fatal ). \\ * caution - regex = . \\ * ( Warning \\ | Caution ). \\ * blocked - regex = . \\ * ( Blocked ). \\ * # Default status for output not matching any of the regular expressions above default - test - status = Not Run","title":"Customizing the Reporting"},{"location":"RemoteLaunch-User-Guide/Selenium/","text":"Selenium Selenium Remote Control (RC) is a test tool that allows you to write automated web application user interface tests in any programming language against any HTTP website using any mainstream JavaScript-enabled browser. Selenium RC comes in two parts. A server which can automatically launch and kill supported browsers, and acts as a HTTP proxy for web requests from those browsers. Client applications that send commands to the Selenium-RC server in a special language (called Selenese) that tell it what operations to perform on the launched web browser. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of Selenium-RC (hereafter just referred to as Selenium) on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated Selenium web tests. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 1.0 of Selenium-Remote Control. Installing the Selenium Engine This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the SeleniumAutomationEngine.zip file from the Inflectra website and locate the appropriate SeleniumX.dll for the version of Selenium that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"SeleniumX.dll\" (where X is the appropriate version) into the \"extensions\" sub-folder of the RemoteLaunch installation. Also copy the ThoughtWorks.Selenium.Core.dll from the zipfile into the \"extensions\" sub-folder. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For Selenium this should be SeleniumX where 'X' is the version number of the DLL file that you are using. Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with Selenium listed as an available automation engine. Advanced Settings You can modify the Selenium configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. a) Selenium-RC 1.0 The Selenium 1.0 engine adds its own tab to this page which allows you to configure how Selenium operates: The following fields can be specified on this screen: Server Host -- This should be the name / IP address of the Selenium server. Typically this will be localhost because RemoteLaunch is usually installed on the Selenium server itself. Server Port -- This should be set to the custom port that the Selenium server uses as a proxy when intercepting requests to the browser. The default value is 4444. Browser String -- This needs to be the name of the browser that the Selenium server will launch. Common values include: *firefox -- This will launch the Firefox web browser *iexplore -- This will launch the Microsoft Internet Explorer web browser *safari -- This will launch the Apple Safari web browser Browser URL -- This needs to be the initial URL that you want the browser to open to a) Selenium WebDriver 2.x The Selenium 2.x engine adds its own tab to this page which allows you to configure how Selenium operates: The following fields can be specified on this screen: Browser Type -- This needs to be set to the type of browser that the Selenium webdriver will launch. Browser URL -- This needs to be the initial URL that you want the browser to open to Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and either linking it to an existing Selenium test script file or entering a Selenium test script directly into SpiraTeam. Attaching a Selenium Test Script First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Selenium Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Attached for this case Filename -- Since the test script is going to be entered directly into SpiraTeam you can enter any name you like for the filename as long as it's logical and memorable. Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This needs to contain the complete Selenium test script written in Selenium IDE Selenese . Selenium IDE test scripts consist of three parts: The command The target of the command The data to be used You should enter the three components on each line separated by the Pipe (|) character. If you need to use a pipe character inside any of the components you can escape it with a backslash (\\|). An example command would be type|q|hello If the command doesn't need all three components, you can simply leave it out (for example open|| http://www.inflectra.com ) If you would like to have SpiraTeam pass any parameter values to this test script (this will be discussed in more detail later) you can specify them by using the syntax ${parameterName}. An example parameterized command would be open||${url} A complete sample script is illustrated below: open|| http://www.google.com/webhp assertTitle||Google type|q|${query} click|btnG waitForPageToLoad||5000 isTextPresent||${matchtext} Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Linking a Selenium Test Script First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Selenium Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked for this case Filename -- This needs to be the full path to the Selenium IDE test script file. To make this easier across different machines, you can use several constants for standard Windows locations: [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used when you are using the linked test script option The linked test script needs to be an HTML document that contains a table with three columns . Each row corresponds to a single Selenium action. Each of the columns in the row corresponds to the three Selenium command components: The command The target of the command The data to be used An example Selenium test script is illustrated below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 < html > < body > < table > < tr > < td > open </ td > < td > </ td > < td > http://www.google.com/webhp </ td > </ tr > < tr > < td > assertTitle </ td > < td > &nbsp; </ td > < td > Google </ td > </ tr > < tr > < td > type </ td > < td > q </ td > < td > ${query} </ td > </ tr > < tr > < td > click </ td > < td > btnG </ td > < td > &nbsp; </ td > </ tr > < tr > < td > waitForPageToLoad </ td > < td > &nbsp; </ td > < td > 5000 </ td > </ tr > < tr > < td > isTextPresent </ td > < td > &nbsp; </ td > < td > ${matchtext} </ td > </ tr > </ table > </ body > </ html > When opened in an HTML editing tool it looks like: open http://www.google.com/webhp assertTitle Google type q $ click btnG waitForPageToLoad 5000 isTextPresent $ If you would like to have SpiraTeam pass any parameter values to this test script (this will be discussed in more detail later) you can specify them by using the syntax ${parameterName}. An example parameterized command is displayed in the third and sixth rows of the table above (${query} and ${matchtext}). Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Using Parameterized Test Cases There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your Selenium automated test script. This is very useful if you want to have a data-driven Selenium test script that be executed multiple times with different parameter values. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${login} needs to match the name of the input parameter defined within the Selenium script. Executing the Selenium Test Sets from SpiraTeam There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the Selenium automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination: Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the Selenium test: Passed -- The Selenium automated test ran successfully and all the test conditions in the test script passed Failed -- The Selenium automated test ran successfully, but at least one test condition in the test script failed. Blocked -- The Selenium automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see browser windows launch as the Selenium server executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by Selenium, you will see the following information: This screen indicates the status of the test run that was reported back from Selenium together with any messages or other information. The execution status will be set to PASSED if all the Selenium commands report back OK and all the tests passed. If any of the commands failed or the tests don't pass, the overall execution status will be listed as FAILED. The Message field will contain a summary of the number of commands executed and the number of failed commands, with the large details box containing the full command execution log as reported back from Selenium: open (, http://www.google.com/webhp ) - OK assertTitle (, Google) - OK type (q, Philomene Long) - OK click (btnG, ) - OK waitForPageToLoad (, 5000) - OK isTextPresent (, Philomene Long) - OK,true Congratulations... You are now able to run Selenium automated web tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Selenium"},{"location":"RemoteLaunch-User-Guide/Selenium/#selenium","text":"Selenium Remote Control (RC) is a test tool that allows you to write automated web application user interface tests in any programming language against any HTTP website using any mainstream JavaScript-enabled browser. Selenium RC comes in two parts. A server which can automatically launch and kill supported browsers, and acts as a HTTP proxy for web requests from those browsers. Client applications that send commands to the Selenium-RC server in a special language (called Selenese) that tell it what operations to perform on the launched web browser. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of Selenium-RC (hereafter just referred to as Selenium) on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated Selenium web tests. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 1.0 of Selenium-Remote Control.","title":"Selenium"},{"location":"RemoteLaunch-User-Guide/Selenium/#installing-the-selenium-engine","text":"This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the SeleniumAutomationEngine.zip file from the Inflectra website and locate the appropriate SeleniumX.dll for the version of Selenium that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"SeleniumX.dll\" (where X is the appropriate version) into the \"extensions\" sub-folder of the RemoteLaunch installation. Also copy the ThoughtWorks.Selenium.Core.dll from the zipfile into the \"extensions\" sub-folder. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For Selenium this should be SeleniumX where 'X' is the version number of the DLL file that you are using. Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with Selenium listed as an available automation engine.","title":"Installing the Selenium Engine"},{"location":"RemoteLaunch-User-Guide/Selenium/#advanced-settings","text":"You can modify the Selenium configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. a) Selenium-RC 1.0 The Selenium 1.0 engine adds its own tab to this page which allows you to configure how Selenium operates: The following fields can be specified on this screen: Server Host -- This should be the name / IP address of the Selenium server. Typically this will be localhost because RemoteLaunch is usually installed on the Selenium server itself. Server Port -- This should be set to the custom port that the Selenium server uses as a proxy when intercepting requests to the browser. The default value is 4444. Browser String -- This needs to be the name of the browser that the Selenium server will launch. Common values include: *firefox -- This will launch the Firefox web browser *iexplore -- This will launch the Microsoft Internet Explorer web browser *safari -- This will launch the Apple Safari web browser Browser URL -- This needs to be the initial URL that you want the browser to open to a) Selenium WebDriver 2.x The Selenium 2.x engine adds its own tab to this page which allows you to configure how Selenium operates: The following fields can be specified on this screen: Browser Type -- This needs to be set to the type of browser that the Selenium webdriver will launch. Browser URL -- This needs to be the initial URL that you want the browser to open to","title":"Advanced Settings"},{"location":"RemoteLaunch-User-Guide/Selenium/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and either linking it to an existing Selenium test script file or entering a Selenium test script directly into SpiraTeam.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/Selenium/#attaching-a-selenium-test-script","text":"First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Selenium Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Attached for this case Filename -- Since the test script is going to be entered directly into SpiraTeam you can enter any name you like for the filename as long as it's logical and memorable. Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This needs to contain the complete Selenium test script written in Selenium IDE Selenese . Selenium IDE test scripts consist of three parts: The command The target of the command The data to be used You should enter the three components on each line separated by the Pipe (|) character. If you need to use a pipe character inside any of the components you can escape it with a backslash (\\|). An example command would be type|q|hello If the command doesn't need all three components, you can simply leave it out (for example open|| http://www.inflectra.com ) If you would like to have SpiraTeam pass any parameter values to this test script (this will be discussed in more detail later) you can specify them by using the syntax ${parameterName}. An example parameterized command would be open||${url} A complete sample script is illustrated below: open|| http://www.google.com/webhp assertTitle||Google type|q|${query} click|btnG waitForPageToLoad||5000 isTextPresent||${matchtext} Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Attaching a Selenium Test Script"},{"location":"RemoteLaunch-User-Guide/Selenium/#linking-a-selenium-test-script","text":"First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Selenium Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked for this case Filename -- This needs to be the full path to the Selenium IDE test script file. To make this easier across different machines, you can use several constants for standard Windows locations: [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used when you are using the linked test script option The linked test script needs to be an HTML document that contains a table with three columns . Each row corresponds to a single Selenium action. Each of the columns in the row corresponds to the three Selenium command components: The command The target of the command The data to be used An example Selenium test script is illustrated below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 < html > < body > < table > < tr > < td > open </ td > < td > </ td > < td > http://www.google.com/webhp </ td > </ tr > < tr > < td > assertTitle </ td > < td > &nbsp; </ td > < td > Google </ td > </ tr > < tr > < td > type </ td > < td > q </ td > < td > ${query} </ td > </ tr > < tr > < td > click </ td > < td > btnG </ td > < td > &nbsp; </ td > </ tr > < tr > < td > waitForPageToLoad </ td > < td > &nbsp; </ td > < td > 5000 </ td > </ tr > < tr > < td > isTextPresent </ td > < td > &nbsp; </ td > < td > ${matchtext} </ td > </ tr > </ table > </ body > </ html > When opened in an HTML editing tool it looks like: open http://www.google.com/webhp assertTitle Google type q $ click btnG waitForPageToLoad 5000 isTextPresent $ If you would like to have SpiraTeam pass any parameter values to this test script (this will be discussed in more detail later) you can specify them by using the syntax ${parameterName}. An example parameterized command is displayed in the third and sixth rows of the table above (${query} and ${matchtext}). Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Linking a Selenium Test Script"},{"location":"RemoteLaunch-User-Guide/Selenium/#using-parameterized-test-cases","text":"There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your Selenium automated test script. This is very useful if you want to have a data-driven Selenium test script that be executed multiple times with different parameter values. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${login} needs to match the name of the input parameter defined within the Selenium script.","title":"Using Parameterized Test Cases"},{"location":"RemoteLaunch-User-Guide/Selenium/#executing-the-selenium-test-sets-from-spirateam","text":"There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the Selenium Test Sets from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/Selenium/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the Selenium automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination:","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/Selenium/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the Selenium test: Passed -- The Selenium automated test ran successfully and all the test conditions in the test script passed Failed -- The Selenium automated test ran successfully, but at least one test condition in the test script failed. Blocked -- The Selenium automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see browser windows launch as the Selenium server executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by Selenium, you will see the following information: This screen indicates the status of the test run that was reported back from Selenium together with any messages or other information. The execution status will be set to PASSED if all the Selenium commands report back OK and all the tests passed. If any of the commands failed or the tests don't pass, the overall execution status will be listed as FAILED. The Message field will contain a summary of the number of commands executed and the number of failed commands, with the large details box containing the full command execution log as reported back from Selenium: open (, http://www.google.com/webhp ) - OK assertTitle (, Google) - OK type (q, Philomene Long) - OK click (btnG, ) - OK waitForPageToLoad (, 5000) - OK isTextPresent (, Philomene Long) - OK,true Congratulations... You are now able to run Selenium automated web tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Executing the Test Sets"},{"location":"RemoteLaunch-User-Guide/SmarteScript/","text":"SmarteScript SmarteSoft\u2122 SmarteScript\u2122 (hereafter SmarteScript) is a Graphic User Interface (GUI) script-free functional test automation system that lets you record application operations by capturing the various testable objects of the application and then playback the operations to automatically test the application. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of SmarteScript on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated SmarteScript tests. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 5.0 of SmarteScript. Installing the SmarteScript Engine This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the SmarteScriptAutomationEngine.zip file from the Inflectra website and locate the appropriate SmarteScriptX.dll for the version of SmarteScript that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"SmarteScriptX.dll\" (where X is the appropriate version) into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For SmarteScript this should be SmarteScriptX where 'X' is the version number of the DLL file that you are using. Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with SmarteScript listed as an available automation engine. Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated SmarteScript test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the SmarteScript Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with SmarteScript only supports referencing SmarteScript test script file (.ses) and not physically uploading the test scripts into SpiraTeam. Filename -- This needs to be the full path to the SmarteScript test script (i.e. the .ses file that you open in SmarteScript to run the test). To make this easier across different machines, you can use several constants for standard Windows locations (see example in screenshot): [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the SmarteScript Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Using Parameterized Test Cases SmarteScript does not support the passing of input test parameters so the SmarteScript automation engine does not support this feature of SpiraTeam or RemoteLaunch. Executing the SmarteScript Test Sets from SpiraTeam There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the SmarteScript automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the SmarteScript test: Passed -- The SmarteScript automated test ran successfully and all the test conditions in the test script passed Failed -- The SmarteScript automated test ran successfully, but at least one test condition in the test script failed. Blocked -- The SmarteScript automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see browser or application windows launch as SmarteScript executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by SmarteScript, you will see the following information: This screen indicates the status of the test run that was reported back from SmarteScript together with any messages or other information. The Test Name indicates the name of the test inside SmarteScript, and the execution status corresponds the matching status inside SmarteScript. Congratulations... You are now able to run SmarteScript automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"SmarteScript"},{"location":"RemoteLaunch-User-Guide/SmarteScript/#smartescript","text":"SmarteSoft\u2122 SmarteScript\u2122 (hereafter SmarteScript) is a Graphic User Interface (GUI) script-free functional test automation system that lets you record application operations by capturing the various testable objects of the application and then playback the operations to automatically test the application. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of SmarteScript on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated SmarteScript tests. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 5.0 of SmarteScript.","title":"SmarteScript"},{"location":"RemoteLaunch-User-Guide/SmarteScript/#installing-the-smartescript-engine","text":"This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the SmarteScriptAutomationEngine.zip file from the Inflectra website and locate the appropriate SmarteScriptX.dll for the version of SmarteScript that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"SmarteScriptX.dll\" (where X is the appropriate version) into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For SmarteScript this should be SmarteScriptX where 'X' is the version number of the DLL file that you are using. Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with SmarteScript listed as an available automation engine.","title":"Installing the SmarteScript Engine"},{"location":"RemoteLaunch-User-Guide/SmarteScript/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated SmarteScript test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the SmarteScript Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with SmarteScript only supports referencing SmarteScript test script file (.ses) and not physically uploading the test scripts into SpiraTeam. Filename -- This needs to be the full path to the SmarteScript test script (i.e. the .ses file that you open in SmarteScript to run the test). To make this easier across different machines, you can use several constants for standard Windows locations (see example in screenshot): [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the SmarteScript Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/SmarteScript/#using-parameterized-test-cases","text":"SmarteScript does not support the passing of input test parameters so the SmarteScript automation engine does not support this feature of SpiraTeam or RemoteLaunch.","title":"Using Parameterized Test Cases"},{"location":"RemoteLaunch-User-Guide/SmarteScript/#executing-the-smartescript-test-sets-from-spirateam","text":"There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the SmarteScript Test Sets from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/SmarteScript/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the SmarteScript automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/SmarteScript/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the SmarteScript test: Passed -- The SmarteScript automated test ran successfully and all the test conditions in the test script passed Failed -- The SmarteScript automated test ran successfully, but at least one test condition in the test script failed. Blocked -- The SmarteScript automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see browser or application windows launch as SmarteScript executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by SmarteScript, you will see the following information: This screen indicates the status of the test run that was reported back from SmarteScript together with any messages or other information. The Test Name indicates the name of the test inside SmarteScript, and the execution status corresponds the matching status inside SmarteScript. Congratulations... You are now able to run SmarteScript automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Executing the Test Sets"},{"location":"RemoteLaunch-User-Guide/SoapUI/","text":"SoapUI SmartBear SoapUI (hereafter SoapUI) is an open source Web Service testing tool for Service Oriented Architectures (SOAs). There is also a Pro version that is released as a commercial product. Its functionality mainly covers Web Service Inspection, Invoking, Development, Simulation and Mocking, Functional testing, Load and Compliance testing. Productivity enhancement features can be found in the soapUI pro version.[^2] This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of soapUI on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated web service testing. Note: This integration requires at least version 4.0 of SpiraTest/Team and an instance of SoapUI or SoapUI Pro running on a Windows\u00ae platform. Installing the SoapUI Engine This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the SoapUIEngine.zip file from the Inflectra website. Extract the file \"soapUIEngine.dll\" from the compressed archive into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For soapUI this should be SoapUI . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with SoapUI listed as an available automation engine. SoapUI RemoteLaunch Settings You will need to modify the SoapUI configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The SoapUI engine adds its own tab to this page which allows you to configure how SoapUI operates: The following fields can be specified on this screen: SOAP-UI Location -- This should be SOAP-UI Bin folder that contains the \"TestRunner.bat\" batch file that will be used to actually run the automated tests. Installation Type -- This allows you to take advantage of the enhanced reporting available in the commercial \"Pro\" edition of SoapUI. Check the \"SOAP-UI Pro Installation\" box only if you are using the commercial version of SoapUI (known as SoapUI Pro). Execution Type -- If this is a LoadUI performance test rather than a standard SoapUI functional test, check the box and RemoteLaunch will know to parse the load-test report format. Trace Logging -- Normally this can be left unchecked unless you are diagnosing configuration issues and need additional logging. Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an existing SoapUI test suite and test case. Linking a SoapUI Test Script First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and expand the \"Automation\" section of the Test Case Overview tab: You need to enter the following fields: Automation Engine - Choose the SoapUI Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked for this case Filename -- This needs to be the full path to the SoapUi test project XML file or composite folder together with the test suite name and test case name separated by the pipe (|) symbol. You can also pass custom command line switches as an optional final segment For standard tests, you use the format: Project XML File|Test Suite Name|Test Case Name|Switches For composite folder tests, you use the format: Test Folder|Test Suite Name|Test Case Name|Switches For example if the test suite was named \"Requirements Testing\" and the test case was named \"Get Requirements\" you'd use: [MyDocuments]\\SpiraTest-4-0-Web-Service-soapui-project.xml|Requirements Testing|Get Requirements To make this easier across different machines, you can use several constants for standard Windows locations: [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- You can choose which document type the automated test script will be categorized under. Document Folder -- You can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used when you are using the linked test script option Note: The example filename shown above was taken from a test project in SoapUI that has the following structure: Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Using Parameterized Test Cases There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your SoapUI automated test. This is very useful if you have a data-driven SoapUI test that has custom project properties used that you would like to change based on the test. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${login} needs to match the name of the custom parameter defined in the SoapUI project properties. Invalid parameters will be silently ignored by the SoapUI engine. Parameters must have a unique name. Note that the plugin currently only supports \"Project Properties\" and not Global or System Properties. Executing the SoapUI Test Sets from SpiraTeam There are three ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. Execute the test cases from the command-line or a build script We shall outline each of these three scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the SoapUI automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination: Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer , instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. If you want to run the tests as part of a build script, just call RemoteLaunch.exe with the appropriate test set id passed into the command-line: RemoteLaunch.exe --testset:18 In all cases, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the SoapUI test: Passed -- The SoapUI automated test ran successfully and all the assertions in the test script passed Failed -- The SoapUI automated test ran successfully, but at least one assertion in the test script failed. Blocked -- The SoapUI automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see application or browser windows launch as the SoapUI server executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by SoapUI, you will see the following information: This screen indicates the status of the test run that was reported back from SoapUI together with any messages or other information. The execution status will be set according to the worst-case assessment reported back from SoapUI. If you have zero(0) failures, then the status will display as Passed, otherwise it will display as Failed. Under Console Output section you will see more detailed logging information (in both SoapUI and SoapUI Pro): The Message field will contain a summary of the number of test steps completed, the number of assertions and the number of failed assertions. The Details field will contain the detailed trace of what happened, captured from the summary output log that is generated by SoapUI. SoapUI Pro If you have the commercial SoapUI Pro product and have configured RemoteLaunch so that it knows to use SoapUI Pro, in addition, the Test Steps section of the test run will contain more detailed reporting: Where each test step corresponds to a step recorded in the SoapUI Pro results file. Congratulations... You are now able to run SoapUI automated web-service tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"SoapUI"},{"location":"RemoteLaunch-User-Guide/SoapUI/#soapui","text":"SmartBear SoapUI (hereafter SoapUI) is an open source Web Service testing tool for Service Oriented Architectures (SOAs). There is also a Pro version that is released as a commercial product. Its functionality mainly covers Web Service Inspection, Invoking, Development, Simulation and Mocking, Functional testing, Load and Compliance testing. Productivity enhancement features can be found in the soapUI pro version.[^2] This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of soapUI on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated web service testing. Note: This integration requires at least version 4.0 of SpiraTest/Team and an instance of SoapUI or SoapUI Pro running on a Windows\u00ae platform.","title":"SoapUI"},{"location":"RemoteLaunch-User-Guide/SoapUI/#installing-the-soapui-engine","text":"This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the SoapUIEngine.zip file from the Inflectra website. Extract the file \"soapUIEngine.dll\" from the compressed archive into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For soapUI this should be SoapUI . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with SoapUI listed as an available automation engine.","title":"Installing the SoapUI Engine"},{"location":"RemoteLaunch-User-Guide/SoapUI/#soapui-remotelaunch-settings","text":"You will need to modify the SoapUI configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The SoapUI engine adds its own tab to this page which allows you to configure how SoapUI operates: The following fields can be specified on this screen: SOAP-UI Location -- This should be SOAP-UI Bin folder that contains the \"TestRunner.bat\" batch file that will be used to actually run the automated tests. Installation Type -- This allows you to take advantage of the enhanced reporting available in the commercial \"Pro\" edition of SoapUI. Check the \"SOAP-UI Pro Installation\" box only if you are using the commercial version of SoapUI (known as SoapUI Pro). Execution Type -- If this is a LoadUI performance test rather than a standard SoapUI functional test, check the box and RemoteLaunch will know to parse the load-test report format. Trace Logging -- Normally this can be left unchecked unless you are diagnosing configuration issues and need additional logging.","title":"SoapUI RemoteLaunch Settings"},{"location":"RemoteLaunch-User-Guide/SoapUI/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an existing SoapUI test suite and test case.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/SoapUI/#linking-a-soapui-test-script","text":"First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and expand the \"Automation\" section of the Test Case Overview tab: You need to enter the following fields: Automation Engine - Choose the SoapUI Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked for this case Filename -- This needs to be the full path to the SoapUi test project XML file or composite folder together with the test suite name and test case name separated by the pipe (|) symbol. You can also pass custom command line switches as an optional final segment For standard tests, you use the format: Project XML File|Test Suite Name|Test Case Name|Switches For composite folder tests, you use the format: Test Folder|Test Suite Name|Test Case Name|Switches For example if the test suite was named \"Requirements Testing\" and the test case was named \"Get Requirements\" you'd use: [MyDocuments]\\SpiraTest-4-0-Web-Service-soapui-project.xml|Requirements Testing|Get Requirements To make this easier across different machines, you can use several constants for standard Windows locations: [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- You can choose which document type the automated test script will be categorized under. Document Folder -- You can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used when you are using the linked test script option Note: The example filename shown above was taken from a test project in SoapUI that has the following structure: Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Linking a SoapUI Test Script"},{"location":"RemoteLaunch-User-Guide/SoapUI/#using-parameterized-test-cases","text":"There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your SoapUI automated test. This is very useful if you have a data-driven SoapUI test that has custom project properties used that you would like to change based on the test. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${login} needs to match the name of the custom parameter defined in the SoapUI project properties. Invalid parameters will be silently ignored by the SoapUI engine. Parameters must have a unique name. Note that the plugin currently only supports \"Project Properties\" and not Global or System Properties.","title":"Using Parameterized Test Cases"},{"location":"RemoteLaunch-User-Guide/SoapUI/#executing-the-soapui-test-sets-from-spirateam","text":"There are three ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. Execute the test cases from the command-line or a build script We shall outline each of these three scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the SoapUI Test Sets from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/SoapUI/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the SoapUI automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination:","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/SoapUI/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer , instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. If you want to run the tests as part of a build script, just call RemoteLaunch.exe with the appropriate test set id passed into the command-line: RemoteLaunch.exe --testset:18 In all cases, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the SoapUI test: Passed -- The SoapUI automated test ran successfully and all the assertions in the test script passed Failed -- The SoapUI automated test ran successfully, but at least one assertion in the test script failed. Blocked -- The SoapUI automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see application or browser windows launch as the SoapUI server executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by SoapUI, you will see the following information: This screen indicates the status of the test run that was reported back from SoapUI together with any messages or other information. The execution status will be set according to the worst-case assessment reported back from SoapUI. If you have zero(0) failures, then the status will display as Passed, otherwise it will display as Failed. Under Console Output section you will see more detailed logging information (in both SoapUI and SoapUI Pro): The Message field will contain a summary of the number of test steps completed, the number of assertions and the number of failed assertions. The Details field will contain the detailed trace of what happened, captured from the summary output log that is generated by SoapUI. SoapUI Pro If you have the commercial SoapUI Pro product and have configured RemoteLaunch so that it knows to use SoapUI Pro, in addition, the Test Steps section of the test run will contain more detailed reporting: Where each test step corresponds to a step recorded in the SoapUI Pro results file. Congratulations... You are now able to run SoapUI automated web-service tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Executing the Test Sets"},{"location":"RemoteLaunch-User-Guide/Squish/","text":"Squish Froglogic\u00ae Squish\u00ae (hereafter Squish) is a functional test automation system that lets you record application operations and generate test automation scripts in a variety of different scripting languages (JavaScript, Tcl, Python) that can be used to playback the test script against the test application. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of Squish on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated Squish tests. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 4.0 of Squish running on a Windows\u00ae platform. Installing the Squish Engine This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the SquishAutomationEngine.zip file from the Inflectra website and locate the appropriate SquishX.dll for the version of Squish that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"SquishX.dll\" (where X is the appropriate version) into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For Squish this should be SquishX where 'X' is the version number of the DLL file that you are using. Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with Squish listed as an available automation engine. Squish RemoteLaunch Settings You will need to modify the Squish configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The Squish engine adds its own tab to this page which allows you to configure how Squish operates: The following fields can be specified on this screen: Squish Location -- This should be folder containing the \"SquishRunner\" executable that will be used to actually run the automated tests. Server Host -- This field can be set to the name of a remote Squish server if you did not install RemoteLaunch on the machine running the Squish server (optional). Server Port -- This field can be set to the port being used by a remote Squish server if you did not install RemoteLaunch on the machine running the Squish server (optional). Trace Logging -- This checkbox can be selected if you need to provide debugging information to Inflectra support personnel. Normally this should remain unchecked Note: In most cases, the second and third fields can be left empty. Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and either linking it to an existing Squish test suite, test case or entering a Squish test script directly into SpiraTeam. Note: that the Squish engine only supports passing parameters to an attached test script and not to a linked test script . Attaching a Squish Test Script First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Squish Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Attached for this case Filename -- Since the test script is going to be entered directly into SpiraTeam you can enter any filename you like as long as the file extension matches the scripting language that you're using. After that you need to add any command-line parameters after the filename, separated by a pipe (|) symbol. For example, to launch a web test using Javascript, you'd use: address_test.js|--wrapper Web For example, to launch an application test using Python, you'd use: address_test.py|--aut <application> Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This needs to contain the complete Squish test script. Squish test scripts can be written in JavaScript, Python or TCL. If you would like to have SpiraTeam pass any parameter values to this test script (this will be discussed in more detail later) you can specify them by using the syntax ${parameterName}. A complete sample script (illustrating the use of parameters) is illustrated below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 function main () { // open URL loadUrl ( \":http://address.icefaces.org/address/\" ); // wait for the first entry object to be available waitForObject ( \":_id0:title_select-one\" ); // check that the submit button is disabled test . compare ( findObject ( \":_id0:Submit_image\" ). disabled , true ); // enter data selectOption ( \":_id0:title_select-one\" , \"${title}\" ); setText ( \":_id0:firstName_text\" , \"${firstname}\" ); setText ( \":_id0:lastName_text\" , \"${lastname}\" ); setText ( \":_id0:city_text\" , \"${city}\" ); // check that after entering city, the state is automatically chosen correctly var state = \"${state}\" ; setFocus ( \":_id0:state_text\" ); if ( ! test . verify ( waitFor ( \"findObject(':_id0:state_text').value == state\" , 10000 ))) { clickButton ( \":_id0:Reset_image\" ); continue ; } // input ZIP selectOption ( \":_id0:zipSelect_select-one\" , \"${zip}\" ); // check that submit button is enabled now setFocus ( \":_id0:lastName_text\" ); if ( ! test . verify ( waitFor ( \"findObject(':_id0:Submit_image').disabled == false\" , 10000 ))) { clickButton ( \":_id0:Reset_image\" ); } // submit clickButton ( \":_id0:Submit_image\" ); // wait for results page waitForContextExists ( \":response.iface\" ); waitForObject ( \":_id1:_id3_SPAN\" ); // verify that data is stored and displayed correctly test . compare ( findObject ( \":_id1:_id3_SPAN\" ). innerText , firstName ); test . compare ( findObject ( \":_id1:_id6_SPAN\" ). innerText , state ); // close browser closeWindow ( \":[Window]\" ); } Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Linking a Squish Test Script First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Squish Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked for this case Filename -- This needs to be the full path to the Squish test case or test suite folder. If specifying a test case folder, you need to also provide the configuration command-line parameters after the filename, separated by a pipe (|) symbol. These are not needed if executing a test suite, since they are contained in the suite.conf file instead. For example, to launch a web test case you'd use: [ProgramFiles]\\Froglogic\\squish-4.0.1-web-win32\\examples\\web\\suite_examples\\tst_icefaces_addressbook_datadriven|--wrapper Web For example, to launch a web test suite you'd simply use: [ProgramFiles]\\Froglogic\\squish-4.0.1-web-win32\\examples\\web\\suite_examples For example, to launch a web test case within a test suite you'd use the path of the test suite, followed by the pipe (|) symbol, followed by the test case name: [ProgramFiles]\\Froglogic\\squish-4.0.1-web-win32\\examples\\web\\suite_examples|tst_icefaces To make this easier across different machines, you can use several constants for standard Windows locations: [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used when you are using the linked test script option Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Using Parameterized Test Cases There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your attached (not linked) Squish automated test script. This is very useful if you want to have a data-driven Squish test script that be executed multiple times with different parameter values. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${city} needs to match the name of the parameter defined within the attached Squish script. Executing the Squish Test Sets from SpiraTeam There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the Squish automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination: Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the Squish test: Passed -- The Squish automated test ran successfully and all the test conditions in the test script passed Failed -- The Squish automated test ran successfully, but at least one test condition in the test script failed. Blocked -- The Squish automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see application or browser windows launch as the Squish server executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by Squish, you will see the following information: This screen indicates the status of the test run that was reported back from Squish together with any messages or other information. The execution status will be set according to the worst-case assessment reported back from Squish. The various Squish statuses are mapped to their nearest equivalent SpiraTeam statuses as illustrated below: Squish Status SpiraTeam Status PASS Passed FAIL Failed WARNING Caution FATAL Blocked ERROR Failed In addition, the Message field will contain a summary of the number of tests completed and the number of tests that reported an error, fatal, fail, pass or warning status. 2010-11-02T16:50:01-04:00 START_TEST suite_examples 2010-11-02T16:50:01-04:00 START_TEST tst_icefaces_addressbook_datadriven 2010-11-02T16:50:05-04:00 PASS Comparison 'true' and 'true' are equal 2010-11-02T16:50:25-04:00 PASS Verified True expression 2010-11-02T16:50:30-04:00 PASS Verified True expression 2010-11-02T16:50:32-04:00 PASS Comparison 'Reginald' and 'Reginald' are equal 2010-11-02T16:50:33-04:00 PASS Comparison 'CA' and 'CA' are equal 2010-11-02T16:50:40-04:00 PASS Comparison 'true' and 'true' are equal 2010-11-02T16:50:59-04:00 PASS Verified True expression 2010-11-02T16:51:09-04:00 PASS Verified True expression 2010-11-02T16:51:12-04:00 PASS Comparison 'Tanja' and 'Tanja' are equal 2010-11-02T16:51:12-04:00 PASS Comparison 'NY' and 'NY' are equal Congratulations... You are now able to run Squish automated web tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Squish"},{"location":"RemoteLaunch-User-Guide/Squish/#squish","text":"Froglogic\u00ae Squish\u00ae (hereafter Squish) is a functional test automation system that lets you record application operations and generate test automation scripts in a variety of different scripting languages (JavaScript, Tcl, Python) that can be used to playback the test script against the test application. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of Squish on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated Squish tests. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 4.0 of Squish running on a Windows\u00ae platform.","title":"Squish"},{"location":"RemoteLaunch-User-Guide/Squish/#installing-the-squish-engine","text":"This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the SquishAutomationEngine.zip file from the Inflectra website and locate the appropriate SquishX.dll for the version of Squish that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"SquishX.dll\" (where X is the appropriate version) into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For Squish this should be SquishX where 'X' is the version number of the DLL file that you are using. Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with Squish listed as an available automation engine.","title":"Installing the Squish Engine"},{"location":"RemoteLaunch-User-Guide/Squish/#squish-remotelaunch-settings","text":"You will need to modify the Squish configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The Squish engine adds its own tab to this page which allows you to configure how Squish operates: The following fields can be specified on this screen: Squish Location -- This should be folder containing the \"SquishRunner\" executable that will be used to actually run the automated tests. Server Host -- This field can be set to the name of a remote Squish server if you did not install RemoteLaunch on the machine running the Squish server (optional). Server Port -- This field can be set to the port being used by a remote Squish server if you did not install RemoteLaunch on the machine running the Squish server (optional). Trace Logging -- This checkbox can be selected if you need to provide debugging information to Inflectra support personnel. Normally this should remain unchecked Note: In most cases, the second and third fields can be left empty.","title":"Squish RemoteLaunch Settings"},{"location":"RemoteLaunch-User-Guide/Squish/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and either linking it to an existing Squish test suite, test case or entering a Squish test script directly into SpiraTeam. Note: that the Squish engine only supports passing parameters to an attached test script and not to a linked test script .","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/Squish/#attaching-a-squish-test-script","text":"First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Squish Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Attached for this case Filename -- Since the test script is going to be entered directly into SpiraTeam you can enter any filename you like as long as the file extension matches the scripting language that you're using. After that you need to add any command-line parameters after the filename, separated by a pipe (|) symbol. For example, to launch a web test using Javascript, you'd use: address_test.js|--wrapper Web For example, to launch an application test using Python, you'd use: address_test.py|--aut <application> Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This needs to contain the complete Squish test script. Squish test scripts can be written in JavaScript, Python or TCL. If you would like to have SpiraTeam pass any parameter values to this test script (this will be discussed in more detail later) you can specify them by using the syntax ${parameterName}. A complete sample script (illustrating the use of parameters) is illustrated below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 function main () { // open URL loadUrl ( \":http://address.icefaces.org/address/\" ); // wait for the first entry object to be available waitForObject ( \":_id0:title_select-one\" ); // check that the submit button is disabled test . compare ( findObject ( \":_id0:Submit_image\" ). disabled , true ); // enter data selectOption ( \":_id0:title_select-one\" , \"${title}\" ); setText ( \":_id0:firstName_text\" , \"${firstname}\" ); setText ( \":_id0:lastName_text\" , \"${lastname}\" ); setText ( \":_id0:city_text\" , \"${city}\" ); // check that after entering city, the state is automatically chosen correctly var state = \"${state}\" ; setFocus ( \":_id0:state_text\" ); if ( ! test . verify ( waitFor ( \"findObject(':_id0:state_text').value == state\" , 10000 ))) { clickButton ( \":_id0:Reset_image\" ); continue ; } // input ZIP selectOption ( \":_id0:zipSelect_select-one\" , \"${zip}\" ); // check that submit button is enabled now setFocus ( \":_id0:lastName_text\" ); if ( ! test . verify ( waitFor ( \"findObject(':_id0:Submit_image').disabled == false\" , 10000 ))) { clickButton ( \":_id0:Reset_image\" ); } // submit clickButton ( \":_id0:Submit_image\" ); // wait for results page waitForContextExists ( \":response.iface\" ); waitForObject ( \":_id1:_id3_SPAN\" ); // verify that data is stored and displayed correctly test . compare ( findObject ( \":_id1:_id3_SPAN\" ). innerText , firstName ); test . compare ( findObject ( \":_id1:_id6_SPAN\" ). innerText , state ); // close browser closeWindow ( \":[Window]\" ); } Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Attaching a Squish Test Script"},{"location":"RemoteLaunch-User-Guide/Squish/#linking-a-squish-test-script","text":"First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the Squish Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked for this case Filename -- This needs to be the full path to the Squish test case or test suite folder. If specifying a test case folder, you need to also provide the configuration command-line parameters after the filename, separated by a pipe (|) symbol. These are not needed if executing a test suite, since they are contained in the suite.conf file instead. For example, to launch a web test case you'd use: [ProgramFiles]\\Froglogic\\squish-4.0.1-web-win32\\examples\\web\\suite_examples\\tst_icefaces_addressbook_datadriven|--wrapper Web For example, to launch a web test suite you'd simply use: [ProgramFiles]\\Froglogic\\squish-4.0.1-web-win32\\examples\\web\\suite_examples For example, to launch a web test case within a test suite you'd use the path of the test suite, followed by the pipe (|) symbol, followed by the test case name: [ProgramFiles]\\Froglogic\\squish-4.0.1-web-win32\\examples\\web\\suite_examples|tst_icefaces To make this easier across different machines, you can use several constants for standard Windows locations: [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used when you are using the linked test script option Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Linking a Squish Test Script"},{"location":"RemoteLaunch-User-Guide/Squish/#using-parameterized-test-cases","text":"There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your attached (not linked) Squish automated test script. This is very useful if you want to have a data-driven Squish test script that be executed multiple times with different parameter values. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": The name of the parameter ${city} needs to match the name of the parameter defined within the attached Squish script.","title":"Using Parameterized Test Cases"},{"location":"RemoteLaunch-User-Guide/Squish/#executing-the-squish-test-sets-from-spirateam","text":"There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the Squish Test Sets from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/Squish/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the Squish automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination:","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/Squish/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the Squish test: Passed -- The Squish automated test ran successfully and all the test conditions in the test script passed Failed -- The Squish automated test ran successfully, but at least one test condition in the test script failed. Blocked -- The Squish automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see application or browser windows launch as the Squish server executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by Squish, you will see the following information: This screen indicates the status of the test run that was reported back from Squish together with any messages or other information. The execution status will be set according to the worst-case assessment reported back from Squish. The various Squish statuses are mapped to their nearest equivalent SpiraTeam statuses as illustrated below: Squish Status SpiraTeam Status PASS Passed FAIL Failed WARNING Caution FATAL Blocked ERROR Failed In addition, the Message field will contain a summary of the number of tests completed and the number of tests that reported an error, fatal, fail, pass or warning status. 2010-11-02T16:50:01-04:00 START_TEST suite_examples 2010-11-02T16:50:01-04:00 START_TEST tst_icefaces_addressbook_datadriven 2010-11-02T16:50:05-04:00 PASS Comparison 'true' and 'true' are equal 2010-11-02T16:50:25-04:00 PASS Verified True expression 2010-11-02T16:50:30-04:00 PASS Verified True expression 2010-11-02T16:50:32-04:00 PASS Comparison 'Reginald' and 'Reginald' are equal 2010-11-02T16:50:33-04:00 PASS Comparison 'CA' and 'CA' are equal 2010-11-02T16:50:40-04:00 PASS Comparison 'true' and 'true' are equal 2010-11-02T16:50:59-04:00 PASS Verified True expression 2010-11-02T16:51:09-04:00 PASS Verified True expression 2010-11-02T16:51:12-04:00 PASS Comparison 'Tanja' and 'Tanja' are equal 2010-11-02T16:51:12-04:00 PASS Comparison 'NY' and 'NY' are equal Congratulations... You are now able to run Squish automated web tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Executing the Test Sets"},{"location":"RemoteLaunch-User-Guide/TestComplete/","text":"TestComplete SmarteBear\u2122 TestComplete\u2122 (hereafter TestComplete) is an automated functional test automation system that lets you record application operations and generate test automation scripts in a variety of languages (JavaScript, C#, VBScript). These test scripts can then be used to playback the test script against the test application and verify that it works correctly. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of TestComplete on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated TestComplete tests. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 8.0 of TestComplete. Installing the TestComplete Engine This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the TestCompleteAutomationEngine.zip file from the Inflectra website and locate the appropriate TestCompleteX.dll or TestExecuteX.dll for the version of TestComplete or TestExecute that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"TestCompleteX.dll\" or \"TestExecuteX.dll\" (where X is the appropriate version) into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For TestComplete this should be TestCompleteX where 'X' is the version number of the DLL file that you are using. For TestExecute this should be TestExecuteX where 'X' is the version number of the DLL file that you are using. Note: We only use the major version numbers for the token name. So the DLLs TestComplete9.0.dll and TestComplete9.1.dll would both use Token = \"TestComplete9\". Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with TestComplete listed as an available automation engine. Advanced Settings You can modify the TestComplete configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The TestComplete engine adds its own tab to this page which allows you to configure how TestComplete operates: The following fields can be specified on this screen: Wait Time -- This should be set to the amount of time TestComplete needs on this workstation to close the currently open test. The default value is 10000ms (10 seconds). If you get error messages that TestComplete is still open, you need to increase this value. Application Visible -- This allows you to configure whether the TestComplete application is displayed during test execution or is kept hidden. The default is for it to be hidden. Close TC After Each Test -- When this is selected, the plugin will close the TestComplete application after each test executes. We generally recommend leaving this disabled as the startup and closedown of TestComplete can sometimes interfere with the tests being executed. Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated TestComplete test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the TestComplete Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with TestComplete only supports referencing TestComplete test project/suite file paths and not physically uploading the test scripts into SpiraTeam. Filename -- This is actually a compound of several different components that need to be entered, separated by the pipe (|) symbol. The syntax depends on whether we want to associate the SpiraTeam test case with a specific project item or with a specific test routine . If you want to use parameterized test cases, you need to link it with a specific routine (see below for more details on parameters). If you want to execute a specific project item , the filename should consist of Suite Filename|Project Name|Project Item Name (e.g. [CommonDocuments]\\TestComplete 7 Samples\\Open Apps\\OrdersDemo\\C#\\TCProject\\Orders.pjs|Orders_C#_C#Script|ProjectTestItem1) If you want to execute a specific test routine , the filename should consist of Suite Filename|Project Name|Unit Name|Routine Name (e.g. [CommonDocuments]\\TestComplete 7 Samples\\Scripts\\Hello\\Hello.pjs|Hello_C#Script|hello_cs|Hello) In the case of executing a specific test routine, the last component (the routine name ) is actually the name of the function in the test script itself. As illustrated in the examples, for the Test Suite filename, you can use several constants for standard Windows locations to make things easier: [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the TestComplete Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Using Parameterized Test Cases There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your TestComplete automated test script. This is very useful if you have a data-driven TestComplete test script that accepts input parameters. To use this feature you need to use the option described above to link the SpiraTest test case to an explicit test routine inside TestComplete. If you choose the option to link to a Project Item, any parameters passed will be ignored. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": Since the parameters in SpiraTeam map to the function arguments inside a TestComplete test script the parameter names need to match the order of the arguments inside TestComplete (i.e. they are matched by position/order not by name). Therefore we recommend using numbers for the parameter names so that it's easy to see which parameter value will be passed to which argument in the test script function. Executing the TestComplete Test Sets from SpiraTeam There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the TestComplete automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination: Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the TestComplete test: Passed -- The TestComplete automated test ran successfully and all the test conditions in the test script passed Failed -- The TestComplete automated test ran successfully, but at least one test condition in the test script failed. Blocked -- The TestComplete automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see browser or application windows launch as TestComplete executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by TestComplete, you will see the following information: This screen indicates the status of the test run that was reported back from TestComplete together with any messages or other information. The Test Name indicates the name of the test inside TestComplete, and the execution status corresponds to the matching status inside TestComplete as illustrated below: TestComplete Status SpiraTest Status Passed Passed Failed Failed Warning Caution In addition, the detailed test report from TestComplete is available in the \"Console Output\" text-box below. It will contain messages such as: For the most detail, the \"Test Steps\" section will contain a step-by-step breakdown of each action taken in the automated test: Screenshot Capture During the execution of the test, TestComplete will capture screenshots of the application being tested. These screenshots are uploaded to SpiraTest so that you have a complete record of the testing activities: Congratulations... You are now able to run TestComplete automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"TestComplete"},{"location":"RemoteLaunch-User-Guide/TestComplete/#testcomplete","text":"SmarteBear\u2122 TestComplete\u2122 (hereafter TestComplete) is an automated functional test automation system that lets you record application operations and generate test automation scripts in a variety of languages (JavaScript, C#, VBScript). These test scripts can then be used to playback the test script against the test application and verify that it works correctly. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of TestComplete on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated TestComplete tests. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 8.0 of TestComplete.","title":"TestComplete"},{"location":"RemoteLaunch-User-Guide/TestComplete/#installing-the-testcomplete-engine","text":"This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the TestCompleteAutomationEngine.zip file from the Inflectra website and locate the appropriate TestCompleteX.dll or TestExecuteX.dll for the version of TestComplete or TestExecute that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"TestCompleteX.dll\" or \"TestExecuteX.dll\" (where X is the appropriate version) into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For TestComplete this should be TestCompleteX where 'X' is the version number of the DLL file that you are using. For TestExecute this should be TestExecuteX where 'X' is the version number of the DLL file that you are using. Note: We only use the major version numbers for the token name. So the DLLs TestComplete9.0.dll and TestComplete9.1.dll would both use Token = \"TestComplete9\". Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with TestComplete listed as an available automation engine.","title":"Installing the TestComplete Engine"},{"location":"RemoteLaunch-User-Guide/TestComplete/#advanced-settings","text":"You can modify the TestComplete configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The TestComplete engine adds its own tab to this page which allows you to configure how TestComplete operates: The following fields can be specified on this screen: Wait Time -- This should be set to the amount of time TestComplete needs on this workstation to close the currently open test. The default value is 10000ms (10 seconds). If you get error messages that TestComplete is still open, you need to increase this value. Application Visible -- This allows you to configure whether the TestComplete application is displayed during test execution or is kept hidden. The default is for it to be hidden. Close TC After Each Test -- When this is selected, the plugin will close the TestComplete application after each test executes. We generally recommend leaving this disabled as the startup and closedown of TestComplete can sometimes interfere with the tests being executed.","title":"Advanced Settings"},{"location":"RemoteLaunch-User-Guide/TestComplete/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated TestComplete test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the TestComplete Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with TestComplete only supports referencing TestComplete test project/suite file paths and not physically uploading the test scripts into SpiraTeam. Filename -- This is actually a compound of several different components that need to be entered, separated by the pipe (|) symbol. The syntax depends on whether we want to associate the SpiraTeam test case with a specific project item or with a specific test routine . If you want to use parameterized test cases, you need to link it with a specific routine (see below for more details on parameters). If you want to execute a specific project item , the filename should consist of Suite Filename|Project Name|Project Item Name (e.g. [CommonDocuments]\\TestComplete 7 Samples\\Open Apps\\OrdersDemo\\C#\\TCProject\\Orders.pjs|Orders_C#_C#Script|ProjectTestItem1) If you want to execute a specific test routine , the filename should consist of Suite Filename|Project Name|Unit Name|Routine Name (e.g. [CommonDocuments]\\TestComplete 7 Samples\\Scripts\\Hello\\Hello.pjs|Hello_C#Script|hello_cs|Hello) In the case of executing a specific test routine, the last component (the routine name ) is actually the name of the function in the test script itself. As illustrated in the examples, for the Test Suite filename, you can use several constants for standard Windows locations to make things easier: [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the TestComplete Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/TestComplete/#using-parameterized-test-cases","text":"There is an advanced feature of SpiraTest/Team and RemoteLaunch that lets you pass parameters from SpiraTeam to your TestComplete automated test script. This is very useful if you have a data-driven TestComplete test script that accepts input parameters. To use this feature you need to use the option described above to link the SpiraTest test case to an explicit test routine inside TestComplete. If you choose the option to link to a Project Item, any parameters passed will be ignored. To setup the automated test case for parameters, click on the \"Test Steps\" tab and click on \"Edit Parameters\": Since the parameters in SpiraTeam map to the function arguments inside a TestComplete test script the parameter names need to match the order of the arguments inside TestComplete (i.e. they are matched by position/order not by name). Therefore we recommend using numbers for the parameter names so that it's easy to see which parameter value will be passed to which argument in the test script function.","title":"Using Parameterized Test Cases"},{"location":"RemoteLaunch-User-Guide/TestComplete/#executing-the-testcomplete-test-sets-from-spirateam","text":"There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the TestComplete Test Sets from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/TestComplete/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the TestComplete automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing If you have parameterized test cases inside the automated test set you can set their values in three different ways: Test Set Parameter Values -- this lets you set the same value of a parameter for all the test cases in the test set: Test Case Parameter Values -- this lets you set a specific value for a parameter for a particular test case in the test set: You set these values, by right-clicking on a row and choosing \"Edit Parameters\": Test Configurations -- this lets you create a data grid of possible test parameters and execute the test set multiple times, once for each unique combination:","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/TestComplete/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the TestComplete test: Passed -- The TestComplete automated test ran successfully and all the test conditions in the test script passed Failed -- The TestComplete automated test ran successfully, but at least one test condition in the test script failed. Blocked -- The TestComplete automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see browser or application windows launch as TestComplete executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by TestComplete, you will see the following information: This screen indicates the status of the test run that was reported back from TestComplete together with any messages or other information. The Test Name indicates the name of the test inside TestComplete, and the execution status corresponds to the matching status inside TestComplete as illustrated below: TestComplete Status SpiraTest Status Passed Passed Failed Failed Warning Caution In addition, the detailed test report from TestComplete is available in the \"Console Output\" text-box below. It will contain messages such as: For the most detail, the \"Test Steps\" section will contain a step-by-step breakdown of each action taken in the automated test:","title":"Executing the Test Sets"},{"location":"RemoteLaunch-User-Guide/TestComplete/#screenshot-capture","text":"During the execution of the test, TestComplete will capture screenshots of the application being tested. These screenshots are uploaded to SpiraTest so that you have a complete record of the testing activities: Congratulations... You are now able to run TestComplete automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Screenshot Capture"},{"location":"RemoteLaunch-User-Guide/TestPartner/","text":"TestPartner Micro Focus\u2122 TestPartner\u2122 (hereafter TestPartner) is a Graphic User Interface (GUI) functional test automation system that lets you record application operations by capturing the various testable objects of the application and then playback the operations to automatically test the application. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of TestPartner on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated TestPartner tests. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 6.0 of TestPartner*.* Installing the TestPartner Engine This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the TestPartnerAutomationEngine.zip file from the Inflectra website and locate the TestPartner.dll inside the zip archive. Copy the file \"TestPartner.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For TestPartner this should just be TestPartner . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with TestPartner listed as an available automation engine. Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated TestPartner test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the TestPartner Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with TestPartner only supports referencing TestPartner test scripts (stored in the internal database) and not physically uploading the test scripts into SpiraTeam. Filename -- This needs contain the project and test name from TestPartner with the appropriate parameter name describing which is the project name and which is the test name. The test name can be either a test script of a visual test. The syntax is: -visualtest <test name> -project <project name> or -testscript <script name> -project <project name> Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the TestPartner Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Using Parameterized Test Cases TestPartner does not support the passing of input test parameters so the TestPartner automation engine does not support this feature of SpiraTeam or RemoteLaunch. Executing the TestPartner Test Sets from SpiraTeam There are three ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. Execute the test cases from the command-line or a build script We shall outline each of these three scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the TestPartner automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the TestPartner test: Passed -- The TestPartner automated test ran successfully and all the test conditions in the test script passed Failed -- The TestPartner automated test ran successfully, but at least one test condition in the test script failed. Blocked -- The TestPartner automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see browser or application windows launch as TestPartner executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by TestPartner, you will see the following information: This screen indicates the status of the test run that was reported back from TestPartner together with any messages or other information. The Test Name indicates the name of the test inside TestPartner, and the execution status corresponds the matching status inside TestPartner. Congratulations... You are now able to run TestPartner automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"TestPartner"},{"location":"RemoteLaunch-User-Guide/TestPartner/#testpartner","text":"Micro Focus\u2122 TestPartner\u2122 (hereafter TestPartner) is a Graphic User Interface (GUI) functional test automation system that lets you record application operations by capturing the various testable objects of the application and then playback the operations to automatically test the application. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of TestPartner on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated TestPartner tests. Note: This integration requires at least version 3.0 of SpiraTest/Team and version 6.0 of TestPartner*.*","title":"TestPartner"},{"location":"RemoteLaunch-User-Guide/TestPartner/#installing-the-testpartner-engine","text":"This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the TestPartnerAutomationEngine.zip file from the Inflectra website and locate the TestPartner.dll inside the zip archive. Copy the file \"TestPartner.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For TestPartner this should just be TestPartner . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with TestPartner listed as an available automation engine.","title":"Installing the TestPartner Engine"},{"location":"RemoteLaunch-User-Guide/TestPartner/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated TestPartner test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" tab: You need to enter the following fields: Automation Engine - Choose the TestPartner Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with TestPartner only supports referencing TestPartner test scripts (stored in the internal database) and not physically uploading the test scripts into SpiraTeam. Filename -- This needs contain the project and test name from TestPartner with the appropriate parameter name describing which is the project name and which is the test name. The test name can be either a test script of a visual test. The syntax is: -visualtest <test name> -project <project name> or -testscript <script name> -project <project name> Document Type -- If using SpiraTeam (not SpiraTest) you can choose which document type the automated test script will be categorized under. Document Folder -- If using SpiraTeam (not SpiraTest) you can choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the TestPartner Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/TestPartner/#using-parameterized-test-cases","text":"TestPartner does not support the passing of input test parameters so the TestPartner automation engine does not support this feature of SpiraTeam or RemoteLaunch.","title":"Using Parameterized Test Cases"},{"location":"RemoteLaunch-User-Guide/TestPartner/#executing-the-testpartner-test-sets-from-spirateam","text":"There are three ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. Execute the test cases from the command-line or a build script We shall outline each of these three scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the TestPartner Test Sets from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/TestPartner/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the TestPartner automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/TestPartner/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the TestPartner test: Passed -- The TestPartner automated test ran successfully and all the test conditions in the test script passed Failed -- The TestPartner automated test ran successfully, but at least one test condition in the test script failed. Blocked -- The TestPartner automated test did not run successfully If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you may see browser or application windows launch as TestPartner executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by TestPartner, you will see the following information: This screen indicates the status of the test run that was reported back from TestPartner together with any messages or other information. The Test Name indicates the name of the test inside TestPartner, and the execution status corresponds the matching status inside TestPartner. Congratulations... You are now able to run TestPartner automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Executing the Test Sets"},{"location":"RemoteLaunch-User-Guide/TestingAnywhere/","text":"TestingAnywhere TestingAnywhere is a powerful and easy to use automated software testing tool that allows users to automate any type of testing. Powerful GUI based recording capabilities and a no-programming required user interface allows testers to quickly set up even complex test cases. A built-in editor allows users to build tests that can be easily edited to allow for changes in the test cases. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of TestingAnywhere on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated TestingAnywhere tests. Note: This integration requires at least version 4.0 of SpiraTest/Team and RemoteLaunch. Installing the TestingAnywhere Engine This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the TestingAnywhereEngine.zip file from the Inflectra website and locate the TestingAnywhereAutomationEngine.dll file contained within. Copy the file \"TestingAnywhereAutomationEngine.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For TestingAnywhere this should simply be TestingAnywhere . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with TestingAnywhere listed as an available automation engine. Advanced Settings You can modify the TestingAnywhere configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The TestingAnywhere engine adds its own tab to this page which allows you to configure how TestingAnywhere operates: The following fields can be specified on this screen: Player Location -- this is the folder where the TestingAnywhere player (TAPlayer.exe) can be found. Typically it's C:\\Program Files (x86)\\Testing Anywhere 9.0\\Testing Anywhere Files Location -- This is the folder where the TestingAnywhere test scripts and generated log files will be stored. The currently logged-in user needs to have Read/Write permissions over this folder. Typically it's: C:\\Documents And Settings\\[UserName]\\My Documents\\Testing Anywhere Files on a Windows XP workstation or Windows 2003 server. C:\\Users\\[UserName]\\Documents\\Testing Anywhere Files on a Windows Vista, 7, 2008 or 2008 R2 computer. Trace Logging -- When selected, this will log additional trace and debugging information to the Windows Event Log. This should not be selected in a production environment. Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated TestingAnywhere test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Overview\" tab, and scroll down to the \"Automation\" section: You need to enter the following fields: Automation Engine - Choose the TestingAnywhere Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with TestingAnywhere only supports referencing TestingAnywhere test script files and not physically uploading the test scripts into SpiraTeam. Filename -- This needs to consist of the relative location of the TestingAnywhere test script to the test script root folder. Document Type -- This allows you to choose which document type the automated test script will be categorized under. Document Folder --This allows you to choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the TestingAnywhere Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Executing the TestingAnywhere Test Sets from SpiraTeam There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the TestingAnywhere automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be executed. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the TestingAnywhere test: Passed -- The TestingAnywhere automated test ran successfully and all the test steps in the test script passed and no assertions were thrown. Failed -- The TestingAnywhere automated test ran successfully, but at least one test step failed or at least one assertion failed. Caution -- The TestingAnywhere automated test run successfully, but at least one warning was logged in one of the test steps. Blocked -- The TestingAnywhere automated test did not run successfully. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you will see browser windows launch as TestingAnywhere executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by TestingAnywhere, you will see the following high-level test information: This screen indicates the status of the test run that was reported back from TestingAnywhere together with the execution date/time. If you scroll down to the 'Console Output' section, you will see: Finally, to see the detailed test steps, look under the 'Test Steps' section: Congratulations... You are now able to run TestingAnywhere automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"TestingAnywhere"},{"location":"RemoteLaunch-User-Guide/TestingAnywhere/#testinganywhere","text":"TestingAnywhere is a powerful and easy to use automated software testing tool that allows users to automate any type of testing. Powerful GUI based recording capabilities and a no-programming required user interface allows testers to quickly set up even complex test cases. A built-in editor allows users to build tests that can be easily edited to allow for changes in the test cases. This section describes how you can use SpiraTest / SpiraTeam (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of TestingAnywhere on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated TestingAnywhere tests. Note: This integration requires at least version 4.0 of SpiraTest/Team and RemoteLaunch.","title":"TestingAnywhere"},{"location":"RemoteLaunch-User-Guide/TestingAnywhere/#installing-the-testinganywhere-engine","text":"This section assumes that you already have a working installation of SpiraTest or SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the TestingAnywhereEngine.zip file from the Inflectra website and locate the TestingAnywhereAutomationEngine.dll file contained within. Copy the file \"TestingAnywhereAutomationEngine.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For TestingAnywhere this should simply be TestingAnywhere . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with TestingAnywhere listed as an available automation engine.","title":"Installing the TestingAnywhere Engine"},{"location":"RemoteLaunch-User-Guide/TestingAnywhere/#advanced-settings","text":"You can modify the TestingAnywhere configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The TestingAnywhere engine adds its own tab to this page which allows you to configure how TestingAnywhere operates: The following fields can be specified on this screen: Player Location -- this is the folder where the TestingAnywhere player (TAPlayer.exe) can be found. Typically it's C:\\Program Files (x86)\\Testing Anywhere 9.0\\Testing Anywhere Files Location -- This is the folder where the TestingAnywhere test scripts and generated log files will be stored. The currently logged-in user needs to have Read/Write permissions over this folder. Typically it's: C:\\Documents And Settings\\[UserName]\\My Documents\\Testing Anywhere Files on a Windows XP workstation or Windows 2003 server. C:\\Users\\[UserName]\\Documents\\Testing Anywhere Files on a Windows Vista, 7, 2008 or 2008 R2 computer. Trace Logging -- When selected, this will log additional trace and debugging information to the Windows Event Log. This should not be selected in a production environment.","title":"Advanced Settings"},{"location":"RemoteLaunch-User-Guide/TestingAnywhere/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated TestingAnywhere test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Overview\" tab, and scroll down to the \"Automation\" section: You need to enter the following fields: Automation Engine - Choose the TestingAnywhere Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with TestingAnywhere only supports referencing TestingAnywhere test script files and not physically uploading the test scripts into SpiraTeam. Filename -- This needs to consist of the relative location of the TestingAnywhere test script to the test script root folder. Document Type -- This allows you to choose which document type the automated test script will be categorized under. Document Folder --This allows you to choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the TestingAnywhere Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/TestingAnywhere/#executing-the-testinganywhere-test-sets-from-spirateam","text":"There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the TestingAnywhere Test Sets from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/TestingAnywhere/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the TestingAnywhere automated test cases and click on its hyperlink to display the test set details page: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/TestingAnywhere/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be executed. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the TestingAnywhere test: Passed -- The TestingAnywhere automated test ran successfully and all the test steps in the test script passed and no assertions were thrown. Failed -- The TestingAnywhere automated test ran successfully, but at least one test step failed or at least one assertion failed. Caution -- The TestingAnywhere automated test run successfully, but at least one warning was logged in one of the test steps. Blocked -- The TestingAnywhere automated test did not run successfully. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you will see browser windows launch as TestingAnywhere executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by TestingAnywhere, you will see the following high-level test information: This screen indicates the status of the test run that was reported back from TestingAnywhere together with the execution date/time. If you scroll down to the 'Console Output' section, you will see: Finally, to see the detailed test steps, look under the 'Test Steps' section: Congratulations... You are now able to run TestingAnywhere automated functional tests and have the results be recorded within SpiraTest / SpiraTeam.","title":"Executing the Test Sets"},{"location":"RemoteLaunch-User-Guide/WebLOAD/","text":"WebLOAD RadView WebLoad is a WebLOAD is a performance, scalability, and reliability testing solution for internet applications. WebLOAD is easy to use and delivers maximum testing performance and value. WebLOAD verifies the scalability and integrity of internet applications by generating a load composed of Virtual Clients that simulate real-world traffic. Probing Clients let you refine the testing process by acting as a single user that measures the performance of targeted activities, and provides individual performance statistics of the internet application under load. This section covers installing and using the Engine to report back the success of a WebLoad protocol test scripts/agendas for the WebLOAD environment. Info This integration requires at least version 4.0 of SpiraTest/Plan and has been tested against version WebLOAD-Professional-12.2.0.087 of WebLoad. Installing the WebLOAD Engine This section assumes that you already have a working installation of SpiraTest or SpiraPplan and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the WebLOADEngine.zip file from the Inflectra website and locate the appropriate WebLoad.dll for the version of WebLOAD that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"WebLoad.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraPlan as a system administrator and go into SpiraPlan main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users, and will be displayed in the Automation Host dropdown when the user selects it in the test set. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine, in this case WebLoad.dll, to actually use for a given test case. For WebLOAD, it needs to be simply \"WebLoad\". This is case sensitive, and if it does not match an error will be written to a Blocked test run that will be phrased using what was entered as the token. For example, if the token is misspelled, WebLpsd, the error message will say \u201cExtension 'WebLpsd' was not loaded or was in error condition. Could not run TC:73 in TX:29\u201d Once you have finished, click the Insert & Close button and you will be taken back to the Test Automation list page, with WebLOAD listed as an available automation engine. WebLOAD RemoteLaunch Settings You will need to modify the WebLOAD configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The WebLOAD engine adds its own tab to this page which allows you to configure how WebLOAD operates: The following fields can be specified on this screen (make sure to hit Save after making any changes): WebLOAD Location : The directory that contains the \"WebLoad.exe\" executable that will be used to actually run the automated tests. Log Results : Normally the WebLOAD engine will capture the output results from the command-line. Deselecting this option will provide less information for the test results upon a failure. Output Directory : The directory where the resulting .ls, .dat, .isd, .mdb, .sdb, and results.xml files will be created containing the test data. These files will have their file names generated using the Load Template script name without the.tpl extension, a time stamp (YYYYMMDDHHMMSS). For example: Output file WebLOADFirstTest20191031122657.ls will be generated from the file name from input script WebLOADFirstTest.tpl Time in Seconds : The amount of time in seconds to allow the WebLoad test to run. The default is 24 hours (86,400 seconds). Num Virtual Client Licenses : The number of Virtual Client licenses to allocate when using WebRM License Server. The default is 0. Num Probing Client Licenses : The number of Probing Client licenses to allocate when using WebRM License Server. The default is 0. Tokens for Specifying File Locations The full path to the WebLOAD Location and the Output Directory can be shortened via keywords for better visibility, and to make this easier across different machines, you can use several constants for standard Windows locations (see example in screenshot): [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory. Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraPlan for automation and linking it to an automated WebLOAD test script. First you need to display the list of test cases in SpiraPlan (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Overview\" tab and scroll down to the Automation section: You need to enter the following fields: Automation Engine : Choose the WebLOAD Automation Engine that you created in the previous section from the drop-down list. Script Type : This should be left as to Attached as the integration with WebLOAD only supports referencing WebLOAD test script .tpl files and not physically uploading the test scripts into SpiraPlan. Filename : This is the full file path or keyword shortcut to the WebLOAD test script .tpl file. See \"Tokens for Specifying File Locations\" info panel above for more inforamtion about they keywords you can use Document Type : Leave as Default Document Folder : Leave as Root Folder Version : The version of the test script (1.0 is used if no value specified) Test Script : This is not used with the WebLOAD Engine since it only supports linked test scripts. Once you are happy with the values, click Save to update the test case. Now you are ready to schedule the automated test case for execution. Using Parameterized Test Cases Currently the WebLOAD automation engine does not support the passing of parameter values from SpiraPlan to WebLOAD. Only the file path to the WebLOAD project file (*.tpl) file can be passed. Other parameters must be set in RemoteLaunch as illustrated earlier. Executing WebLOAD Test Sets from SpiraPlan Before we can executed tests we need to setup the appropriate automation hosts and test sets in SpiraPlan. Once this is done, there are two ways to execute automated test cases in SpiraPlan: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. Setup the Automation Hosts and Test Sets Go to Testing > Automation Hosts from the main navbar in SpiraPlan to display the list of automation hosts. Make sure you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case. Info Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the WebLOAD automated test cases and click on its hyperlink to display the test set details page. You need to add at least one automated test case to the test set and then configure the following fields: Automation Host : This needs to be set to the name of the automation host that will be running the automated test set. Planned Date : The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status : This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type : This needs to be set to \"Automated\" for automated testing Execute the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraPlan for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be executed. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either: Completed : the automation engine could be launched and the test has completed; or Blocked : RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the WebLOAD test: Passed : The WebLOAD automated test ran successfully and no failures or errors were logged. Failed : The WebLOAD automated test ran successfully, but at least one error or failure was logged. Blocked : The WebLOAD automated test did not run successfully. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Info While the tests are executing you will see the WebLOAD application open as WebLOAD executes the appropriate tests. Once the tests have completed, you can log back into SpiraPlan and see the execution status of your test cases. If you click on a Test Run that was generated by WebLOAD, you will see the following information: This screen indicates the status of the test run that was reported back from WebLOAD together with any messages or other information. The Test Name indicates the name of the test inside WebLOAD and the execution status corresponds the rules described above. In addition, the details in the test run from WebLOAD lists the input script and the parameters passed to the script so testers will know the file created that are correlated with tis test run in the output directory. Here is an example of a successful WebLOAD script run through SpiraPlan: 1 2 3 Results from results.xml: Passed Test File Name: C:\\Users\\suzanne.bauer\\Documents\\WebLOAD\\Sessions\\input\\WebLOADFirstTest.tpl with arguments: C:\\Users\\su.be\\Documents\\WebLOAD\\Sessions\\output\\WebLOADFirstTest20200228135424.ls /rc C:\\Users\\su.be\\Documents\\WebLOAD\\Sessions\\output\\results.xml /ar 300 Congratulations You are now able to run WebLOAD automated functional tests and have the results be recorded within SpiraTest /SpiraTeam/ SpiraPlan.","title":"WebLOAD"},{"location":"RemoteLaunch-User-Guide/WebLOAD/#webload","text":"RadView WebLoad is a WebLOAD is a performance, scalability, and reliability testing solution for internet applications. WebLOAD is easy to use and delivers maximum testing performance and value. WebLOAD verifies the scalability and integrity of internet applications by generating a load composed of Virtual Clients that simulate real-world traffic. Probing Clients let you refine the testing process by acting as a single user that measures the performance of targeted activities, and provides individual performance statistics of the internet application under load. This section covers installing and using the Engine to report back the success of a WebLoad protocol test scripts/agendas for the WebLOAD environment. Info This integration requires at least version 4.0 of SpiraTest/Plan and has been tested against version WebLOAD-Professional-12.2.0.087 of WebLoad.","title":"WebLOAD"},{"location":"RemoteLaunch-User-Guide/WebLOAD/#installing-the-webload-engine","text":"This section assumes that you already have a working installation of SpiraTest or SpiraPplan and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the WebLOADEngine.zip file from the Inflectra website and locate the appropriate WebLoad.dll for the version of WebLOAD that you are using. If you don't see the version listed, just use the nearest version that is lower than your current version. Copy the file \"WebLoad.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraPlan as a system administrator and go into SpiraPlan main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users, and will be displayed in the Automation Host dropdown when the user selects it in the test set. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine, in this case WebLoad.dll, to actually use for a given test case. For WebLOAD, it needs to be simply \"WebLoad\". This is case sensitive, and if it does not match an error will be written to a Blocked test run that will be phrased using what was entered as the token. For example, if the token is misspelled, WebLpsd, the error message will say \u201cExtension 'WebLpsd' was not loaded or was in error condition. Could not run TC:73 in TX:29\u201d Once you have finished, click the Insert & Close button and you will be taken back to the Test Automation list page, with WebLOAD listed as an available automation engine.","title":"Installing the WebLOAD Engine"},{"location":"RemoteLaunch-User-Guide/WebLOAD/#webload-remotelaunch-settings","text":"You will need to modify the WebLOAD configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The WebLOAD engine adds its own tab to this page which allows you to configure how WebLOAD operates: The following fields can be specified on this screen (make sure to hit Save after making any changes): WebLOAD Location : The directory that contains the \"WebLoad.exe\" executable that will be used to actually run the automated tests. Log Results : Normally the WebLOAD engine will capture the output results from the command-line. Deselecting this option will provide less information for the test results upon a failure. Output Directory : The directory where the resulting .ls, .dat, .isd, .mdb, .sdb, and results.xml files will be created containing the test data. These files will have their file names generated using the Load Template script name without the.tpl extension, a time stamp (YYYYMMDDHHMMSS). For example: Output file WebLOADFirstTest20191031122657.ls will be generated from the file name from input script WebLOADFirstTest.tpl Time in Seconds : The amount of time in seconds to allow the WebLoad test to run. The default is 24 hours (86,400 seconds). Num Virtual Client Licenses : The number of Virtual Client licenses to allocate when using WebRM License Server. The default is 0. Num Probing Client Licenses : The number of Probing Client licenses to allocate when using WebRM License Server. The default is 0. Tokens for Specifying File Locations The full path to the WebLOAD Location and the Output Directory can be shortened via keywords for better visibility, and to make this easier across different machines, you can use several constants for standard Windows locations (see example in screenshot): [MyDocuments] -- The user's \"My Documents\" folder. The user indicated is the user that ran RemoteLaunch. [CommonDocuments] -- The Public Document's folder. [DesktopDirectory] -- The user's Desktop folder. The user indicated is the user that ran RemoteLaunch. [ProgramFiles] -- Translated to the Program Files directory. For 64-bit machines, it's the 64-bit directory. [ProgramFilesX86] -- Translated to the 32-bit Program Files directory.","title":"WebLOAD RemoteLaunch Settings"},{"location":"RemoteLaunch-User-Guide/WebLOAD/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraPlan for automation and linking it to an automated WebLOAD test script. First you need to display the list of test cases in SpiraPlan (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Overview\" tab and scroll down to the Automation section: You need to enter the following fields: Automation Engine : Choose the WebLOAD Automation Engine that you created in the previous section from the drop-down list. Script Type : This should be left as to Attached as the integration with WebLOAD only supports referencing WebLOAD test script .tpl files and not physically uploading the test scripts into SpiraPlan. Filename : This is the full file path or keyword shortcut to the WebLOAD test script .tpl file. See \"Tokens for Specifying File Locations\" info panel above for more inforamtion about they keywords you can use Document Type : Leave as Default Document Folder : Leave as Root Folder Version : The version of the test script (1.0 is used if no value specified) Test Script : This is not used with the WebLOAD Engine since it only supports linked test scripts. Once you are happy with the values, click Save to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/WebLOAD/#using-parameterized-test-cases","text":"Currently the WebLOAD automation engine does not support the passing of parameter values from SpiraPlan to WebLOAD. Only the file path to the WebLOAD project file (*.tpl) file can be passed. Other parameters must be set in RemoteLaunch as illustrated earlier.","title":"Using Parameterized Test Cases"},{"location":"RemoteLaunch-User-Guide/WebLOAD/#executing-webload-test-sets-from-spiraplan","text":"Before we can executed tests we need to setup the appropriate automation hosts and test sets in SpiraPlan. Once this is done, there are two ways to execute automated test cases in SpiraPlan: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer.","title":"Executing WebLOAD Test Sets from SpiraPlan"},{"location":"RemoteLaunch-User-Guide/WebLOAD/#setup-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts from the main navbar in SpiraPlan to display the list of automation hosts. Make sure you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case. Info Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the WebLOAD automated test cases and click on its hyperlink to display the test set details page. You need to add at least one automated test case to the test set and then configure the following fields: Automation Host : This needs to be set to the name of the automation host that will be running the automated test set. Planned Date : The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status : This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type : This needs to be set to \"Automated\" for automated testing","title":"Setup the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/WebLOAD/#execute-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraPlan for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be executed. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either: Completed : the automation engine could be launched and the test has completed; or Blocked : RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the WebLOAD test: Passed : The WebLOAD automated test ran successfully and no failures or errors were logged. Failed : The WebLOAD automated test ran successfully, but at least one error or failure was logged. Blocked : The WebLOAD automated test did not run successfully. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Info While the tests are executing you will see the WebLOAD application open as WebLOAD executes the appropriate tests. Once the tests have completed, you can log back into SpiraPlan and see the execution status of your test cases. If you click on a Test Run that was generated by WebLOAD, you will see the following information: This screen indicates the status of the test run that was reported back from WebLOAD together with any messages or other information. The Test Name indicates the name of the test inside WebLOAD and the execution status corresponds the rules described above. In addition, the details in the test run from WebLOAD lists the input script and the parameters passed to the script so testers will know the file created that are correlated with tis test run in the output directory. Here is an example of a successful WebLOAD script run through SpiraPlan: 1 2 3 Results from results.xml: Passed Test File Name: C:\\Users\\suzanne.bauer\\Documents\\WebLOAD\\Sessions\\input\\WebLOADFirstTest.tpl with arguments: C:\\Users\\su.be\\Documents\\WebLOAD\\Sessions\\output\\WebLOADFirstTest20200228135424.ls /rc C:\\Users\\su.be\\Documents\\WebLOAD\\Sessions\\output\\results.xml /ar 300 Congratulations You are now able to run WebLOAD automated functional tests and have the results be recorded within SpiraTest /SpiraTeam/ SpiraPlan.","title":"Execute the Test Sets"},{"location":"RemoteLaunch-User-Guide/Worksoft-Certify/","text":"Worksoft Certify Worksoft Certify is a test automation solution for enterprise applications including SAP, Workday, Salesforce.com, Oracle, and Web Apps. Built to test complex business processes that span multiple applications, Certify ensures that your software and business work exactly as planned. This section describes how you can use SpiraTest, SpiraTeam, or SpiraPlan (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of Worksoft Certify on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated Worksoft Certify tests. Note: This integration requires at least version 5.0 of SpiraTeam and version 10.0 of Worksoft Certify. Installing the Worksoft Certify Engine This section assumes that you already have a working installation of SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the WorksoftCertifyEngine.zip file from the Inflectra website and locate the appropriate WorksoftCertifyEngine.dll for the version of Worksoft Certify that you are using. Copy the file \"WorksoftCertifyEngine.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For Worksoft Certify this should always be WorksoftCertify . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with Worksoft Certify listed as an available automation engine: Advanced Settings You can modify the Worksoft Certify configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The Worksoft Certify engine adds its own tab to this page which allows you to configure how Worksoft Certify operates: The following fields can be specified on this screen: Trace Logging -- When selected, this will log additional trace and debugging information to the Windows Event Log. This should not be selected in a production environment. Certify User -- This should be populated with a valid username that can login to the Worksoft Certify database that you are using Certify Password -- This should be populated with a valid password for the user specified in the previous field that can login to the Worksoft Certify database that you are using Test Timeout -- This tells RemoteLaunch how long to let the Worksoft Certify tests run (in seconds) in the event one of the tests were to not finish property. Once the test report is generated, RemoteLaunch will stop execution, regardless of this setting. Report Generation Time -- This is how long (in seconds) RemoteLaunch should wait after Worksoft Certify has finished before reading the test report (for sending to SpiraTeam). It ensures that Worksoft Certify has enough time to finish writing the report. Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated Worksoft Certify test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" section of the main \"Overview\" tab: You need to enter the following fields: Automation Engine - Choose the Worksoft Certify Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with Worksoft Certify only supports referencing Worksoft Certify projects and not physically uploading the tests into SpiraTeam. Filename -- This needs to contain the following elements at the very least: /Process=\"xxxxx\" needs to specify the name of the Worksoft Certify process /Project=\"xxxxx\" needs to specify the name of the Worksoft Certify project You can also add other Worksoft Certify command line options - http://community.worksoft.com/Knowledge-Base/Worksoft-Products/Worksoft-Certify/certify-command-line-options.html Document Type -- This allows you to choose which document type the automated test script will be categorized under. Document Folder --This allows you to choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the Worksoft Certify Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Executing the Worksoft Certify Test Sets from SpiraTeam There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the Worksoft Certify automated test cases and click on its hyperlink to display the test set details page: Lower down, the list of test cases in the test set are displayed: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the Worksoft Certify test: Passed -- The Worksoft Certify automated test ran successfully and all the test steps in the test script passed and no assertions were thrown. Failed -- The Worksoft Certify automated test ran successfully, but at least one test step failed or at least one assertion failed. Blocked -- The Worksoft Certify automated test did not run successfully and reported back the aborted test status to RemoteLaunch. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you will see browser windows launch as Worksoft Certify executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by Worksoft Certify, you will see the following information: This screen indicates the status of the test run that was reported back from Worksoft Certify together with any messages or other information. The Test Name indicates the name of the test inside Worksoft Certify and there will be detailed steps displayed that match the Worksoft Certify execution steps: Each of the SpiraTeam execution status values corresponds the matching status inside Worksoft Certify as illustrated below: Worksoft Certify Status SpiraTeam Status Passed Passed Failed Failed Aborted Blocked Skipped N/A In addition, the detailed test report from Worksoft Certify is available in the large text-box below. It will contain messages such as: Congratulations... You are now able to run Worksoft Certify automated functional tests and have the results be recorded within SpiraTest, SpiraTeam, or SpiraPlan.","title":"Worksoft Certify"},{"location":"RemoteLaunch-User-Guide/Worksoft-Certify/#worksoft-certify","text":"Worksoft Certify is a test automation solution for enterprise applications including SAP, Workday, Salesforce.com, Oracle, and Web Apps. Built to test complex business processes that span multiple applications, Certify ensures that your software and business work exactly as planned. This section describes how you can use SpiraTest, SpiraTeam, or SpiraPlan (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of Worksoft Certify on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated Worksoft Certify tests. Note: This integration requires at least version 5.0 of SpiraTeam and version 10.0 of Worksoft Certify.","title":"Worksoft Certify"},{"location":"RemoteLaunch-User-Guide/Worksoft-Certify/#installing-the-worksoft-certify-engine","text":"This section assumes that you already have a working installation of SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the WorksoftCertifyEngine.zip file from the Inflectra website and locate the appropriate WorksoftCertifyEngine.dll for the version of Worksoft Certify that you are using. Copy the file \"WorksoftCertifyEngine.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For Worksoft Certify this should always be WorksoftCertify . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with Worksoft Certify listed as an available automation engine:","title":"Installing the Worksoft Certify Engine"},{"location":"RemoteLaunch-User-Guide/Worksoft-Certify/#advanced-settings","text":"You can modify the Worksoft Certify configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The Worksoft Certify engine adds its own tab to this page which allows you to configure how Worksoft Certify operates: The following fields can be specified on this screen: Trace Logging -- When selected, this will log additional trace and debugging information to the Windows Event Log. This should not be selected in a production environment. Certify User -- This should be populated with a valid username that can login to the Worksoft Certify database that you are using Certify Password -- This should be populated with a valid password for the user specified in the previous field that can login to the Worksoft Certify database that you are using Test Timeout -- This tells RemoteLaunch how long to let the Worksoft Certify tests run (in seconds) in the event one of the tests were to not finish property. Once the test report is generated, RemoteLaunch will stop execution, regardless of this setting. Report Generation Time -- This is how long (in seconds) RemoteLaunch should wait after Worksoft Certify has finished before reading the test report (for sending to SpiraTeam). It ensures that Worksoft Certify has enough time to finish writing the report.","title":"Advanced Settings"},{"location":"RemoteLaunch-User-Guide/Worksoft-Certify/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated Worksoft Certify test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" section of the main \"Overview\" tab: You need to enter the following fields: Automation Engine - Choose the Worksoft Certify Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with Worksoft Certify only supports referencing Worksoft Certify projects and not physically uploading the tests into SpiraTeam. Filename -- This needs to contain the following elements at the very least: /Process=\"xxxxx\" needs to specify the name of the Worksoft Certify process /Project=\"xxxxx\" needs to specify the name of the Worksoft Certify project You can also add other Worksoft Certify command line options - http://community.worksoft.com/Knowledge-Base/Worksoft-Products/Worksoft-Certify/certify-command-line-options.html Document Type -- This allows you to choose which document type the automated test script will be categorized under. Document Folder --This allows you to choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the Worksoft Certify Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/Worksoft-Certify/#executing-the-worksoft-certify-test-sets-from-spirateam","text":"There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the Worksoft Certify Test Sets from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/Worksoft-Certify/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the Worksoft Certify automated test cases and click on its hyperlink to display the test set details page: Lower down, the list of test cases in the test set are displayed: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/Worksoft-Certify/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the Worksoft Certify test: Passed -- The Worksoft Certify automated test ran successfully and all the test steps in the test script passed and no assertions were thrown. Failed -- The Worksoft Certify automated test ran successfully, but at least one test step failed or at least one assertion failed. Blocked -- The Worksoft Certify automated test did not run successfully and reported back the aborted test status to RemoteLaunch. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you will see browser windows launch as Worksoft Certify executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by Worksoft Certify, you will see the following information: This screen indicates the status of the test run that was reported back from Worksoft Certify together with any messages or other information. The Test Name indicates the name of the test inside Worksoft Certify and there will be detailed steps displayed that match the Worksoft Certify execution steps: Each of the SpiraTeam execution status values corresponds the matching status inside Worksoft Certify as illustrated below: Worksoft Certify Status SpiraTeam Status Passed Passed Failed Failed Aborted Blocked Skipped N/A In addition, the detailed test report from Worksoft Certify is available in the large text-box below. It will contain messages such as: Congratulations... You are now able to run Worksoft Certify automated functional tests and have the results be recorded within SpiraTest, SpiraTeam, or SpiraPlan.","title":"Executing the Test Sets"},{"location":"RemoteLaunch-User-Guide/ZAPTEST/","text":"ZAPTEST ZAPTEST is a cross-platform and cross-browser software testing solution. Using OCR and Image Based recognition, it's able to automate the testing process without any API, Framework or environment dependencies and work only with a Graphic User Interface This section describes how you can use SpiraTest, SpiraTeam, or SpiraPlan (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of ZAPTEST on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated ZAPTEST tests. Note: This integration requires at least version 5.0 of SpiraTeam and version 11.0 of ZAPTEST. Installing the ZAPTEST Engine This section assumes that you already have a working installation of SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the ZapTestEngine.zip file from the Inflectra website and locate the appropriate ZapTestEngine.dll for the version of ZAPTEST that you are using. Copy the file \"ZapTestEngine.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For ZAPTEST this should always be ZapTest . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with ZAPTEST listed as an available automation engine: Advanced Settings You can modify the ZAPTEST configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The ZAPTEST engine adds its own tab to this page which allows you to configure how ZAPTEST operates: The following fields can be specified on this screen: ZAPTEST Location -- You need to browse to the location of the Standalone ZAPTEST.EXE program (e.g. C:\\Program Files (x86)\\ZAP-fiX\\Standalone) Trace Logging -- When selected, this will log additional trace and debugging information to the Windows Event Log. This should not be selected in a production environment. Report Generation Time -- This is how long (in seconds) RemoteLaunch should wait after ZAPTEST has finished before reading the test report (for sending to SpiraTeam). It ensures that ZAPTEST has enough time to finish writing the report. Setting up the Automated Test Cases This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated ZAPTEST test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" section of the main \"Overview\" tab: You need to enter the following fields: Automation Engine - Choose the ZapTest Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with ZAPTEST only supports referencing ZAPTEST script files and not physically uploading the tests into SpiraTeam. Filename -- This needs to contain the full path to a location on the computer running ZAPTEST where the test script can be found. Document Type -- This allows you to choose which document type the automated test script will be categorized under. Document Folder --This allows you to choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the ZapTest Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution. Executing the ZAPTEST Test Sets from SpiraTeam There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam: Configuring the Automation Hosts and Test Sets Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the ZAPTEST automated test cases and click on its hyperlink to display the test set details page: Lower down, the list of test cases in the test set are displayed: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing Executing the Test Sets Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the ZAPTEST: Passed -- The ZAPTEST automated test ran completed execution and all the test steps in the test script passed and no failures or warnings were logged. Failed -- The ZAPTEST automated test ran completed execution, but at least one test step failed. Warning -- The ZAPTEST automated test ran completed execution, but at least one test step reported a warning, but no steps completely failed. Blocked -- The ZAPTEST automated test failed to execute because of some configuration error. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you will see browser windows launch as ZAPTEST executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by ZAPTEST, you will see the following information: This screen indicates the status of the test run that was reported back from ZAPTEST together with any messages or other information. The Test Name indicates the name of the test script that was executed and there will be detailed steps displayed that match the ZAPTEST execution steps: Each of the SpiraTeam execution status values corresponds the matching status inside Worksoft Certify as illustrated below: ZAPTEST Status SpiraTeam Status Passed Passed Failed Failed Warning Caution Information N/A In addition, the detailed test report from ZAPTEST is available in the large text-box below. It will contain messages such as: Congratulations... You are now able to run ZAPTEST automated functional tests and have the results be recorded within SpiraTest, SpiraTeam, or SpiraPlan.","title":"ZAPTEST"},{"location":"RemoteLaunch-User-Guide/ZAPTEST/#zaptest","text":"ZAPTEST is a cross-platform and cross-browser software testing solution. Using OCR and Image Based recognition, it's able to automate the testing process without any API, Framework or environment dependencies and work only with a Graphic User Interface This section describes how you can use SpiraTest, SpiraTeam, or SpiraPlan (hereafter SpiraTeam) together with RemoteLaunch to schedule and remotely launch instances of ZAPTEST on different computers and have the testing results be transmitted back to SpiraTeam. This allows you to extend your SpiraTeam's test management capabilities to include automated ZAPTEST tests. Note: This integration requires at least version 5.0 of SpiraTeam and version 11.0 of ZAPTEST.","title":"ZAPTEST"},{"location":"RemoteLaunch-User-Guide/ZAPTEST/#installing-the-zaptest-engine","text":"This section assumes that you already have a working installation of SpiraTeam and have installed RemoteLaunch on the various test automation hosts following the instructions in RemoteLaunch Guide . Once those prerequisites are in place, please follow these steps: Download and extract the ZapTestEngine.zip file from the Inflectra website and locate the appropriate ZapTestEngine.dll for the version of ZAPTEST that you are using. Copy the file \"ZapTestEngine.dll\" into the \"extensions\" sub-folder of the RemoteLaunch installation. Log in to SpiraTeam as a system administrator and go into SpiraTeam main Administration page and click on the \"Test Automation\" link under Integration . Click the \"Add\" button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell RemoteLaunch which engine to actually use for a given test case. For ZAPTEST this should always be ZapTest . Once you have finished, click the \"Insert & Close\" button and you will be taken back to the Test Automation list page, with ZAPTEST listed as an available automation engine:","title":"Installing the ZAPTEST Engine"},{"location":"RemoteLaunch-User-Guide/ZAPTEST/#advanced-settings","text":"You can modify the ZAPTEST configuration for each of the specific automation hosts, by right-clicking on the RemoteLaunch icon in the system tray and choosing \"Configuration\". That will bring up the RemoteLaunch configuration page. The ZAPTEST engine adds its own tab to this page which allows you to configure how ZAPTEST operates: The following fields can be specified on this screen: ZAPTEST Location -- You need to browse to the location of the Standalone ZAPTEST.EXE program (e.g. C:\\Program Files (x86)\\ZAP-fiX\\Standalone) Trace Logging -- When selected, this will log additional trace and debugging information to the Windows Event Log. This should not be selected in a production environment. Report Generation Time -- This is how long (in seconds) RemoteLaunch should wait after ZAPTEST has finished before reading the test report (for sending to SpiraTeam). It ensures that ZAPTEST has enough time to finish writing the report.","title":"Advanced Settings"},{"location":"RemoteLaunch-User-Guide/ZAPTEST/#setting-up-the-automated-test-cases","text":"This section describes the process for setting up a test case in SpiraTeam for automation and linking it to an automated ZAPTEST test script. First you need to display the list of test cases in SpiraTeam (by clicking Testing > Test Cases) and then add a new test case. Once you have added the new test case, click on it and select the \"Automation\" section of the main \"Overview\" tab: You need to enter the following fields: Automation Engine - Choose the ZapTest Automation Engine that you created in the previous section from the drop-down list. Script Type -- This should be set to Linked as the integration with ZAPTEST only supports referencing ZAPTEST script files and not physically uploading the tests into SpiraTeam. Filename -- This needs to contain the full path to a location on the computer running ZAPTEST where the test script can be found. Document Type -- This allows you to choose which document type the automated test script will be categorized under. Document Folder --This allows you to choose which document folder the automated test script will be stored in. Version -- The version of the test script (1.0 is used if no value specified) Test Script -- This is not used with the ZapTest Engine since it only supports linked test scripts. Once you are happy with the values, click [Save] to update the test case. Now you are ready to schedule the automated test case for execution.","title":"Setting up the Automated Test Cases"},{"location":"RemoteLaunch-User-Guide/ZAPTEST/#executing-the-zaptest-test-sets-from-spirateam","text":"There are two ways to execute automated test cases in SpiraTeam: Schedule the test cases to be executed on a specific computer (local or remote) at a date/time in the future Execute the test cases right now on the local computer. We shall outline both of these two scenarios in this section. However first we need to setup the appropriate automation hosts and test sets in SpiraTeam:","title":"Executing the ZAPTEST Test Sets from SpiraTeam"},{"location":"RemoteLaunch-User-Guide/ZAPTEST/#configuring-the-automation-hosts-and-test-sets","text":"Go to Testing > Automation Hosts in SpiraTeam to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything meaningful, but the Token field must be set to the same token that is specified in the RemoteLaunch application on that specific machine. Once you have at least one Automation Host configured, go to Testing > Test Sets to create the test sets that will contain the automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Create a new Test Set to hold the ZAPTEST automated test cases and click on its hyperlink to display the test set details page: Lower down, the list of test cases in the test set are displayed: You need to add at least one automated test case to the test set and then configure the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. (Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.) Status -- This needs to be set to \"Not Started\" for RemoteLaunch to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to \"Not Started\" Type -- This needs to be set to \"Automated\" for automated testing","title":"Configuring the Automation Hosts and Test Sets"},{"location":"RemoteLaunch-User-Guide/ZAPTEST/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the Remote Launch instances will periodically poll SpiraTeam for new test sets. Once they retrieve the new test set, they will add it to their list of test sets to be execute. Once execution begins they will change the status of the test set to \"In Progress\", and once test execution is done, the status of the test set will change to either \"Completed\" -- the automation engine could be launched and the test has completed -- or \"Blocked\" -- RemoteLaunch was not able to start the automation engine. If you want to immediately execute the test case on your local computer, instead of setting the \"Automation Host\", \"Status\" and \"Planned Date\" fields, you can instead click the [Execute] icon on the test set itself. This will cause RemoteLaunch on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to \"Completed\" and the individual test cases in the set will display a status based on the results of the ZAPTEST: Passed -- The ZAPTEST automated test ran completed execution and all the test steps in the test script passed and no failures or warnings were logged. Failed -- The ZAPTEST automated test ran completed execution, but at least one test step failed. Warning -- The ZAPTEST automated test ran completed execution, but at least one test step reported a warning, but no steps completely failed. Blocked -- The ZAPTEST automated test failed to execute because of some configuration error. If you receive the \"Blocked\" status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RemoteLaunch and look in the event log for error messages. Note: While the tests are executing you will see browser windows launch as ZAPTEST executes the appropriate tests. Once the tests have completed, you can log back into SpiraTeam and see the execution status of your test cases. If you click on a Test Run that was generated by ZAPTEST, you will see the following information: This screen indicates the status of the test run that was reported back from ZAPTEST together with any messages or other information. The Test Name indicates the name of the test script that was executed and there will be detailed steps displayed that match the ZAPTEST execution steps: Each of the SpiraTeam execution status values corresponds the matching status inside Worksoft Certify as illustrated below: ZAPTEST Status SpiraTeam Status Passed Passed Failed Failed Warning Caution Information N/A In addition, the detailed test report from ZAPTEST is available in the large text-box below. It will contain messages such as: Congratulations... You are now able to run ZAPTEST automated functional tests and have the results be recorded within SpiraTest, SpiraTeam, or SpiraPlan.","title":"Executing the Test Sets"},{"location":"Reporting/Custom-Graph-Tutorial/","text":"Custom Graphs Tutorial and Introduction Introduction One of the maxims I always tell developers is that regardless of what you build, customers will never be satisfied with the reports you offer or the integration that you provide. In fact, the two most underestimated tasks in software development are data feeds and reporting. So one of the nice features in our Spira platform is the ability to do custom graphing, so that you are not limited to just the graphs that ship with the system. Creating Custom Graphs To create a custom report, go to: Administration > System Administration > Reporting > Edit Graphs: When you click on the Edit Graphs link, you will be taken to the custom graph configuration page where you can add / modify custom graphs. This page lets you create custom graphs and charts in the system that your users can run in the various products they have access to. Note that the graph definitions themselves are global to the system and therefore available in all products. You can click the Edit button to modify an existing graph, or click Add New Custom Graph to create an new one. In either case, you will see the custom graph editing screen. The graph list page has the following additional operations: Clone : this will make a copy of the graph with '- Copy' appended to the name Delete : this will permanently delete the selected custom graph. On the graph editing page, you can enter the following fields: Name : This is the short name of the graph that will be displayed to users when they choose to display a custom graph. Description : This is the longer description of the graph, and should be used to explain what the data in the graph shows, what the purpose of the graph is and how the data should be interpreted. This is what the user will see when they click on the help link on the graph. Active : If you set this to \"No\", the graph will not be accessible by end users Position : use this to specify the relative position of the graph in the list of custom graphs. Query : this is where you enter the actual query used to generate the graph data. We shall discuss this below. Writing the ESQL Query Used in the Graph The Query box is where you can choose the Reportable Entity from the dropdown list and then use that base query to create your own custom query. We recommend that you first choose the appropriate reportable entity from the dropdown list. In the example below, we have selected the \"Test Runs\" reportable entity: This will automatically populate the following query in the Query editor: 1 select value R from SpiraTestEntities . R_TestRuns as R where R . PROJECT_ID = ${ ProjectId } This query tells Spira to select all of the rows in the R_TestRuns collection that are in the current product and include all of the columns in the final report. You cannot graph non-numeric columns, so usually we'd recommend clicking Display Data Grid to see all of the columns that you can use in the graph: This will help you decide which columns are important for your graph. You can then adjust the query to only include those columns: 1 2 3 4 select R . EXECUTION_STATUS_NAME , COUNT ( R . TEST_RUN_ID ) as COUNT from SpiraTestEntities . R_TestRuns as R where R . PROJECT_ID = ${ ProjectId } group by R . EXECUTION_STATUS_NAME In this modified query, we have replaced the keyword value with the specific column names. We have also added an aggregation function called COUNT to count the number of test runs and group by the execution status name column. Spira uses a modified SQL language called Entity SQL created by Microsoft that we'll be discussing in more detail in later articles in this series. You may have noticed that we had a special token in the query {ProjectId}**, this token will be evaluated during the generation of the graph and ensures that only items in the current product are included. If you want to include all the items in a specific Program, you should instead use the token ** {ProjectId}**, this token will be evaluated during the generation of the graph and ensures that only items in the current product are included. If you want to include all the items in a specific Program, you should instead use the token ** . If you don't use either token, the graph will include all the items in the entire system, across all products and programs. There are some restrictions about the select clause of the query: You need to make the first column in the query the category for the x-axis The other columns need to be purely numeric, and will be used to populate the data series that will be mapped to the x-axis categories. You can test out your modified query by clicking the Display Data Grid button again. For our example test runs query above the system will now display: Then once you have verified the data makes sense, click on the three different Preview Graph buttons to see how the data will look as a donut, bar, or line graph. Note For donut graphs, only one data range is supported, for line/bar charts, you can have multiple ranges a) Donut Chart b) Bar Graph c) Line Chart Once you are happy with your graph design, make sure the Active flag is set to Yes and then click Save to publish the graph for your end users. Warning If you create a graph that doesn't have either ${ProjectId} or ${ProjectGroupId} in the WHERE clause you could end up displaying data to a user that shouldn't have permission to see that data. Viewing Custom Graphs Once published, the custom graphs can be displayed in the main Reports dashboard by your end users: Once you have added an instance of the Custom Graphs to your dashboard, you can choose the specific graph, and the visualization type (donut, bar, and line currently): You can display the data being used to generate the graph by clicking on the data-grid button in the bottom-left: As with all of the graphs on the reporting dashboard, you can export the data-grid as a CSV / Excel sheet, and export the actual graph as an image (PNG, JPEG, and BMP formats supported). Understanding Entity SQL (ESQL) This section explains how you can use Entity SQL to write queries to pull back the data you need for your graphs. The language that we use for creating graphs (and reports) in Spira is called \" Entity SQL \" (abbreviated to ESQL ) and is based on the standard database Structured Query Language (SQL) but modified by Microsoft to work against a conceptual object oriented data structure rather than a traditional relational database. According to the Microsoft Entity SQL website : Entity SQL is a SQL-like language that enables you to query conceptual models in the Entity Framework. Conceptual models represent data as entities and relationships, and Entity SQL allows you to query those entities and relationships in a format that is familiar to those who have used SQL. Entity SQL Syntax Basics Similar to database SQL, ESQL supports query that consists of the following parts: 1 2 3 4 5 6 select properties or object from entity collection as alias join other entity collections on relationship where conditions group by properties order by properties When using ESQL with Spira's reporting system, the entity collections you can use are the ones generated from the 'Add New Query' dropdown discussed in the previous article. For example, you have: SpiraTestEntities.R_Requirements SpiraTestEntities.R_TestCases SpiraTestEntities.R_RequirementTestCases etc... The R_xxx prefix is used to distinguish the entities available for reporting from the core entities used by Spira internally for its data access. You will only ever be able query the R_ prefixed entities from within the Spira reporting system. A simple query used to retrieve all of the requirements in project 1 sorted by hierarchical order then ID would be: 1 2 3 4 select value RQ from SpiraTestEntities . R_Requirements as RQ where RQ . PROJECT_ID = 1 order by RQ . INDENT_LEVEL , RQ . REQUIREMENT_ID A more complex query that selects specific requirement properties (vs. the entire object), joins to other table (e.g. to get test case object properties as well) would be: 1 2 3 4 5 6 select RQ . REQUIREMENT_ID , RQ . NAME as REQUIREMENT_NAME , TC . TEST_CASE_ID , TC . NAME as TEST_CASE_NAME from SpiraTestEntities . R_Requirements as RQ join SpiraTestEntities . R_RequirementTestCases as RT on RQ . REQUIREMENT_ID = RT . REQUIREMENT_ID join SpiraTestEntities . R_TestCases as TC on RT . TEST_CASE_ID = TC . TEST_CASE_ID where RQ . PROJECT_ID = 1 order by RQ . NAME , TC . NAME Finally, you can add on an aggregation function and group by to group by one property and aggregate the other properties against this. For example to get a count of the test cases associated with each requirement, instead of the test case names would be: 1 2 3 4 5 6 7 select RQ . REQUIREMENT_ID , RQ . NAME as REQUIREMENT_NAME , COUNT ( TC . TEST_CASE_ID ) as TEST_CASE_COUNT from SpiraTestEntities . R_Requirements as RQ join SpiraTestEntities . R_RequirementTestCases as RT on RQ . REQUIREMENT_ID = RT . REQUIREMENT_ID join SpiraTestEntities . R_TestCases as TC on RT . TEST_CASE_ID = TC . TEST_CASE_ID where RQ . PROJECT_ID = 1 group by RQ . REQUIREMENT_ID , RQ . NAME order by TEST_CASE_COUNT desc , RQ . REQUIREMENT_ID In this last case, we're sorting the list of requirements by the count of associated test cases (in descending order). So now that we have seen some example queries, let's examine each of the parts of the query in turn: The SELECT Clause The select clause of an ESQL query can consist of either: a single object reference, prefixed by value . This is semantically equivalent to SELECT * in database SQL and means evaluate all of the properties of the object. a comma separated list of discrete object properties. They need to have their object alias prefixes (e.g. RQ in the examples above) So for example we could have: 1 select value RQ that selects all of the properties in the requirements table (i.e. all the columns). Alternatively you could select specific properties (columns) from one or more object: 1 select RQ . REQUIREMENT_ID , RQ . NAME as REQUIREMENT_NAME , TC . TEST_CASE_ID , TC . NAME as TEST_CASE_NAME In this case, we omit the value prefix since it's not evaluating all of the properties of an object. Since two of the properties have the same name (\"NAME\") we are using the as operator to give the property returned a unique name. This is important. If you try and return back two properties with the same name, Spira will give the following error message: You get this error message because the Entity framework will try and create a name like (NAME #1) that is not allowed by the Spira reporting system. So make sure you used actual named aliases when the same property name is used more than once. Finally you can use the following aggregations in the SELECT clause to aggregate data from properties that are not being grouped (see later for information on the group by clause): SUM COUNT MAX MIN AVG (average) A full list of Entity SQL aggregate functions can be found on the Microsoft ESQL reference website. For example, we can count how many times one property appears relative to another column: 1 select RQ . REQUIREMENT_ID , RQ . NAME as REQUIREMENT_NAME , COUNT ( TC . TEST_CASE_ID ) as TEST_CASE_COUNT Note that in this case we recommend you always specify an alias for the result of the aggregation function using the as operator. If you forget, you'll get the same error message as before: The FROM Clause The from clause in ESQL is relatively simple, it contains the primary object collection being queried and an alias that will be used to reference its properties in the other parts of the query: 1 from SpiraTestEntities . R_Requirements as RQ The JOIN Clauses If you are only going to need to work with the properties from a single object collection then you don't need to have any join clauses in your query. However if you are going to need data from multiple object collections, then you will need to use the join clause to add in those other collections. A simple join clause looks like: 1 join SpiraTestEntities . R_RequirementTestCases as RT on RQ . REQUIREMENT_ID = RT . REQUIREMENT_ID where you add the name of the entity collection being joined, the alias to refer to it with, and the comparison operator (in this case an equality) used to make the join. Entity SQL supports the following types of join: inner join or join - Only rows that exist in both sides of the comparison are returned left outer join or left join - Only rows that exist in the left hand side of the comparison are returned, plus any matching rows from the other side, or NULL if missing. right outer join or right join - Only rows that exist in the right hand side of the comparison are returned, plus any matching rows from the other side, or NULL if missing. full outer join or full join - All rows from both sides of the comparison are returned, with NULL values being used for non-matching rows on the alternate side. cross join - This query expression produces the Cartesian product of the two collections from the left and right hand sides. The WHERE Clauses The where clause in ESQL lets you filter the results by one or more condition. In addition to the standard ESQL syntax, you can use the special Spira tokens to filter by dynamic data in the system: ${ProjectGroupId} - the current program (formerly known as project group) ${ProjectId} - the current product (formerly known as project) ${ReleaseId} the current release, phase, sprint, or iteration The where clause consists of a set of conditions that are joined by a boolean operator: and (used when condition A and condition B are true) or (used when condition A or condition B are true) Generally and operators have higher precedence than or operators, so you will need to use parenthesis when you want to have or operators that are higher precedence than an and . For example: 1 where ( RQ . PROJECT_ID = 1 or RQ . PROJECT_ID = 2 ) and RQ . IS_DELETED = 0 means that you will retrieve any un-deleted requirement that is in project 1 or project 2, whereas this would mean something completely different: 1 where RQ . PROJECT_ID = 1 or RQ . PROJECT_ID = 2 and RQ . IS_DELETED = 0 this would retrieve all (including deleted) requirements in project 1, and any un-deleted ones from project 2. The type of operator you can use in the various conditions include: Comparisons such as: = Equals < Less than Greater than <= Less that or equals = Greater than or equals <> or != not equal to ! not Mathematical operator such as: add subtract multiple / divide % modulus (remainder) For example you might have a compound conditional clause such as: 1 where RQ . PROJECT_ID >= 1 and RQ . PROJECT_ID <= 4 and RQ . IS_DELETED = 0 and ( RQ . TASK_ACTUAL_EFFORT + RQ . TASK_REMAINING_EFFORT ) > 0 Aggregations and GROUP BY In the discussion of the select clause we mentioned that you can use aggregation functions such as count, sum, min, max , etc. If you use these in the select clause, then any object properties that are not being aggregated need to be included in the group by clause: 1 group by RQ . REQUIREMENT_ID , RQ . NAME If you don't have any aggregation functions, you can still use a group by clause to simply group similar rows, but generally speaking you omit the group by clause if there are no aggregation functions in the select list. Sorting and ORDER BY Finally, you typically want to sort the data by one or more of the object properties, this is done by having an order by clause at the end of the query: 1 order by TEST_CASE_COUNT desc , RQ . REQUIREMENT_ID asc The syntax of the order by clause is: order by property name (e.g. RQ.REQUIREMENT_ID ) or property alias (e.g. TEST_CASE_COUNT ). If an alias you don't use the object prefix (e.g. RQ ) asc or desc for ascending or descending order (if omitted, it will default to ascending) If you sort by a property (e.g. requirement name) that could be held by multiple rows, it is recommended to always add a final sort clause by a guaranteed unique ID such as the primary key REQUIREMENT_ID since that will ensure the results are consistent each time. This is known as 'stable sorting' Differences Between ESQL and Traditional Database SQL Now that we have covered the basics of writing an Entity SQL (ESQL) query, we'll discuss some of the differences and limitations between ESQL and traditional database SQL. No Support for * Database SQL supports the unqualified * syntax as an alias for the entire row, and the qualified * syntax (t.*) as a shortcut for the fields of that table. In addition, database SQL allows for a special count(*) aggregate, which includes nulls. Entity SQL does not support the * construct. Database SQL queries of the form: 1 select * from T and 1 select T1 . * from T1 , T2 ... can be expressed in Entity SQL as 1 select value t from T as t and 1 select value t1 from T1 as t1 , T2 as t2 ... respectively. Additionally, these constructs handle inheritance (value substitutability), while the select * variants are restricted to top-level properties of the declared type. Entity SQL does not support the count(*) aggregate. Use count(0) instead. Changes to Group By Entity SQL supports aliasing of group by keys. Expressions in the select clause and having clause must refer to the group by keys via these aliases. For example, this Entity SQL syntax: ESQL 1 2 3 SELECT k1 , count ( t . a ), sum ( t . a ) FROM T AS t GROUP BY t . b + t . c AS k1 ...is equivalent to the following database SQL: SQL 1 2 3 SELECT b + c , count ( * ), sum ( a ) FROM T GROUP BY b + c Collection-Based Aggregates Entity SQL supports two kinds of aggregates. Collection-based aggregates operate on collections and produce the aggregated result. These can appear anywhere in the query, and do not require a group by clause. For example: 1 SELECT t . a AS a , count ( { 1 , 2 , 3 } ) AS b FROM T AS t Entity SQL also supports SQL-style aggregates. For example: 1 SELECT a , sum ( t . b ) FROM T AS t GROUP BY t . a AS a ORDER BY Clause Usage Database SQL allows ORDER BY clauses to be specified only in the topmost SELECT .. FROM .. WHERE block. In Entity SQL you can use a nested ORDER BY expression and it can be placed anywhere in the query, but ordering in a nested query is not preserved. 1 2 3 4 -- The following query will order the results by the last name SELECT C1 . FirstName , C1 . LastName FROM AdventureWorks . Contact AS C1 ORDER BY C1 . LastName 1 2 3 4 5 -- In the following query ordering of the nested query is ignored. SELECT C2 . FirstName , C2 . LastName FROM ( SELECT C1 . FirstName , C1 . LastName FROM AdventureWorks . Contact as C1 ORDER BY C1 . LastName ) as C2 Case/Accent Sensitivity In database SQL, identifier comparison is based on the settings of the current database and the database platform being used (SQL Server, Oracle, MySQL, etc.). In Entity SQL, identifiers are always case insensitive and accent sensitive (that is, Entity SQL distinguishes between accented and unaccented characters; for example, 'a' is not equal to '\u1ea5'). Entity SQL treats versions of letters that appear the same but are from different code pages as different characters. Group By Clause Differences Entity SQL also imposes additional restrictions on queries involving group by clauses. Expressions in the select clause and having clause of such queries may only refer to the group by keys via their aliases. The following construct is valid in most database SQL variants but are not in Entity SQL: SQL 1 SELECT t . x + t . y FROM T AS t group BY t . x + t . y ESQL To do this in Entity SQL: 1 SELECT k FROM T AS t GROUP BY ( t . x + t . y ) AS k Referencing Columns (Properties) of Tables (Collections) All column references in Entity SQL must be qualified with the table alias. The following construct (assuming that a is a valid column of table T ) is valid in database SQL but not in Entity SQL. SQL: 1 SELECT a FROM T The Entity SQL form is 1 SELECT t . a AS A FROM T AS t The table aliases are optional in the from clause. The name of the table is used as the implicit alias. Entity SQL allows the following form as well: 1 SELECT Tab . a FROM Tab Navigation Through Objects Database SQL uses the \".\" notation for referencing columns of (a row of) a table. Entity SQL extends this notation (borrowed from programming languages) to support navigation through properties of an object. For example, if p is an expression of type Person, the following is the Entity SQL syntax for referencing the city of the address of this person. 1 p . Address . City Collections of Literals In database SQL, if you want to refer to a collection of possible values, you would use an IN clause together with a set of values contained within parenthesis: SQL 1 SELECT t . a FROM T as t WHERE t . b IN ( 1 , 2 , 3 ) In Entity SQL, the syntax for a collection of values is based on braces / curly brackets instead: ESQL 1 select t . a from T as t where t . b in { 1 , 2 , 3 } Differences in Literals and Types There are some differences between how literal values and types are represented in Entity SQL vs. Database SQL: In database SQL, you typically represent boolean values as 1 or 0 whereas in Entity SQL you use true ** and false Database SQL uses database schema types such as VARCHAR, NVARCHAR and INT , whereas Entity SQL uses Microsoft .NET types such as String and Int32 Integer literals can be of type Int32 (123), UInt32 (123U), Int64 (123L), and UInt64 (123UL) DateTime literals, both date and time parts are mandatory. There are no default values. For example, a date literal would be: 1 DATETIME '2006-12-25 01:01:00.000' There are Unicode and non-Unicode character string literals. Unicode strings are prepended with N. For example, N'hello' . Typed nulls can be used anywhere. Type inference is not required for typed nulls because the type is known. For example, you can construct a null of type Int16 with the following Entity SQL construct: 1 ( cast ( null as Int16 )) Database SQL Functionality Not Available in Entity SQL The following database SQL functionality is not available in Entity SQL. DML Commands - Entity SQL currently provides no support for DML statements (insert, update, delete). DDL Commands - Entity SQL provides no support for DDL in the current version. Imperative Programming - Entity SQL provides no support for imperative programming, unlike Transact-SQL. Use a programming language instead. Grouping Functions - Entity SQL does not yet provide support for grouping functions (for example, CUBE, ROLLUP, and GROUPING_SET). Analytic Functions - Entity SQL does not (yet) provide support for analytic functions. Built-in Functions, Operators - Entity SQL supports a subset of most database SQL's built in functions and operators. Advanced Entity SQL Queries Now that we have discussed the differences between traditional database SQL and Entity SQL, we will cover some more advanced queries and functions that customers typically will want to use when creating custom graphs with Spira. At the top of this tutorial, we outlined a sample ESQL query to get the count of test runs by execution status: 1 2 3 4 select R . EXECUTION_STATUS_NAME , COUNT ( R . TEST_RUN_ID ) as COUNT from SpiraTestEntities . R_TestRuns as R where R . PROJECT_ID = ${ ProjectId } group by R . EXECUTION_STATUS_NAME As we discussed, when using ESQL queries to display custom graphs, there are some restrictions about the select clause of the query: You need to make the first column in the query the category for the x-axis The other columns need to be purely numeric, and will be used to populate the data series that will be mapped to the x-axis categories. We will now be looking at some specific examples of graphs that users have asked us for help with, that we have some suggestions for... 1) Requirements Added/Removed Over Time For example, lets consider that you want to display a graph of requirements added and removed over time. To get a count of this we can query the SpiraTestEntities.R_HistoryChangeSets view to get a count of the changes, filter by additions and deletions, then use a combination of aggregation and the CAST operator to count the items added/removed: 1 2 3 4 5 6 7 8 9 10 11 select R . CHANGE_DATE as Timestamp , count ( CASE WHEN R . CHANGETYPE_NAME = \"Added\" THEN 1 WHEN R . CHANGETYPE_NAME = \"Deleted\" THEN - 1 END ) AS Sum from SpiraTestEntities . R_HistoryChangeSets as R where R . ARTIFACT_TYPE_NAME = \"Requirement\" group by R . CHANGE_DATE This will display the following data: Timestamp Sum 2019-08-17T02:06:18 0 2019-08-23T02:51:18 0 2020-01-14T11:50:18 5 2020-01-14T11:50:18 7 2020-01-14T11:50:18 5 2020-01-14T11:50:18 9 2020-01-14T11:50:18 7 2020-01-14T11:50:18 6 2020-01-14T11:50:18 5 2020-01-14T11:50:18 7 Which when displayed as a graph would look like: However suppose you want to display this graph by day, not by unique timestamp (a reasonable request), you would use the TruncateTime canonical EntitySQL function and combine that with a different way of writing the GROUP BY clause: 1 2 3 4 5 6 7 8 9 10 11 select DatePart , count ( CASE WHEN R . CHANGETYPE_NAME = \"Added\" THEN 1 WHEN R . CHANGETYPE_NAME = \"Deleted\" THEN - 1 END ) AS Sum from SpiraTestEntities . R_HistoryChangeSets as R where R . ARTIFACT_TYPE_NAME = \"Requirement\" group by TruncateTime ( R . CHANGE_DATE ) as DatePart This would now give the following results instead: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 < table class = \"table table-striped\" > < tbody > < tr class = \"Header\" > < th > DatePart </ th > < th > Sum </ th > </ tr > < tr > < td > 2019-08-17T00:00:00 </ td > < td > 0 </ td > </ tr > < tr > < td > 2019-08-23T00:00:00 </ td > < td > 0 </ td > </ tr > < tr > < td > 2020-01-14T00:00:00 </ td > < td > 248 </ td > </ tr > </ tbody > </ table > which could be graphed as follows: 2) Aggregating Data Over Time Periods A common need is the ability to aggregate data over multiple time periods. For example, in the query above, we had the list of requirements aggregated by day: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 < table class = \"table table-striped\" > < tbody > < tr class = \"Header\" > < th > DatePart </ th > < th > Sum </ th > </ tr > < tr > < td > 2019-08-17T00:00:00 </ td > < td > 0 </ td > </ tr > < tr > < td > 2019-08-23T00:00:00 </ td > < td > 0 </ td > </ tr > < tr > < td > 2020-01-14T00:00:00 </ td > < td > 248 </ td > </ tr > </ tbody > </ table > Suppose we wanted to group the data over a 20 day time period. We would need to modify the query as follows: 1 2 3 4 5 6 7 8 9 10 11 select DatePart , count ( CASE WHEN R . CHANGETYPE_NAME = \"Added\" THEN 1 WHEN R . CHANGETYPE_NAME = \"Deleted\" THEN - 1 END ) AS Sum from SpiraTestEntities . R_HistoryChangeSets as R where R . ARTIFACT_TYPE_NAME = \"Requirement\" group by AddDays ( CreateDateTime ( Year ( R . CHANGE_DATE ), 1 , 1 , 0 , 0 , 0 ), ( DayOfYear ( R . CHANGE_DATE ) / 20 ) * 20 ) as DatePart Now when you execute the query, the system is using the following functions to combines the dates down into 20 day ranges: DayOfYear to get the absolute day number this year (1-366) Integer division and multiplication by 20 days to get the day converted to the first day in each 20 day range Using AddDays and CreateDateTime to compose the full date time again, adding the total number of days back to the year base. When executed, this will display: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 < table class = \"table table-striped\" > < tbody > < tr class = \"Header\" > < th > DatePart </ th > < th > Sum </ th > </ tr > < tr > < td > 2019-08-09T00:00:00 </ td > < td > 0 </ td > </ tr > < tr > < td > 2020-01-01T00:00:00 </ td > < td > 248 </ td > </ tr > </ tbody > </ table > or in graphical form: Further Reading Microsoft Entity SQL Reference Documentation Custom Reports Section of Inflectra Knowledge Base","title":"Custom Graph Tutorial"},{"location":"Reporting/Custom-Graph-Tutorial/#custom-graphs-tutorial-and-introduction","text":"","title":"Custom Graphs Tutorial and Introduction"},{"location":"Reporting/Custom-Graph-Tutorial/#introduction","text":"One of the maxims I always tell developers is that regardless of what you build, customers will never be satisfied with the reports you offer or the integration that you provide. In fact, the two most underestimated tasks in software development are data feeds and reporting. So one of the nice features in our Spira platform is the ability to do custom graphing, so that you are not limited to just the graphs that ship with the system.","title":"Introduction"},{"location":"Reporting/Custom-Graph-Tutorial/#creating-custom-graphs","text":"To create a custom report, go to: Administration > System Administration > Reporting > Edit Graphs: When you click on the Edit Graphs link, you will be taken to the custom graph configuration page where you can add / modify custom graphs. This page lets you create custom graphs and charts in the system that your users can run in the various products they have access to. Note that the graph definitions themselves are global to the system and therefore available in all products. You can click the Edit button to modify an existing graph, or click Add New Custom Graph to create an new one. In either case, you will see the custom graph editing screen. The graph list page has the following additional operations: Clone : this will make a copy of the graph with '- Copy' appended to the name Delete : this will permanently delete the selected custom graph. On the graph editing page, you can enter the following fields: Name : This is the short name of the graph that will be displayed to users when they choose to display a custom graph. Description : This is the longer description of the graph, and should be used to explain what the data in the graph shows, what the purpose of the graph is and how the data should be interpreted. This is what the user will see when they click on the help link on the graph. Active : If you set this to \"No\", the graph will not be accessible by end users Position : use this to specify the relative position of the graph in the list of custom graphs. Query : this is where you enter the actual query used to generate the graph data. We shall discuss this below.","title":"Creating Custom Graphs"},{"location":"Reporting/Custom-Graph-Tutorial/#writing-the-esql-query-used-in-the-graph","text":"The Query box is where you can choose the Reportable Entity from the dropdown list and then use that base query to create your own custom query. We recommend that you first choose the appropriate reportable entity from the dropdown list. In the example below, we have selected the \"Test Runs\" reportable entity: This will automatically populate the following query in the Query editor: 1 select value R from SpiraTestEntities . R_TestRuns as R where R . PROJECT_ID = ${ ProjectId } This query tells Spira to select all of the rows in the R_TestRuns collection that are in the current product and include all of the columns in the final report. You cannot graph non-numeric columns, so usually we'd recommend clicking Display Data Grid to see all of the columns that you can use in the graph: This will help you decide which columns are important for your graph. You can then adjust the query to only include those columns: 1 2 3 4 select R . EXECUTION_STATUS_NAME , COUNT ( R . TEST_RUN_ID ) as COUNT from SpiraTestEntities . R_TestRuns as R where R . PROJECT_ID = ${ ProjectId } group by R . EXECUTION_STATUS_NAME In this modified query, we have replaced the keyword value with the specific column names. We have also added an aggregation function called COUNT to count the number of test runs and group by the execution status name column. Spira uses a modified SQL language called Entity SQL created by Microsoft that we'll be discussing in more detail in later articles in this series. You may have noticed that we had a special token in the query {ProjectId}**, this token will be evaluated during the generation of the graph and ensures that only items in the current product are included. If you want to include all the items in a specific Program, you should instead use the token ** {ProjectId}**, this token will be evaluated during the generation of the graph and ensures that only items in the current product are included. If you want to include all the items in a specific Program, you should instead use the token ** . If you don't use either token, the graph will include all the items in the entire system, across all products and programs. There are some restrictions about the select clause of the query: You need to make the first column in the query the category for the x-axis The other columns need to be purely numeric, and will be used to populate the data series that will be mapped to the x-axis categories. You can test out your modified query by clicking the Display Data Grid button again. For our example test runs query above the system will now display: Then once you have verified the data makes sense, click on the three different Preview Graph buttons to see how the data will look as a donut, bar, or line graph. Note For donut graphs, only one data range is supported, for line/bar charts, you can have multiple ranges","title":"Writing the ESQL Query Used in the Graph"},{"location":"Reporting/Custom-Graph-Tutorial/#a-donut-chart","text":"","title":"a) Donut Chart"},{"location":"Reporting/Custom-Graph-Tutorial/#b-bar-graph","text":"","title":"b) Bar Graph"},{"location":"Reporting/Custom-Graph-Tutorial/#c-line-chart","text":"Once you are happy with your graph design, make sure the Active flag is set to Yes and then click Save to publish the graph for your end users. Warning If you create a graph that doesn't have either ${ProjectId} or ${ProjectGroupId} in the WHERE clause you could end up displaying data to a user that shouldn't have permission to see that data.","title":"c) Line Chart"},{"location":"Reporting/Custom-Graph-Tutorial/#viewing-custom-graphs","text":"Once published, the custom graphs can be displayed in the main Reports dashboard by your end users: Once you have added an instance of the Custom Graphs to your dashboard, you can choose the specific graph, and the visualization type (donut, bar, and line currently): You can display the data being used to generate the graph by clicking on the data-grid button in the bottom-left: As with all of the graphs on the reporting dashboard, you can export the data-grid as a CSV / Excel sheet, and export the actual graph as an image (PNG, JPEG, and BMP formats supported).","title":"Viewing Custom Graphs"},{"location":"Reporting/Custom-Graph-Tutorial/#understanding-entity-sql-esql","text":"This section explains how you can use Entity SQL to write queries to pull back the data you need for your graphs. The language that we use for creating graphs (and reports) in Spira is called \" Entity SQL \" (abbreviated to ESQL ) and is based on the standard database Structured Query Language (SQL) but modified by Microsoft to work against a conceptual object oriented data structure rather than a traditional relational database. According to the Microsoft Entity SQL website : Entity SQL is a SQL-like language that enables you to query conceptual models in the Entity Framework. Conceptual models represent data as entities and relationships, and Entity SQL allows you to query those entities and relationships in a format that is familiar to those who have used SQL.","title":"Understanding Entity SQL (ESQL)"},{"location":"Reporting/Custom-Graph-Tutorial/#entity-sql-syntax-basics","text":"Similar to database SQL, ESQL supports query that consists of the following parts: 1 2 3 4 5 6 select properties or object from entity collection as alias join other entity collections on relationship where conditions group by properties order by properties When using ESQL with Spira's reporting system, the entity collections you can use are the ones generated from the 'Add New Query' dropdown discussed in the previous article. For example, you have: SpiraTestEntities.R_Requirements SpiraTestEntities.R_TestCases SpiraTestEntities.R_RequirementTestCases etc... The R_xxx prefix is used to distinguish the entities available for reporting from the core entities used by Spira internally for its data access. You will only ever be able query the R_ prefixed entities from within the Spira reporting system. A simple query used to retrieve all of the requirements in project 1 sorted by hierarchical order then ID would be: 1 2 3 4 select value RQ from SpiraTestEntities . R_Requirements as RQ where RQ . PROJECT_ID = 1 order by RQ . INDENT_LEVEL , RQ . REQUIREMENT_ID A more complex query that selects specific requirement properties (vs. the entire object), joins to other table (e.g. to get test case object properties as well) would be: 1 2 3 4 5 6 select RQ . REQUIREMENT_ID , RQ . NAME as REQUIREMENT_NAME , TC . TEST_CASE_ID , TC . NAME as TEST_CASE_NAME from SpiraTestEntities . R_Requirements as RQ join SpiraTestEntities . R_RequirementTestCases as RT on RQ . REQUIREMENT_ID = RT . REQUIREMENT_ID join SpiraTestEntities . R_TestCases as TC on RT . TEST_CASE_ID = TC . TEST_CASE_ID where RQ . PROJECT_ID = 1 order by RQ . NAME , TC . NAME Finally, you can add on an aggregation function and group by to group by one property and aggregate the other properties against this. For example to get a count of the test cases associated with each requirement, instead of the test case names would be: 1 2 3 4 5 6 7 select RQ . REQUIREMENT_ID , RQ . NAME as REQUIREMENT_NAME , COUNT ( TC . TEST_CASE_ID ) as TEST_CASE_COUNT from SpiraTestEntities . R_Requirements as RQ join SpiraTestEntities . R_RequirementTestCases as RT on RQ . REQUIREMENT_ID = RT . REQUIREMENT_ID join SpiraTestEntities . R_TestCases as TC on RT . TEST_CASE_ID = TC . TEST_CASE_ID where RQ . PROJECT_ID = 1 group by RQ . REQUIREMENT_ID , RQ . NAME order by TEST_CASE_COUNT desc , RQ . REQUIREMENT_ID In this last case, we're sorting the list of requirements by the count of associated test cases (in descending order). So now that we have seen some example queries, let's examine each of the parts of the query in turn:","title":"Entity SQL Syntax Basics"},{"location":"Reporting/Custom-Graph-Tutorial/#the-select-clause","text":"The select clause of an ESQL query can consist of either: a single object reference, prefixed by value . This is semantically equivalent to SELECT * in database SQL and means evaluate all of the properties of the object. a comma separated list of discrete object properties. They need to have their object alias prefixes (e.g. RQ in the examples above) So for example we could have: 1 select value RQ that selects all of the properties in the requirements table (i.e. all the columns). Alternatively you could select specific properties (columns) from one or more object: 1 select RQ . REQUIREMENT_ID , RQ . NAME as REQUIREMENT_NAME , TC . TEST_CASE_ID , TC . NAME as TEST_CASE_NAME In this case, we omit the value prefix since it's not evaluating all of the properties of an object. Since two of the properties have the same name (\"NAME\") we are using the as operator to give the property returned a unique name. This is important. If you try and return back two properties with the same name, Spira will give the following error message: You get this error message because the Entity framework will try and create a name like (NAME #1) that is not allowed by the Spira reporting system. So make sure you used actual named aliases when the same property name is used more than once. Finally you can use the following aggregations in the SELECT clause to aggregate data from properties that are not being grouped (see later for information on the group by clause): SUM COUNT MAX MIN AVG (average) A full list of Entity SQL aggregate functions can be found on the Microsoft ESQL reference website. For example, we can count how many times one property appears relative to another column: 1 select RQ . REQUIREMENT_ID , RQ . NAME as REQUIREMENT_NAME , COUNT ( TC . TEST_CASE_ID ) as TEST_CASE_COUNT Note that in this case we recommend you always specify an alias for the result of the aggregation function using the as operator. If you forget, you'll get the same error message as before:","title":"The SELECT Clause"},{"location":"Reporting/Custom-Graph-Tutorial/#the-from-clause","text":"The from clause in ESQL is relatively simple, it contains the primary object collection being queried and an alias that will be used to reference its properties in the other parts of the query: 1 from SpiraTestEntities . R_Requirements as RQ","title":"The FROM Clause"},{"location":"Reporting/Custom-Graph-Tutorial/#the-join-clauses","text":"If you are only going to need to work with the properties from a single object collection then you don't need to have any join clauses in your query. However if you are going to need data from multiple object collections, then you will need to use the join clause to add in those other collections. A simple join clause looks like: 1 join SpiraTestEntities . R_RequirementTestCases as RT on RQ . REQUIREMENT_ID = RT . REQUIREMENT_ID where you add the name of the entity collection being joined, the alias to refer to it with, and the comparison operator (in this case an equality) used to make the join. Entity SQL supports the following types of join: inner join or join - Only rows that exist in both sides of the comparison are returned left outer join or left join - Only rows that exist in the left hand side of the comparison are returned, plus any matching rows from the other side, or NULL if missing. right outer join or right join - Only rows that exist in the right hand side of the comparison are returned, plus any matching rows from the other side, or NULL if missing. full outer join or full join - All rows from both sides of the comparison are returned, with NULL values being used for non-matching rows on the alternate side. cross join - This query expression produces the Cartesian product of the two collections from the left and right hand sides.","title":"The JOIN Clauses"},{"location":"Reporting/Custom-Graph-Tutorial/#the-where-clauses","text":"The where clause in ESQL lets you filter the results by one or more condition. In addition to the standard ESQL syntax, you can use the special Spira tokens to filter by dynamic data in the system: ${ProjectGroupId} - the current program (formerly known as project group) ${ProjectId} - the current product (formerly known as project) ${ReleaseId} the current release, phase, sprint, or iteration The where clause consists of a set of conditions that are joined by a boolean operator: and (used when condition A and condition B are true) or (used when condition A or condition B are true) Generally and operators have higher precedence than or operators, so you will need to use parenthesis when you want to have or operators that are higher precedence than an and . For example: 1 where ( RQ . PROJECT_ID = 1 or RQ . PROJECT_ID = 2 ) and RQ . IS_DELETED = 0 means that you will retrieve any un-deleted requirement that is in project 1 or project 2, whereas this would mean something completely different: 1 where RQ . PROJECT_ID = 1 or RQ . PROJECT_ID = 2 and RQ . IS_DELETED = 0 this would retrieve all (including deleted) requirements in project 1, and any un-deleted ones from project 2. The type of operator you can use in the various conditions include: Comparisons such as: = Equals < Less than Greater than <= Less that or equals = Greater than or equals <> or != not equal to ! not Mathematical operator such as: add subtract multiple / divide % modulus (remainder) For example you might have a compound conditional clause such as: 1 where RQ . PROJECT_ID >= 1 and RQ . PROJECT_ID <= 4 and RQ . IS_DELETED = 0 and ( RQ . TASK_ACTUAL_EFFORT + RQ . TASK_REMAINING_EFFORT ) > 0","title":"The WHERE Clauses"},{"location":"Reporting/Custom-Graph-Tutorial/#aggregations-and-group-by","text":"In the discussion of the select clause we mentioned that you can use aggregation functions such as count, sum, min, max , etc. If you use these in the select clause, then any object properties that are not being aggregated need to be included in the group by clause: 1 group by RQ . REQUIREMENT_ID , RQ . NAME If you don't have any aggregation functions, you can still use a group by clause to simply group similar rows, but generally speaking you omit the group by clause if there are no aggregation functions in the select list.","title":"Aggregations and GROUP BY"},{"location":"Reporting/Custom-Graph-Tutorial/#sorting-and-order-by","text":"Finally, you typically want to sort the data by one or more of the object properties, this is done by having an order by clause at the end of the query: 1 order by TEST_CASE_COUNT desc , RQ . REQUIREMENT_ID asc The syntax of the order by clause is: order by property name (e.g. RQ.REQUIREMENT_ID ) or property alias (e.g. TEST_CASE_COUNT ). If an alias you don't use the object prefix (e.g. RQ ) asc or desc for ascending or descending order (if omitted, it will default to ascending) If you sort by a property (e.g. requirement name) that could be held by multiple rows, it is recommended to always add a final sort clause by a guaranteed unique ID such as the primary key REQUIREMENT_ID since that will ensure the results are consistent each time. This is known as 'stable sorting'","title":"Sorting and ORDER BY"},{"location":"Reporting/Custom-Graph-Tutorial/#differences-between-esql-and-traditional-database-sql","text":"Now that we have covered the basics of writing an Entity SQL (ESQL) query, we'll discuss some of the differences and limitations between ESQL and traditional database SQL.","title":"Differences Between ESQL and Traditional Database SQL"},{"location":"Reporting/Custom-Graph-Tutorial/#no-support-for","text":"Database SQL supports the unqualified * syntax as an alias for the entire row, and the qualified * syntax (t.*) as a shortcut for the fields of that table. In addition, database SQL allows for a special count(*) aggregate, which includes nulls. Entity SQL does not support the * construct. Database SQL queries of the form: 1 select * from T and 1 select T1 . * from T1 , T2 ... can be expressed in Entity SQL as 1 select value t from T as t and 1 select value t1 from T1 as t1 , T2 as t2 ... respectively. Additionally, these constructs handle inheritance (value substitutability), while the select * variants are restricted to top-level properties of the declared type. Entity SQL does not support the count(*) aggregate. Use count(0) instead.","title":"No Support for *"},{"location":"Reporting/Custom-Graph-Tutorial/#changes-to-group-by","text":"Entity SQL supports aliasing of group by keys. Expressions in the select clause and having clause must refer to the group by keys via these aliases. For example, this Entity SQL syntax:","title":"Changes to Group By"},{"location":"Reporting/Custom-Graph-Tutorial/#esql","text":"1 2 3 SELECT k1 , count ( t . a ), sum ( t . a ) FROM T AS t GROUP BY t . b + t . c AS k1 ...is equivalent to the following database SQL:","title":"ESQL"},{"location":"Reporting/Custom-Graph-Tutorial/#sql","text":"1 2 3 SELECT b + c , count ( * ), sum ( a ) FROM T GROUP BY b + c","title":"SQL"},{"location":"Reporting/Custom-Graph-Tutorial/#collection-based-aggregates","text":"Entity SQL supports two kinds of aggregates. Collection-based aggregates operate on collections and produce the aggregated result. These can appear anywhere in the query, and do not require a group by clause. For example: 1 SELECT t . a AS a , count ( { 1 , 2 , 3 } ) AS b FROM T AS t Entity SQL also supports SQL-style aggregates. For example: 1 SELECT a , sum ( t . b ) FROM T AS t GROUP BY t . a AS a","title":"Collection-Based Aggregates"},{"location":"Reporting/Custom-Graph-Tutorial/#order-by-clause-usage","text":"Database SQL allows ORDER BY clauses to be specified only in the topmost SELECT .. FROM .. WHERE block. In Entity SQL you can use a nested ORDER BY expression and it can be placed anywhere in the query, but ordering in a nested query is not preserved. 1 2 3 4 -- The following query will order the results by the last name SELECT C1 . FirstName , C1 . LastName FROM AdventureWorks . Contact AS C1 ORDER BY C1 . LastName 1 2 3 4 5 -- In the following query ordering of the nested query is ignored. SELECT C2 . FirstName , C2 . LastName FROM ( SELECT C1 . FirstName , C1 . LastName FROM AdventureWorks . Contact as C1 ORDER BY C1 . LastName ) as C2","title":"ORDER BY Clause Usage"},{"location":"Reporting/Custom-Graph-Tutorial/#caseaccent-sensitivity","text":"In database SQL, identifier comparison is based on the settings of the current database and the database platform being used (SQL Server, Oracle, MySQL, etc.). In Entity SQL, identifiers are always case insensitive and accent sensitive (that is, Entity SQL distinguishes between accented and unaccented characters; for example, 'a' is not equal to '\u1ea5'). Entity SQL treats versions of letters that appear the same but are from different code pages as different characters.","title":"Case/Accent Sensitivity"},{"location":"Reporting/Custom-Graph-Tutorial/#group-by-clause-differences","text":"Entity SQL also imposes additional restrictions on queries involving group by clauses. Expressions in the select clause and having clause of such queries may only refer to the group by keys via their aliases. The following construct is valid in most database SQL variants but are not in Entity SQL:","title":"Group By Clause Differences"},{"location":"Reporting/Custom-Graph-Tutorial/#sql_1","text":"1 SELECT t . x + t . y FROM T AS t group BY t . x + t . y","title":"SQL"},{"location":"Reporting/Custom-Graph-Tutorial/#esql_1","text":"To do this in Entity SQL: 1 SELECT k FROM T AS t GROUP BY ( t . x + t . y ) AS k","title":"ESQL"},{"location":"Reporting/Custom-Graph-Tutorial/#referencing-columns-properties-of-tables-collections","text":"All column references in Entity SQL must be qualified with the table alias. The following construct (assuming that a is a valid column of table T ) is valid in database SQL but not in Entity SQL. SQL: 1 SELECT a FROM T The Entity SQL form is 1 SELECT t . a AS A FROM T AS t The table aliases are optional in the from clause. The name of the table is used as the implicit alias. Entity SQL allows the following form as well: 1 SELECT Tab . a FROM Tab","title":"Referencing Columns (Properties) of Tables (Collections)"},{"location":"Reporting/Custom-Graph-Tutorial/#navigation-through-objects","text":"Database SQL uses the \".\" notation for referencing columns of (a row of) a table. Entity SQL extends this notation (borrowed from programming languages) to support navigation through properties of an object. For example, if p is an expression of type Person, the following is the Entity SQL syntax for referencing the city of the address of this person. 1 p . Address . City","title":"Navigation Through Objects"},{"location":"Reporting/Custom-Graph-Tutorial/#collections-of-literals","text":"In database SQL, if you want to refer to a collection of possible values, you would use an IN clause together with a set of values contained within parenthesis: SQL 1 SELECT t . a FROM T as t WHERE t . b IN ( 1 , 2 , 3 ) In Entity SQL, the syntax for a collection of values is based on braces / curly brackets instead: ESQL 1 select t . a from T as t where t . b in { 1 , 2 , 3 }","title":"Collections of Literals"},{"location":"Reporting/Custom-Graph-Tutorial/#differences-in-literals-and-types","text":"There are some differences between how literal values and types are represented in Entity SQL vs. Database SQL: In database SQL, you typically represent boolean values as 1 or 0 whereas in Entity SQL you use true ** and false Database SQL uses database schema types such as VARCHAR, NVARCHAR and INT , whereas Entity SQL uses Microsoft .NET types such as String and Int32 Integer literals can be of type Int32 (123), UInt32 (123U), Int64 (123L), and UInt64 (123UL) DateTime literals, both date and time parts are mandatory. There are no default values. For example, a date literal would be: 1 DATETIME '2006-12-25 01:01:00.000' There are Unicode and non-Unicode character string literals. Unicode strings are prepended with N. For example, N'hello' . Typed nulls can be used anywhere. Type inference is not required for typed nulls because the type is known. For example, you can construct a null of type Int16 with the following Entity SQL construct: 1 ( cast ( null as Int16 ))","title":"Differences in Literals and Types"},{"location":"Reporting/Custom-Graph-Tutorial/#database-sql-functionality-not-available-in-entity-sql","text":"The following database SQL functionality is not available in Entity SQL. DML Commands - Entity SQL currently provides no support for DML statements (insert, update, delete). DDL Commands - Entity SQL provides no support for DDL in the current version. Imperative Programming - Entity SQL provides no support for imperative programming, unlike Transact-SQL. Use a programming language instead. Grouping Functions - Entity SQL does not yet provide support for grouping functions (for example, CUBE, ROLLUP, and GROUPING_SET). Analytic Functions - Entity SQL does not (yet) provide support for analytic functions. Built-in Functions, Operators - Entity SQL supports a subset of most database SQL's built in functions and operators.","title":"Database SQL Functionality Not Available in Entity SQL"},{"location":"Reporting/Custom-Graph-Tutorial/#advanced-entity-sql-queries","text":"Now that we have discussed the differences between traditional database SQL and Entity SQL, we will cover some more advanced queries and functions that customers typically will want to use when creating custom graphs with Spira. At the top of this tutorial, we outlined a sample ESQL query to get the count of test runs by execution status: 1 2 3 4 select R . EXECUTION_STATUS_NAME , COUNT ( R . TEST_RUN_ID ) as COUNT from SpiraTestEntities . R_TestRuns as R where R . PROJECT_ID = ${ ProjectId } group by R . EXECUTION_STATUS_NAME As we discussed, when using ESQL queries to display custom graphs, there are some restrictions about the select clause of the query: You need to make the first column in the query the category for the x-axis The other columns need to be purely numeric, and will be used to populate the data series that will be mapped to the x-axis categories. We will now be looking at some specific examples of graphs that users have asked us for help with, that we have some suggestions for...","title":"Advanced Entity SQL Queries"},{"location":"Reporting/Custom-Graph-Tutorial/#1-requirements-addedremoved-over-time","text":"For example, lets consider that you want to display a graph of requirements added and removed over time. To get a count of this we can query the SpiraTestEntities.R_HistoryChangeSets view to get a count of the changes, filter by additions and deletions, then use a combination of aggregation and the CAST operator to count the items added/removed: 1 2 3 4 5 6 7 8 9 10 11 select R . CHANGE_DATE as Timestamp , count ( CASE WHEN R . CHANGETYPE_NAME = \"Added\" THEN 1 WHEN R . CHANGETYPE_NAME = \"Deleted\" THEN - 1 END ) AS Sum from SpiraTestEntities . R_HistoryChangeSets as R where R . ARTIFACT_TYPE_NAME = \"Requirement\" group by R . CHANGE_DATE This will display the following data: Timestamp Sum 2019-08-17T02:06:18 0 2019-08-23T02:51:18 0 2020-01-14T11:50:18 5 2020-01-14T11:50:18 7 2020-01-14T11:50:18 5 2020-01-14T11:50:18 9 2020-01-14T11:50:18 7 2020-01-14T11:50:18 6 2020-01-14T11:50:18 5 2020-01-14T11:50:18 7 Which when displayed as a graph would look like: However suppose you want to display this graph by day, not by unique timestamp (a reasonable request), you would use the TruncateTime canonical EntitySQL function and combine that with a different way of writing the GROUP BY clause: 1 2 3 4 5 6 7 8 9 10 11 select DatePart , count ( CASE WHEN R . CHANGETYPE_NAME = \"Added\" THEN 1 WHEN R . CHANGETYPE_NAME = \"Deleted\" THEN - 1 END ) AS Sum from SpiraTestEntities . R_HistoryChangeSets as R where R . ARTIFACT_TYPE_NAME = \"Requirement\" group by TruncateTime ( R . CHANGE_DATE ) as DatePart This would now give the following results instead: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 < table class = \"table table-striped\" > < tbody > < tr class = \"Header\" > < th > DatePart </ th > < th > Sum </ th > </ tr > < tr > < td > 2019-08-17T00:00:00 </ td > < td > 0 </ td > </ tr > < tr > < td > 2019-08-23T00:00:00 </ td > < td > 0 </ td > </ tr > < tr > < td > 2020-01-14T00:00:00 </ td > < td > 248 </ td > </ tr > </ tbody > </ table > which could be graphed as follows:","title":"1) Requirements Added/Removed Over Time"},{"location":"Reporting/Custom-Graph-Tutorial/#2-aggregating-data-over-time-periods","text":"A common need is the ability to aggregate data over multiple time periods. For example, in the query above, we had the list of requirements aggregated by day: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 < table class = \"table table-striped\" > < tbody > < tr class = \"Header\" > < th > DatePart </ th > < th > Sum </ th > </ tr > < tr > < td > 2019-08-17T00:00:00 </ td > < td > 0 </ td > </ tr > < tr > < td > 2019-08-23T00:00:00 </ td > < td > 0 </ td > </ tr > < tr > < td > 2020-01-14T00:00:00 </ td > < td > 248 </ td > </ tr > </ tbody > </ table > Suppose we wanted to group the data over a 20 day time period. We would need to modify the query as follows: 1 2 3 4 5 6 7 8 9 10 11 select DatePart , count ( CASE WHEN R . CHANGETYPE_NAME = \"Added\" THEN 1 WHEN R . CHANGETYPE_NAME = \"Deleted\" THEN - 1 END ) AS Sum from SpiraTestEntities . R_HistoryChangeSets as R where R . ARTIFACT_TYPE_NAME = \"Requirement\" group by AddDays ( CreateDateTime ( Year ( R . CHANGE_DATE ), 1 , 1 , 0 , 0 , 0 ), ( DayOfYear ( R . CHANGE_DATE ) / 20 ) * 20 ) as DatePart Now when you execute the query, the system is using the following functions to combines the dates down into 20 day ranges: DayOfYear to get the absolute day number this year (1-366) Integer division and multiplication by 20 days to get the day converted to the first day in each 20 day range Using AddDays and CreateDateTime to compose the full date time again, adding the total number of days back to the year base. When executed, this will display: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 < table class = \"table table-striped\" > < tbody > < tr class = \"Header\" > < th > DatePart </ th > < th > Sum </ th > </ tr > < tr > < td > 2019-08-09T00:00:00 </ td > < td > 0 </ td > </ tr > < tr > < td > 2020-01-01T00:00:00 </ td > < td > 248 </ td > </ tr > </ tbody > </ table > or in graphical form:","title":"2) Aggregating Data Over Time Periods"},{"location":"Reporting/Custom-Graph-Tutorial/#further-reading","text":"Microsoft Entity SQL Reference Documentation Custom Reports Section of Inflectra Knowledge Base","title":"Further Reading"},{"location":"Reporting/Custom-Report-Tutorial/","text":"Custom Reports Tutorial and Introduction Introduction One of the maxims I always tell developers is that regardless of what you build, customers will never be satisfied with the reports you offer or the integration that you provide. In fact the two most underestimated tasks in software development are data feeds and reporting. A great feature of SpiraPlan (and SpiraTest and SpiraTeam) is the ability to do custom reporting, so that you are not limited to only the reports that ship with the system. This guide explains how to use these powerful custom reporting features. Basics and Terminology You need to be a Spira system administrator to create or modify reports because they have the potential to affect all products in the system. To get to reports go to: Administration > System Administration > Reporting > Edit Reports: From here you can either make a copy of one of the existing Spira built-in reports or create completely new report from scratch. The decision of which choice to make will depend on whether: You want to take one of the existing reports and modify it for your needs (in which case make a clone of it) You want to create a report of your own that is not similar to any of the built-in ones (in which case just create a new one). Once you have created your custom report, click on the Edit button for the report to go to the report details page. This displays a list of formats, sections, and the header and footer of the report. Terminology When you edit a report you will see the following different items that can be changed/edited: Name : the name of the report is simply how it will be listed in the main Reports section of the application Description : this is the description of what the report is for. It will not be displayed in the report itself, but will be displayed as a tooltip in the Reports section of Spira Header : This is a rich text box that you can enter formatted text into. This will appear at the top of the report above any of the different content sections. You can embed images and include tables, lists or other stylistic elements Footer : This is a rich text box that you can enter formatted text into. This will appear at the bottom of the report after all of the different content sections. You can embed images and include tables, lists or other stylistic elements Active : This simply marks whether this report is ready to be used (active) or not. Formats : All of the Spira reports are generated first into HTML and then converted into one of the other formats. This section lets you choose which formats your report will be available in. Note that if your record has a lot of textual data, it may not convert well into a tabular format such as Excel. Standard Sections : these are described in more detail below Custom Sections : these are described in more detail below Types of Report Section There are two types of report section that you can use in your report: A standard section basically uses an existing pre-defined query that returns back some structured XML data from Spira. For example the 'Project Overview' section will include the project name, description and other meta-data and the 'Requirements Summary' section will include an XML representation of all the requirements in the project together with any child data nested (e.g. all of tasks that belong to a requirement or the list of comments, etc.). A key aspect of a standard section is that the data itself is not customizable, but you can change the XML Template (XSLT) that is used to extract the data and convert it into a viewable form. So you have the ability to use XSLT to transform the data. You also allow the user who runs the report to use the standard set of filters on the data (e.g. return only requirements in release 1.0 or test cases that are priority 1,2,3) On the other hand, a custom section , lets you use a custom database query using the Microsoft Entity SQL (ESQL) language to query the different database view in the system join records, aggregate data to generate a completely custom table of data that you can then transform using an XML template (XSLT) to display it in a specific form (e.g. a table of data, a simple list, etc.). So you have the ability to two two tools: ESQL and XSLT to generate the report. The advantage over the standard section is that you are not limited to the queries that we have already defined in the system, but a custom section does not provide filter options for the end user. A report you create can have a mixture of the two sections, for example you could start the report with the standard project name and description and follow that with a custom section that displays a table of custom data (e.g. a risk cube or other table of data). How to Create and Edit a Custom Report In this tutorial you will learn how to: Clone a built-in standard report Use the \"Standard Section\" XML editor to make some changes to the XSLT template to hide some columns and add a new calculated column. Clone a Standard Report The first thing we need to do is make a copy of one of the standard reports s that we can change it. For your safety, Spira will not let you modify the original copy of the report. To create a copy: Go to Administration > System Administration > Reporting > Edit Reports. Click Clone next to the report you want to clone. In this example, we are going to make a copy of the \"Test Case Summary Report\": View The New Report Once you have cloned the report, click on the 'Edit' link for this report and you will now be taken to the report editing page: When editing a report, you can change the following fields: Name : the name of the report is simply how it will be listed in the main Reports section of the application Description : this is the description of what the report is for. It will not be displayed in the report itself, but will be displayed as a tooltip in the Reports section of Spira Header : This is a rich text box that you can enter formatted text into. This will appear at the top of the report above any of the different content sections. You can embed images and include tables, lists or other stylistic elements Footer : This is a rich text box that you can enter formatted text into. This will appear at the bottom of the report after all of the different content sections. You can embed images and include tables, lists or other stylistic elements Active : This simply marks whether this report is ready to be used (active) or not. Formats : All of the Spira reports are generated first into HTML and then converted into one of the other formats. This section lets you choose which formats your report will be available in. Note that if your record has a lot of textual data, it may not convert well into a tabular format such as Excel. For this example, we will edit the second Standard Section of the \"Test Case Summary Report\" clone. This report is a table-based layout. We will: remove a couple of columns that we don't need add a new calculated column Explore the XML Template Under the list of 'Standard Sections', click the Customize button next to the 'Test Case List' section. This will show the edit dialog box for this section of the report: Here, you can edit the following parts of the report section: Name : this is the name of the standard section you want to use in the report. You can choose a different standard section, but you cannot edit the name itself. Description : this is the description of what the section is designed to do, this is read only and changes if you select a different section name from the dropdown above. Header : This is a rich text box that you can enter formatted text into. This will appear at the top of the section before any of the dynamic content. You can embed images and include tables, lists or other stylistic elements Footer : This is a rich text box that you can enter formatted text into. This will appear at the bottom of the section after all of the dynamic content. You can embed images and include tables, lists or other stylistic elements Template : This contains the eXtensible StyLesheet Template (XSLT) that is used to transform the raw data coming from Spira into the desired presentation format. XSLT includes both HTML elements (e.g. a list or table) plus XSLT specific tags that select the data from Spira and present it in some way. This is used to generate the dynamic portion of the report section. We shall discuss this next. Feel free to edit the Header and Footer to make your section more readable, for example include a section heading or some introductory text. You might want to add a horizontal line (\\ ) to the footer to mark the end the report section. The full contents of the Template section looks like the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 <?xml version=\"1.0\" encoding=\"utf-8\"?> <xsl:stylesheet version= \"1.0\" xmlns:xsl= \"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl= \"urn:schemas-microsoft-com:xslt\" exclude-result-prefixes= \"msxsl\" > <xsl:template match= \"/TestCaseData\" > <table class= \"DataGrid\" style= \"width:100%\" > <tr> <th> Test # </th> <th> Name </th> <th> Description </th> <th> Priority </th> <xsl:if test= \"TestCase/TestSteps\" > <th> Test Step </th> <th> Test Step Description </th> <th> Test Step Expected Result </th> <th> Test Step Sample Data </th> </xsl:if> <th> Status </th> <th> Author </th> <th> Owner </th> <th> Automation Engine </th> <th> Est. Duration </th> <th> Created On </th> <th> Last Modified </th> <th> Last Executed </th> <xsl:for-each select= \"TestCase[1]/CustomProperties/CustomProperty\" > <th> <xsl:value-of select= \"Alias\" /> </th> </xsl:for-each> </tr> <xsl:for-each select= \"TestCase\" > <tr> <td> <xsl:value-of select= \"TestCaseId\" /> </td> <td> <xsl:attribute name= \"style\" > padding-left: <xsl:value-of select= \"string-length(IndentLevel)*2\" /> px; </xsl:attribute> <if test= \"FolderYn='Y'\" > <b><xsl:value-of select= \"Name\" /></b> </if> <if test= \"FolderYn='N'\" > <xsl:value-of select= \"Name\" /> </if> </td> <td> <xsl:value-of select= \"Description\" disable-output-escaping= \"yes\" /> </td> <td> <xsl:value-of select= \"TestCasePriorityName\" /> </td> <if test= \"TestSteps\" > <td></td> <td></td> <td></td> <td></td> </if> <td> <xsl:value-of select= \"ExecutionStatusName\" /> </td> <td> <xsl:value-of select= \"AuthorName\" /> </td> <td> <xsl:value-of select= \"OwnerName\" /> </td> <td> <xsl:value-of select= \"AutomationEngineName\" /> </td> <td class= \"Timespan\" > <xsl:value-of select= \"EstimatedDuration\" /> </td> <td class= \"Date\" > <xsl:call-template name= \"format-date\" > <xsl:with-param name= \"datetime\" select= \"CreationDate\" /> < \\xsl:call-template> </td> <td class= \"Date\" > <xsl:call-template name= \"format-date\" > <xsl:with-param name= \"datetime\" select= \"LastUpdateDate\" /> < \\xsl:call-template> </td> <td class= \"Date\" > <xsl:call-template name= \"format-date\" > <xsl:with-param name= \"datetime\" select= \"ExecutionDate\" /> < \\xsl:call-template> </td> <xsl:for-each select= \"CustomProperties/CustomProperty\" > <td> <xsl:value-of select= \"Value\" /> </td> </xsl:for-each> </tr> <xsl:for-each select= \"TestSteps/TestStep\" > <tr> <td></td> <td></td> <td></td> <td></td> <td> <xsl:value-of select= \"position()\" /> </td> <td> <xsl:value-of select= \"Description\" disable-output-escaping= \"yes\" /> <xsl:value-of select= \"' '\" /> <xsl:value-of select= \"LinkedTestCaseName\" /> </td> <td> <xsl:value-of select= \"ExpectedResult\" disable-output-escaping= \"yes\" /> </td> <td> <xsl:value-of select= \"SampleData\" disable-output-escaping= \"yes\" /> </td> <td> <xsl:value-of select= \"ExecutionStatusName\" /> </td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> </xsl:for-each> </xsl:for-each> </table> </xsl:template> <xsl:template name= \"format-date\" > <xsl:param name= \"datetime\" /> <xsl:variable name= \"date\" select= \"substring-before($datetime, 'T')\" /> <xsl:variable name= \"year\" select= \"substring-before($date, '-')\" /> <xsl:variable name= \"month\" select= \"substring-before(substring-after($date, '-'), '-')\" /> <xsl:variable name= \"day\" select= \"substring-after(substring-after($date, '-'), '-')\" /> <xsl:variable name= \"time\" select= \"substring-before(substring-after($datetime, 'T'), '.')\" /> <xsl:variable name= \"monthname\" > <xsl:choose> <xsl:when test= \"$month='01'\" > <xsl:value-of select= \"'Jan'\" /> </xsl:when> <xsl:when test= \"$month='02'\" > <xsl:value-of select= \"'Feb'\" /> </xsl:when> <xsl:when test= \"$month='03'\" > <xsl:value-of select= \"'Mar'\" /> </xsl:when> <xsl:when test= \"$month='04'\" > <xsl:value-of select= \"'Apr'\" /> </xsl:when> <xsl:when test= \"$month='05'\" > <xsl:value-of select= \"'May'\" /> </xsl:when> <xsl:when test= \"$month='06'\" > <xsl:value-of select= \"'Jun'\" /> </xsl:when> <xsl:when test= \"$month='07'\" > <xsl:value-of select= \"'Jul'\" /> </xsl:when> <xsl:when test= \"$month='08'\" > <xsl:value-of select= \"'Aug'\" /> </xsl:when> <xsl:when test= \"$month='09'\" > <xsl:value-of select= \"'Sep'\" /> </xsl:when> <xsl:when test= \"$month='10'\" > <xsl:value-of select= \"'Oct'\" /> </xsl:when> <xsl:when test= \"$month='11'\" > <xsl:value-of select= \"'Nov'\" /> </xsl:when> <xsl:when test= \"$month='12'\" > <xsl:value-of select= \"'Dec'\" /> </xsl:when> <xsl:otherwise> <xsl:value-of select= \"''\" /> </xsl:otherwise> </xsl:choose> <xsl:variable> <xsl:value-of select= \"concat($day, '-' ,$monthname, '-', $year , ' ', $time)\" /> </xsl:template> </xsl:stlyesheet> This is the underlying template that reads the data in Spira and turns it into a simple HTML table containing all of the columns and rows to be reported on. As you can see, it includes the HTML elements for the table: 1 <table class= \"DataGrid\" style= \"width:100%\" > The template also includes XSLT selectors for looping through all of the test cases in the Spira product: 1 <xsl:for-each select= \"TestCase\" > Before we can successfully modify the report, we need to understand what data is being returned by Spira. Viewing the Data Available for Reporting To see the data that is available for reporting, you need to open up another browser tab and then go to the Reports section of Spira: Now click on the 'Test Case Summary' report from the left-hand navigation. This displays the Report Configuration page: Choose the 'XML' output format for the report. Leave all of the other filters alone and uncheck the 'Test Steps' report element. Click the Create Report button Spira will generate the report in \"raw XML format\": 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 <Report> <Title> Test Case Summary Report </Title> <ProjectData> <Project> <ArtifactPrefix> PR </ArtifactPrefix> <ArtifactType> Project </ArtifactType> <ArtifactToken> PR-1 </ArtifactToken> <ArtifactId> 1 </ArtifactId> <ProjectId> 1 </ProjectId> <ProjectGroupId> 2 </ProjectGroupId> <Name> Library Information System </Name> <Description> Sample application that allows users to manage books, authors and lending records for a typical branch library </Description> <CreationDate> 2005-11-30T19:00:00 </CreationDate> <Website> www.libraryinformationsystem.org </Website> <IsActive> True </IsActive> </Project> </ProjectData> <TestCaseData> <TestCase> <TestCaseId> 1 </TestCaseId> <ProjectId> 1 </ProjectId> <ExecutionStatusId> 4 </ExecutionStatusId> <AuthorId> 2 </AuthorId> <OwnerId> 2 </OwnerId> <TestCasePriorityId /> <AutomationEngineId /> <AutomationAttachmentId /> <Name> l Tests </Name> <Description /> <IndentLevel> A </IndentLevel> <ExecutionDate> 3-11-30T19:00:00 </ExecutionDate> <CreationDate> 3-11-30T19:00:00 </CreationDate> <LastUpdateDate> 3-11-30T19:00:00 </LastUpdateDate> <ConcurrencyDate> 3-11-30T19:00:00 </ConcurrencyDate> <EstimatedDuration /> <VisibleYn> Y </VisibleYn> <FolderYn> Y </FolderYn> <ExpandedYn> Y </ExpandedYn> <ActiveYn> Y </ActiveYn> <AttachmentsYn> N </AttachmentsYn> <TestStepsYn> N </TestStepsYn> <FolderCountPassed> 1 </FolderCountPassed> <FolderCountFailed> 3 </FolderCountFailed> <FolderCountCaution> 1 </FolderCountCaution> <FolderCountBlocked> 1 </FolderCountBlocked> <FolderCountNotRun> 0 </FolderCountNotRun> <FolderCountNotApplicable> 0 </FolderCountNotApplicable> <ExecutionStatusName> N/A </ExecutionStatusName> <AuthorName> Fred Bloggs </AuthorName> <OwnerName> Fred Bloggs </OwnerName> <ProjectName /> <TestCasePriorityName /> <AutomationEngineName /> <Custom_01 /> <Custom_02 /> ... <Custom_30 /> <IsDeleted> False </IsDeleted> <CustomProperties> <CustomProperty> <Alias> URL </Alias> <Name> Custom_01 </Name> <Type> Text </Type> </CustomProperty> <CustomProperty> <Alias> Test Type </Alias> <Name> Custom_02 </Name> <Type> List </Type> </CustomProperty> </CustomProperties> <Discussions /> </TestCase> ... <TestCaseData> </TestCaseData> </TestCaseData> </Report> This fragment of the report lets you see all of the data that is available for displaying in your report. You can navigate this hierarchy of information using the special XSLT selection language called XPATH. This lets you query the data returned from Spira to retrieve specific data elements that can be displayed in the report. Before we start modifying the report XSLT to use this data, we first need to get a basic understanding of XPATH itself. Understanding XPATH (this section includes material from the website: http://www.whoishostingthis.com/resources/xslt/ ) XPath is used to navigate through elements and attributes in an XML document. XPath uses path expressions to select nodes or node-sets in an XML document. These path expressions look very much like the expressions you see when you work with a traditional computer file system. In XPath, there are seven kinds of nodes: element attribute text namespace processing-instruction comment document nodes XML documents are treated as trees of nodes. The topmost element of the tree is called the root element. In the examples that follow we shall be using the following simple XML document: 1 2 3 4 5 6 7 8 9 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <bookstore> <book> <title lang= \"en\" > Harry Potter </title> <author> J K. Rowling </author> <year> 2005 </year> <price> 29.99 </price> </book> </bookstore> This document contains the following node types: root element : \\<bookstore> element node : \\<book>, \\<title>, \\<author>, etc. attribute node : lang=\\\"en\\\" Selecting Nodes XPath uses path expressions to select nodes in an XML document. The node is selected by following a path or steps. The most useful path expressions are listed below: Expression Description nodename Selects all nodes with the name \\\" nodename \\\" / Selects from the root node // Selects nodes in the document from the current node that match the selection no matter where they are . Selects the current node .. Selects the parent of the current node @ Selects attributes In the table below we have listed some path expressions and the result of the expressions if used on our sample document: Path Expression Result bookstore Selects all nodes with the name \\\"bookstore\\\" /bookstore Selects the root element bookstore Note: If the path starts with a slash ( / ) it always represents an absolute path to an element! bookstore/book Selects all book elements that are children of bookstore //book Selects all book elements no matter where they are in the document bookstore//book Selects all book elements that are descendant of the bookstore element, no matter where they are under the bookstore element //\\@lang Selects all attributes that are named lang Predicates Predicates are used to find a specific node or a node that contains a specific value. Predicates are always embedded in square brackets. In the table below we have listed some path expressions with predicates and the result of the expressions: Path Expression Result /bookstore/book[1] Selects the first book element that is the child of the bookstore element /bookstore/book[last()] Selects the last book element that is the child of the bookstore element /bookstore/book[last()-1] Selects the last but one book element that is the child of the bookstore element /bookstore/book[position()\\<3] Selects the first two book elements that are children of the bookstore element //title[\\@lang] Selects all the title elements that have an attribute named lang //title[\\@lang='en'] Selects all the title elements that have a \\\"lang\\\" attribute with a value of \\\"en\\\" /bookstore/book[price>35.00] Selects all the book elements of the bookstore element that have a price element with a value greater than 35.00 /bookstore/book[price>35.00]/title Selects all the title elements of the book elements of the bookstore element that have a price element with a value greater than 35.00 Selecting Unknown Nodes XPath wildcards can be used to select unknown XML nodes: Wildcard Description * Matches any element node @* Matches any attribute node node() Matches any node of any kind In the table below we have listed some path expressions and the result of the expressions: Path Expression Result /bookstore/* Selects all the child element nodes of the bookstore element //* Selects all elements in the document //title[@*] Selects all title elements which have at least one attribute of any kind Selecting Several Paths By using the | operator in an XPath expression you can select several paths. In the table below we have listed some path expressions and the result of the expressions: Path Expression Result //book/title | //book/price Selects all the title AND price elements of all book elements //title | //price Selects all the title AND price elements in the document /bookstore/book/title | //price Selects all the title elements of the book element of the bookstore element AND all the price elements in the document Now that we understand the basics of XPath we can use that knowledge to modify our XSLT template to change the data that is included in our report. Modifying the Report XML Template In the standard report it will display a list of test cases with various standard fields plus all of the custom properties (it uses an XSLT for-each loop to dynamically add all of the custom properties). For our example, we want to do the following: Remove the list of test steps from the report Remove the creation date Add a new column that displays for folders the % of tests that passed and the % of test cases that failed Removing the Test Steps To remove the test steps, delete the following sections from the XSLT template: 1 2 3 4 5 6 <xsl:if test= \\\"TestCase/TestSteps\\\" > <th> Test Step </th> <th> Test Step Description </th> <th> Test Step Expected Result </th> <th> Test Step Sample Data </th> </xsl:if> and 1 2 3 4 5 6 <xsl:if test= \"TestSteps\" > <td><td> <td></td> <td></td> <td></td> </xsl:if> This removes the four columns related to test steps. Removing the Creation Date To remove the creation date, delete the header cell and body cell: 1 <th> Created On </th> and 1 2 3 4 5 <td class= \"Date\" > \\ <xsl:call-template name= \"format-date\" > <xsl:with-param name= \"datetime\" select= \"CreationDate\" /> </xsl:call-template> \\ </td> Adding a Calculated Column Now to add the cell headers, we just need to add two \\ tags to the header of the table. This is done by adding: 1 2 <th> % Passed </th> <th> % Failed </th> Now to actually get the data, we need to use the following XPATH queries: % Passed : FolderCountPassed div (FolderCountPassed + FolderCountFailed + FolderCountCaution + FolderCountNotRun + FolderCountBlocked)* 100 % Failed : FolderCountFailed div (FolderCountPassed + FolderCountFailed + FolderCountCaution + FolderCountNotRun + FolderCountBlocked) * 100 Note: the mathematical operators for XPATH are: + (add), * (multiply), - (subtract), and div (division). The slash is not used for division because it is already used as a node path separator. So the section we need to add to the table body in the report would be: 1 2 3 4 5 6 7 8 <td> <xsl:value-of select= \"FolderCountPassed div (FolderCountPassed + FolderCountFailed + FolderCountCaution + FolderCountNotRun + FolderCountBlocked) * 100\" /> % </td> <td> <xsl:value-of select= \"FolderCountFailed div (FolderCountPassed + FolderCountFailed + FolderCountCaution + FolderCountNotRun + FolderCountBlocked) * 100\" /> % </td> Now that have make the changes, the complete XSLT template will bexml version=\"1.0\" encoding=\"utf-8\"?> <xsl:stylesheet version= \"1.0\" xmlns:xsl= \"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl= \"urn:schemas-microsoft-com:xslt\" exclude-result-prefixes= \"msxsl\" > <xsl:template match= \"/TestCaseData\" > <table class= \"DataGrid\" style= \"width:100%\" > <tr> <th> Test # </th> <th> Name </th> <th> Description </th> <th> Priority </th> <th> Status </th> <th> Author </th> <th> Owner </th> <th> Automation Engine </th> <th> Est. Duration </th> <th> % Passed </th> <th> % Failed </th> <th> Last Modified </th> <th> Last Executed </th> <xsl:for-each select= \"TestCase[1]/CustomProperties/CustomProperty\" > <th> <xsl:value-of select= \"Alias\" /> </th> </xsl:for-each> </tr> <xsl:for-each select= \"TestCase\" > <tr> <td> <xsl:value-of select= \"TestCaseId\" /> </td> <td> <xsl:attribute name= \"style\" > padding-left: <xsl:value-of select= \"string-length(IndentLevel)*2\" /> px; </xsl:attribute> <if test= \"FolderYn='Y'\" > <b><xsl:value-of select= \"Name\" /></b> </if> <if test= \"FolderYn='N'\" > <xsl:value-of select= \"Name\" /> </if> </td> <td> <xsl:value-of select= \"Description\" disable-output-escaping= \"yes\" /> </td> <td> <xsl:value-of select= \"TestCasePriorityName\" /> </td> <td> <xsl:value-of select= \"ExecutionStatusName\" /> </td> <td> <xsl:value-of select= \"AuthorName\" /> </td> <td> <xsl:value-of select= \"OwnerName\" /> </td> <td> <xsl:value-of select= \"AutomationEngineName\" /> </td> <td class= \"Timespan\" > <xsl:value-of select= \"EstimatedDuration\" /> </td> <td> <xsl:value-of select= \"FolderCountPassed div (FolderCountPassed + FolderCountFailed + FolderCountCaution + FolderCountNotRun + FolderCountBlocked) * 100\" /> % </td> <td> <xsl:value-of select= \"FolderCountFailed div (FolderCountPassed + FolderCountFailed + FolderCountCaution + FolderCountNotRun + FolderCountBlocked) * 100\" /> % </td> <td class= \"Date\" > <xsl:call-template name= \"format-date\" > <xsl:with-param name= \"datetime\" select= \"LastUpdateDate\" /> </xsl:call-template> </td> <td class= \"Date\" > <xsl:call-template name= \"format-date\" > <xsl:with-param name= \"datetime\" select= \"ExecutionDate\" /> </xsl:call-template> </td> <xsl:for-each select= \"CustomProperties/CustomProperty\" > <td> <xsl:value-of select= \"Value\" /> </td> </xsl:for-each> </tr> <xsl:for-each select= \"TestSteps/TestStep\" > <tr> <td></td> <td></td> <td></td> <td></td> <td> <xsl:value-of select= \"position()\" /> </td> <td> <xsl:value-of select= \"Description\" disable-output-escaping= \"yes\" /> <xsl:value-of select= \"' '\" /> <xsl:value-of select= \"LinkedTestCaseName\" /> </td> <td> <xsl:value-of select= \"ExpectedResult\" disable-output-escaping= \"yes\" /> </td> <td> <xsl:value-of select= \"SampleData\" disable-output-escaping= \"yes\" /> </td> <td> <xsl:value-of select= \"ExecutionStatusName\" /> </td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> </xsl:for-each> </xsl:for-each> </table> </xsl:template> <xsl:template name= \"format-date\" > <param name= \"datetime\" /> <xsl:variable name= \"date\" select= \"substring-before($datetime, 'T')\" /> <xsl:variable name= \"year\" select= \"substring-before($date, '-')\" /> <xsl:variable name= \"month\" select= \"substring-before(substring-after($date, '-'), '-')\" /> <xsl:variable name= \"day\" select= \"substring-after(substring-after($date, '-'), '-')\" /> <xsl:variable name= \"time\" select= \"substring-before(substring-after($datetime, 'T'), '.')\" /> <xsl:variable name= \"monthname\" > <xsl:choose> <xsl:when test= \"$month='01'\" > <xsl:value-of select= \"'Jan'\" /> </xsl:when> <xsl:when test= \"$month='02'\" > <xsl:value-of select= \"'Feb'\" /> </xsl:when> <xsl:when test= \"$month='03'\" > <xsl:value-of select= \"'Mar'\" /> </xsl:when> <xsl:when test= \"$month='04'\" > <xsl:value-of select= \"'Apr'\" /> </xsl:when> <xsl:when test= \"$month='05'\" > <xsl:value-of select= \"'May'\" /> </xsl:when> <xsl:when test= \"$month='06'\" > <xsl:value-of select= \"'Jun'\" /> </xsl:when> <xsl:when test= \"$month='07'\" > <xsl:value-of select= \"'Jul'\" /> </xsl:when> <xsl:when test= \"$month='08'\" > <xsl:value-of select= \"'Aug'\" /> </xsl:when> <xsl:when test= \"$month='09'\" > <xsl:value-of select= \"'Sep'\" /> </xsl:when> <xsl:when test= \"$month='10'\" > <xsl:value-of select= \"'Oct'\" /> </xsl:when> <xsl:when test= \"$month='11'\" > <xsl:value-of select= \"'Nov'\" /> </xsl:when> <xsl:when test= \"$month='12'\" > <xsl:value-of select= \"'Dec'\" /> </xsl:when> <xsl:otherwise> <xsl:value-of select= \"''\" /> </xsl:otherwise> </xsl:choose> </xsl:variable> <xsl:value-of select= \"concat($day, '-' ,$monthname, '-', $year , ' ', $time)\" /> </xsl:template> </xsl:stylesheet> Click on the Save button to save your section and then the main Save button to save the report. You can now run the report through the main reports center and get something like: Test # Name Description Priority Status Author Owner Automation Engine Est. Duration % Passed % Failed Last Modified Last Executed 1 Functional Tests N/A Fred Bloggs Fred Bloggs 16% 50% 30-Nov-2003 30-Nov-2003 Conclusion Now we have learned how to modify one of the standard reports and use XSLT, XPATH and a 'standard section' to reformat how the data appears. You can use your knowledge of XPATH and XSLT to make more sophisticated changes. For example you could delete the entire XSLT default template and create a new template that displays a simple list of test cases, or a table of just test case names and IDs. How to Make Custom Queries In this article we shall be creating a whole new custom report that has a custom header, footer and a custom section that displays data based on a custom ESQL (Entity SQL) query. This is useful in cases where you have some special metrics that you want to be able publish in a report. Create the New Report First, go to Administration > System Administration > Reporting > Edit Reports. and click on the Add New Report option. This will bring up the create new report page: Enter the Name and Description of your new report (the description is optional and is used to describe the purpose of the report, the text is not displayed in the report itself). For example, we will enter: Name = Test Case Summary Metrics Report Description = This report shows a table containing the summary number of passes and fails per release in our project Now enter in some text for the header and footer of the report (these will be displayed at the top and bottom of the entire report): Header = This report displays the number of passed and failed test cases per release in the project: Footer = \u00a9 Copyright MyCompany 2020, All Rights Reserved For our report, we'll choose the following formats and category: Formats = MS-Word, PDF and HTML Category = Test Case Reports The format choice is up to you, however the category is important because: it determines which category the report will appear in the Rreporting home page it will determine the permissions that the user needs to have to run your report. Before you add a custom section, let's include the name of the project and its description into the top of the report, underneath the header. To do that, click on the Add New Standard Section button and that will display the Standard Section dialog box: On this page, choose the 'Product Overview' section from the dropdown list and then click 'Create Default Template' to display the standard XSLT template used for this report. This will populate the Template field with the standard Project Overview XSLT template. As described above, you can modify this XSLT to adjust how the Project Overview is displayed. Click on the Save button. Now we need to add our new custom section that contains our ESQL query. Click on the Add New Custom Section button and the new custom section dialog is displayed: In this dialog box, we need to enter the name of the new section, a description, header, footer and then our ESQL query that is used to retrieve the data we need. For this example we'll enter: Name : Test Case Counts By Release Description : (leave this blank) Header : Enter in the text 'Test Summary by Release' and make it bold and underlined. Footer : Insert a simple horizontal line Now in the query section, choose 'Releases' as the base query to use. This will insert the following query: select value R from SpiraTestEntities.R_Releases as R where R.PROJECT_ID = ${ProjectId} Click on the Preview Results button to display the table of all the release fields. From this we can see what we want to include in the query: Now change the query to only include the data that we want: 1 select R . NAME , R . VERSION \\ _NUMBER , R . COUNT \\ _PASSED , R . COUNT \\ _FAILED , R . COUNT \\ _NOT \\ _RUN , R . COUNT \\ _BLOCKED , R . COUNT \\ _CAUTION from SpiraTestEntities . R \\ _Releases as R where R . PROJECT \\ _ID = \\${ ProjectId } This will display the release name, and the test case counts for the current project. It will also include the deleted releases, so we need to add on a clause to the WHERE part of the query to make sure they are excluded: 1 2 select R . NAME , R . VERSION \\ _NUMBER , R . COUNT \\ _PASSED , R . COUNT \\ _FAILED , R . COUNT \\ _NOT \\ _RUN , R . COUNT \\ _BLOCKED , R . COUNT \\ _CAUTION from SpiraTestEntities . R \\ _Releases as R where R . PROJECT \\ _ID = \\${ ProjectId }\\ and R . IS \\ _DELETED = False Click on the Preview Results button again to display the data we want: NAME VERSION_NUMBER COUNT_PASSED COUNT_FAILED COUNT_NOT_RUN COUNT_BLOCKED COUNT_CAUTION Library System Release 1 1.0.0.0 0 2 4 0 1 Library System Release 1 SP1 1.0.1.0 3 0 3 1 0 Library System Release 1 SP2 1.0.2.0 2 0 5 0 0 To change the names of the columns to look a bit nicer, we can change the generated template. To do this, first click Create Default Template to generate the standard XSLT template for this query: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <?xml version=\"1.0\" encoding=\"utf-8\"?> <xsl:stylesheet version= \"1.0\" xmlns:xsl= \"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl= \"urn:schemas-microsoft-com:xslt\" exclude-result-prefixes= \"msxsl\" > <xsl:template match= \"/RESULTS\" > <table class= \"DataGrid\" > <tr> <th> NAME </th> <th> VERSION_NUMBER </th> <th> COUNT_PASSED </th> <th> COUNT_FAILED </th> <th> COUNT_NOT_RUN </th> <th> COUNT_BLOCKED </th> <th> COUNT_CAUTION </th> </tr> <xsl:for-each select= \"ROW\" > <tr> <td><xsl:value-of select= \"NAME\" /></td> <td><xsl:value-of select= \"VERSION_NUMBER\" /></td> <td><xsl:value-of select= \"COUNT_PASSED\" /></td> <td><xsl:value-of select= \"COUNT_FAILED\" /></td> <td><xsl:value-of select= \"COUNT_NOT_RUN\" /></td> <td><xsl:value-of select= \"COUNT_BLOCKED\" /></td> <td><xsl:value-of select= \"COUNT_CAUTION\" /></td> </tr> </xsl:for-each> </table> </xsl:template> </xsl:stylesheet> To change the column headings to make them look better, we can change the template to look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <?xml version=\"1.0\" encoding=\"utf-8\"?> <xsl:stylesheet version= \"1.0\" xmlns:xsl= \"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl= \"urn:schemas-microsoft-com:xslt\" exclude-result-prefixes= \"msxsl\" > <xsl:template match= \"/RESULTS\" > <table class= \"DataGrid\" > <tr> <th> Release </th> <th> Version </th> <th> # Passed </th> <th> # Failed </th> <th> # Not Run </th> <th> # Blocked </th> <th> # Caution </th> </tr> <xsl:for-each select= \"ROW\" > <tr> <td><xsl:value-of select= \"NAME\" /></td> <td><xsl:value-of select= \"VERSION_NUMBER\" /></td> <td><xsl:value-of select= \"COUNT_PASSED\" /></td> <td><xsl:value-of select= \"COUNT_FAILED\" /></td> <td><xsl:value-of select= \"COUNT_NOT_RUN\" /></td> <td><xsl:value-of select= \"COUNT_BLOCKED\" /></td> <td><xsl:value-of select= \"COUNT_CAUTION\" /></td> </tr> </xsl:for-each> </table> </xsl:template> </xsl:stylesheet> Once you are happy with the result, click on the Save button on the custom section and then the Save button on the report editing screen itself. You can now run the report through the main reports center and get something like: Release Version # Passed # Failed # Not Run # Blocked # Caution Library System Release 1 1.0.0.0 0 2 4 0 1 Library System Release 1 SP1 1.0.1.0 3 0 3 1 0 Library System Release 1 SP2 1.0.2.0 2 0 5 0 0 Conclusion Now we have learned how to create a custom report and a use a combination of standard sections and custom sections to product a report that includes data specific to your business. You can use your knowledge of SQL and XSLT to make more sophisticated changes. For example, you could join multiple tables and use SQL aggregation functions to generate summary reports from other parts of the system.","title":"Custom Reports Tutorial"},{"location":"Reporting/Custom-Report-Tutorial/#custom-reports-tutorial-and-introduction","text":"","title":"Custom Reports Tutorial and Introduction"},{"location":"Reporting/Custom-Report-Tutorial/#introduction","text":"One of the maxims I always tell developers is that regardless of what you build, customers will never be satisfied with the reports you offer or the integration that you provide. In fact the two most underestimated tasks in software development are data feeds and reporting. A great feature of SpiraPlan (and SpiraTest and SpiraTeam) is the ability to do custom reporting, so that you are not limited to only the reports that ship with the system. This guide explains how to use these powerful custom reporting features.","title":"Introduction"},{"location":"Reporting/Custom-Report-Tutorial/#basics-and-terminology","text":"You need to be a Spira system administrator to create or modify reports because they have the potential to affect all products in the system. To get to reports go to: Administration > System Administration > Reporting > Edit Reports: From here you can either make a copy of one of the existing Spira built-in reports or create completely new report from scratch. The decision of which choice to make will depend on whether: You want to take one of the existing reports and modify it for your needs (in which case make a clone of it) You want to create a report of your own that is not similar to any of the built-in ones (in which case just create a new one). Once you have created your custom report, click on the Edit button for the report to go to the report details page. This displays a list of formats, sections, and the header and footer of the report.","title":"Basics and Terminology"},{"location":"Reporting/Custom-Report-Tutorial/#terminology","text":"When you edit a report you will see the following different items that can be changed/edited: Name : the name of the report is simply how it will be listed in the main Reports section of the application Description : this is the description of what the report is for. It will not be displayed in the report itself, but will be displayed as a tooltip in the Reports section of Spira Header : This is a rich text box that you can enter formatted text into. This will appear at the top of the report above any of the different content sections. You can embed images and include tables, lists or other stylistic elements Footer : This is a rich text box that you can enter formatted text into. This will appear at the bottom of the report after all of the different content sections. You can embed images and include tables, lists or other stylistic elements Active : This simply marks whether this report is ready to be used (active) or not. Formats : All of the Spira reports are generated first into HTML and then converted into one of the other formats. This section lets you choose which formats your report will be available in. Note that if your record has a lot of textual data, it may not convert well into a tabular format such as Excel. Standard Sections : these are described in more detail below Custom Sections : these are described in more detail below","title":"Terminology"},{"location":"Reporting/Custom-Report-Tutorial/#types-of-report-section","text":"There are two types of report section that you can use in your report: A standard section basically uses an existing pre-defined query that returns back some structured XML data from Spira. For example the 'Project Overview' section will include the project name, description and other meta-data and the 'Requirements Summary' section will include an XML representation of all the requirements in the project together with any child data nested (e.g. all of tasks that belong to a requirement or the list of comments, etc.). A key aspect of a standard section is that the data itself is not customizable, but you can change the XML Template (XSLT) that is used to extract the data and convert it into a viewable form. So you have the ability to use XSLT to transform the data. You also allow the user who runs the report to use the standard set of filters on the data (e.g. return only requirements in release 1.0 or test cases that are priority 1,2,3) On the other hand, a custom section , lets you use a custom database query using the Microsoft Entity SQL (ESQL) language to query the different database view in the system join records, aggregate data to generate a completely custom table of data that you can then transform using an XML template (XSLT) to display it in a specific form (e.g. a table of data, a simple list, etc.). So you have the ability to two two tools: ESQL and XSLT to generate the report. The advantage over the standard section is that you are not limited to the queries that we have already defined in the system, but a custom section does not provide filter options for the end user. A report you create can have a mixture of the two sections, for example you could start the report with the standard project name and description and follow that with a custom section that displays a table of custom data (e.g. a risk cube or other table of data).","title":"Types of Report Section"},{"location":"Reporting/Custom-Report-Tutorial/#how-to-create-and-edit-a-custom-report","text":"In this tutorial you will learn how to: Clone a built-in standard report Use the \"Standard Section\" XML editor to make some changes to the XSLT template to hide some columns and add a new calculated column.","title":"How to Create and Edit a Custom Report"},{"location":"Reporting/Custom-Report-Tutorial/#clone-a-standard-report","text":"The first thing we need to do is make a copy of one of the standard reports s that we can change it. For your safety, Spira will not let you modify the original copy of the report. To create a copy: Go to Administration > System Administration > Reporting > Edit Reports. Click Clone next to the report you want to clone. In this example, we are going to make a copy of the \"Test Case Summary Report\":","title":"Clone a Standard Report"},{"location":"Reporting/Custom-Report-Tutorial/#view-the-new-report","text":"Once you have cloned the report, click on the 'Edit' link for this report and you will now be taken to the report editing page: When editing a report, you can change the following fields: Name : the name of the report is simply how it will be listed in the main Reports section of the application Description : this is the description of what the report is for. It will not be displayed in the report itself, but will be displayed as a tooltip in the Reports section of Spira Header : This is a rich text box that you can enter formatted text into. This will appear at the top of the report above any of the different content sections. You can embed images and include tables, lists or other stylistic elements Footer : This is a rich text box that you can enter formatted text into. This will appear at the bottom of the report after all of the different content sections. You can embed images and include tables, lists or other stylistic elements Active : This simply marks whether this report is ready to be used (active) or not. Formats : All of the Spira reports are generated first into HTML and then converted into one of the other formats. This section lets you choose which formats your report will be available in. Note that if your record has a lot of textual data, it may not convert well into a tabular format such as Excel. For this example, we will edit the second Standard Section of the \"Test Case Summary Report\" clone. This report is a table-based layout. We will: remove a couple of columns that we don't need add a new calculated column","title":"View The New Report"},{"location":"Reporting/Custom-Report-Tutorial/#explore-the-xml-template","text":"Under the list of 'Standard Sections', click the Customize button next to the 'Test Case List' section. This will show the edit dialog box for this section of the report: Here, you can edit the following parts of the report section: Name : this is the name of the standard section you want to use in the report. You can choose a different standard section, but you cannot edit the name itself. Description : this is the description of what the section is designed to do, this is read only and changes if you select a different section name from the dropdown above. Header : This is a rich text box that you can enter formatted text into. This will appear at the top of the section before any of the dynamic content. You can embed images and include tables, lists or other stylistic elements Footer : This is a rich text box that you can enter formatted text into. This will appear at the bottom of the section after all of the dynamic content. You can embed images and include tables, lists or other stylistic elements Template : This contains the eXtensible StyLesheet Template (XSLT) that is used to transform the raw data coming from Spira into the desired presentation format. XSLT includes both HTML elements (e.g. a list or table) plus XSLT specific tags that select the data from Spira and present it in some way. This is used to generate the dynamic portion of the report section. We shall discuss this next. Feel free to edit the Header and Footer to make your section more readable, for example include a section heading or some introductory text. You might want to add a horizontal line (\\ ) to the footer to mark the end the report section. The full contents of the Template section looks like the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 <?xml version=\"1.0\" encoding=\"utf-8\"?> <xsl:stylesheet version= \"1.0\" xmlns:xsl= \"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl= \"urn:schemas-microsoft-com:xslt\" exclude-result-prefixes= \"msxsl\" > <xsl:template match= \"/TestCaseData\" > <table class= \"DataGrid\" style= \"width:100%\" > <tr> <th> Test # </th> <th> Name </th> <th> Description </th> <th> Priority </th> <xsl:if test= \"TestCase/TestSteps\" > <th> Test Step </th> <th> Test Step Description </th> <th> Test Step Expected Result </th> <th> Test Step Sample Data </th> </xsl:if> <th> Status </th> <th> Author </th> <th> Owner </th> <th> Automation Engine </th> <th> Est. Duration </th> <th> Created On </th> <th> Last Modified </th> <th> Last Executed </th> <xsl:for-each select= \"TestCase[1]/CustomProperties/CustomProperty\" > <th> <xsl:value-of select= \"Alias\" /> </th> </xsl:for-each> </tr> <xsl:for-each select= \"TestCase\" > <tr> <td> <xsl:value-of select= \"TestCaseId\" /> </td> <td> <xsl:attribute name= \"style\" > padding-left: <xsl:value-of select= \"string-length(IndentLevel)*2\" /> px; </xsl:attribute> <if test= \"FolderYn='Y'\" > <b><xsl:value-of select= \"Name\" /></b> </if> <if test= \"FolderYn='N'\" > <xsl:value-of select= \"Name\" /> </if> </td> <td> <xsl:value-of select= \"Description\" disable-output-escaping= \"yes\" /> </td> <td> <xsl:value-of select= \"TestCasePriorityName\" /> </td> <if test= \"TestSteps\" > <td></td> <td></td> <td></td> <td></td> </if> <td> <xsl:value-of select= \"ExecutionStatusName\" /> </td> <td> <xsl:value-of select= \"AuthorName\" /> </td> <td> <xsl:value-of select= \"OwnerName\" /> </td> <td> <xsl:value-of select= \"AutomationEngineName\" /> </td> <td class= \"Timespan\" > <xsl:value-of select= \"EstimatedDuration\" /> </td> <td class= \"Date\" > <xsl:call-template name= \"format-date\" > <xsl:with-param name= \"datetime\" select= \"CreationDate\" /> < \\xsl:call-template> </td> <td class= \"Date\" > <xsl:call-template name= \"format-date\" > <xsl:with-param name= \"datetime\" select= \"LastUpdateDate\" /> < \\xsl:call-template> </td> <td class= \"Date\" > <xsl:call-template name= \"format-date\" > <xsl:with-param name= \"datetime\" select= \"ExecutionDate\" /> < \\xsl:call-template> </td> <xsl:for-each select= \"CustomProperties/CustomProperty\" > <td> <xsl:value-of select= \"Value\" /> </td> </xsl:for-each> </tr> <xsl:for-each select= \"TestSteps/TestStep\" > <tr> <td></td> <td></td> <td></td> <td></td> <td> <xsl:value-of select= \"position()\" /> </td> <td> <xsl:value-of select= \"Description\" disable-output-escaping= \"yes\" /> <xsl:value-of select= \"' '\" /> <xsl:value-of select= \"LinkedTestCaseName\" /> </td> <td> <xsl:value-of select= \"ExpectedResult\" disable-output-escaping= \"yes\" /> </td> <td> <xsl:value-of select= \"SampleData\" disable-output-escaping= \"yes\" /> </td> <td> <xsl:value-of select= \"ExecutionStatusName\" /> </td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> </xsl:for-each> </xsl:for-each> </table> </xsl:template> <xsl:template name= \"format-date\" > <xsl:param name= \"datetime\" /> <xsl:variable name= \"date\" select= \"substring-before($datetime, 'T')\" /> <xsl:variable name= \"year\" select= \"substring-before($date, '-')\" /> <xsl:variable name= \"month\" select= \"substring-before(substring-after($date, '-'), '-')\" /> <xsl:variable name= \"day\" select= \"substring-after(substring-after($date, '-'), '-')\" /> <xsl:variable name= \"time\" select= \"substring-before(substring-after($datetime, 'T'), '.')\" /> <xsl:variable name= \"monthname\" > <xsl:choose> <xsl:when test= \"$month='01'\" > <xsl:value-of select= \"'Jan'\" /> </xsl:when> <xsl:when test= \"$month='02'\" > <xsl:value-of select= \"'Feb'\" /> </xsl:when> <xsl:when test= \"$month='03'\" > <xsl:value-of select= \"'Mar'\" /> </xsl:when> <xsl:when test= \"$month='04'\" > <xsl:value-of select= \"'Apr'\" /> </xsl:when> <xsl:when test= \"$month='05'\" > <xsl:value-of select= \"'May'\" /> </xsl:when> <xsl:when test= \"$month='06'\" > <xsl:value-of select= \"'Jun'\" /> </xsl:when> <xsl:when test= \"$month='07'\" > <xsl:value-of select= \"'Jul'\" /> </xsl:when> <xsl:when test= \"$month='08'\" > <xsl:value-of select= \"'Aug'\" /> </xsl:when> <xsl:when test= \"$month='09'\" > <xsl:value-of select= \"'Sep'\" /> </xsl:when> <xsl:when test= \"$month='10'\" > <xsl:value-of select= \"'Oct'\" /> </xsl:when> <xsl:when test= \"$month='11'\" > <xsl:value-of select= \"'Nov'\" /> </xsl:when> <xsl:when test= \"$month='12'\" > <xsl:value-of select= \"'Dec'\" /> </xsl:when> <xsl:otherwise> <xsl:value-of select= \"''\" /> </xsl:otherwise> </xsl:choose> <xsl:variable> <xsl:value-of select= \"concat($day, '-' ,$monthname, '-', $year , ' ', $time)\" /> </xsl:template> </xsl:stlyesheet> This is the underlying template that reads the data in Spira and turns it into a simple HTML table containing all of the columns and rows to be reported on. As you can see, it includes the HTML elements for the table: 1 <table class= \"DataGrid\" style= \"width:100%\" > The template also includes XSLT selectors for looping through all of the test cases in the Spira product: 1 <xsl:for-each select= \"TestCase\" > Before we can successfully modify the report, we need to understand what data is being returned by Spira.","title":"Explore the XML Template"},{"location":"Reporting/Custom-Report-Tutorial/#viewing-the-data-available-for-reporting","text":"To see the data that is available for reporting, you need to open up another browser tab and then go to the Reports section of Spira: Now click on the 'Test Case Summary' report from the left-hand navigation. This displays the Report Configuration page: Choose the 'XML' output format for the report. Leave all of the other filters alone and uncheck the 'Test Steps' report element. Click the Create Report button Spira will generate the report in \"raw XML format\": 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 <Report> <Title> Test Case Summary Report </Title> <ProjectData> <Project> <ArtifactPrefix> PR </ArtifactPrefix> <ArtifactType> Project </ArtifactType> <ArtifactToken> PR-1 </ArtifactToken> <ArtifactId> 1 </ArtifactId> <ProjectId> 1 </ProjectId> <ProjectGroupId> 2 </ProjectGroupId> <Name> Library Information System </Name> <Description> Sample application that allows users to manage books, authors and lending records for a typical branch library </Description> <CreationDate> 2005-11-30T19:00:00 </CreationDate> <Website> www.libraryinformationsystem.org </Website> <IsActive> True </IsActive> </Project> </ProjectData> <TestCaseData> <TestCase> <TestCaseId> 1 </TestCaseId> <ProjectId> 1 </ProjectId> <ExecutionStatusId> 4 </ExecutionStatusId> <AuthorId> 2 </AuthorId> <OwnerId> 2 </OwnerId> <TestCasePriorityId /> <AutomationEngineId /> <AutomationAttachmentId /> <Name> l Tests </Name> <Description /> <IndentLevel> A </IndentLevel> <ExecutionDate> 3-11-30T19:00:00 </ExecutionDate> <CreationDate> 3-11-30T19:00:00 </CreationDate> <LastUpdateDate> 3-11-30T19:00:00 </LastUpdateDate> <ConcurrencyDate> 3-11-30T19:00:00 </ConcurrencyDate> <EstimatedDuration /> <VisibleYn> Y </VisibleYn> <FolderYn> Y </FolderYn> <ExpandedYn> Y </ExpandedYn> <ActiveYn> Y </ActiveYn> <AttachmentsYn> N </AttachmentsYn> <TestStepsYn> N </TestStepsYn> <FolderCountPassed> 1 </FolderCountPassed> <FolderCountFailed> 3 </FolderCountFailed> <FolderCountCaution> 1 </FolderCountCaution> <FolderCountBlocked> 1 </FolderCountBlocked> <FolderCountNotRun> 0 </FolderCountNotRun> <FolderCountNotApplicable> 0 </FolderCountNotApplicable> <ExecutionStatusName> N/A </ExecutionStatusName> <AuthorName> Fred Bloggs </AuthorName> <OwnerName> Fred Bloggs </OwnerName> <ProjectName /> <TestCasePriorityName /> <AutomationEngineName /> <Custom_01 /> <Custom_02 /> ... <Custom_30 /> <IsDeleted> False </IsDeleted> <CustomProperties> <CustomProperty> <Alias> URL </Alias> <Name> Custom_01 </Name> <Type> Text </Type> </CustomProperty> <CustomProperty> <Alias> Test Type </Alias> <Name> Custom_02 </Name> <Type> List </Type> </CustomProperty> </CustomProperties> <Discussions /> </TestCase> ... <TestCaseData> </TestCaseData> </TestCaseData> </Report> This fragment of the report lets you see all of the data that is available for displaying in your report. You can navigate this hierarchy of information using the special XSLT selection language called XPATH. This lets you query the data returned from Spira to retrieve specific data elements that can be displayed in the report. Before we start modifying the report XSLT to use this data, we first need to get a basic understanding of XPATH itself.","title":"Viewing the Data Available for Reporting"},{"location":"Reporting/Custom-Report-Tutorial/#understanding-xpath","text":"(this section includes material from the website: http://www.whoishostingthis.com/resources/xslt/ ) XPath is used to navigate through elements and attributes in an XML document. XPath uses path expressions to select nodes or node-sets in an XML document. These path expressions look very much like the expressions you see when you work with a traditional computer file system. In XPath, there are seven kinds of nodes: element attribute text namespace processing-instruction comment document nodes XML documents are treated as trees of nodes. The topmost element of the tree is called the root element. In the examples that follow we shall be using the following simple XML document: 1 2 3 4 5 6 7 8 9 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <bookstore> <book> <title lang= \"en\" > Harry Potter </title> <author> J K. Rowling </author> <year> 2005 </year> <price> 29.99 </price> </book> </bookstore> This document contains the following node types: root element : \\<bookstore> element node : \\<book>, \\<title>, \\<author>, etc. attribute node : lang=\\\"en\\\"","title":"Understanding XPATH"},{"location":"Reporting/Custom-Report-Tutorial/#selecting-nodes","text":"XPath uses path expressions to select nodes in an XML document. The node is selected by following a path or steps. The most useful path expressions are listed below: Expression Description nodename Selects all nodes with the name \\\" nodename \\\" / Selects from the root node // Selects nodes in the document from the current node that match the selection no matter where they are . Selects the current node .. Selects the parent of the current node @ Selects attributes In the table below we have listed some path expressions and the result of the expressions if used on our sample document: Path Expression Result bookstore Selects all nodes with the name \\\"bookstore\\\" /bookstore Selects the root element bookstore Note: If the path starts with a slash ( / ) it always represents an absolute path to an element! bookstore/book Selects all book elements that are children of bookstore //book Selects all book elements no matter where they are in the document bookstore//book Selects all book elements that are descendant of the bookstore element, no matter where they are under the bookstore element //\\@lang Selects all attributes that are named lang","title":"Selecting Nodes"},{"location":"Reporting/Custom-Report-Tutorial/#predicates","text":"Predicates are used to find a specific node or a node that contains a specific value. Predicates are always embedded in square brackets. In the table below we have listed some path expressions with predicates and the result of the expressions: Path Expression Result /bookstore/book[1] Selects the first book element that is the child of the bookstore element /bookstore/book[last()] Selects the last book element that is the child of the bookstore element /bookstore/book[last()-1] Selects the last but one book element that is the child of the bookstore element /bookstore/book[position()\\<3] Selects the first two book elements that are children of the bookstore element //title[\\@lang] Selects all the title elements that have an attribute named lang //title[\\@lang='en'] Selects all the title elements that have a \\\"lang\\\" attribute with a value of \\\"en\\\" /bookstore/book[price>35.00] Selects all the book elements of the bookstore element that have a price element with a value greater than 35.00 /bookstore/book[price>35.00]/title Selects all the title elements of the book elements of the bookstore element that have a price element with a value greater than 35.00","title":"Predicates"},{"location":"Reporting/Custom-Report-Tutorial/#selecting-unknown-nodes","text":"XPath wildcards can be used to select unknown XML nodes: Wildcard Description * Matches any element node @* Matches any attribute node node() Matches any node of any kind In the table below we have listed some path expressions and the result of the expressions: Path Expression Result /bookstore/* Selects all the child element nodes of the bookstore element //* Selects all elements in the document //title[@*] Selects all title elements which have at least one attribute of any kind","title":"Selecting Unknown Nodes"},{"location":"Reporting/Custom-Report-Tutorial/#selecting-several-paths","text":"By using the | operator in an XPath expression you can select several paths. In the table below we have listed some path expressions and the result of the expressions: Path Expression Result //book/title | //book/price Selects all the title AND price elements of all book elements //title | //price Selects all the title AND price elements in the document /bookstore/book/title | //price Selects all the title elements of the book element of the bookstore element AND all the price elements in the document Now that we understand the basics of XPath we can use that knowledge to modify our XSLT template to change the data that is included in our report.","title":"Selecting Several Paths"},{"location":"Reporting/Custom-Report-Tutorial/#modifying-the-report-xml-template","text":"In the standard report it will display a list of test cases with various standard fields plus all of the custom properties (it uses an XSLT for-each loop to dynamically add all of the custom properties). For our example, we want to do the following: Remove the list of test steps from the report Remove the creation date Add a new column that displays for folders the % of tests that passed and the % of test cases that failed","title":"Modifying the Report XML Template"},{"location":"Reporting/Custom-Report-Tutorial/#removing-the-test-steps","text":"To remove the test steps, delete the following sections from the XSLT template: 1 2 3 4 5 6 <xsl:if test= \\\"TestCase/TestSteps\\\" > <th> Test Step </th> <th> Test Step Description </th> <th> Test Step Expected Result </th> <th> Test Step Sample Data </th> </xsl:if> and 1 2 3 4 5 6 <xsl:if test= \"TestSteps\" > <td><td> <td></td> <td></td> <td></td> </xsl:if> This removes the four columns related to test steps.","title":"Removing the Test Steps"},{"location":"Reporting/Custom-Report-Tutorial/#removing-the-creation-date","text":"To remove the creation date, delete the header cell and body cell: 1 <th> Created On </th> and 1 2 3 4 5 <td class= \"Date\" > \\ <xsl:call-template name= \"format-date\" > <xsl:with-param name= \"datetime\" select= \"CreationDate\" /> </xsl:call-template> \\ </td>","title":"Removing the Creation Date"},{"location":"Reporting/Custom-Report-Tutorial/#adding-a-calculated-column","text":"Now to add the cell headers, we just need to add two \\ tags to the header of the table. This is done by adding: 1 2 <th> % Passed </th> <th> % Failed </th> Now to actually get the data, we need to use the following XPATH queries: % Passed : FolderCountPassed div (FolderCountPassed + FolderCountFailed + FolderCountCaution + FolderCountNotRun + FolderCountBlocked)* 100 % Failed : FolderCountFailed div (FolderCountPassed + FolderCountFailed + FolderCountCaution + FolderCountNotRun + FolderCountBlocked) * 100 Note: the mathematical operators for XPATH are: + (add), * (multiply), - (subtract), and div (division). The slash is not used for division because it is already used as a node path separator. So the section we need to add to the table body in the report would be: 1 2 3 4 5 6 7 8 <td> <xsl:value-of select= \"FolderCountPassed div (FolderCountPassed + FolderCountFailed + FolderCountCaution + FolderCountNotRun + FolderCountBlocked) * 100\" /> % </td> <td> <xsl:value-of select= \"FolderCountFailed div (FolderCountPassed + FolderCountFailed + FolderCountCaution + FolderCountNotRun + FolderCountBlocked) * 100\" /> % </td> Now that have make the changes, the complete XSLT template will bexml version=\"1.0\" encoding=\"utf-8\"?> <xsl:stylesheet version= \"1.0\" xmlns:xsl= \"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl= \"urn:schemas-microsoft-com:xslt\" exclude-result-prefixes= \"msxsl\" > <xsl:template match= \"/TestCaseData\" > <table class= \"DataGrid\" style= \"width:100%\" > <tr> <th> Test # </th> <th> Name </th> <th> Description </th> <th> Priority </th> <th> Status </th> <th> Author </th> <th> Owner </th> <th> Automation Engine </th> <th> Est. Duration </th> <th> % Passed </th> <th> % Failed </th> <th> Last Modified </th> <th> Last Executed </th> <xsl:for-each select= \"TestCase[1]/CustomProperties/CustomProperty\" > <th> <xsl:value-of select= \"Alias\" /> </th> </xsl:for-each> </tr> <xsl:for-each select= \"TestCase\" > <tr> <td> <xsl:value-of select= \"TestCaseId\" /> </td> <td> <xsl:attribute name= \"style\" > padding-left: <xsl:value-of select= \"string-length(IndentLevel)*2\" /> px; </xsl:attribute> <if test= \"FolderYn='Y'\" > <b><xsl:value-of select= \"Name\" /></b> </if> <if test= \"FolderYn='N'\" > <xsl:value-of select= \"Name\" /> </if> </td> <td> <xsl:value-of select= \"Description\" disable-output-escaping= \"yes\" /> </td> <td> <xsl:value-of select= \"TestCasePriorityName\" /> </td> <td> <xsl:value-of select= \"ExecutionStatusName\" /> </td> <td> <xsl:value-of select= \"AuthorName\" /> </td> <td> <xsl:value-of select= \"OwnerName\" /> </td> <td> <xsl:value-of select= \"AutomationEngineName\" /> </td> <td class= \"Timespan\" > <xsl:value-of select= \"EstimatedDuration\" /> </td> <td> <xsl:value-of select= \"FolderCountPassed div (FolderCountPassed + FolderCountFailed + FolderCountCaution + FolderCountNotRun + FolderCountBlocked) * 100\" /> % </td> <td> <xsl:value-of select= \"FolderCountFailed div (FolderCountPassed + FolderCountFailed + FolderCountCaution + FolderCountNotRun + FolderCountBlocked) * 100\" /> % </td> <td class= \"Date\" > <xsl:call-template name= \"format-date\" > <xsl:with-param name= \"datetime\" select= \"LastUpdateDate\" /> </xsl:call-template> </td> <td class= \"Date\" > <xsl:call-template name= \"format-date\" > <xsl:with-param name= \"datetime\" select= \"ExecutionDate\" /> </xsl:call-template> </td> <xsl:for-each select= \"CustomProperties/CustomProperty\" > <td> <xsl:value-of select= \"Value\" /> </td> </xsl:for-each> </tr> <xsl:for-each select= \"TestSteps/TestStep\" > <tr> <td></td> <td></td> <td></td> <td></td> <td> <xsl:value-of select= \"position()\" /> </td> <td> <xsl:value-of select= \"Description\" disable-output-escaping= \"yes\" /> <xsl:value-of select= \"' '\" /> <xsl:value-of select= \"LinkedTestCaseName\" /> </td> <td> <xsl:value-of select= \"ExpectedResult\" disable-output-escaping= \"yes\" /> </td> <td> <xsl:value-of select= \"SampleData\" disable-output-escaping= \"yes\" /> </td> <td> <xsl:value-of select= \"ExecutionStatusName\" /> </td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> </xsl:for-each> </xsl:for-each> </table> </xsl:template> <xsl:template name= \"format-date\" > <param name= \"datetime\" /> <xsl:variable name= \"date\" select= \"substring-before($datetime, 'T')\" /> <xsl:variable name= \"year\" select= \"substring-before($date, '-')\" /> <xsl:variable name= \"month\" select= \"substring-before(substring-after($date, '-'), '-')\" /> <xsl:variable name= \"day\" select= \"substring-after(substring-after($date, '-'), '-')\" /> <xsl:variable name= \"time\" select= \"substring-before(substring-after($datetime, 'T'), '.')\" /> <xsl:variable name= \"monthname\" > <xsl:choose> <xsl:when test= \"$month='01'\" > <xsl:value-of select= \"'Jan'\" /> </xsl:when> <xsl:when test= \"$month='02'\" > <xsl:value-of select= \"'Feb'\" /> </xsl:when> <xsl:when test= \"$month='03'\" > <xsl:value-of select= \"'Mar'\" /> </xsl:when> <xsl:when test= \"$month='04'\" > <xsl:value-of select= \"'Apr'\" /> </xsl:when> <xsl:when test= \"$month='05'\" > <xsl:value-of select= \"'May'\" /> </xsl:when> <xsl:when test= \"$month='06'\" > <xsl:value-of select= \"'Jun'\" /> </xsl:when> <xsl:when test= \"$month='07'\" > <xsl:value-of select= \"'Jul'\" /> </xsl:when> <xsl:when test= \"$month='08'\" > <xsl:value-of select= \"'Aug'\" /> </xsl:when> <xsl:when test= \"$month='09'\" > <xsl:value-of select= \"'Sep'\" /> </xsl:when> <xsl:when test= \"$month='10'\" > <xsl:value-of select= \"'Oct'\" /> </xsl:when> <xsl:when test= \"$month='11'\" > <xsl:value-of select= \"'Nov'\" /> </xsl:when> <xsl:when test= \"$month='12'\" > <xsl:value-of select= \"'Dec'\" /> </xsl:when> <xsl:otherwise> <xsl:value-of select= \"''\" /> </xsl:otherwise> </xsl:choose> </xsl:variable> <xsl:value-of select= \"concat($day, '-' ,$monthname, '-', $year , ' ', $time)\" /> </xsl:template> </xsl:stylesheet> Click on the Save button to save your section and then the main Save button to save the report. You can now run the report through the main reports center and get something like: Test # Name Description Priority Status Author Owner Automation Engine Est. Duration % Passed % Failed Last Modified Last Executed 1 Functional Tests N/A Fred Bloggs Fred Bloggs 16% 50% 30-Nov-2003 30-Nov-2003","title":"Adding a Calculated Column"},{"location":"Reporting/Custom-Report-Tutorial/#conclusion","text":"Now we have learned how to modify one of the standard reports and use XSLT, XPATH and a 'standard section' to reformat how the data appears. You can use your knowledge of XPATH and XSLT to make more sophisticated changes. For example you could delete the entire XSLT default template and create a new template that displays a simple list of test cases, or a table of just test case names and IDs.","title":"Conclusion"},{"location":"Reporting/Custom-Report-Tutorial/#how-to-make-custom-queries","text":"In this article we shall be creating a whole new custom report that has a custom header, footer and a custom section that displays data based on a custom ESQL (Entity SQL) query. This is useful in cases where you have some special metrics that you want to be able publish in a report.","title":"How to Make Custom Queries"},{"location":"Reporting/Custom-Report-Tutorial/#create-the-new-report","text":"First, go to Administration > System Administration > Reporting > Edit Reports. and click on the Add New Report option. This will bring up the create new report page: Enter the Name and Description of your new report (the description is optional and is used to describe the purpose of the report, the text is not displayed in the report itself). For example, we will enter: Name = Test Case Summary Metrics Report Description = This report shows a table containing the summary number of passes and fails per release in our project Now enter in some text for the header and footer of the report (these will be displayed at the top and bottom of the entire report): Header = This report displays the number of passed and failed test cases per release in the project: Footer = \u00a9 Copyright MyCompany 2020, All Rights Reserved For our report, we'll choose the following formats and category: Formats = MS-Word, PDF and HTML Category = Test Case Reports The format choice is up to you, however the category is important because: it determines which category the report will appear in the Rreporting home page it will determine the permissions that the user needs to have to run your report. Before you add a custom section, let's include the name of the project and its description into the top of the report, underneath the header. To do that, click on the Add New Standard Section button and that will display the Standard Section dialog box: On this page, choose the 'Product Overview' section from the dropdown list and then click 'Create Default Template' to display the standard XSLT template used for this report. This will populate the Template field with the standard Project Overview XSLT template. As described above, you can modify this XSLT to adjust how the Project Overview is displayed. Click on the Save button. Now we need to add our new custom section that contains our ESQL query. Click on the Add New Custom Section button and the new custom section dialog is displayed: In this dialog box, we need to enter the name of the new section, a description, header, footer and then our ESQL query that is used to retrieve the data we need. For this example we'll enter: Name : Test Case Counts By Release Description : (leave this blank) Header : Enter in the text 'Test Summary by Release' and make it bold and underlined. Footer : Insert a simple horizontal line Now in the query section, choose 'Releases' as the base query to use. This will insert the following query: select value R from SpiraTestEntities.R_Releases as R where R.PROJECT_ID = ${ProjectId} Click on the Preview Results button to display the table of all the release fields. From this we can see what we want to include in the query: Now change the query to only include the data that we want: 1 select R . NAME , R . VERSION \\ _NUMBER , R . COUNT \\ _PASSED , R . COUNT \\ _FAILED , R . COUNT \\ _NOT \\ _RUN , R . COUNT \\ _BLOCKED , R . COUNT \\ _CAUTION from SpiraTestEntities . R \\ _Releases as R where R . PROJECT \\ _ID = \\${ ProjectId } This will display the release name, and the test case counts for the current project. It will also include the deleted releases, so we need to add on a clause to the WHERE part of the query to make sure they are excluded: 1 2 select R . NAME , R . VERSION \\ _NUMBER , R . COUNT \\ _PASSED , R . COUNT \\ _FAILED , R . COUNT \\ _NOT \\ _RUN , R . COUNT \\ _BLOCKED , R . COUNT \\ _CAUTION from SpiraTestEntities . R \\ _Releases as R where R . PROJECT \\ _ID = \\${ ProjectId }\\ and R . IS \\ _DELETED = False Click on the Preview Results button again to display the data we want: NAME VERSION_NUMBER COUNT_PASSED COUNT_FAILED COUNT_NOT_RUN COUNT_BLOCKED COUNT_CAUTION Library System Release 1 1.0.0.0 0 2 4 0 1 Library System Release 1 SP1 1.0.1.0 3 0 3 1 0 Library System Release 1 SP2 1.0.2.0 2 0 5 0 0 To change the names of the columns to look a bit nicer, we can change the generated template. To do this, first click Create Default Template to generate the standard XSLT template for this query: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <?xml version=\"1.0\" encoding=\"utf-8\"?> <xsl:stylesheet version= \"1.0\" xmlns:xsl= \"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl= \"urn:schemas-microsoft-com:xslt\" exclude-result-prefixes= \"msxsl\" > <xsl:template match= \"/RESULTS\" > <table class= \"DataGrid\" > <tr> <th> NAME </th> <th> VERSION_NUMBER </th> <th> COUNT_PASSED </th> <th> COUNT_FAILED </th> <th> COUNT_NOT_RUN </th> <th> COUNT_BLOCKED </th> <th> COUNT_CAUTION </th> </tr> <xsl:for-each select= \"ROW\" > <tr> <td><xsl:value-of select= \"NAME\" /></td> <td><xsl:value-of select= \"VERSION_NUMBER\" /></td> <td><xsl:value-of select= \"COUNT_PASSED\" /></td> <td><xsl:value-of select= \"COUNT_FAILED\" /></td> <td><xsl:value-of select= \"COUNT_NOT_RUN\" /></td> <td><xsl:value-of select= \"COUNT_BLOCKED\" /></td> <td><xsl:value-of select= \"COUNT_CAUTION\" /></td> </tr> </xsl:for-each> </table> </xsl:template> </xsl:stylesheet> To change the column headings to make them look better, we can change the template to look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <?xml version=\"1.0\" encoding=\"utf-8\"?> <xsl:stylesheet version= \"1.0\" xmlns:xsl= \"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl= \"urn:schemas-microsoft-com:xslt\" exclude-result-prefixes= \"msxsl\" > <xsl:template match= \"/RESULTS\" > <table class= \"DataGrid\" > <tr> <th> Release </th> <th> Version </th> <th> # Passed </th> <th> # Failed </th> <th> # Not Run </th> <th> # Blocked </th> <th> # Caution </th> </tr> <xsl:for-each select= \"ROW\" > <tr> <td><xsl:value-of select= \"NAME\" /></td> <td><xsl:value-of select= \"VERSION_NUMBER\" /></td> <td><xsl:value-of select= \"COUNT_PASSED\" /></td> <td><xsl:value-of select= \"COUNT_FAILED\" /></td> <td><xsl:value-of select= \"COUNT_NOT_RUN\" /></td> <td><xsl:value-of select= \"COUNT_BLOCKED\" /></td> <td><xsl:value-of select= \"COUNT_CAUTION\" /></td> </tr> </xsl:for-each> </table> </xsl:template> </xsl:stylesheet> Once you are happy with the result, click on the Save button on the custom section and then the Save button on the report editing screen itself. You can now run the report through the main reports center and get something like: Release Version # Passed # Failed # Not Run # Blocked # Caution Library System Release 1 1.0.0.0 0 2 4 0 1 Library System Release 1 SP1 1.0.1.0 3 0 3 1 0 Library System Release 1 SP2 1.0.2.0 2 0 5 0 0","title":"Create the New Report"},{"location":"Reporting/Custom-Report-Tutorial/#conclusion_1","text":"Now we have learned how to create a custom report and a use a combination of standard sections and custom sections to product a report that includes data specific to your business. You can use your knowledge of SQL and XSLT to make more sophisticated changes. For example, you could join multiple tables and use SQL aggregation functions to generate summary reports from other parts of the system.","title":"Conclusion"},{"location":"Requirements-Management-Integration/Importing-From-DOORS/","text":"Importing From DOORS This section outlines how to use the included Importer for importing folders, projects, modules and requirements from an IBM Rational DOORS database into a project in SpiraTest\u00ae, SpiraPlan\u00ae or SpiraTeam\u00ae (hereafter referred to as SpiraTeam). Installing the Importer This section outlines how to install the importer onto a workstation so that you can then import requirements from DOORS into SpiraTeam. It assumes that you already have a working installation of SpiraTeam v3.0 or later and a working installation of DOORS 9.0 or later. You can download the Importer from the Inflectra's website under \"Downloads and Add-Ons\". When downloaded, double-click the MSI file. Follow the instructions in the MSI file to install the importer. Importing from a DOORS Database Now that you have installed the integration adapter, you can launch it at any time by going to Start > Programs > SpiraTest > Tools > IBM Rational DOORS Adapter. This will launch the import application itself. You will be shown an introduction screen. Click 'Next' to get to the second screen: You need to click on the [Launch DOORS] button to connect to the locally installed DOORS client. Then you can enter in your DOORS login/password to access the system: Once you have successfully authenticated with DOORS, you have the option of importing ALL the requirements in the DOORS database into a SpiraTeam project or selecting just a specific item (folder, project or module) in the DOORS hierarchy. To select a specific item, click on the \"Populate Item List\" button and choose the item from the dropdown list. Then click Next to continue to the screen where you enter your SpiraTeam server and project information: On this screen, you need to enter the SpiraTeam Server URL, the username and password you use to log onto the system, then click the Get Projects button. The program will connect to the server and get a list of all available projects. Select the project you want to import into under the Project & Requirement section. The Root Requirement box is for specifying a base requirement to load all the DOORS elements into. If left blank, then the importer will create a single placeholder requirement that all of the DOORS folders, projects, modules and requirements will be nested under. If you have a requirement already in SpiraTeam, and want the DOORS items to appear inside it, then you need to enter the requirement number into the Root Requirement text box. For example, if you have a requirement named \"DOORS Requirements\" with a number of RQ1920, then put 1920 into the Root Requirement field and run the import. When import is finished, the SpiraTeam requirements will be nested underneath. Note: At this time, Link Modules are not imported from DOORS databases. Once the fields have been populated, click Next to get to the summary screen. The summary screen tells you what will actions will be performed, and once you have verified the information, click the Import button to start the import: Anything flagged with a red failed, green means that they succeeded. Once finished, click Finish to get to the last page of the wizard: If the Minimize to System Tray option is selected, when you click Finish or exit the from the application, it will minimize to the system tray. Once in the system tray, you can right-click on the icon and the it will give you the option to either re-import from the same project or select another project for a fresh import. If the option is not selected, the program will exit, and you can re-launch the importer to import from the same or another DOORS database. Using the System Tray Shortcut Menu When the application is minimized to the system tray, there are several shortcuts available: Double-Clicking the icon will bring the importer back to the first screen, allowing you to import another DOORS database. Right-clicking will give a shortcut menu with the following options: Exit -- Close the program entirely. Rerun Import -- Will provide you the screen to re-launch the last import you just ran. Show Window -- Same as double-clicking on the icon, will bring the wizard back to the first screen, allowing new input options to be set. DOORS & SpiraTeam Importing Notes At this time, only formal modules are imported into SpiraTeam from DOORS. The folders, projects and modules in DOORS become summary requirements in SpiraTeam and the actual requirements in each module are simply nested as child requirements in SpiraTeam. In addition, the following fields are brought over into SpiraTeam from DOORS according to the following mapping table: DOORS Field SpiraTeam Field Heading Name Short Text Description Long Text Description Number Name DOORS Object ID Custom Text Property TEXT_01 Using this adapter, you can manage the appropriate artifacts in IBM Rational DOORS and then periodically re-run the import application to update SpiraTeam. The application will remember that the project was already used for an initial load and will simply update the requirements as appropriate as well as add any additional ones added. Note that any changes to the requirement hierarchy are not reflected. This allows you to change the organization of the artifacts in SpiraTeam to make them easier to use without the changes being overwritten on the next import cycle. Finally, should you want to start again and re-import a project from scratch that has already been imported once before, you may do so by re-running the Importer, and entering in -1 as the Root Requirement . This will not delete requirements from SpiraTeam, only remove mappings, so the next time you run the importer on this file, all new requirements will be created. Note: This option is irreversible and should be performed with care.","title":"DOORS"},{"location":"Requirements-Management-Integration/Importing-From-DOORS/#importing-from-doors","text":"This section outlines how to use the included Importer for importing folders, projects, modules and requirements from an IBM Rational DOORS database into a project in SpiraTest\u00ae, SpiraPlan\u00ae or SpiraTeam\u00ae (hereafter referred to as SpiraTeam).","title":"Importing From DOORS"},{"location":"Requirements-Management-Integration/Importing-From-DOORS/#installing-the-importer","text":"This section outlines how to install the importer onto a workstation so that you can then import requirements from DOORS into SpiraTeam. It assumes that you already have a working installation of SpiraTeam v3.0 or later and a working installation of DOORS 9.0 or later. You can download the Importer from the Inflectra's website under \"Downloads and Add-Ons\". When downloaded, double-click the MSI file. Follow the instructions in the MSI file to install the importer.","title":"Installing the Importer"},{"location":"Requirements-Management-Integration/Importing-From-DOORS/#importing-from-a-doors-database","text":"Now that you have installed the integration adapter, you can launch it at any time by going to Start > Programs > SpiraTest > Tools > IBM Rational DOORS Adapter. This will launch the import application itself. You will be shown an introduction screen. Click 'Next' to get to the second screen: You need to click on the [Launch DOORS] button to connect to the locally installed DOORS client. Then you can enter in your DOORS login/password to access the system: Once you have successfully authenticated with DOORS, you have the option of importing ALL the requirements in the DOORS database into a SpiraTeam project or selecting just a specific item (folder, project or module) in the DOORS hierarchy. To select a specific item, click on the \"Populate Item List\" button and choose the item from the dropdown list. Then click Next to continue to the screen where you enter your SpiraTeam server and project information: On this screen, you need to enter the SpiraTeam Server URL, the username and password you use to log onto the system, then click the Get Projects button. The program will connect to the server and get a list of all available projects. Select the project you want to import into under the Project & Requirement section. The Root Requirement box is for specifying a base requirement to load all the DOORS elements into. If left blank, then the importer will create a single placeholder requirement that all of the DOORS folders, projects, modules and requirements will be nested under. If you have a requirement already in SpiraTeam, and want the DOORS items to appear inside it, then you need to enter the requirement number into the Root Requirement text box. For example, if you have a requirement named \"DOORS Requirements\" with a number of RQ1920, then put 1920 into the Root Requirement field and run the import. When import is finished, the SpiraTeam requirements will be nested underneath. Note: At this time, Link Modules are not imported from DOORS databases. Once the fields have been populated, click Next to get to the summary screen. The summary screen tells you what will actions will be performed, and once you have verified the information, click the Import button to start the import: Anything flagged with a red failed, green means that they succeeded. Once finished, click Finish to get to the last page of the wizard: If the Minimize to System Tray option is selected, when you click Finish or exit the from the application, it will minimize to the system tray. Once in the system tray, you can right-click on the icon and the it will give you the option to either re-import from the same project or select another project for a fresh import. If the option is not selected, the program will exit, and you can re-launch the importer to import from the same or another DOORS database.","title":"Importing from a DOORS Database"},{"location":"Requirements-Management-Integration/Importing-From-DOORS/#using-the-system-tray-shortcut-menu","text":"When the application is minimized to the system tray, there are several shortcuts available: Double-Clicking the icon will bring the importer back to the first screen, allowing you to import another DOORS database. Right-clicking will give a shortcut menu with the following options: Exit -- Close the program entirely. Rerun Import -- Will provide you the screen to re-launch the last import you just ran. Show Window -- Same as double-clicking on the icon, will bring the wizard back to the first screen, allowing new input options to be set.","title":"Using the System Tray Shortcut Menu"},{"location":"Requirements-Management-Integration/Importing-From-DOORS/#doors-spirateam-importing-notes","text":"At this time, only formal modules are imported into SpiraTeam from DOORS. The folders, projects and modules in DOORS become summary requirements in SpiraTeam and the actual requirements in each module are simply nested as child requirements in SpiraTeam. In addition, the following fields are brought over into SpiraTeam from DOORS according to the following mapping table: DOORS Field SpiraTeam Field Heading Name Short Text Description Long Text Description Number Name DOORS Object ID Custom Text Property TEXT_01 Using this adapter, you can manage the appropriate artifacts in IBM Rational DOORS and then periodically re-run the import application to update SpiraTeam. The application will remember that the project was already used for an initial load and will simply update the requirements as appropriate as well as add any additional ones added. Note that any changes to the requirement hierarchy are not reflected. This allows you to change the organization of the artifacts in SpiraTeam to make them easier to use without the changes being overwritten on the next import cycle. Finally, should you want to start again and re-import a project from scratch that has already been imported once before, you may do so by re-running the Importer, and entering in -1 as the Root Requirement . This will not delete requirements from SpiraTeam, only remove mappings, so the next time you run the importer on this file, all new requirements will be created. Note: This option is irreversible and should be performed with care.","title":"DOORS &amp; SpiraTeam Importing Notes"},{"location":"Requirements-Management-Integration/Importing-From-EnterpriseArchitect/","text":"Importing From EnterpriseArchitect This section outlines how to use the included Importer for importing Requirements, Features, and Screens from a Sparx Enterprise Architect (EA) project file into SpiraTeam. Installing the Importer This section outlines how to install the importer onto a desktop so that you can then import requirements and use cases from EA into SpiraTest. It assumes that you already have a working installation of SpiraTest v3.0 or later and a working installation of Enterprise Architect. Important: You must install the integration adapter on the same desktop that has the installed copy of Enterprise Architect . You can download the Importer from the Inflectra's website under \"Downloads and Add-Ons\". When downloaded, double-click the MSI file. Follow the instructions in the MSI file to install the importer. Importing from an EA Project File Now that you have installed the integration adapter, you can launch it at any time by going to Start > Programs > SpiraTeam > Tools > Enterprise Architect Importer. This will launch the import application itself. You will be shown an introduction screen. Click 'Next' to get to the second screen: Click the folder button ( ) to open the file open dialog. In this dialog, select the Enterprise Architect Project file (*.EAP) that you want to use for importing. If the file has access credentials required, enter the username and password needed to access the file. Once the file is selected, click Next to continue to the screen where you enter your SpiraTeam project information: If the file you selected in the previous step was already lined to a SpiraTeam project, that information will be automatically populated in the fields, and you can click Next to proceed. Otherwise, enter in the SpiraTeam Server URL, your username and password used to log onto the system with and click the Get Projects button. The program will connect to the server and get a list of all available projects. Select the project you want to import into under the Project & Requirement section. The Root Requirement box is for specifying a base requirement to load all the EA elements into. If left blank, then the root folders in the EAP's model will be root requirement folders in the SpiraTeam Project. For example, if your EAP file has a tree that looks like: Then the requirements imported into SpiraTeam will appear like: Note that the folder \"Non-Functional Requirements\" does not appear in the list. Folders that have no importable elements will not get imported into SpiraTeam. At this time, only \"Requirement\", \"Feature\", and \"Screen\" elements are imported. If you had a requirement already in SpiraTeam, and wanted the \"Requirements Model\" to appear in it, then enter the requirement number into the Root Requirement text box. For example, if I have a requirement named \"EA Requirements\" with a number of RQ1920, then put 1920 into the Root Requirement field and run the import. When import is finished, the SpiraTeam requirement tree will look like: Once the fields are entered, click Next to get to the summary screen. The summary screen tells you what will be done, and once it's reviewed, click the Import button to start importing: Anything flagged with a red failed, green means that they succeeded. Once finished, click Finish to get to the last page of the wizard: If the Minimize to System Tray option is selected, when you click Finish or exit the form, the application will minmiize to the system tray and give you some quick actions to re-import from the same file or select another file. Otherwise the program will exit, and you can re-launch the importer to import from the same or another EAP file. Using the System Tray Shortcut Menu When the application is minimized to the system tray, there are several shortcuts available: Double-Clicking the icon will bring the importer back to the first screen, allowing you to import another EAP file. Right-clicking will give a shortcut menu with the following options: Exit -- Close the program entirely. Rerun Import -- Will provide you the screen to re-launch the last import you just ran. Show Window -- Same as double-clicking on the icon, this will cause the wizard to appear back on the first screen, allowing new input options to be set. Enterprise Architect & SpiraTeam Importing Notes At this time, only elements that are Requirements, Features, or Screens are imported. All three types are imported into Requirements within SpiraTeam, and most fields are brought over into SpiraTeam from EA. Mapping for fields are as follows: Enterprise Architect Field SpiraTeam Field Short Description / Name Name Notes Description (with HTML) Priority Importance: EA Value : SpiraTeam Value High : High Medium : Medium Low : Low Status Status: EA Value : SpiraTeam Value Approved : Accepted Implemented: In Progress Validated : Completed Mandatory : Requested Proposed : Requested (None) : Requested Author (not transferred, always set to user who ran the import last) Release (not transferred) Owner (not transferred) Planned Effort (not transferred) Alias Custom Text Property #1 Element Type ('Requirement', 'Feature', 'Screen', etc) Custom Text Property #2 Phase Custom Text Property #3 Version Custom Text Property #4 Difficulty Custom Text Property #5 When a mapping is made, a Tagged Value is saved into the EAP file with the name of SPIRA::Mapping. The number of the value is the requirement number within SpiraTeam. If the requirement is deleted from SpiraTeam, and the mapping value in the EA project still exists, the item will not be re-imported into SpiraTeam. Similarly, folders are also given a SPIRA::Mapping value, and if a new Requirement element is created within a folder that was deleted in SpiraTeam, it will not be added. If you need to remove all mappings from the EAP file, you may do so by re-running the Importer, and entering in -1 as the Root Requirement . Note that this will not delete requirements from SpiraTeam, only remove mappings, so the next time you run the importer on this file, all new requirements will be created.","title":"EnterpriseArchitect"},{"location":"Requirements-Management-Integration/Importing-From-EnterpriseArchitect/#importing-from-enterprisearchitect","text":"This section outlines how to use the included Importer for importing Requirements, Features, and Screens from a Sparx Enterprise Architect (EA) project file into SpiraTeam.","title":"Importing From EnterpriseArchitect"},{"location":"Requirements-Management-Integration/Importing-From-EnterpriseArchitect/#installing-the-importer","text":"This section outlines how to install the importer onto a desktop so that you can then import requirements and use cases from EA into SpiraTest. It assumes that you already have a working installation of SpiraTest v3.0 or later and a working installation of Enterprise Architect. Important: You must install the integration adapter on the same desktop that has the installed copy of Enterprise Architect . You can download the Importer from the Inflectra's website under \"Downloads and Add-Ons\". When downloaded, double-click the MSI file. Follow the instructions in the MSI file to install the importer.","title":"Installing the Importer"},{"location":"Requirements-Management-Integration/Importing-From-EnterpriseArchitect/#importing-from-an-ea-project-file","text":"Now that you have installed the integration adapter, you can launch it at any time by going to Start > Programs > SpiraTeam > Tools > Enterprise Architect Importer. This will launch the import application itself. You will be shown an introduction screen. Click 'Next' to get to the second screen: Click the folder button ( ) to open the file open dialog. In this dialog, select the Enterprise Architect Project file (*.EAP) that you want to use for importing. If the file has access credentials required, enter the username and password needed to access the file. Once the file is selected, click Next to continue to the screen where you enter your SpiraTeam project information: If the file you selected in the previous step was already lined to a SpiraTeam project, that information will be automatically populated in the fields, and you can click Next to proceed. Otherwise, enter in the SpiraTeam Server URL, your username and password used to log onto the system with and click the Get Projects button. The program will connect to the server and get a list of all available projects. Select the project you want to import into under the Project & Requirement section. The Root Requirement box is for specifying a base requirement to load all the EA elements into. If left blank, then the root folders in the EAP's model will be root requirement folders in the SpiraTeam Project. For example, if your EAP file has a tree that looks like: Then the requirements imported into SpiraTeam will appear like: Note that the folder \"Non-Functional Requirements\" does not appear in the list. Folders that have no importable elements will not get imported into SpiraTeam. At this time, only \"Requirement\", \"Feature\", and \"Screen\" elements are imported. If you had a requirement already in SpiraTeam, and wanted the \"Requirements Model\" to appear in it, then enter the requirement number into the Root Requirement text box. For example, if I have a requirement named \"EA Requirements\" with a number of RQ1920, then put 1920 into the Root Requirement field and run the import. When import is finished, the SpiraTeam requirement tree will look like: Once the fields are entered, click Next to get to the summary screen. The summary screen tells you what will be done, and once it's reviewed, click the Import button to start importing: Anything flagged with a red failed, green means that they succeeded. Once finished, click Finish to get to the last page of the wizard: If the Minimize to System Tray option is selected, when you click Finish or exit the form, the application will minmiize to the system tray and give you some quick actions to re-import from the same file or select another file. Otherwise the program will exit, and you can re-launch the importer to import from the same or another EAP file.","title":"Importing from an EA Project File"},{"location":"Requirements-Management-Integration/Importing-From-EnterpriseArchitect/#using-the-system-tray-shortcut-menu","text":"When the application is minimized to the system tray, there are several shortcuts available: Double-Clicking the icon will bring the importer back to the first screen, allowing you to import another EAP file. Right-clicking will give a shortcut menu with the following options: Exit -- Close the program entirely. Rerun Import -- Will provide you the screen to re-launch the last import you just ran. Show Window -- Same as double-clicking on the icon, this will cause the wizard to appear back on the first screen, allowing new input options to be set.","title":"Using the System Tray Shortcut Menu"},{"location":"Requirements-Management-Integration/Importing-From-EnterpriseArchitect/#enterprise-architect-spirateam-importing-notes","text":"At this time, only elements that are Requirements, Features, or Screens are imported. All three types are imported into Requirements within SpiraTeam, and most fields are brought over into SpiraTeam from EA. Mapping for fields are as follows: Enterprise Architect Field SpiraTeam Field Short Description / Name Name Notes Description (with HTML) Priority Importance: EA Value : SpiraTeam Value High : High Medium : Medium Low : Low Status Status: EA Value : SpiraTeam Value Approved : Accepted Implemented: In Progress Validated : Completed Mandatory : Requested Proposed : Requested (None) : Requested Author (not transferred, always set to user who ran the import last) Release (not transferred) Owner (not transferred) Planned Effort (not transferred) Alias Custom Text Property #1 Element Type ('Requirement', 'Feature', 'Screen', etc) Custom Text Property #2 Phase Custom Text Property #3 Version Custom Text Property #4 Difficulty Custom Text Property #5 When a mapping is made, a Tagged Value is saved into the EAP file with the name of SPIRA::Mapping. The number of the value is the requirement number within SpiraTeam. If the requirement is deleted from SpiraTeam, and the mapping value in the EA project still exists, the item will not be re-imported into SpiraTeam. Similarly, folders are also given a SPIRA::Mapping value, and if a new Requirement element is created within a folder that was deleted in SpiraTeam, it will not be added. If you need to remove all mappings from the EAP file, you may do so by re-running the Importer, and entering in -1 as the Root Requirement . Note that this will not delete requirements from SpiraTeam, only remove mappings, so the next time you run the importer on this file, all new requirements will be created.","title":"Enterprise Architect &amp; SpiraTeam Importing Notes"},{"location":"Requirements-Management-Integration/Importing-From-Jama-Contour/","text":"Importing From Jama Contour This section outlines how to use the included Importer for importing Requirements, Features, and Use Cases from projects residing in Jama Contour\u2122 projects into equivalent projects in SpiraTest\u00ae, SpiraPlan\u00ae or SpiraTeam\u00ae (hereafter referred to as SpiraTeam). Installing the Importer This section outlines how to install the importer onto a workstation so that you can then import requirements and use cases from Contour into SpiraTeam. It assumes that you already have a working installation of SpiraTeam v3.0 or later and a working installation of Jama Contour. You can download the Importer from the Inflectra's website under \"Downloads and Add-Ons\". When downloaded, double-click the MSI file. Follow the instructions in the MSI file to install the importer. Importing from a Contour Project Now that you have installed the integration adapter, you can launch it at any time by going to Start > Programs > SpiraTest > Tools > Jama Contour Adapter. This will launch the import application itself. You will be shown an introduction screen. Click 'Next' to get to the second screen: You need to enter the Contour Server URL (including the port number if appropriate), the username and password you use to log onto the system, then click the Get Projects button. The program will connect to the server and get a list of all available projects. Select the project you want to import into under the Project section. Once the project is selected, click Next to continue to the screen where you enter your SpiraTeam server and project information: On this screen, you need to enter the SpiraTeam Server URL, the username and password you use to log onto the system, then click the Get Projects button. The program will connect to the server and get a list of all available projects. Select the project you want to import into under the Project & Requirement section. The Root Requirement box is for specifying a base requirement to load all the Contour elements into. If left blank, then the root folders in the Contour's explorer will be root requirement folders in the SpiraTeam Project. For example, if your Jama Contour project has a tree that looks like: Then the requirements imported into SpiraTeam will appear like: Note: At this time, change request and defect items are not imported from Contour projects. If you have a requirement already in SpiraTeam, and want the Contour requirements to appear inside it, then you need to enter the requirement number into the Root Requirement text box. For example, if you have a requirement named \"Contour Requirements\" with a number of RQ1920, then put 1920 into the Root Requirement field and run the import. When import is finished, the SpiraTeam requirement tree will look like: Once the fields have been populated, click Next to get to the summary screen. The summary screen tells you what will actions will be performed, and once you have verified the information, click the Import button to start the import: Anything flagged with a red failed, green means that they succeeded. Once finished, click Finish to get to the last page of the wizard: If the Minimize to System Tray option is selected, when you click Finish or exit the from the application, it will minimize to the system tray. Once in the system tray, you can right-click on the icon and the it will give you the option to either re-import from the same project or select another project for a fresh import. If the option is not selected, the program will exit, and you can re-launch the importer to import from the same or another Contour project. Using the System Tray Shortcut Menu When the application is minimized to the system tray, there are several shortcuts available: Double-Clicking the icon will bring the importer back to the first screen, allowing you to import another Contour project. Right-clicking will give a shortcut menu with the following options: Exit -- Close the program entirely. Rerun Import -- Will provide you the screen to re-launch the last import you just ran. Show Window -- Same as double-clicking on the icon, will bring the wizard back to the first screen, allowing new input options to be set. Jama Contour & SpiraTeam Importing Notes At this time, only requirements are imported into SpiraTeam from Contour. All the various types in Contour are imported as Requirements into SpiraTeam. In addition, the following fields are brought over into SpiraTeam from Contour according to the following mapping table: Jama Contour Field SpiraTeam Field Name Name Description Description (with HTML) Priority Importance: Contour Value : SpiraTeam Value High : High Medium : Medium Low : Low Status Status: Contour Value : SpiraTeam Value Draft : Requested Approved : Accepted Completed : Completed Rejected : Rejected (None) : Requested Author (not transferred, always set to user who ran the import last) Release Release / Iteration Owner (not transferred) Planned Effort (not transferred) Item Type Custom Text Property #1 Document Key Custom Text Property #2 Item Type Category Custom Text Property #3 Keeping Jama and Spira in Sync Using this adapter, you can manage the appropriate artifacts in Contour and then periodically re-run the import application to update Spira. The application will remember that the project was already used for an initial load and will simply update the requirements as appropriate as well as add any additional ones added. If you are using SpiraTeam v3.1 or later, the update process will also delete any artifacts removed in Contour. Note that any changes to the requirement hierarchy in Contour are not reflected. This allows you to change the organization of the artifacts in SpiraTeam to make them easier to use without the changes being overwritten on the next import cycle. Finally, should you want to start again and re-import a project from scratch that has already been imported once before, you may do so by re-running the Importer, and entering in -1 as the Root Requirement . This will not delete requirements from SpiraTeam, only remove mappings, so the next time you run the importer on this file, all new requirements will be created. Note: This option is irreversible and should be performed with care.","title":"Jama Contour"},{"location":"Requirements-Management-Integration/Importing-From-Jama-Contour/#importing-from-jama-contour","text":"This section outlines how to use the included Importer for importing Requirements, Features, and Use Cases from projects residing in Jama Contour\u2122 projects into equivalent projects in SpiraTest\u00ae, SpiraPlan\u00ae or SpiraTeam\u00ae (hereafter referred to as SpiraTeam).","title":"Importing From Jama Contour"},{"location":"Requirements-Management-Integration/Importing-From-Jama-Contour/#installing-the-importer","text":"This section outlines how to install the importer onto a workstation so that you can then import requirements and use cases from Contour into SpiraTeam. It assumes that you already have a working installation of SpiraTeam v3.0 or later and a working installation of Jama Contour. You can download the Importer from the Inflectra's website under \"Downloads and Add-Ons\". When downloaded, double-click the MSI file. Follow the instructions in the MSI file to install the importer.","title":"Installing the Importer"},{"location":"Requirements-Management-Integration/Importing-From-Jama-Contour/#importing-from-a-contour-project","text":"Now that you have installed the integration adapter, you can launch it at any time by going to Start > Programs > SpiraTest > Tools > Jama Contour Adapter. This will launch the import application itself. You will be shown an introduction screen. Click 'Next' to get to the second screen: You need to enter the Contour Server URL (including the port number if appropriate), the username and password you use to log onto the system, then click the Get Projects button. The program will connect to the server and get a list of all available projects. Select the project you want to import into under the Project section. Once the project is selected, click Next to continue to the screen where you enter your SpiraTeam server and project information: On this screen, you need to enter the SpiraTeam Server URL, the username and password you use to log onto the system, then click the Get Projects button. The program will connect to the server and get a list of all available projects. Select the project you want to import into under the Project & Requirement section. The Root Requirement box is for specifying a base requirement to load all the Contour elements into. If left blank, then the root folders in the Contour's explorer will be root requirement folders in the SpiraTeam Project. For example, if your Jama Contour project has a tree that looks like: Then the requirements imported into SpiraTeam will appear like: Note: At this time, change request and defect items are not imported from Contour projects. If you have a requirement already in SpiraTeam, and want the Contour requirements to appear inside it, then you need to enter the requirement number into the Root Requirement text box. For example, if you have a requirement named \"Contour Requirements\" with a number of RQ1920, then put 1920 into the Root Requirement field and run the import. When import is finished, the SpiraTeam requirement tree will look like: Once the fields have been populated, click Next to get to the summary screen. The summary screen tells you what will actions will be performed, and once you have verified the information, click the Import button to start the import: Anything flagged with a red failed, green means that they succeeded. Once finished, click Finish to get to the last page of the wizard: If the Minimize to System Tray option is selected, when you click Finish or exit the from the application, it will minimize to the system tray. Once in the system tray, you can right-click on the icon and the it will give you the option to either re-import from the same project or select another project for a fresh import. If the option is not selected, the program will exit, and you can re-launch the importer to import from the same or another Contour project.","title":"Importing from a Contour Project"},{"location":"Requirements-Management-Integration/Importing-From-Jama-Contour/#using-the-system-tray-shortcut-menu","text":"When the application is minimized to the system tray, there are several shortcuts available: Double-Clicking the icon will bring the importer back to the first screen, allowing you to import another Contour project. Right-clicking will give a shortcut menu with the following options: Exit -- Close the program entirely. Rerun Import -- Will provide you the screen to re-launch the last import you just ran. Show Window -- Same as double-clicking on the icon, will bring the wizard back to the first screen, allowing new input options to be set.","title":"Using the System Tray Shortcut Menu"},{"location":"Requirements-Management-Integration/Importing-From-Jama-Contour/#jama-contour-spirateam-importing-notes","text":"At this time, only requirements are imported into SpiraTeam from Contour. All the various types in Contour are imported as Requirements into SpiraTeam. In addition, the following fields are brought over into SpiraTeam from Contour according to the following mapping table: Jama Contour Field SpiraTeam Field Name Name Description Description (with HTML) Priority Importance: Contour Value : SpiraTeam Value High : High Medium : Medium Low : Low Status Status: Contour Value : SpiraTeam Value Draft : Requested Approved : Accepted Completed : Completed Rejected : Rejected (None) : Requested Author (not transferred, always set to user who ran the import last) Release Release / Iteration Owner (not transferred) Planned Effort (not transferred) Item Type Custom Text Property #1 Document Key Custom Text Property #2 Item Type Category Custom Text Property #3","title":"Jama Contour &amp; SpiraTeam Importing Notes"},{"location":"Requirements-Management-Integration/Importing-From-Jama-Contour/#keeping-jama-and-spira-in-sync","text":"Using this adapter, you can manage the appropriate artifacts in Contour and then periodically re-run the import application to update Spira. The application will remember that the project was already used for an initial load and will simply update the requirements as appropriate as well as add any additional ones added. If you are using SpiraTeam v3.1 or later, the update process will also delete any artifacts removed in Contour. Note that any changes to the requirement hierarchy in Contour are not reflected. This allows you to change the organization of the artifacts in SpiraTeam to make them easier to use without the changes being overwritten on the next import cycle. Finally, should you want to start again and re-import a project from scratch that has already been imported once before, you may do so by re-running the Importer, and entering in -1 as the Root Requirement . This will not delete requirements from SpiraTeam, only remove mappings, so the next time you run the importer on this file, all new requirements will be created. Note: This option is irreversible and should be performed with care.","title":"Keeping Jama and Spira in Sync"},{"location":"Requirements-Management-Integration/Importing-From-RequisitePro/","text":"Importing From RequisitePro This section outlines how to use the included Integration Adapter for importing Requirements, and Use Cases from IBM Rational \u00ae RequisitePro \u00ae into SpiraTest \u00ae . Installing the Integration Adapter This section outlines how to install the integration adapter for RequisitePro onto a workstation so that you can then import requirements and use cases from RequisitePro into SpiraTest. It assumes that you already have a working installation of SpiraTest v2.2 or later and a working installation of RequisitePro v7.0 or later. If you have an earlier version of SpiraTest or RequisitePro, you will need to upgrade to at least v2.2 and v7.0 respectively before trying to import data. To obtain the version of the migration tool that is compatible with your version of SpiraTest, you simply need to log-in as a project-level administrator to SpiraTest, go to the Administration home page and download the Integration Adapter Windows Installer package (.msi). This process is described in the SpiraTest Administration Guide in more detail. Important: You must install the integration adapter on the same workstation that has the installed copy of RequisitePro . Once you have obtained the Windows Installer package, simply double-click on the package to begin the installation wizard which should display the following welcome page: Click the <Next> button to choose the folder to install the integration adapter to: Choose the folder to install to, and then decide whether the application should be accessible by all users on the workstation or just the current user. Then click the <Next> button to start the installation process. It will confirm if you want to proceed, click <Next> then wait for it to finish. Importing From RequisitePro Now that you have installed the integration adapter, you can launch it at any time by going to Start > Programs > SpiraTest > Tools > RequisitePro Adapter. This will launch the import application itself: The first thing you need to do is to click the <Browse> button and select the Rational RequisitePro project file (.rqs) that you want to import from. You also need to select a valid username and password for that project. Once you have done this, click the <Login> button to verify that the project file can be opened. The button marked <Clear Project Cache> will be explained later on. Assuming that the user name selected has permission to access this project, you will be prompted with a message box indicating that the login was successful. Now click the <Next> button to move to the next page in the import wizard: This page allows you to enter the URL, user name and password that you want to use to access the instance of SpiraTest that you want to import to and click <Login>. Typically the URL is of the form (http://<server name>/SpiraTest). The version of the importer being used must be compatible with the version of SpiraTest you're importing into; if not you will receive an error message. Assuming that the login was successful, click the <Start Import> button to actually begin the process of importing the various artifacts from RequisitePro into SpiraTest. Note that the first time the importer sees a particular project file, it will create a new project in SpiraTest to hold all the artifacts with the same name as that used in RequisitePro. During the import process, as each of the types of artifact are imported, the progress display will change (as illustrated above). Once the import has finished, you will receive a message to that effect and the <Done> button will be enabled. Clicking this button closed the importer. You should now log into SpiraTest using the same user name and password that was used for the import to view the imported project. Using RequisitePro with SpiraTest Once you have completed this initial import, you will now have two systems that can be used together to manage your project's lifecycle. How they should be used together depends on which methodology you have been using in your RequisitePro project: Traditional Mode -- In this mode, RequisitePro only contains product requirements and software requirements. These are both loaded into SpiraTest's requirements matrix and can be used as a starting point for developing the necessary test case coverage. In this mode, requirements are managed in RequisitePro and all other artifacts are managed in SpiraTest. Use Cases Mode -- In this mode, RequisitePro contains features, supplementary requirements and use cases. The features and supplementary requirements are loaded into SpiraTest's requirements matrix, and the use cases are loaded into SpiraTest's test case list. Note that these use cases do not contain any test steps. In this mode, requirements and test cases are managed in RequisitePro, and test steps, test runs and incidents are managed in SpiraTest. Regardless of the mode employed, you can manage the appropriate artifacts in RequisitePro and then periodically re-run the import application to update SpiraTest. The application will remember that the project was already used for an initial load and will simply update the requirements and/or test cases as appropriate as well as add any additional ones added. Note that this update process does not delete any artifacts removed in RequisitePro and any changes to the requirement or use case hierarchies are not reflected. This allows you to change the organization of the artifacts in SpiraTest to make them easier to use without the changes being overwritten on the next import cycle. Finally, should you want to start again and re-import a project from scratch that has already been imported once before, you should choose the <Clear Project Cache> button on the first screen which will remove all the stored history of all previously loaded projects. This option is irreversible and should be performed with care.","title":"RequisitePro"},{"location":"Requirements-Management-Integration/Importing-From-RequisitePro/#importing-from-requisitepro","text":"This section outlines how to use the included Integration Adapter for importing Requirements, and Use Cases from IBM Rational \u00ae RequisitePro \u00ae into SpiraTest \u00ae .","title":"Importing From RequisitePro"},{"location":"Requirements-Management-Integration/Importing-From-RequisitePro/#installing-the-integration-adapter","text":"This section outlines how to install the integration adapter for RequisitePro onto a workstation so that you can then import requirements and use cases from RequisitePro into SpiraTest. It assumes that you already have a working installation of SpiraTest v2.2 or later and a working installation of RequisitePro v7.0 or later. If you have an earlier version of SpiraTest or RequisitePro, you will need to upgrade to at least v2.2 and v7.0 respectively before trying to import data. To obtain the version of the migration tool that is compatible with your version of SpiraTest, you simply need to log-in as a project-level administrator to SpiraTest, go to the Administration home page and download the Integration Adapter Windows Installer package (.msi). This process is described in the SpiraTest Administration Guide in more detail. Important: You must install the integration adapter on the same workstation that has the installed copy of RequisitePro . Once you have obtained the Windows Installer package, simply double-click on the package to begin the installation wizard which should display the following welcome page: Click the <Next> button to choose the folder to install the integration adapter to: Choose the folder to install to, and then decide whether the application should be accessible by all users on the workstation or just the current user. Then click the <Next> button to start the installation process. It will confirm if you want to proceed, click <Next> then wait for it to finish.","title":"Installing the Integration Adapter"},{"location":"Requirements-Management-Integration/Importing-From-RequisitePro/#importing-from-requisitepro_1","text":"Now that you have installed the integration adapter, you can launch it at any time by going to Start > Programs > SpiraTest > Tools > RequisitePro Adapter. This will launch the import application itself: The first thing you need to do is to click the <Browse> button and select the Rational RequisitePro project file (.rqs) that you want to import from. You also need to select a valid username and password for that project. Once you have done this, click the <Login> button to verify that the project file can be opened. The button marked <Clear Project Cache> will be explained later on. Assuming that the user name selected has permission to access this project, you will be prompted with a message box indicating that the login was successful. Now click the <Next> button to move to the next page in the import wizard: This page allows you to enter the URL, user name and password that you want to use to access the instance of SpiraTest that you want to import to and click <Login>. Typically the URL is of the form (http://<server name>/SpiraTest). The version of the importer being used must be compatible with the version of SpiraTest you're importing into; if not you will receive an error message. Assuming that the login was successful, click the <Start Import> button to actually begin the process of importing the various artifacts from RequisitePro into SpiraTest. Note that the first time the importer sees a particular project file, it will create a new project in SpiraTest to hold all the artifacts with the same name as that used in RequisitePro. During the import process, as each of the types of artifact are imported, the progress display will change (as illustrated above). Once the import has finished, you will receive a message to that effect and the <Done> button will be enabled. Clicking this button closed the importer. You should now log into SpiraTest using the same user name and password that was used for the import to view the imported project.","title":"Importing From RequisitePro"},{"location":"Requirements-Management-Integration/Importing-From-RequisitePro/#using-requisitepro-with-spiratest","text":"Once you have completed this initial import, you will now have two systems that can be used together to manage your project's lifecycle. How they should be used together depends on which methodology you have been using in your RequisitePro project: Traditional Mode -- In this mode, RequisitePro only contains product requirements and software requirements. These are both loaded into SpiraTest's requirements matrix and can be used as a starting point for developing the necessary test case coverage. In this mode, requirements are managed in RequisitePro and all other artifacts are managed in SpiraTest. Use Cases Mode -- In this mode, RequisitePro contains features, supplementary requirements and use cases. The features and supplementary requirements are loaded into SpiraTest's requirements matrix, and the use cases are loaded into SpiraTest's test case list. Note that these use cases do not contain any test steps. In this mode, requirements and test cases are managed in RequisitePro, and test steps, test runs and incidents are managed in SpiraTest. Regardless of the mode employed, you can manage the appropriate artifacts in RequisitePro and then periodically re-run the import application to update SpiraTest. The application will remember that the project was already used for an initial load and will simply update the requirements and/or test cases as appropriate as well as add any additional ones added. Note that this update process does not delete any artifacts removed in RequisitePro and any changes to the requirement or use case hierarchies are not reflected. This allows you to change the organization of the artifacts in SpiraTest to make them easier to use without the changes being overwritten on the next import cycle. Finally, should you want to start again and re-import a project from scratch that has already been imported once before, you should choose the <Clear Project Cache> button on the first screen which will remove all the stored history of all previously loaded projects. This option is irreversible and should be performed with care.","title":"Using RequisitePro with SpiraTest"},{"location":"Requirements-Management-Integration/Importing-From-VersionOne/","text":"Importing From VersionOne This section outlines how to use the included Importer for importing Iterations/Sprints, Epics and Stories/Backlog Items from projects residing in VersionOne projects into equivalent projects in SpiraTest\u00ae, SpiraPlan\u00ae or SpiraTeam\u00ae (hereafter referred to as SpiraTeam). Installing the Importer This section outlines how to install the importer onto a workstation so that you can then import requirements and use cases from VersionOne into SpiraTeam. It assumes that you already have a working installation of SpiraTeam v3.0 or later and a working installation of VersionOne 8.0 or later. You can download the Importer from the Inflectra's website under \"Downloads and Add-Ons\". When downloaded, double-click the MSI file. Follow the instructions in the MSI file to install the importer. Importing from a VersionOne Project Now that you have installed the integration adapter, you can launch it at any time by going to Start > Programs > SpiraTest > Tools > VersionOne Adapter. This will launch the import application itself. You will be shown an introduction screen. Click 'Next' to get to the second screen: You need to enter the VersionOne Server URL (including the port number if appropriate), the username and password you use to log onto the system, then click the Get Projects button. If you choose 'Use Windows Authentication' it will use the credentials of the currently logged-in user and disable the username/password text boxes. The program will connect to the server and get a list of all available projects. Select the project you want to import into under the Project section. Once the project is selected, click Next to continue to the screen where you enter your SpiraTeam server and project information: On this screen, you need to enter the SpiraTeam Server URL, the username and password you use to log onto the system, then click the Get Projects button. The program will connect to the server and get a list of all available projects. Select the project you want to import into under the Project & Requirement section. The Root Requirement box is for specifying a base requirement to load all the VersionOne elements into. If left blank, then the importer will create a single placeholder requirement that all of the VersionOne epics and backlog items will be nested under. If you have a requirement already in SpiraTeam, and want the VersionOne items to appear inside it, then you need to enter the requirement number into the Root Requirement text box. For example, if you have a requirement named \"VersionOne Requirements\" with a number of RQ1920, then put 1920 into the Root Requirement field and run the import. When import is finished, the SpiraTeam requirements will be nested underneath. Note: At this time, change request and defect items are not imported from VersionOne projects. Once the fields have been populated, click Next to get to the summary screen. The summary screen tells you what will actions will be performed, and once you have verified the information, click the Import button to start the import: Anything flagged with a red failed, green means that they succeeded. Once finished, click Finish to get to the last page of the wizard: If the Minimize to System Tray option is selected, when you click Finish or exit the from the application, it will minimize to the system tray. Once in the system tray, you can right-click on the icon and the it will give you the option to either re-import from the same project or select another project for a fresh import. If the option is not selected, the program will exit, and you can re-launch the importer to import from the same or another VersionOne project. Using the System Tray Shortcut Menu When the application is minimized to the system tray, there are several shortcuts available: Double-Clicking the icon will bring the importer back to the first screen, allowing you to import another VersionOne project. Right-clicking will give a shortcut menu with the following options: Exit -- Close the program entirely. Rerun Import -- Will provide you the screen to re-launch the last import you just ran. Show Window -- Same as double-clicking on the icon, will bring the wizard back to the first screen, allowing new input options to be set. VersionOne & SpiraTeam Importing Notes At this time, only requirements and iterations/sprints are imported into SpiraTeam from VersionOne. The epics in VersionOne become summary requirements in SpiraTeam and the backlog items / stories become child requirements in SpiraTeam. In addition, the following fields are brought over into SpiraTeam from VersionOne according to the following mapping table: VersionOne Field SpiraTeam Field Name Name Description Description (with HTML) Priority Importance: VersionOne Value : SpiraTeam Value High : High Medium : Medium Low : Low Status Status: VersionOne Value : SpiraTeam Value Future : Requested Accepted : Accepted Done : Completed In Progress : In Progress Author (not transferred, always set to user who ran the import last) Iteration/Sprint Release / Iteration Owner (not transferred) Estimate Planned Effort (not transferred) VersionOne ID Custom Text Property TEXT_01 VersionOne Display ID Custom Text Property TEXT_02 Using this adapter, you can manage the appropriate artifacts in VersionOne and then periodically re-run the import application to update SpiraTeam. The application will remember that the project was already used for an initial load and will simply update the requirements as appropriate as well as add any additional ones added. If you are using SpiraTeam v3.1 or later, the update process will also delete any artifacts removed in VersionOne. Note that any changes to the requirement hierarchy are not reflected. This allows you to change the organization of the artifacts in SpiraTeam to make them easier to use without the changes being overwritten on the next import cycle. Finally, should you want to start again and re-import a project from scratch that has already been imported once before, you may do so by re-running the Importer, and entering in -1 as the Root Requirement . This will not delete requirements from SpiraTeam, only remove mappings, so the next time you run the importer on this file, all new requirements will be created. Note: This option is irreversible and should be performed with care.","title":"VersionOne"},{"location":"Requirements-Management-Integration/Importing-From-VersionOne/#importing-from-versionone","text":"This section outlines how to use the included Importer for importing Iterations/Sprints, Epics and Stories/Backlog Items from projects residing in VersionOne projects into equivalent projects in SpiraTest\u00ae, SpiraPlan\u00ae or SpiraTeam\u00ae (hereafter referred to as SpiraTeam).","title":"Importing From VersionOne"},{"location":"Requirements-Management-Integration/Importing-From-VersionOne/#installing-the-importer","text":"This section outlines how to install the importer onto a workstation so that you can then import requirements and use cases from VersionOne into SpiraTeam. It assumes that you already have a working installation of SpiraTeam v3.0 or later and a working installation of VersionOne 8.0 or later. You can download the Importer from the Inflectra's website under \"Downloads and Add-Ons\". When downloaded, double-click the MSI file. Follow the instructions in the MSI file to install the importer.","title":"Installing the Importer"},{"location":"Requirements-Management-Integration/Importing-From-VersionOne/#importing-from-a-versionone-project","text":"Now that you have installed the integration adapter, you can launch it at any time by going to Start > Programs > SpiraTest > Tools > VersionOne Adapter. This will launch the import application itself. You will be shown an introduction screen. Click 'Next' to get to the second screen: You need to enter the VersionOne Server URL (including the port number if appropriate), the username and password you use to log onto the system, then click the Get Projects button. If you choose 'Use Windows Authentication' it will use the credentials of the currently logged-in user and disable the username/password text boxes. The program will connect to the server and get a list of all available projects. Select the project you want to import into under the Project section. Once the project is selected, click Next to continue to the screen where you enter your SpiraTeam server and project information: On this screen, you need to enter the SpiraTeam Server URL, the username and password you use to log onto the system, then click the Get Projects button. The program will connect to the server and get a list of all available projects. Select the project you want to import into under the Project & Requirement section. The Root Requirement box is for specifying a base requirement to load all the VersionOne elements into. If left blank, then the importer will create a single placeholder requirement that all of the VersionOne epics and backlog items will be nested under. If you have a requirement already in SpiraTeam, and want the VersionOne items to appear inside it, then you need to enter the requirement number into the Root Requirement text box. For example, if you have a requirement named \"VersionOne Requirements\" with a number of RQ1920, then put 1920 into the Root Requirement field and run the import. When import is finished, the SpiraTeam requirements will be nested underneath. Note: At this time, change request and defect items are not imported from VersionOne projects. Once the fields have been populated, click Next to get to the summary screen. The summary screen tells you what will actions will be performed, and once you have verified the information, click the Import button to start the import: Anything flagged with a red failed, green means that they succeeded. Once finished, click Finish to get to the last page of the wizard: If the Minimize to System Tray option is selected, when you click Finish or exit the from the application, it will minimize to the system tray. Once in the system tray, you can right-click on the icon and the it will give you the option to either re-import from the same project or select another project for a fresh import. If the option is not selected, the program will exit, and you can re-launch the importer to import from the same or another VersionOne project.","title":"Importing from a VersionOne Project"},{"location":"Requirements-Management-Integration/Importing-From-VersionOne/#using-the-system-tray-shortcut-menu","text":"When the application is minimized to the system tray, there are several shortcuts available: Double-Clicking the icon will bring the importer back to the first screen, allowing you to import another VersionOne project. Right-clicking will give a shortcut menu with the following options: Exit -- Close the program entirely. Rerun Import -- Will provide you the screen to re-launch the last import you just ran. Show Window -- Same as double-clicking on the icon, will bring the wizard back to the first screen, allowing new input options to be set.","title":"Using the System Tray Shortcut Menu"},{"location":"Requirements-Management-Integration/Importing-From-VersionOne/#versionone-spirateam-importing-notes","text":"At this time, only requirements and iterations/sprints are imported into SpiraTeam from VersionOne. The epics in VersionOne become summary requirements in SpiraTeam and the backlog items / stories become child requirements in SpiraTeam. In addition, the following fields are brought over into SpiraTeam from VersionOne according to the following mapping table: VersionOne Field SpiraTeam Field Name Name Description Description (with HTML) Priority Importance: VersionOne Value : SpiraTeam Value High : High Medium : Medium Low : Low Status Status: VersionOne Value : SpiraTeam Value Future : Requested Accepted : Accepted Done : Completed In Progress : In Progress Author (not transferred, always set to user who ran the import last) Iteration/Sprint Release / Iteration Owner (not transferred) Estimate Planned Effort (not transferred) VersionOne ID Custom Text Property TEXT_01 VersionOne Display ID Custom Text Property TEXT_02 Using this adapter, you can manage the appropriate artifacts in VersionOne and then periodically re-run the import application to update SpiraTeam. The application will remember that the project was already used for an initial load and will simply update the requirements as appropriate as well as add any additional ones added. If you are using SpiraTeam v3.1 or later, the update process will also delete any artifacts removed in VersionOne. Note that any changes to the requirement hierarchy are not reflected. This allows you to change the organization of the artifacts in SpiraTeam to make them easier to use without the changes being overwritten on the next import cycle. Finally, should you want to start again and re-import a project from scratch that has already been imported once before, you may do so by re-running the Importer, and entering in -1 as the Root Requirement . This will not delete requirements from SpiraTeam, only remove mappings, so the next time you run the importer on this file, all new requirements will be created. Note: This option is irreversible and should be performed with care.","title":"VersionOne &amp; SpiraTeam Importing Notes"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/","text":"Installing SpiraPlan\u00ae This section outlines how to prepare your system for installation of SpiraPlan\u00ae; how to install the software; and how to ensure that your web-server is correctly configured to ensure secure operation. The first sub-section will outline what hardware and software configurations are supported and the exact installation sequence for the different versions of Windows Server. The second sub-section will explain how to load the SpiraPlan\u00ae software onto the server, and discuss common problems and solutions. The minimum hardware and software requirements for running the SpiraPlan\u00ae system are: Server Requirements Requirement Minimum Specification Processor: Intel\u00ae or AMD\u00ae x86 or x64 compatible processor Memory: 4 GB, 8 GB recommended Operating System: Windows Server 2019 (recommended) Windows Server 2016 (recommended) Windows Server 2012 R1 & R2 Windows 10, 8 (for demoing) Database: Microsoft SQL Server 2017 Microsoft SQL Server 2017 Express Edition Microsoft SQL Server 2016 Microsoft SQL Server 2016 Express Edition Microsoft SQL Server 2014 Microsoft SQL Server 2014 Express Edition Microsoft SQL Server 2012 Microsoft SQL Server 2012 Express Edition Web Server: Internet Information Services (IIS) 7.0 or higher ASP.NET Web Extensions 4.6 or higher Client Requirements Web Browser: Microsoft Edge Internet Explorer 11.0+ Mozilla Firefox Google Chrome (Desktop and Android) Apple Safari (Desktop and iOS) Opera Other Components: Microsoft Excel 2003+ (optional) Microsoft Word 2003+ (optional) Microsoft Project 2003+ (optional) *Note that SpiraPlan\u00ae can be loaded onto either Windows Server or workstation editions, provided that the IIS web-server is installed and that SQL Server is available as a database engine. However, Windows workstation editions can only support a maximum of 5 concurrent user web sessions. In general, unless there are only going to be a couple of client machines hitting the server, we recommend using Windows Server. System Prerequisites Assuming that you have already installed the appropriate version of Microsoft Windows onto your computer (or that has been pre-installed for you), you need to then make sure that the various prerequisites have been correctly added to your installation before trying to install SpiraPlan\u00ae. The SpiraPlan\u00ae installer will check to ensure that the various prerequisites are in place, and will abort the installation if any are missing, indicating to you what action needs to be taken. We recommend that you install / configure the prerequisites in the following order: Install the .NET Framework v4.6 Install SQL Server 2017, 2016, 2014, 2012 Install the latest version of Internet Explorer that your server OS allows Ensure that IIS is installed Ensure that ASP.NET 4.6 is enabled Install the .NET Framework v4.6, v4.7 On most modern Windows 10 and Windows Server installations, Microsoft .NET Framework v4.6 is usually installed as part of the factory configuration, whereas on earlier operating systems, you might need to manually add the .NET 4.6 components to the factory configuration. To see which version of the Microsoft .NET framework installed, open up Windows Explorer\u00ae and navigate to C:\\WINDOWS\\Microsoft.NET\\Framework and then the subfolders listed will indicate which version(s) of the framework you have installed: To install the .NET Framework, launch Internet Explorer and enter the URL: https://www.inflectra.com/CustomerArea . Once you have logged-in to the customer area, under the \"My Downloads\" section there will be hyperlinks to download and install the appropriate version of the .NET Framework (version 4.6 at time of writing). Click on the option to download and install the .NET Framework, and follow the instructions provided. Once you have completed the install, verify that the installation was successful by looking in the \"Administrative Tools\" folder as illustrated above. You also need to make sure that .NET 4.6 has been installed if necessary. Install SQL Server 2017, 2016, 2014, 2012 If you do not have a SQL Server instance ready, you can install the appropriate version of the database software, following the instructions provided with the installation. We recommend SQL Server Express Edition\u00ae for most users. This free version of SQL Server will offer sufficient performance for most installations and can be easily downloaded from either the customer area of our website ( http://www.inflectra.com/CustomerArea ) or directly from the Microsoft\u00ae web-site at http://www.microsoft.com/express/sql . Ensure that IIS is installed On Windows Server OS installations, IIS is usually installed as part of the factory configuration, whereas on Windows workstation OS installations, you typically need to manually add the components to the factory configuration. The steps that you need to take to verify its installation are listed below: To check if you have IIS installed, click Start > Control Panel > Administrative Tools. Under the \"Administrative Tools folder\", you should see an icon for \"Internet Information Services (IIS) Manager\". If you don't see this icon, then it means that you need to add IIS to your computer: Windows 8, Windows 8.1 On Windows 8 or 8.1 , to install IIS, you need to click Start > Control Panel > Programs and Features, then choose the option to \"Turn Windows features on or off\". This will bring up the list of features and roles that can be configured on the server: Windows 10 On Windows 10 , to install IIS, you need to click Start > Control Panel > Programs and Features, then choose the option to \"Turn Windows features on or off\". This will bring up the list of features and roles that can be configured on the server: Make sure that the following features are enabled within the 'Internet Information Services' folder: Web Management Tools IIS 6 Management Compatibility IIS Management Console IIS Management Service World Wide Web Services Application Development Features .NET Extensibility 3.5 .NET Extensibility 4.8 ASP.NET 3.5 ASP.NET 4.8 ISAPI Extensions ISAPI Filters Common HTTP Features Default Document Directory Browsing HTTP Errors HTTP Redirection Static Content In the same panel ('Turn Windows Features on or off') you also need to check that the following features are enabled in the '.NET Framework 4.6 Advanced Services' folder: .NET Framework 4.6 Advanced Services ASP.NET 4.6 WCF Services HTTP Activation TCP Port Sharing To verify that this IIS is now installed, type http://localhost into the address bar of Internet Explorer on your computer. You should see a screen displaying the initial IIS startup page: Windows Server 2012, 2016, 2019 On Windows Server 2012, 2016, 2019 , you need to click on Server Manager, then under the \"Roles\" heading, choose the option to \"Add Role\" followed by selecting the new role \"Web Server / IIS\". Then click \"Next\" to bring up the role configuration screen: Make sure that the following features are enabled: Web Server (IIS) Web Server Common HTTP Features Default Document Directory Browsing HTTP Errors Static Content HTTP Redirection Application Development .NET Extensibility 3.5 .NET Extensibility 4.5 ASP.NET 3.5 ASP.NET 4.5 ISAPI Extensions ISAPI Filters Management Tools IIS Management Console IIS Management Service .NET Framework 4.5 Features .NET Framework 4.5 ASP.NET 4.5 WCF Services HTTP Activation TCP Port Sharing Ensure that ASP.NET is installed Now that you have both IIS and .NET installed, you need to make sure that the Active Server Pages (ASP.NET) components that allow IIS to access the .NET framework have been correctly configured. If you installed .NET after IIS then ASP.NET is typically configured for you, but if you installed IIS afterwards, then further manual steps may be necessary. To verify that ASP.NET has been correctly configured, click on Start > Control Panel > Administrative Tools > Internet Information Services (IIS) Manager to launch the IIS administrative console: You should see a section called \"ASP.NET\" occupying the top third of the IIS screen. If not, then you need to go back to Ensure that ASP.NET is installed and make sure that you chose the option to install ASP.NET when installing IIS. Installing the Software Now that all the prerequisites have been correctly installed, you are now ready to install SpiraPlan\u00ae onto your system. To perform the installation, you will need the installation package downloaded from the Inflectra \u00ae website, the name of the organization that the software is licensed to, and the actual license key code which will be available in the customer area of the Inflectra \u00ae website. To start the installation, double-click on the SpiraPlan\u00ae installation package (it will have a filename in the form of SpiraTestPlanTeam-vX.X.X.X.exe), and the Windows Installer will display the following dialog box: Select an Installation Type Click the \"Next\" button to start the installation wizard. The wizard will gather information about what you want to do and how you want to do it. Before any changes are made to your system (installing web-server files and database components) you will get a chance to review everything again. Reviewing the License Agreement and Prerequisites If installing a fresh installation or upgrading, after making your selection the next screen provides a copy of the SpiraPlan\u00ae End User License Agreement (EULA). Please read this carefully as it describes the legal contract between you -- the user of the software -- and Inflectra \u00ae Corporation, the developer and publisher. Once you have read the agreement and understood your rights and obligations, select the radio button marked \"I accept the terms in the License Agreement\" and click the \"Next\" button. The next page of the wizard will display a list of the required pre-requisites and whether the installer could find them or not. The checks here are not fool-proof (in particular where a question mark is shown) so it is recommended to manually check the prerequisites in full as described above. The system will not require all prerequisites to be met before allowing the installation, but the application may display incorrectly if any are missing. License Information The next stage of the wizard (for installing and upgrading) is entering license information: You need to enter the organization that was issued the software license , and the full license key that was provided with the software. The installer will verify the license information as you enter it. If the details entered are valid then the information will be displayed beneath the entry fields. This allows you to check that the correct application and license will be installed. On clicking Next, the installer will warn you of any discrepancies, and will not allow you to proceed until valid information has been provided. If for any reason you are unable to get the provided license key to work, please contact Inflectra \u00ae customer support immediately and they will resolve the issue. Choosing an Installation Location [Advanced only] If you checked \"advanced\" at the start of the installation process, you will have the option to choose where the application is installed. Please note that this is meant for advanced users only . You can choose an existing folder or make a new one and select that. By default it is C:\\Program Files (x86)\\[Application Name]). Web Server Configuration Choose which web site to install Spira int using the available dropdown, which should list all available web sites in IIS on this machine. The Default Web Site will be preselected and is the best option in most circumstances. Virtual Directory [advanced only] If installing in advanced mode, then on this screen you will able to change the name of the web-site URL that will be used to access the system. By default, users would need to type into their browsers: http://\"server name\"/[product name]. Should you want to have a different name change the name in the Virtual Directory box, otherwise simply accept the default name and click \"Next\". Note: The installer will check to make sure that the name you have chosen is not already in use, and will warn you if it is. Connecting to the Database SpiraPlan has an application (installed into a default folder on your system), a website (configured above), and a database. The next screen tells the installer how to connect to the database server on your system. a) Windows Authentication This is the easiest option when the application and database will be residing on the same server. It is the only option available for authentication during a standard installation. In this case, choose the \"Windows Authentication\" option and the Login/Password boxes will be disabled. In this case, the installer will connect to the database using your current Windows login to create the application database objects, and SpiraPlan\u00ae will connect to the database during normal operation using either the ASPNET or NETWORK SERVICE Windows accounts (it depends on the version of the operating system). b) SQL Server Authentication [advanced only] This is the easiest option when the application and databases will be residing on different servers across the network. In this case, choose \"SQL Server Authentication\" and provide a SQL Server Login that has full sysadmin permissions -- e.g. the built in System Administrator (SA) account. The installer will use this sysadmin account to create the database objects, and SpiraPlan\u00ae will use a special login (called SpiraPlan by default) for normal application operations. Setting the Correct Server Instance In the \"Server\" box, you need to enter the name of the Microsoft SQL Server instance that is running on your system; the installer will default it to the hostname of the server (which in many cases will be correct). The easiest way to find out the database server name is to open up the SQL Server Administrative console (typically by clicking Start > Programs > Microsoft SQL Server > Enterprise Manager) and look for the name of the server. For SQL Server Express edition installations, the Server name is usually the name of your computer followed by \"\\SQLEXPRESS\", so for example, if your computer is called MyComputer, the server name would be MyComputer\\SQLEXPRESS. Omitting the second part (called the instance name) would lead to a \"host not found\" error. You can also choose whether to install the sample products or not -- typically we recommend installing the sample products for evaluation installations and excluding them for production installs. Completing the Installation Once you have entered the various pieces of information, click \"Next\". The installer will attempt to connect to the database using the provided information, and it will display an error message if any of the information is incorrect. Assuming the information is correct, the following screen will be displayed: Once you have confirmed that everything is correct, click the \"Install\" button to actually begin the process of installing SpiraPlan\u00ae onto your system. The installer will then display a progress bar as the installation proceeds. Once the installation is complete, the installer will provide confirmation, or display information about any problems it encountered. Click the \"Finish\" button to complete the installation. Congratulations! You have successfully installed SpiraPlan\u00ae onto your system. If you type http://localhost/SpiraTeam into your browser you should see the SpiraPlan\u00ae login page, as illustrated in the SpiraPlan\u00ae User Manual . If for any reason you don't see the login page, please contact Inflectra \u00ae Technical Support using one of the methods described at our website http://www.inflectra.com/Support . Upgrading To upgrade an existing installation, execute the same installer, and on the Installation Type screen, select the \"Upgrade\" button: You will then be asked to agree to the EULA, it will verify any missing prerequisites in case system requirements have changed, and then ask to verify your License Key. This key should match the new version you are upgrading to, not the existing version installed on the server. Once that information is verified, you must point the installer to the location of the application. The installer will default to the default installation location and if this is not correct, click the folder icon to select the proper installation location: After verifying the location, the installer will display the screen that shows the summary of actions to be performed. In case of an upgrade failure, a backup of the database is made. The location is given on the summary screen, and is usually the default backup directory for SQL Server. To recover your system, all you need to do is restore the backup over top of the existing corrupted database. You can then try the upgrade again. If problems persist, contact the support department, and they will explain how to retrieve the logs for remediation. Security Considerations The Microsoft Internet Information Services (IIS) web-server and SQL Server database are powerful tools to managing web-based applications. However it is important to make sure that they are correctly secured to prevent unauthorized access to applications being hosted on them. This is a fast-changing field and beyond the scope of this guide to address, however we recommend reading the following article for details on how to secure IIS: http://www.iis.net/learn/manage/configuring-security In addition to the steps outlined in this article, it is important to note that by default, all web pages served by IIS using the HTTP protocol are unencrypted, and as such, the usernames and passwords used by SpiraPlan\u00ae to log into the application can be read by network sniffing tools. If you are using SpiraPlan\u00ae purely within an intranet environment, this may not be an issue. However, if you are externally hosting SpiraPlan\u00ae onto a publicly accessible website, we recommend installing a Secure Sockets Layer (SSL) encryption certificate, and restricting all web-traffic to the secure HTTPS protocol instead.","title":"Installing Spira"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#installing-spiraplan","text":"This section outlines how to prepare your system for installation of SpiraPlan\u00ae; how to install the software; and how to ensure that your web-server is correctly configured to ensure secure operation. The first sub-section will outline what hardware and software configurations are supported and the exact installation sequence for the different versions of Windows Server. The second sub-section will explain how to load the SpiraPlan\u00ae software onto the server, and discuss common problems and solutions. The minimum hardware and software requirements for running the SpiraPlan\u00ae system are: Server Requirements Requirement Minimum Specification Processor: Intel\u00ae or AMD\u00ae x86 or x64 compatible processor Memory: 4 GB, 8 GB recommended Operating System: Windows Server 2019 (recommended) Windows Server 2016 (recommended) Windows Server 2012 R1 & R2 Windows 10, 8 (for demoing) Database: Microsoft SQL Server 2017 Microsoft SQL Server 2017 Express Edition Microsoft SQL Server 2016 Microsoft SQL Server 2016 Express Edition Microsoft SQL Server 2014 Microsoft SQL Server 2014 Express Edition Microsoft SQL Server 2012 Microsoft SQL Server 2012 Express Edition Web Server: Internet Information Services (IIS) 7.0 or higher ASP.NET Web Extensions 4.6 or higher Client Requirements Web Browser: Microsoft Edge Internet Explorer 11.0+ Mozilla Firefox Google Chrome (Desktop and Android) Apple Safari (Desktop and iOS) Opera Other Components: Microsoft Excel 2003+ (optional) Microsoft Word 2003+ (optional) Microsoft Project 2003+ (optional) *Note that SpiraPlan\u00ae can be loaded onto either Windows Server or workstation editions, provided that the IIS web-server is installed and that SQL Server is available as a database engine. However, Windows workstation editions can only support a maximum of 5 concurrent user web sessions. In general, unless there are only going to be a couple of client machines hitting the server, we recommend using Windows Server.","title":"Installing SpiraPlan\u00ae"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#system-prerequisites","text":"Assuming that you have already installed the appropriate version of Microsoft Windows onto your computer (or that has been pre-installed for you), you need to then make sure that the various prerequisites have been correctly added to your installation before trying to install SpiraPlan\u00ae. The SpiraPlan\u00ae installer will check to ensure that the various prerequisites are in place, and will abort the installation if any are missing, indicating to you what action needs to be taken. We recommend that you install / configure the prerequisites in the following order: Install the .NET Framework v4.6 Install SQL Server 2017, 2016, 2014, 2012 Install the latest version of Internet Explorer that your server OS allows Ensure that IIS is installed Ensure that ASP.NET 4.6 is enabled","title":"System Prerequisites"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#install-the-net-framework-v46-v47","text":"On most modern Windows 10 and Windows Server installations, Microsoft .NET Framework v4.6 is usually installed as part of the factory configuration, whereas on earlier operating systems, you might need to manually add the .NET 4.6 components to the factory configuration. To see which version of the Microsoft .NET framework installed, open up Windows Explorer\u00ae and navigate to C:\\WINDOWS\\Microsoft.NET\\Framework and then the subfolders listed will indicate which version(s) of the framework you have installed: To install the .NET Framework, launch Internet Explorer and enter the URL: https://www.inflectra.com/CustomerArea . Once you have logged-in to the customer area, under the \"My Downloads\" section there will be hyperlinks to download and install the appropriate version of the .NET Framework (version 4.6 at time of writing). Click on the option to download and install the .NET Framework, and follow the instructions provided. Once you have completed the install, verify that the installation was successful by looking in the \"Administrative Tools\" folder as illustrated above. You also need to make sure that .NET 4.6 has been installed if necessary.","title":"Install the .NET Framework v4.6, v4.7"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#install-sql-server-2017-2016-2014-2012","text":"If you do not have a SQL Server instance ready, you can install the appropriate version of the database software, following the instructions provided with the installation. We recommend SQL Server Express Edition\u00ae for most users. This free version of SQL Server will offer sufficient performance for most installations and can be easily downloaded from either the customer area of our website ( http://www.inflectra.com/CustomerArea ) or directly from the Microsoft\u00ae web-site at http://www.microsoft.com/express/sql .","title":"Install SQL Server 2017, 2016, 2014, 2012"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#ensure-that-iis-is-installed","text":"On Windows Server OS installations, IIS is usually installed as part of the factory configuration, whereas on Windows workstation OS installations, you typically need to manually add the components to the factory configuration. The steps that you need to take to verify its installation are listed below: To check if you have IIS installed, click Start > Control Panel > Administrative Tools. Under the \"Administrative Tools folder\", you should see an icon for \"Internet Information Services (IIS) Manager\". If you don't see this icon, then it means that you need to add IIS to your computer:","title":"Ensure that IIS is installed"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#windows-8-windows-81","text":"On Windows 8 or 8.1 , to install IIS, you need to click Start > Control Panel > Programs and Features, then choose the option to \"Turn Windows features on or off\". This will bring up the list of features and roles that can be configured on the server:","title":"Windows 8, Windows 8.1"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#windows-10","text":"On Windows 10 , to install IIS, you need to click Start > Control Panel > Programs and Features, then choose the option to \"Turn Windows features on or off\". This will bring up the list of features and roles that can be configured on the server: Make sure that the following features are enabled within the 'Internet Information Services' folder: Web Management Tools IIS 6 Management Compatibility IIS Management Console IIS Management Service World Wide Web Services Application Development Features .NET Extensibility 3.5 .NET Extensibility 4.8 ASP.NET 3.5 ASP.NET 4.8 ISAPI Extensions ISAPI Filters Common HTTP Features Default Document Directory Browsing HTTP Errors HTTP Redirection Static Content In the same panel ('Turn Windows Features on or off') you also need to check that the following features are enabled in the '.NET Framework 4.6 Advanced Services' folder: .NET Framework 4.6 Advanced Services ASP.NET 4.6 WCF Services HTTP Activation TCP Port Sharing To verify that this IIS is now installed, type http://localhost into the address bar of Internet Explorer on your computer. You should see a screen displaying the initial IIS startup page:","title":"Windows 10"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#windows-server-2012-2016-2019","text":"On Windows Server 2012, 2016, 2019 , you need to click on Server Manager, then under the \"Roles\" heading, choose the option to \"Add Role\" followed by selecting the new role \"Web Server / IIS\". Then click \"Next\" to bring up the role configuration screen: Make sure that the following features are enabled: Web Server (IIS) Web Server Common HTTP Features Default Document Directory Browsing HTTP Errors Static Content HTTP Redirection Application Development .NET Extensibility 3.5 .NET Extensibility 4.5 ASP.NET 3.5 ASP.NET 4.5 ISAPI Extensions ISAPI Filters Management Tools IIS Management Console IIS Management Service .NET Framework 4.5 Features .NET Framework 4.5 ASP.NET 4.5 WCF Services HTTP Activation TCP Port Sharing","title":"Windows Server 2012, 2016, 2019"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#ensure-that-aspnet-is-installed","text":"Now that you have both IIS and .NET installed, you need to make sure that the Active Server Pages (ASP.NET) components that allow IIS to access the .NET framework have been correctly configured. If you installed .NET after IIS then ASP.NET is typically configured for you, but if you installed IIS afterwards, then further manual steps may be necessary. To verify that ASP.NET has been correctly configured, click on Start > Control Panel > Administrative Tools > Internet Information Services (IIS) Manager to launch the IIS administrative console: You should see a section called \"ASP.NET\" occupying the top third of the IIS screen. If not, then you need to go back to Ensure that ASP.NET is installed and make sure that you chose the option to install ASP.NET when installing IIS.","title":"Ensure that ASP.NET is installed"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#installing-the-software","text":"Now that all the prerequisites have been correctly installed, you are now ready to install SpiraPlan\u00ae onto your system. To perform the installation, you will need the installation package downloaded from the Inflectra \u00ae website, the name of the organization that the software is licensed to, and the actual license key code which will be available in the customer area of the Inflectra \u00ae website. To start the installation, double-click on the SpiraPlan\u00ae installation package (it will have a filename in the form of SpiraTestPlanTeam-vX.X.X.X.exe), and the Windows Installer will display the following dialog box:","title":"Installing the Software"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#select-an-installation-type","text":"Click the \"Next\" button to start the installation wizard. The wizard will gather information about what you want to do and how you want to do it. Before any changes are made to your system (installing web-server files and database components) you will get a chance to review everything again.","title":"Select an Installation Type"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#reviewing-the-license-agreement-and-prerequisites","text":"If installing a fresh installation or upgrading, after making your selection the next screen provides a copy of the SpiraPlan\u00ae End User License Agreement (EULA). Please read this carefully as it describes the legal contract between you -- the user of the software -- and Inflectra \u00ae Corporation, the developer and publisher. Once you have read the agreement and understood your rights and obligations, select the radio button marked \"I accept the terms in the License Agreement\" and click the \"Next\" button. The next page of the wizard will display a list of the required pre-requisites and whether the installer could find them or not. The checks here are not fool-proof (in particular where a question mark is shown) so it is recommended to manually check the prerequisites in full as described above. The system will not require all prerequisites to be met before allowing the installation, but the application may display incorrectly if any are missing.","title":"Reviewing the License Agreement and Prerequisites"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#license-information","text":"The next stage of the wizard (for installing and upgrading) is entering license information: You need to enter the organization that was issued the software license , and the full license key that was provided with the software. The installer will verify the license information as you enter it. If the details entered are valid then the information will be displayed beneath the entry fields. This allows you to check that the correct application and license will be installed. On clicking Next, the installer will warn you of any discrepancies, and will not allow you to proceed until valid information has been provided. If for any reason you are unable to get the provided license key to work, please contact Inflectra \u00ae customer support immediately and they will resolve the issue.","title":"License Information"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#choosing-an-installation-location-91advanced-only93","text":"If you checked \"advanced\" at the start of the installation process, you will have the option to choose where the application is installed. Please note that this is meant for advanced users only . You can choose an existing folder or make a new one and select that. By default it is C:\\Program Files (x86)\\[Application Name]).","title":"Choosing an Installation Location [Advanced only]"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#web-server-configuration","text":"Choose which web site to install Spira int using the available dropdown, which should list all available web sites in IIS on this machine. The Default Web Site will be preselected and is the best option in most circumstances. Virtual Directory [advanced only] If installing in advanced mode, then on this screen you will able to change the name of the web-site URL that will be used to access the system. By default, users would need to type into their browsers: http://\"server name\"/[product name]. Should you want to have a different name change the name in the Virtual Directory box, otherwise simply accept the default name and click \"Next\". Note: The installer will check to make sure that the name you have chosen is not already in use, and will warn you if it is.","title":"Web Server Configuration"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#connecting-to-the-database","text":"SpiraPlan has an application (installed into a default folder on your system), a website (configured above), and a database. The next screen tells the installer how to connect to the database server on your system. a) Windows Authentication This is the easiest option when the application and database will be residing on the same server. It is the only option available for authentication during a standard installation. In this case, choose the \"Windows Authentication\" option and the Login/Password boxes will be disabled. In this case, the installer will connect to the database using your current Windows login to create the application database objects, and SpiraPlan\u00ae will connect to the database during normal operation using either the ASPNET or NETWORK SERVICE Windows accounts (it depends on the version of the operating system). b) SQL Server Authentication [advanced only] This is the easiest option when the application and databases will be residing on different servers across the network. In this case, choose \"SQL Server Authentication\" and provide a SQL Server Login that has full sysadmin permissions -- e.g. the built in System Administrator (SA) account. The installer will use this sysadmin account to create the database objects, and SpiraPlan\u00ae will use a special login (called SpiraPlan by default) for normal application operations. Setting the Correct Server Instance In the \"Server\" box, you need to enter the name of the Microsoft SQL Server instance that is running on your system; the installer will default it to the hostname of the server (which in many cases will be correct). The easiest way to find out the database server name is to open up the SQL Server Administrative console (typically by clicking Start > Programs > Microsoft SQL Server > Enterprise Manager) and look for the name of the server. For SQL Server Express edition installations, the Server name is usually the name of your computer followed by \"\\SQLEXPRESS\", so for example, if your computer is called MyComputer, the server name would be MyComputer\\SQLEXPRESS. Omitting the second part (called the instance name) would lead to a \"host not found\" error. You can also choose whether to install the sample products or not -- typically we recommend installing the sample products for evaluation installations and excluding them for production installs.","title":"Connecting to the Database"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#completing-the-installation","text":"Once you have entered the various pieces of information, click \"Next\". The installer will attempt to connect to the database using the provided information, and it will display an error message if any of the information is incorrect. Assuming the information is correct, the following screen will be displayed: Once you have confirmed that everything is correct, click the \"Install\" button to actually begin the process of installing SpiraPlan\u00ae onto your system. The installer will then display a progress bar as the installation proceeds. Once the installation is complete, the installer will provide confirmation, or display information about any problems it encountered. Click the \"Finish\" button to complete the installation. Congratulations! You have successfully installed SpiraPlan\u00ae onto your system. If you type http://localhost/SpiraTeam into your browser you should see the SpiraPlan\u00ae login page, as illustrated in the SpiraPlan\u00ae User Manual . If for any reason you don't see the login page, please contact Inflectra \u00ae Technical Support using one of the methods described at our website http://www.inflectra.com/Support .","title":"Completing the Installation"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#upgrading","text":"To upgrade an existing installation, execute the same installer, and on the Installation Type screen, select the \"Upgrade\" button: You will then be asked to agree to the EULA, it will verify any missing prerequisites in case system requirements have changed, and then ask to verify your License Key. This key should match the new version you are upgrading to, not the existing version installed on the server. Once that information is verified, you must point the installer to the location of the application. The installer will default to the default installation location and if this is not correct, click the folder icon to select the proper installation location: After verifying the location, the installer will display the screen that shows the summary of actions to be performed. In case of an upgrade failure, a backup of the database is made. The location is given on the summary screen, and is usually the default backup directory for SQL Server. To recover your system, all you need to do is restore the backup over top of the existing corrupted database. You can then try the upgrade again. If problems persist, contact the support department, and they will explain how to retrieve the logs for remediation.","title":"Upgrading"},{"location":"Spira-Administration-Guide/Installing-SpiraPlan/#security-considerations","text":"The Microsoft Internet Information Services (IIS) web-server and SQL Server database are powerful tools to managing web-based applications. However it is important to make sure that they are correctly secured to prevent unauthorized access to applications being hosted on them. This is a fast-changing field and beyond the scope of this guide to address, however we recommend reading the following article for details on how to secure IIS: http://www.iis.net/learn/manage/configuring-security In addition to the steps outlined in this article, it is important to note that by default, all web pages served by IIS using the HTTP protocol are unencrypted, and as such, the usernames and passwords used by SpiraPlan\u00ae to log into the application can be read by network sniffing tools. If you are using SpiraPlan\u00ae purely within an intranet environment, this may not be an issue. However, if you are externally hosting SpiraPlan\u00ae onto a publicly accessible website, we recommend installing a Secure Sockets Layer (SSL) encryption certificate, and restricting all web-traffic to the secure HTTPS protocol instead.","title":"Security Considerations"},{"location":"Spira-Administration-Guide/Product-Changing-Template/","text":"Product: Changing the Template a Product Uses Introduction Each product in Spira has a template that controls the bulk of how that product is configured and will work for end users. Each product is controlled by one template, though each template can control many products at once. A template affects a product\u2019s fields, custom properties, workflows, and more. If you change a product\u2019s template, you are not changing the core data inside the product. But you are changing how that product will work. This is not something to do lightly. There is a deep connection between a product and its template. When you change templates, you are changing the workflows, and also all the links in the product from the old template to the new template. It\u2019s like trying to change out the engine in a car by replacing it with parts from another engine. If that new engine has different pistons and gears then the car will look the same, with the same seats, the same windows, and the same doors. It will just run a little differently. Below, we explain in gory detail: what happens when you try to change the engine (the template) of your car (product) how to work out if your system is set up to make the process run as successfully as possible where things are different between the two relevant templates, what will happen to your product. Key Facts By changing a product's template to a new one, you can make many pre-existing products be controlled by a single template. This can make it really easy to, for instance, change the workflow across lots of products at once Changing a product\u2019s template is irreversible. The change updates all links in the product that point to the old template so that they point to the new template The templates are 100% not changed in any way. No templates are merged together, and none of their data changes No other products are changed in any way, whether or not they are using the old or the new templates All data in the product that is not controlled by a template 100% does not change in any way (this includes product membership, components, names, description fields, comments, most custom fields) The application will show you how much data loss there could be, but if you are at all worried about losing data take a pause. The only custom fields that change are those of type lists or type multilist. No other custom field is altered (though it may not display as you expect) The only standard fields that change are those controlled by templates (see the full list below) After changing templates any data syncs the product uses are turned off and their fields reset You can see a success audit entry in the event log that records when a product's template was changed and what it was changed from and to Health Warnings Because references inside the product to the template it uses get updated/changed there is a chance of some data loss. Because this may change many records in your product, we recommend that you make the change at a time when users are not actively using the system - certainly not that particularly product. If you work in a heavily regulated environment we recommend not making use of this feature How to Change the Product's Template You need to be a product administrator or system administrator to perform this action Make sure the starting and ending templates for the product are as closely aligned as possible/required - based on the standard and custom fields specified above Go to the \u201c View/Edit Products \u201d page in system administration Click \u201cEdit\u201d next to the product you want to change templates for If you are not a system administrator, go to the Admin home page for the product and click \u201cView Details\u201d in the overview widget in the top left of the page On the edit product page you will see a \u201cProduct Template\u201d field. Click the \u201cChange\u201d button to its right A popup will show. Read the warning message, and if you wish to continue select the active template you are changing the product to from the alphabetical list (this also shows the template ID) Click \u201cNext\u201d If you see a little table at the top of the next page of the popup then some standard field data will be lost by changing template. The number of artifacts affected for each field will be listed Read the warning message. If you wish to proceed, type the name of the product into the text box and click \u201cChange\u201d A progress meter will show. When it disappears, the product\u2019s template has been successfully changed. What happens to standard fields As mentioned above, only those standard fields controlled by templates can change when changing templates for a product. Let\u2019s call these fields \u201cdynamic fields\u201d No other standard fields (i.e. non custom fields) in the product will change in any way. The dynamic fields in SpiraPlan are below (not all of these are available in SpiraTeam or SpiraTest): Requirement Importance Requirement Type Document Status Document Type Test Case Priority Test Case Type Incident Priority Incident Severity Incident Status Incident Type Task Priority Task Type Risk Impact Risk Probability Risk Status Risk Type For each of the dynamic fields above the system will: Try and find a matching name for each entry in the old template in the new template If there is an exact match, all references in the product to that name get updated to the matching reference in the new template If there is no match and the field is not required then all references in the product to that name are deleted If there is no match and the field is required then all references in the product to that name are replaced with the default value in the new template Example of a non required field - eg incident priority # Old template values New template values Value after changing template A high high high B middle medium [null] C low low low D v low - [null] Example of a required field - eg incident type # Old template values New template values Default in new template Value after changing template E bug bug Y bug F incident issue bug G enhancement enhancement enhancement H limitation limit bug What happens to custom fields As mentioned above, only custom fields of type list or multilist are affected by changing templates. No other custom field changes in any way and custom lists are also completely unchanged. Matching custom fields between templates is more complicated than for standard fields. Before the system can match values of custom list/multilist fields, it checks that the custom field in the old template has a matching field in the new template. A custom list/multilist field has a match between the templates if: There is a custom field at the exact same position in both templates These two fields are the exact same type (eg multilist) These two fields have the same name The custom lists that the two fields use have the same name If all the above conditions are met, the system will: Try and find a matching name in the relevant custom lists that the old template uses for that field and the new template uses for that field If there\u2019s an exact match between these names, all references in the product to that name get changed from the old template to the new template If there is no match then the old data is not changed at all (though it may appear like it was blanked out when you look at it in the application) How does the history get updated? When you look at the history for artifacts after the template has been changed, you won\u2019t see any difference. Behind the scenes, references to dynamic fields and custom list/multilist fields, are updated to the new template. This so that, where possible, when you try and revert a history change, the reverted data updates the artifact to the new template - not the old one. If there was no match found when changing templates, then reverting history will not revert that particular field. What about test configurations? Test configurations use the template\u2019s custom lists. So when you change templates to a new template with different custom lists, what will happen? The system will: Look for a custom list in the new template that has the exact same name as that in the old template If there is a match for the list, it looks for matches by name of each value between the templates If there is a match on a name in the list, then any configuration using that name gets updated to use the matching value in the new template If there is no match then any rows in the test configuration using that value are removed How to prepare for the change As you will see above, the process of changing templates is not without risks. We flag many of these risks to you during the process itself to guide you. Below are five steps to help you prepare for changing to a product's template. Check your standard \"dynamic\" fields : go through all of the dynamic fields (listed above) and check that every name in the old template has an exact match in the new template. These names do not need to be in the same position necessarily, and it does not matter if they are active or inactive. All that matters is that every name in use has a matching name in the new template Check all custom lists in use : for all custom lists that are used by custom fields or test configurations, make sure that the names of the lists match between the templates, and that all the values within the lists match as well Check custom fields/properties of type list/multilist : make sure that each field is in the same position (1 to 30) and has the same name and type in both templates Understand the risks and benefits of changing Get buy in for the change","title":"Changing Templates"},{"location":"Spira-Administration-Guide/Product-Changing-Template/#product-changing-the-template-a-product-uses","text":"","title":"Product: Changing the Template a Product Uses"},{"location":"Spira-Administration-Guide/Product-Changing-Template/#introduction","text":"Each product in Spira has a template that controls the bulk of how that product is configured and will work for end users. Each product is controlled by one template, though each template can control many products at once. A template affects a product\u2019s fields, custom properties, workflows, and more. If you change a product\u2019s template, you are not changing the core data inside the product. But you are changing how that product will work. This is not something to do lightly. There is a deep connection between a product and its template. When you change templates, you are changing the workflows, and also all the links in the product from the old template to the new template. It\u2019s like trying to change out the engine in a car by replacing it with parts from another engine. If that new engine has different pistons and gears then the car will look the same, with the same seats, the same windows, and the same doors. It will just run a little differently. Below, we explain in gory detail: what happens when you try to change the engine (the template) of your car (product) how to work out if your system is set up to make the process run as successfully as possible where things are different between the two relevant templates, what will happen to your product.","title":"Introduction"},{"location":"Spira-Administration-Guide/Product-Changing-Template/#key-facts","text":"By changing a product's template to a new one, you can make many pre-existing products be controlled by a single template. This can make it really easy to, for instance, change the workflow across lots of products at once Changing a product\u2019s template is irreversible. The change updates all links in the product that point to the old template so that they point to the new template The templates are 100% not changed in any way. No templates are merged together, and none of their data changes No other products are changed in any way, whether or not they are using the old or the new templates All data in the product that is not controlled by a template 100% does not change in any way (this includes product membership, components, names, description fields, comments, most custom fields) The application will show you how much data loss there could be, but if you are at all worried about losing data take a pause. The only custom fields that change are those of type lists or type multilist. No other custom field is altered (though it may not display as you expect) The only standard fields that change are those controlled by templates (see the full list below) After changing templates any data syncs the product uses are turned off and their fields reset You can see a success audit entry in the event log that records when a product's template was changed and what it was changed from and to","title":"Key Facts"},{"location":"Spira-Administration-Guide/Product-Changing-Template/#health-warnings","text":"Because references inside the product to the template it uses get updated/changed there is a chance of some data loss. Because this may change many records in your product, we recommend that you make the change at a time when users are not actively using the system - certainly not that particularly product. If you work in a heavily regulated environment we recommend not making use of this feature","title":"Health Warnings"},{"location":"Spira-Administration-Guide/Product-Changing-Template/#how-to-change-the-products-template","text":"You need to be a product administrator or system administrator to perform this action Make sure the starting and ending templates for the product are as closely aligned as possible/required - based on the standard and custom fields specified above Go to the \u201c View/Edit Products \u201d page in system administration Click \u201cEdit\u201d next to the product you want to change templates for If you are not a system administrator, go to the Admin home page for the product and click \u201cView Details\u201d in the overview widget in the top left of the page On the edit product page you will see a \u201cProduct Template\u201d field. Click the \u201cChange\u201d button to its right A popup will show. Read the warning message, and if you wish to continue select the active template you are changing the product to from the alphabetical list (this also shows the template ID) Click \u201cNext\u201d If you see a little table at the top of the next page of the popup then some standard field data will be lost by changing template. The number of artifacts affected for each field will be listed Read the warning message. If you wish to proceed, type the name of the product into the text box and click \u201cChange\u201d A progress meter will show. When it disappears, the product\u2019s template has been successfully changed.","title":"How to Change the Product's Template"},{"location":"Spira-Administration-Guide/Product-Changing-Template/#what-happens-to-standard-fields","text":"As mentioned above, only those standard fields controlled by templates can change when changing templates for a product. Let\u2019s call these fields \u201cdynamic fields\u201d No other standard fields (i.e. non custom fields) in the product will change in any way. The dynamic fields in SpiraPlan are below (not all of these are available in SpiraTeam or SpiraTest): Requirement Importance Requirement Type Document Status Document Type Test Case Priority Test Case Type Incident Priority Incident Severity Incident Status Incident Type Task Priority Task Type Risk Impact Risk Probability Risk Status Risk Type For each of the dynamic fields above the system will: Try and find a matching name for each entry in the old template in the new template If there is an exact match, all references in the product to that name get updated to the matching reference in the new template If there is no match and the field is not required then all references in the product to that name are deleted If there is no match and the field is required then all references in the product to that name are replaced with the default value in the new template","title":"What happens to standard fields"},{"location":"Spira-Administration-Guide/Product-Changing-Template/#example-of-a-non-required-field-eg-incident-priority","text":"# Old template values New template values Value after changing template A high high high B middle medium [null] C low low low D v low - [null]","title":"Example of a non required field - eg incident priority"},{"location":"Spira-Administration-Guide/Product-Changing-Template/#example-of-a-required-field-eg-incident-type","text":"# Old template values New template values Default in new template Value after changing template E bug bug Y bug F incident issue bug G enhancement enhancement enhancement H limitation limit bug","title":"Example of a required field - eg incident type"},{"location":"Spira-Administration-Guide/Product-Changing-Template/#what-happens-to-custom-fields","text":"As mentioned above, only custom fields of type list or multilist are affected by changing templates. No other custom field changes in any way and custom lists are also completely unchanged. Matching custom fields between templates is more complicated than for standard fields. Before the system can match values of custom list/multilist fields, it checks that the custom field in the old template has a matching field in the new template. A custom list/multilist field has a match between the templates if: There is a custom field at the exact same position in both templates These two fields are the exact same type (eg multilist) These two fields have the same name The custom lists that the two fields use have the same name If all the above conditions are met, the system will: Try and find a matching name in the relevant custom lists that the old template uses for that field and the new template uses for that field If there\u2019s an exact match between these names, all references in the product to that name get changed from the old template to the new template If there is no match then the old data is not changed at all (though it may appear like it was blanked out when you look at it in the application)","title":"What happens to custom fields"},{"location":"Spira-Administration-Guide/Product-Changing-Template/#how-does-the-history-get-updated","text":"When you look at the history for artifacts after the template has been changed, you won\u2019t see any difference. Behind the scenes, references to dynamic fields and custom list/multilist fields, are updated to the new template. This so that, where possible, when you try and revert a history change, the reverted data updates the artifact to the new template - not the old one. If there was no match found when changing templates, then reverting history will not revert that particular field.","title":"How does the history get updated?"},{"location":"Spira-Administration-Guide/Product-Changing-Template/#what-about-test-configurations","text":"Test configurations use the template\u2019s custom lists. So when you change templates to a new template with different custom lists, what will happen? The system will: Look for a custom list in the new template that has the exact same name as that in the old template If there is a match for the list, it looks for matches by name of each value between the templates If there is a match on a name in the list, then any configuration using that name gets updated to use the matching value in the new template If there is no match then any rows in the test configuration using that value are removed","title":"What about test configurations?"},{"location":"Spira-Administration-Guide/Product-Changing-Template/#how-to-prepare-for-the-change","text":"As you will see above, the process of changing templates is not without risks. We flag many of these risks to you during the process itself to guide you. Below are five steps to help you prepare for changing to a product's template. Check your standard \"dynamic\" fields : go through all of the dynamic fields (listed above) and check that every name in the old template has an exact match in the new template. These names do not need to be in the same position necessarily, and it does not matter if they are active or inactive. All that matters is that every name in use has a matching name in the new template Check all custom lists in use : for all custom lists that are used by custom fields or test configurations, make sure that the names of the lists match between the templates, and that all the values within the lists match as well Check custom fields/properties of type list/multilist : make sure that each field is in the same position (1 to 30) and has the same name and type in both templates Understand the risks and benefits of changing Get buy in for the change","title":"How to prepare for the change"},{"location":"Spira-Administration-Guide/Product-General-Settings/","text":"Product: General Settings Product History Changes This page displays a list, by default in chronological order, of changes made to items within the selected product. At this time, only changes made to Requirements, Tasks, Incidents, Test Cases, Test Steps, Test Sets, Releases, and Automation Hosts are recorded. Certain changes are to these artifacts are not recorded, such as location changes (indenting, outdenting), and comment additions. There are a handful of change types recorded and displayed here: Modified : The most common, this means that one or more fields in this artifact were changed. Note that if a standard field and a custom field were changed at the same time, it will generate two separate entries, one for the standard fields, one for the custom fields. Added : This means that this artifact was added, created in the system, either by using the New menu option or by copying. Pasting an item that was cut will not result in an Added entry being created. Rollback : This items means that the artifact was rolled back to a specific event in the history. Deleted : This entry is created when an artifact is deleted from the system. Undelete : This entry is created when an artifact was deleted and then undeleted, making it live in the system again. Purged : This entry is created (and all other history items are removed) when a deleted artifact is purged from the system. Purged items are removed from the database, and cannot be recovered. Note : When upgrading from a version before v3.1, each individual field changed will be considered a unique change, due to how previous versions recorded history. However, as soon as the application is upgraded, simultaneous changes will be grouped together based on their last-update date. This screen allows the administrator several options: Viewing Details : The detail screen for each change set can be viewed by clicking on the change ID #. This will take you to the history details screen, described below. Revert : This button will roll back all items in the list that are checked. You must have at least one row checked to revert. See the section on reverting below. Purge All : This button will permanently purge all deleted items from the database. Once items are purged, they cannot be restored. History Details Screen The history details screen displays information on the selected change set: The History Details screen will show basic information as well as fields that were changed in this change set. Shown here is the Change ID, the date and time that the change was made, the user that made the change, the change type, the artifact affected, and the set of fields affected. If a set of fields were affected (Standard or Custom), then the list of fields will be listed below. In the example above, the change was a Modification, and 5 fields were changed. In other change types, no fields will be displayed. If the artifact is still available in the system, you can click the Artifact or click the 'View Item' button in the toolbar to view the item as it is currently. However, if the item has been deleted, a warning label will be displayed (as above in the example screenshot), the View Item links will be disabled, and a new option, \"Purge\" will appear on the toolbar. Purging Items Items that have been deleted by any user still remain in the database, but do not affect statistics or reports, and do not show up in reports and cannot be viewed. The artifacts are still in the database, however, and can be restored by clicking on the Restore button in the toolbar. Purging an individual item can only be done while viewing one of its history detail screens. Once an item is purged, you will be taken back to the history list screen. All the previous history items for the artifact will be removed, and replaced with a single \"Purged\" history item. Items that are purged cannot be restored into the database, as unique identifiers will be wiped from the database, so be sure that you are sure you want to purge an item before doing so. You can purge all items in the product at once by clicking the \"Purge All\" button located on the History List page. This will take some time depending on how many deleted items are in your database, and it is recommended that the database files be compressed in SQL Management Studio afterwards to free up space and compress clustered indexes. Reverting Items Reverting an artifact will attempt to reset all fields back to the selected change set, reverting all changes made after the selected change set as well. In certain cases, the artifact will not be able to be reverted -- cases like this could be caused by other items having been deleted or purged. (For example, if Requirement #1 was linked to Release #4, and that Release does not exist anymore.) In cases like this, no fields will be reverted and the artifact will remain unchanged. Reverting an item will cause it to be undeleted if it has been deleted. You can revert multiple items from the History List page -- however, the only items that can be reverted back are Deletes and Modifications. All other types will be ignored. When selecting multiple items, you can select more than a single change set for a specific artifact, the artifact will be rolled back to the earliest change set selected. Product Associations By default, all products in SpiraPlan are completely self-contained. Artifacts in one product can only be linked or associated with artifacts in the same product. However, for some customers, they need a way to share artifacts between products. This administration screen lets the product admin specify which other products can access artifacts in the current product: Note: When you share artifacts from the current product to another product, the permissions in the other product will determine which users can see the items, so you need to make sure that is acceptable before enabling the sharing. To share artifacts with another product, click on the 'Add' button in the toolbar: Select the name of the product you want to share with and choose which artifact(s) you want to share with this product: When you click the 'Add' button, SpiraPlan will add the new product association to the list. You can change the product association (for example to change which artifacts are shared) by clicking on the 'Edit' button to the right. This updates the association list. To remove an association, simply select its checkbox and click 'Remove'. Data Synchronization This pages shows a list of all active integration plug-ins that the product is actively synchronizing with. Available plugins are set system wide . In the above example, only TFS is active for this particular product. Clicking on \"View Product Mappings\" will display a detailed page for configuring this product to work with this plug-in. Here you can set the external key to use in the external application and map all relevant fields between Spira and this application. To read about how to configure this page, refer to the guide for your particular external bug tracking tool . Product Data Tools This page contains several different data management tools that can be used to identify certain data issues in the system and correct them. There are two main sections to this page -- Data Caching and Indentation Hierarchy: a) Database Indexes In order to improve the performance of SpiraPlan\u00ae, it can be beneficial to refresh the database indexes. Clicking the \"Refresh\" button illustrated above will refresh all relevant database indexes across all SpiraPlan products. If for any reason performance seems to be slower than usual after a large import of data (for instance from Excel, or using the product migration tool) or after a recent database upgrade, you should consider refreshing the indexes. Depending on the size of the database, this could take some time. Please keep the web page open throughout the process to ensure it can complete successfully. b) Data Caching In order to improve the performance of SpiraPlan\u00ae, certain types of product data are cached. If for any reason you make changes to test cases, test runs or tasks in the system through the database, you may need to update the cached values for test execution status and task progress that are displayed on the requirements and releases pages. To refresh the execution status or task progress data, click on the appropriate \"Refresh\" button illustrated above. c) Indentation Hierarchy The Requirement and Releases pages use an \"Indent\" system for managing the hierarchy of information. This allows requirements and test cases to be nested under parent items and be rapidly searched and filtered on. Sometimes if a move/copy operation is interrupted (due to a network outage, etc.) the hierarchy may get corrupted. If so, you'll see a red Error message instead of the Green OK. If that happens, just click on the appropriate \"Correct\" button and the system will correct the indent levels for you. Source Code Clicking on the Source Code link in the administration menu will, if a source code provider has been set up by a system administrator, show a screen like the one below. The first thing you need to do (regardless of whether you'll be overriding any of the settings) is to make the provider active for the current product. To do this, change the toggle to \"Yes\" and click [Save]: Now you can decide whether you want to override any of the default settings for this product. Any field left blank will automatically get its settings from the default values entered earlier. In the example above, we have specified a product-specific repository path, login and password. Once you have correctly configured the product, click [Save] to commit the changes. To improve performance, SpiraPlan will cache some of the data it receives from the version control provider. Normally SpiraPlan will know when to update the cached data based on changes made in the version control system automatically. However sometimes you may wish to flush the cached data completed, to do this, click on the [Clear Cache] button. You are now ready to use SpiraPlan\u00ae in conjunction with the version control tool you selected. For details on how to use the Source Code integration features of SpiraPlan, please refer to the SpiraPlan\u00ae User Manual .","title":"General Settings"},{"location":"Spira-Administration-Guide/Product-General-Settings/#product-general-settings","text":"","title":"Product: General Settings"},{"location":"Spira-Administration-Guide/Product-General-Settings/#product-history-changes","text":"This page displays a list, by default in chronological order, of changes made to items within the selected product. At this time, only changes made to Requirements, Tasks, Incidents, Test Cases, Test Steps, Test Sets, Releases, and Automation Hosts are recorded. Certain changes are to these artifacts are not recorded, such as location changes (indenting, outdenting), and comment additions. There are a handful of change types recorded and displayed here: Modified : The most common, this means that one or more fields in this artifact were changed. Note that if a standard field and a custom field were changed at the same time, it will generate two separate entries, one for the standard fields, one for the custom fields. Added : This means that this artifact was added, created in the system, either by using the New menu option or by copying. Pasting an item that was cut will not result in an Added entry being created. Rollback : This items means that the artifact was rolled back to a specific event in the history. Deleted : This entry is created when an artifact is deleted from the system. Undelete : This entry is created when an artifact was deleted and then undeleted, making it live in the system again. Purged : This entry is created (and all other history items are removed) when a deleted artifact is purged from the system. Purged items are removed from the database, and cannot be recovered. Note : When upgrading from a version before v3.1, each individual field changed will be considered a unique change, due to how previous versions recorded history. However, as soon as the application is upgraded, simultaneous changes will be grouped together based on their last-update date. This screen allows the administrator several options: Viewing Details : The detail screen for each change set can be viewed by clicking on the change ID #. This will take you to the history details screen, described below. Revert : This button will roll back all items in the list that are checked. You must have at least one row checked to revert. See the section on reverting below. Purge All : This button will permanently purge all deleted items from the database. Once items are purged, they cannot be restored.","title":"Product History Changes"},{"location":"Spira-Administration-Guide/Product-General-Settings/#history-details-screen","text":"The history details screen displays information on the selected change set: The History Details screen will show basic information as well as fields that were changed in this change set. Shown here is the Change ID, the date and time that the change was made, the user that made the change, the change type, the artifact affected, and the set of fields affected. If a set of fields were affected (Standard or Custom), then the list of fields will be listed below. In the example above, the change was a Modification, and 5 fields were changed. In other change types, no fields will be displayed. If the artifact is still available in the system, you can click the Artifact or click the 'View Item' button in the toolbar to view the item as it is currently. However, if the item has been deleted, a warning label will be displayed (as above in the example screenshot), the View Item links will be disabled, and a new option, \"Purge\" will appear on the toolbar.","title":"History Details Screen"},{"location":"Spira-Administration-Guide/Product-General-Settings/#purging-items","text":"Items that have been deleted by any user still remain in the database, but do not affect statistics or reports, and do not show up in reports and cannot be viewed. The artifacts are still in the database, however, and can be restored by clicking on the Restore button in the toolbar. Purging an individual item can only be done while viewing one of its history detail screens. Once an item is purged, you will be taken back to the history list screen. All the previous history items for the artifact will be removed, and replaced with a single \"Purged\" history item. Items that are purged cannot be restored into the database, as unique identifiers will be wiped from the database, so be sure that you are sure you want to purge an item before doing so. You can purge all items in the product at once by clicking the \"Purge All\" button located on the History List page. This will take some time depending on how many deleted items are in your database, and it is recommended that the database files be compressed in SQL Management Studio afterwards to free up space and compress clustered indexes.","title":"Purging Items"},{"location":"Spira-Administration-Guide/Product-General-Settings/#reverting-items","text":"Reverting an artifact will attempt to reset all fields back to the selected change set, reverting all changes made after the selected change set as well. In certain cases, the artifact will not be able to be reverted -- cases like this could be caused by other items having been deleted or purged. (For example, if Requirement #1 was linked to Release #4, and that Release does not exist anymore.) In cases like this, no fields will be reverted and the artifact will remain unchanged. Reverting an item will cause it to be undeleted if it has been deleted. You can revert multiple items from the History List page -- however, the only items that can be reverted back are Deletes and Modifications. All other types will be ignored. When selecting multiple items, you can select more than a single change set for a specific artifact, the artifact will be rolled back to the earliest change set selected.","title":"Reverting Items"},{"location":"Spira-Administration-Guide/Product-General-Settings/#product-associations","text":"By default, all products in SpiraPlan are completely self-contained. Artifacts in one product can only be linked or associated with artifacts in the same product. However, for some customers, they need a way to share artifacts between products. This administration screen lets the product admin specify which other products can access artifacts in the current product: Note: When you share artifacts from the current product to another product, the permissions in the other product will determine which users can see the items, so you need to make sure that is acceptable before enabling the sharing. To share artifacts with another product, click on the 'Add' button in the toolbar: Select the name of the product you want to share with and choose which artifact(s) you want to share with this product: When you click the 'Add' button, SpiraPlan will add the new product association to the list. You can change the product association (for example to change which artifacts are shared) by clicking on the 'Edit' button to the right. This updates the association list. To remove an association, simply select its checkbox and click 'Remove'.","title":"Product Associations"},{"location":"Spira-Administration-Guide/Product-General-Settings/#data-synchronization","text":"This pages shows a list of all active integration plug-ins that the product is actively synchronizing with. Available plugins are set system wide . In the above example, only TFS is active for this particular product. Clicking on \"View Product Mappings\" will display a detailed page for configuring this product to work with this plug-in. Here you can set the external key to use in the external application and map all relevant fields between Spira and this application. To read about how to configure this page, refer to the guide for your particular external bug tracking tool .","title":"Data Synchronization"},{"location":"Spira-Administration-Guide/Product-General-Settings/#product-data-tools","text":"This page contains several different data management tools that can be used to identify certain data issues in the system and correct them. There are two main sections to this page -- Data Caching and Indentation Hierarchy: a) Database Indexes In order to improve the performance of SpiraPlan\u00ae, it can be beneficial to refresh the database indexes. Clicking the \"Refresh\" button illustrated above will refresh all relevant database indexes across all SpiraPlan products. If for any reason performance seems to be slower than usual after a large import of data (for instance from Excel, or using the product migration tool) or after a recent database upgrade, you should consider refreshing the indexes. Depending on the size of the database, this could take some time. Please keep the web page open throughout the process to ensure it can complete successfully. b) Data Caching In order to improve the performance of SpiraPlan\u00ae, certain types of product data are cached. If for any reason you make changes to test cases, test runs or tasks in the system through the database, you may need to update the cached values for test execution status and task progress that are displayed on the requirements and releases pages. To refresh the execution status or task progress data, click on the appropriate \"Refresh\" button illustrated above. c) Indentation Hierarchy The Requirement and Releases pages use an \"Indent\" system for managing the hierarchy of information. This allows requirements and test cases to be nested under parent items and be rapidly searched and filtered on. Sometimes if a move/copy operation is interrupted (due to a network outage, etc.) the hierarchy may get corrupted. If so, you'll see a red Error message instead of the Green OK. If that happens, just click on the appropriate \"Correct\" button and the system will correct the indent levels for you.","title":"Product Data Tools"},{"location":"Spira-Administration-Guide/Product-General-Settings/#source-code","text":"Clicking on the Source Code link in the administration menu will, if a source code provider has been set up by a system administrator, show a screen like the one below. The first thing you need to do (regardless of whether you'll be overriding any of the settings) is to make the provider active for the current product. To do this, change the toggle to \"Yes\" and click [Save]: Now you can decide whether you want to override any of the default settings for this product. Any field left blank will automatically get its settings from the default values entered earlier. In the example above, we have specified a product-specific repository path, login and password. Once you have correctly configured the product, click [Save] to commit the changes. To improve performance, SpiraPlan will cache some of the data it receives from the version control provider. Normally SpiraPlan will know when to update the cached data based on changes made in the version control system automatically. However sometimes you may wish to flush the cached data completed, to do this, click on the [Clear Cache] button. You are now ready to use SpiraPlan\u00ae in conjunction with the version control tool you selected. For details on how to use the Source Code integration features of SpiraPlan, please refer to the SpiraPlan\u00ae User Manual .","title":"Source Code"},{"location":"Spira-Administration-Guide/Product-Home/","text":"Product: Home Page The Product Administration Home page is accessible to users whose product role includes product admin permission. There are multiple ways to navigate to it: Click the \"Administration\" link in the upper right. This will display the context aware administration menu popup. Then click on the Product Name at the top. On the Template Admin Home page, click on the Product Name in the Product List widget. It provides Product Owners with quick access to important information. As with other dashboards, you can edit these widgets, their position, and what is shown, using the two buttons in the top right (the cog and the plus). Product Overview This widget displays general information about the product. To edit this information, click \u201cView Details\u201d. Product History Changes This widget shows the latest history changes in the product. By default, 5 items are shown, but this number can be changed. To view the complete Product History list, click View All. Product Membership This widget shows a list of product members. By default, 10 users are shown, but this number can be changed. To view the complete Product Membership list and edit it, click View All. Components This widget shows the active components for the product. By default, 5 components are shown, but this number can be changed. To view or edit the complete list of components, click View All. Source Code If a source code provider has been set up by a system administrator and is active for the current product, it will be displayed here. Click View Details to configure it. Data Synchronization If any Data Sync plug-ins have been set up by a system administrator, they will be displayed here. Click View Details to see more details and to configure them for the current product.","title":"Home page"},{"location":"Spira-Administration-Guide/Product-Home/#product-home-page","text":"The Product Administration Home page is accessible to users whose product role includes product admin permission. There are multiple ways to navigate to it: Click the \"Administration\" link in the upper right. This will display the context aware administration menu popup. Then click on the Product Name at the top. On the Template Admin Home page, click on the Product Name in the Product List widget. It provides Product Owners with quick access to important information. As with other dashboards, you can edit these widgets, their position, and what is shown, using the two buttons in the top right (the cog and the plus).","title":"Product: Home Page"},{"location":"Spira-Administration-Guide/Product-Home/#product-overview","text":"This widget displays general information about the product. To edit this information, click \u201cView Details\u201d.","title":"Product Overview"},{"location":"Spira-Administration-Guide/Product-Home/#product-history-changes","text":"This widget shows the latest history changes in the product. By default, 5 items are shown, but this number can be changed. To view the complete Product History list, click View All.","title":"Product History Changes"},{"location":"Spira-Administration-Guide/Product-Home/#product-membership","text":"This widget shows a list of product members. By default, 10 users are shown, but this number can be changed. To view the complete Product Membership list and edit it, click View All.","title":"Product Membership"},{"location":"Spira-Administration-Guide/Product-Home/#components","text":"This widget shows the active components for the product. By default, 5 components are shown, but this number can be changed. To view or edit the complete list of components, click View All.","title":"Components"},{"location":"Spira-Administration-Guide/Product-Home/#source-code","text":"If a source code provider has been set up by a system administrator and is active for the current product, it will be displayed here. Click View Details to configure it.","title":"Source Code"},{"location":"Spira-Administration-Guide/Product-Home/#data-synchronization","text":"If any Data Sync plug-ins have been set up by a system administrator, they will be displayed here. Click View Details to see more details and to configure them for the current product.","title":"Data Synchronization"},{"location":"Spira-Administration-Guide/Product-Planning/","text":"Product: Planning Edit Components SpiraPlan lets you define a list of Components for each product. These components represent the main functional areas of the system and artifacts can be associated with each of the defined components. This page lets you display the list of components based on three predefined filters: All Active -- This displays only the components that are listed as Active = Yes. Only active components will be displayed inside the main application. All But Deleted -- This displays all the components (active and inactive) except those that have been deleted. All -- This displays all the components (active, inactive, and deleted). From this page you can click on the 'Add Component' option to add a new component in the list: After entering the name of the new component and choosing its Active status, click on 'Save' to commit the new item. To edit an existing component, edit its name and Active status and click 'Save'. To delete a component, click the 'Delete' option next to its name. Once deleted, an item can be undeleted by changing the display to 'All' and then clicking 'Undelete'. Planning Options The Planning Options page lets you configure the schedule and calendar options for the various product estimation and planning modules. The settings are specific to each product: This page allows you to make changes to the following settings: General Work Hours Per Day -- this setting allow you to specify how many work hours should be used when converting an effort calculation from hours to calendar days. For example a 12 hour task will occupy two days if you set the working hours per day to 6 hours, whereas the same task will occupy 1 \u00bd days only if you set the working hours per day to 8 hours. Work Days Per Week -- this setting allows you to specify how many days in the week are typically worked on the product. By default the system assumes a 5-day (Mon-Fri) working week, but if your organization works Saturdays (for example), you may want to switch to a 6-day working week. If you want to use partial days, then just round up to the nearest day and add non-working hours (see below) to compensate. Non-Working Hours Per Month -- this setting allows to specify how many non-working hours typically need to be accounted for. This is useful if you want to have a working week that contains a fractional number of days or if you have recurring activities that need to be removed from each month. Note that if you have specific holidays, vacation days that need to be accounted for, it is better to use the Release/Iteration non-working time feature instead. Effort Calculations -- When calculating how much effort has been scheduled in a release or iteration, the system will aggregate the individual effort values (both estimated and actual) for all the task, incident and test cases artifacts associated with the release/iteration. This setting allows you to specify if you want only task, incident, or test case effort values to be included in the release/iteration total. This is useful if your product management methodology requires that incident or test case effort values be excluded from the total. Requirements Default Estimate -- Normally when you create a new Requirement in the system it will be given an empty initial estimate (in points). However if many requirements are typically a standard size, then as a time-saver, the system will let you specify a default estimate value that will be used when a new requirement is created. Point Effort -- When requirements are added to the Planning Board or Iteration planning screen, they will have an initial effort (in hours) that is used until tasks are added (see Auto-Create Tasks option). This field contains the standard conversion factor used to convert points into hours based on the current team velocity (how much time it takes on average to accomplish one story point). As the product progresses, the team velocity will change, so you can click on the [Suggest] button to have the system calculate how many hours each existing story point has taken to implement in the product and provide that as a recommendation: Auto-Create Tasks -- When you change the status of a Requirement in the system to \"In-Progress\" the system will automatically add a default Task to that requirement if no tasks already exist. This is a useful shortcut that makes planning with requirements easier in the case when the requirements are of a size where they don't need to be formally decomposed into multiple developer tasks. However if you don't want the system to automatically create tasks in, you can deselect the option for the current product and it will turn off the feature. Auto-Planned -- When this option is enabled, if you assign a release/iteration to a requirement, and the requirement is not already in the 'Planned' status, the system will automatically switch the status of the requirement to 'Planned'. Use Task Status -- When this option is enabled, if you add any tasks to a requirement, the status of the requirement will be automatically governed by the aggregate status of the associated tasks. Use Test Status - When this option is enabled, if you associate any test cases to a requirement, the status of the requirement will be automatically switched from 'Developed' to 'Tested' when all the associated test cases are passed. Task & Incidents Default Effort -- Normally when you create a new Task in the system it will be given an empty initial estimated effort. However if many tasks are typically a standard size, then as a time-saver, the system will let you specify a default estimated effort that will be used when a new task is created. Time Tracking -- SpiraPlan\u00ae has an integrated time tracking system that allows the easy entry of the hours spent on all assigned incidents and tasks in one place (see the SpiraPlan User Manual for more details on this feature). This setting allows administrators to specify if they want the integrated time tracking features enabled for both incidents or tasks (or neither).","title":"Planning"},{"location":"Spira-Administration-Guide/Product-Planning/#product-planning","text":"","title":"Product: Planning"},{"location":"Spira-Administration-Guide/Product-Planning/#edit-components","text":"SpiraPlan lets you define a list of Components for each product. These components represent the main functional areas of the system and artifacts can be associated with each of the defined components. This page lets you display the list of components based on three predefined filters: All Active -- This displays only the components that are listed as Active = Yes. Only active components will be displayed inside the main application. All But Deleted -- This displays all the components (active and inactive) except those that have been deleted. All -- This displays all the components (active, inactive, and deleted). From this page you can click on the 'Add Component' option to add a new component in the list: After entering the name of the new component and choosing its Active status, click on 'Save' to commit the new item. To edit an existing component, edit its name and Active status and click 'Save'. To delete a component, click the 'Delete' option next to its name. Once deleted, an item can be undeleted by changing the display to 'All' and then clicking 'Undelete'.","title":"Edit Components"},{"location":"Spira-Administration-Guide/Product-Planning/#planning-options","text":"The Planning Options page lets you configure the schedule and calendar options for the various product estimation and planning modules. The settings are specific to each product: This page allows you to make changes to the following settings: General Work Hours Per Day -- this setting allow you to specify how many work hours should be used when converting an effort calculation from hours to calendar days. For example a 12 hour task will occupy two days if you set the working hours per day to 6 hours, whereas the same task will occupy 1 \u00bd days only if you set the working hours per day to 8 hours. Work Days Per Week -- this setting allows you to specify how many days in the week are typically worked on the product. By default the system assumes a 5-day (Mon-Fri) working week, but if your organization works Saturdays (for example), you may want to switch to a 6-day working week. If you want to use partial days, then just round up to the nearest day and add non-working hours (see below) to compensate. Non-Working Hours Per Month -- this setting allows to specify how many non-working hours typically need to be accounted for. This is useful if you want to have a working week that contains a fractional number of days or if you have recurring activities that need to be removed from each month. Note that if you have specific holidays, vacation days that need to be accounted for, it is better to use the Release/Iteration non-working time feature instead. Effort Calculations -- When calculating how much effort has been scheduled in a release or iteration, the system will aggregate the individual effort values (both estimated and actual) for all the task, incident and test cases artifacts associated with the release/iteration. This setting allows you to specify if you want only task, incident, or test case effort values to be included in the release/iteration total. This is useful if your product management methodology requires that incident or test case effort values be excluded from the total. Requirements Default Estimate -- Normally when you create a new Requirement in the system it will be given an empty initial estimate (in points). However if many requirements are typically a standard size, then as a time-saver, the system will let you specify a default estimate value that will be used when a new requirement is created. Point Effort -- When requirements are added to the Planning Board or Iteration planning screen, they will have an initial effort (in hours) that is used until tasks are added (see Auto-Create Tasks option). This field contains the standard conversion factor used to convert points into hours based on the current team velocity (how much time it takes on average to accomplish one story point). As the product progresses, the team velocity will change, so you can click on the [Suggest] button to have the system calculate how many hours each existing story point has taken to implement in the product and provide that as a recommendation: Auto-Create Tasks -- When you change the status of a Requirement in the system to \"In-Progress\" the system will automatically add a default Task to that requirement if no tasks already exist. This is a useful shortcut that makes planning with requirements easier in the case when the requirements are of a size where they don't need to be formally decomposed into multiple developer tasks. However if you don't want the system to automatically create tasks in, you can deselect the option for the current product and it will turn off the feature. Auto-Planned -- When this option is enabled, if you assign a release/iteration to a requirement, and the requirement is not already in the 'Planned' status, the system will automatically switch the status of the requirement to 'Planned'. Use Task Status -- When this option is enabled, if you add any tasks to a requirement, the status of the requirement will be automatically governed by the aggregate status of the associated tasks. Use Test Status - When this option is enabled, if you associate any test cases to a requirement, the status of the requirement will be automatically switched from 'Developed' to 'Tested' when all the associated test cases are passed. Task & Incidents Default Effort -- Normally when you create a new Task in the system it will be given an empty initial estimated effort. However if many tasks are typically a standard size, then as a time-saver, the system will let you specify a default estimated effort that will be used when a new task is created. Time Tracking -- SpiraPlan\u00ae has an integrated time tracking system that allows the easy entry of the hours spent on all assigned incidents and tasks in one place (see the SpiraPlan User Manual for more details on this feature). This setting allows administrators to specify if they want the integrated time tracking features enabled for both incidents or tasks (or neither).","title":"Planning Options"},{"location":"Spira-Administration-Guide/Product-Users/","text":"Product: Users Product Membership The following screen is displayed when you choose the \"Product Membership\" link from the Administration menu: This screen displays the name of the current product together with a list of all the users who are currently members of the product along with their currently assigned product role. If you want to modify the membership for a different product, click the \"Change Product\" button to be taken back to View/Edit Products screen where you can select a different product. To modify the role of a user assigned to the product, change the role for that user's entry in the drop-down menu and click the \"Save\" button. To remove a user from the product, check the box to the left of the user's name and click the \"Delete\" button. Note that this only removes them from the product, not the entire system. See the product roles documentation for more information. To add a user to the product, so that they can access its information, click the \"Add\" button and you will be taken to the following screen that lists all the users in the system that are not currently members of the product: You now should narrow down the list of users by entering filter criteria and clicking [Filter]; you can also sort the results to make viewing easier. Once you have located the appropriate user(s), just select a product role for them from the drop-down list and click [Add] to add them to the product in the specified role.","title":"Users"},{"location":"Spira-Administration-Guide/Product-Users/#product-users","text":"","title":"Product: Users"},{"location":"Spira-Administration-Guide/Product-Users/#product-membership","text":"The following screen is displayed when you choose the \"Product Membership\" link from the Administration menu: This screen displays the name of the current product together with a list of all the users who are currently members of the product along with their currently assigned product role. If you want to modify the membership for a different product, click the \"Change Product\" button to be taken back to View/Edit Products screen where you can select a different product. To modify the role of a user assigned to the product, change the role for that user's entry in the drop-down menu and click the \"Save\" button. To remove a user from the product, check the box to the left of the user's name and click the \"Delete\" button. Note that this only removes them from the product, not the entire system. See the product roles documentation for more information. To add a user to the product, so that they can access its information, click the \"Add\" button and you will be taken to the following screen that lists all the users in the system that are not currently members of the product: You now should narrow down the list of users by entering filter criteria and clicking [Filter]; you can also sort the results to make viewing easier. Once you have located the appropriate user(s), just select a product role for them from the drop-down list and click [Add] to add them to the product in the specified role.","title":"Product Membership"},{"location":"Spira-Administration-Guide/System-Administration/","text":"System Administration Now that you have successfully installed SpiraPlan\u00ae, this section of the guide outlines how to perform the typical administrative tasks necessary for setting up products and programs in the system, managing users and verifying the license information. To perform these tasks, you need to login to the system with a user that has some level of \"administration\" permissions within the system. There are four different sections to administration, and each has its own permission. These sections and their permissions are: System Administration : tasks like approving new users, creating new products, changing security settings, or viewing the logs all happen at the system-wide level of administration. There is a special \"System Administrator\" flag that can be assigned to any user (by an existing system admin only). Any user that has this flag can perform any system administrator task. Please note that a special \"administrator\" user is created by the installer. You should initially login to SpiraPlan\u00ae with the username administrator, and the password 'PleaseChange'. Change this password as soon as possible to something that is secure yet memorable by clicking on the \"User Profile\" link -- see the SpiraPlan\u00ae User Manual for more details. Product Administration: a product admin can make changes specific to that product and that product only. For instance, they can add or remove users from a product. Once a user is made a product admin, they can perform all the actions in the product administration section. Each individual product has a defined set of users who are members of that product. Each member is assigned a specific role (many users can share the same role), and a role can be set to be a product admin. Please note, that when a system admin creates a product, they are automatically added as \"Product Owner \". Program Administration: just like with products, some aspects of a program are managed in the program section of administration. Anyone who is assigned the role of \"Program Owner\" on a program can perform these administrative functions. Template Administration: end users of the application will work with products and sometimes programs. However, behind the scenes of every product is a template. This template controls the bulk of how that product is configured and will work for the end users. Each product is controlled by one template, though each template can control many products at once. Making a change to a template in template administration will immediately affect all products controlled by that template. Such changes to a template include changing the name of incident types, changing the colors used to indicate requirement priorities, or changing custom properties. Please note that template admin permissions are managed by the same roles that manage product admin permissions and that apply to members of each product. You can read more about how template admin permissions work here . Once you have logged in as an administrator, you can click the \"Administration\" link which can be found on the right-hand side of the global navigation at the top of any page: This will display the context aware administration menu popup. This menu will show different sections depending on where you are in the application and your administrative privileges. For example, only system administrators see the \"System: Admin Home\" section shown at the bottom of the screenshot below. In the screenshot below you can see that administration links are being shown for three different sections: Library Information System -- which is a product The template called Sample Template: Agile (this is the template the controls the above product) System wide administration This menu only shows the links to one product, one template, or one program at a time (and System Admin all the time to system administrators). Because this user is currently viewing a page in the product 'Library Information System', admin items for that product and its template are visible. You can see that the \"Requirements\" sub section is highlighted. This is because the user is currently on a requirements page of the 'Library Information System' product (either in the main application or in template administration). The highlighting serves no function other than to guide the user to where they may wish to focus. Below is an example of an administration menu where a user is a Program Owner but with no other access to administration. This menu is much barer than the one above, because the administrative options this user has are that much more limited. This user only has admin access to Sample Program One. If they navigate to a different program page or to a product page in the application, they would not see the admin menu at all. If a user wants to see what, if any, parts of the system they have administrative access to, they can do so at any time. Clicking on the workspace dropdown on the global navigation will show them the list of workspaces they have access to. Below, you can see that products are grouped into programs, and there is a dedicated Templates section at the bottom. Any workspace the user has administrative access to has a superscript gray cog to the right of that workspace's name. If this user wants to access the admin menu for \"Sample Barebones Product\", first that cog tells them they can do so. By clicking on that workspace's name, they will be switched to that workspace and then they can click on the admin button to get the right menu. In the screenshot above at the top there is a \"System Administration\" workspace. This is visible because this user is a system administrator. Clicking this will take the user directly to the System Administration home page. The Administration home page, like all admin pages, is divided into two areas: the skinny left-hand bar. Clicking this will show the context-aware administration menu discussed above the main pane that displays the available options for the selected page. This home page shows a number of useful widgets with information about the system. You can edit these widgets, their position, and what is shown, using the two buttons in the top right (the cog and the plus). Product and Template administration home pages also show useful data and links relevant to them. On most admin pages for products and templates the name of the current product or template is shown at the top of the page in a heading. These names are hyperlinks that will open the product or template administration home page. When you first install the system, we suggest three main tasks to perform as the system administrator to get familiar with the basics and to help colleagues start to use the application: Create a new product Create the users that will be accessing the system Add users as members to a product These tasks typically need to be performed before any other users can use the system, since there will be no logins or products available other than the sample ones provided during the installation. The rest of this guide explores each area of administration in order, grouped by administration section.","title":"System Administration"},{"location":"Spira-Administration-Guide/System-Administration/#system-administration","text":"Now that you have successfully installed SpiraPlan\u00ae, this section of the guide outlines how to perform the typical administrative tasks necessary for setting up products and programs in the system, managing users and verifying the license information. To perform these tasks, you need to login to the system with a user that has some level of \"administration\" permissions within the system. There are four different sections to administration, and each has its own permission. These sections and their permissions are: System Administration : tasks like approving new users, creating new products, changing security settings, or viewing the logs all happen at the system-wide level of administration. There is a special \"System Administrator\" flag that can be assigned to any user (by an existing system admin only). Any user that has this flag can perform any system administrator task. Please note that a special \"administrator\" user is created by the installer. You should initially login to SpiraPlan\u00ae with the username administrator, and the password 'PleaseChange'. Change this password as soon as possible to something that is secure yet memorable by clicking on the \"User Profile\" link -- see the SpiraPlan\u00ae User Manual for more details. Product Administration: a product admin can make changes specific to that product and that product only. For instance, they can add or remove users from a product. Once a user is made a product admin, they can perform all the actions in the product administration section. Each individual product has a defined set of users who are members of that product. Each member is assigned a specific role (many users can share the same role), and a role can be set to be a product admin. Please note, that when a system admin creates a product, they are automatically added as \"Product Owner \". Program Administration: just like with products, some aspects of a program are managed in the program section of administration. Anyone who is assigned the role of \"Program Owner\" on a program can perform these administrative functions. Template Administration: end users of the application will work with products and sometimes programs. However, behind the scenes of every product is a template. This template controls the bulk of how that product is configured and will work for the end users. Each product is controlled by one template, though each template can control many products at once. Making a change to a template in template administration will immediately affect all products controlled by that template. Such changes to a template include changing the name of incident types, changing the colors used to indicate requirement priorities, or changing custom properties. Please note that template admin permissions are managed by the same roles that manage product admin permissions and that apply to members of each product. You can read more about how template admin permissions work here . Once you have logged in as an administrator, you can click the \"Administration\" link which can be found on the right-hand side of the global navigation at the top of any page: This will display the context aware administration menu popup. This menu will show different sections depending on where you are in the application and your administrative privileges. For example, only system administrators see the \"System: Admin Home\" section shown at the bottom of the screenshot below. In the screenshot below you can see that administration links are being shown for three different sections: Library Information System -- which is a product The template called Sample Template: Agile (this is the template the controls the above product) System wide administration This menu only shows the links to one product, one template, or one program at a time (and System Admin all the time to system administrators). Because this user is currently viewing a page in the product 'Library Information System', admin items for that product and its template are visible. You can see that the \"Requirements\" sub section is highlighted. This is because the user is currently on a requirements page of the 'Library Information System' product (either in the main application or in template administration). The highlighting serves no function other than to guide the user to where they may wish to focus. Below is an example of an administration menu where a user is a Program Owner but with no other access to administration. This menu is much barer than the one above, because the administrative options this user has are that much more limited. This user only has admin access to Sample Program One. If they navigate to a different program page or to a product page in the application, they would not see the admin menu at all. If a user wants to see what, if any, parts of the system they have administrative access to, they can do so at any time. Clicking on the workspace dropdown on the global navigation will show them the list of workspaces they have access to. Below, you can see that products are grouped into programs, and there is a dedicated Templates section at the bottom. Any workspace the user has administrative access to has a superscript gray cog to the right of that workspace's name. If this user wants to access the admin menu for \"Sample Barebones Product\", first that cog tells them they can do so. By clicking on that workspace's name, they will be switched to that workspace and then they can click on the admin button to get the right menu. In the screenshot above at the top there is a \"System Administration\" workspace. This is visible because this user is a system administrator. Clicking this will take the user directly to the System Administration home page. The Administration home page, like all admin pages, is divided into two areas: the skinny left-hand bar. Clicking this will show the context-aware administration menu discussed above the main pane that displays the available options for the selected page. This home page shows a number of useful widgets with information about the system. You can edit these widgets, their position, and what is shown, using the two buttons in the top right (the cog and the plus). Product and Template administration home pages also show useful data and links relevant to them. On most admin pages for products and templates the name of the current product or template is shown at the top of the page in a heading. These names are hyperlinks that will open the product or template administration home page. When you first install the system, we suggest three main tasks to perform as the system administrator to get familiar with the basics and to help colleagues start to use the application: Create a new product Create the users that will be accessing the system Add users as members to a product These tasks typically need to be performed before any other users can use the system, since there will be no logins or products available other than the sample ones provided during the installation. The rest of this guide explores each area of administration in order, grouped by administration section.","title":"System Administration"},{"location":"Spira-Administration-Guide/System-Home/","text":"System: Home Page The System Administration Home page is only accessible to users with the special \"System Administrator\" flag on their profile. There are multiple ways to navigate to it: Click the \"Administration\" link in the upper right. This will display the context aware administration menu popup. Then click on the \"System: Admin Home\" section heading. In the main workspace dropdown, select \u201cSystem Administration\u201d. It provides system administrators with quick access to important information. As with other dashboards, you can edit these widgets, their position, and what is shown, using the two buttons in the top right (the cog and the plus). System Information The system information widget displays an overview of your Spira instance, including license information and the number of currently-active users, as well as links to detailed information. Event Log This widget shows the latest events from the system event log. By default, 5 events are shown, but this number can be changed. To view the complete event log, click View All. Pending User Requests If you have enabled the ability for users to register for new SpiraPlan accounts themselves, any pending requests will be listed here. To accept or deny the requests, click View All. By default the list is limited to 5. This number can be adjusted. Data Synchronization This widget shows a list of active data-synchronization services, together with the status and date/time of the last synchronization.","title":"System Home page"},{"location":"Spira-Administration-Guide/System-Home/#system-home-page","text":"The System Administration Home page is only accessible to users with the special \"System Administrator\" flag on their profile. There are multiple ways to navigate to it: Click the \"Administration\" link in the upper right. This will display the context aware administration menu popup. Then click on the \"System: Admin Home\" section heading. In the main workspace dropdown, select \u201cSystem Administration\u201d. It provides system administrators with quick access to important information. As with other dashboards, you can edit these widgets, their position, and what is shown, using the two buttons in the top right (the cog and the plus).","title":"System: Home Page"},{"location":"Spira-Administration-Guide/System-Home/#system-information","text":"The system information widget displays an overview of your Spira instance, including license information and the number of currently-active users, as well as links to detailed information.","title":"System Information"},{"location":"Spira-Administration-Guide/System-Home/#event-log","text":"This widget shows the latest events from the system event log. By default, 5 events are shown, but this number can be changed. To view the complete event log, click View All.","title":"Event Log"},{"location":"Spira-Administration-Guide/System-Home/#pending-user-requests","text":"If you have enabled the ability for users to register for new SpiraPlan accounts themselves, any pending requests will be listed here. To accept or deny the requests, click View All. By default the list is limited to 5. This number can be adjusted.","title":"Pending User Requests"},{"location":"Spira-Administration-Guide/System-Home/#data-synchronization","text":"This widget shows a list of active data-synchronization services, together with the status and date/time of the last synchronization.","title":"Data Synchronization"},{"location":"Spira-Administration-Guide/System-Integration/","text":"System: Integration Data Synchronization SpiraPlan\u00ae is capable of synchronizing its data with a variety of other systems, including but not limited to requirements management systems and standalone bug-tracking tools. The various integration plug-ins for SpiraPlan\u00ae and the steps for configuring the data-synchronization settings are described in the SpiraTest External Bug-Tracking Integration Guide . Each individual tool has its own separate guide that builds on this setup guide. If you are synchronizing data between SpiraPlan\u00ae and one of these other systems, the 'Data Synchronization' administration page will show a list of active data-synchronizations services in user, together with the status and date/time of last synchronization: In the example above, we have three plug-ins active, with incidents being exported into Github, JIRA, and Microsoft Team Foundation Server / Azure DevOps. The data of last sync and the status indicate if there are problems with the plug-in. In this example we can see that TFS is active, but none of the plugins have synced yet. The 'Refresh' button allows you to refresh the status of the page to ensure that you are seeing the most up to date information. In certain circumstances you may want to reset the date of last sync and force a particular plug-in to examine all the records in the system to see if any were not synchronized - clicking on the 'Force Complete Re-Sync' button will achieve this. The recommended procedure for forcing a re-sync is to temporarily stop the SpiraPlan Data-Sync background Windows service, click the button to reset the last-sync date, and then start the service. This will ensure that the resetting doesn't happen mid-sync. In the \"Data Mapping\" column each plugin has a dropdown that shows all the active products on the system, ordered alphabetically. The TFS plugin has this drodown open. You can see two different icons to the left of the product names: a full hexagon and an empty hexagon. A full hexagon means that the product is actively using this particular plugin. Selecting a product from the dropdown and then clicking the arrow to its right will take you to the detailed product data synchronization page for that plugin and product. Version Control Integration (On-Premise Customers Only) This section refers to the functionality available to on-premise customers of SpiraPlan. If you are using the cloud / hosted version of SpiraPlan, please refer to TaraVault Configuration instead. SpiraPlan\u00ae is capable of integrating with a variety of Version Control (VC) / Software Configuration Management (SCM) tools such as Git, Subversion, CVS and TFS. This allows you to browse the source code repositories using the SpiraPlan web interface, and more importantly link revisions in these tools to artifacts in SpiraPlan. This provides the end-to-end traceability from code commits/check-ins to the tasks, incidents and requirements that necessitated the code change. The information on using the various version control providers for SpiraPlan\u00ae and the steps for configuring the provider-specific settings are described in the SpiraPlan/Team Version Control Integration Guide . To configure a version control provider, you need to click on the Administration > Integration > Version Control link in the Administration navigation to bring up the list of configured version control providers: By default the only provider listed will be the TestVersionControlProvider which is used for demonstration purposes only, and can be deleted from a production system by clicking on the \"Delete\" button to the right of it. To add a new version control provider, click the \"Add\" button to enter the Plug-in details page. The fields required are as follows: Name : The name of the version control provider that you're adding. This needs to match the name of the Plug-in DLL file that you're using (see the SpiraPlan/Team Version Control Integration Guide for more details on your specific tool) Description : The description is for your use only, and does not affect operation of the plug-in. Active : If checked, the plug-in is active and able to be used for any product. Connection Info : This field holds the root of the repository for any product accessing the plug-in, unless overridden in the Product Settings. Use the syntax that is described for your tool in the SpiraPlan/Team Version Control Integration Guide) Login / Password : The user id and the password of the user to use while accessing and retrieving information from the version control system. Other Fields : The other fields (Domain, Custom1 -- Custom5) are provider-specific and will be described in the appropriate section of the SpiraPlan/Team Version Control Integration Guide. When finished, click the \"Insert\" button and you will be taken back to the Version Control integration list page, with new provider listed as an available plug-in: To edit the settings for an existing version control provider, click on the \"Edit\" button next to the name of the provider and you will be able to edit the same settings that were shown above when you first created it. Now, you may want to change some of the settings on a per-product basis. For example you may have different repositories that you want to link to each product. You still enter the base settings for the provider as illustrated above, but then you can override specific settings for each product. To do this, click on the \"Product Settings\" button next to the provider in question, which will take you to the screen discussed in 3.6.4. below. Test Automation SpiraPlan\u00ae can be used to manage the development, scheduling and execution of automated unit, functional and load tests written using a variety of test automation engines (e.g. HP QuickTest Pro, SmarteScript, TestComplete, etc.). This section allows you to configure the different engines that are available in your environment so that the testers know which tools they can use to schedule tests with. The information on using the various test automation engines for SpiraPlan\u00ae and the steps for configuring the engine-specific settings are described in the SpiraTest/Team RemoteLaunch Automated Testing Integration Guide . To configure a test automation engine, you need to click on the Administration > Integration > Test Automation link in the Administration navigation to bring up the list of configured test automation engines: To add a new test automation engine, click the \"Add\" button to enter the Automation Engine details page. The fields required are as follows: Name : The name of the test automation engine that you're adding. This can be set to any name of your choice that would make sense to your users. Description : The description is used for any comments or additional information that you need to use to describe the automation engine. Active : If checked, the automation engine is active and able to be used in any product. Token: This needs to match the name of the Automation Engine DLL file that you're using (see the SpiraTest/Team Automated Testing Integration Guide for more details on your specific tool) for the specific automation engine. When finished, click the \"Insert\" button and you will be taken back to the test automation engine list page, with new automation engine listed. To edit the settings for an existing test automation engine, just click on the \"Edit\" link next to the name of the engine and you will be able to edit the same settings that were shown above when you first created it. Once you have made the appropriate changes, click the [Save] button to commit them. You are now ready to use SpiraPlan\u00ae in conjunction with the test automation engine you added. For details on how to use the test automation features of SpiraPlan, please refer to the SpiraPlan\u00ae User Manual .","title":"Integration"},{"location":"Spira-Administration-Guide/System-Integration/#system-integration","text":"","title":"System: Integration"},{"location":"Spira-Administration-Guide/System-Integration/#data-synchronization","text":"SpiraPlan\u00ae is capable of synchronizing its data with a variety of other systems, including but not limited to requirements management systems and standalone bug-tracking tools. The various integration plug-ins for SpiraPlan\u00ae and the steps for configuring the data-synchronization settings are described in the SpiraTest External Bug-Tracking Integration Guide . Each individual tool has its own separate guide that builds on this setup guide. If you are synchronizing data between SpiraPlan\u00ae and one of these other systems, the 'Data Synchronization' administration page will show a list of active data-synchronizations services in user, together with the status and date/time of last synchronization: In the example above, we have three plug-ins active, with incidents being exported into Github, JIRA, and Microsoft Team Foundation Server / Azure DevOps. The data of last sync and the status indicate if there are problems with the plug-in. In this example we can see that TFS is active, but none of the plugins have synced yet. The 'Refresh' button allows you to refresh the status of the page to ensure that you are seeing the most up to date information. In certain circumstances you may want to reset the date of last sync and force a particular plug-in to examine all the records in the system to see if any were not synchronized - clicking on the 'Force Complete Re-Sync' button will achieve this. The recommended procedure for forcing a re-sync is to temporarily stop the SpiraPlan Data-Sync background Windows service, click the button to reset the last-sync date, and then start the service. This will ensure that the resetting doesn't happen mid-sync. In the \"Data Mapping\" column each plugin has a dropdown that shows all the active products on the system, ordered alphabetically. The TFS plugin has this drodown open. You can see two different icons to the left of the product names: a full hexagon and an empty hexagon. A full hexagon means that the product is actively using this particular plugin. Selecting a product from the dropdown and then clicking the arrow to its right will take you to the detailed product data synchronization page for that plugin and product.","title":"Data Synchronization"},{"location":"Spira-Administration-Guide/System-Integration/#version-control-integration-on-premise-customers-only","text":"This section refers to the functionality available to on-premise customers of SpiraPlan. If you are using the cloud / hosted version of SpiraPlan, please refer to TaraVault Configuration instead. SpiraPlan\u00ae is capable of integrating with a variety of Version Control (VC) / Software Configuration Management (SCM) tools such as Git, Subversion, CVS and TFS. This allows you to browse the source code repositories using the SpiraPlan web interface, and more importantly link revisions in these tools to artifacts in SpiraPlan. This provides the end-to-end traceability from code commits/check-ins to the tasks, incidents and requirements that necessitated the code change. The information on using the various version control providers for SpiraPlan\u00ae and the steps for configuring the provider-specific settings are described in the SpiraPlan/Team Version Control Integration Guide . To configure a version control provider, you need to click on the Administration > Integration > Version Control link in the Administration navigation to bring up the list of configured version control providers: By default the only provider listed will be the TestVersionControlProvider which is used for demonstration purposes only, and can be deleted from a production system by clicking on the \"Delete\" button to the right of it. To add a new version control provider, click the \"Add\" button to enter the Plug-in details page. The fields required are as follows: Name : The name of the version control provider that you're adding. This needs to match the name of the Plug-in DLL file that you're using (see the SpiraPlan/Team Version Control Integration Guide for more details on your specific tool) Description : The description is for your use only, and does not affect operation of the plug-in. Active : If checked, the plug-in is active and able to be used for any product. Connection Info : This field holds the root of the repository for any product accessing the plug-in, unless overridden in the Product Settings. Use the syntax that is described for your tool in the SpiraPlan/Team Version Control Integration Guide) Login / Password : The user id and the password of the user to use while accessing and retrieving information from the version control system. Other Fields : The other fields (Domain, Custom1 -- Custom5) are provider-specific and will be described in the appropriate section of the SpiraPlan/Team Version Control Integration Guide. When finished, click the \"Insert\" button and you will be taken back to the Version Control integration list page, with new provider listed as an available plug-in: To edit the settings for an existing version control provider, click on the \"Edit\" button next to the name of the provider and you will be able to edit the same settings that were shown above when you first created it. Now, you may want to change some of the settings on a per-product basis. For example you may have different repositories that you want to link to each product. You still enter the base settings for the provider as illustrated above, but then you can override specific settings for each product. To do this, click on the \"Product Settings\" button next to the provider in question, which will take you to the screen discussed in 3.6.4. below.","title":"Version Control Integration (On-Premise Customers Only)"},{"location":"Spira-Administration-Guide/System-Integration/#test-automation","text":"SpiraPlan\u00ae can be used to manage the development, scheduling and execution of automated unit, functional and load tests written using a variety of test automation engines (e.g. HP QuickTest Pro, SmarteScript, TestComplete, etc.). This section allows you to configure the different engines that are available in your environment so that the testers know which tools they can use to schedule tests with. The information on using the various test automation engines for SpiraPlan\u00ae and the steps for configuring the engine-specific settings are described in the SpiraTest/Team RemoteLaunch Automated Testing Integration Guide . To configure a test automation engine, you need to click on the Administration > Integration > Test Automation link in the Administration navigation to bring up the list of configured test automation engines: To add a new test automation engine, click the \"Add\" button to enter the Automation Engine details page. The fields required are as follows: Name : The name of the test automation engine that you're adding. This can be set to any name of your choice that would make sense to your users. Description : The description is used for any comments or additional information that you need to use to describe the automation engine. Active : If checked, the automation engine is active and able to be used in any product. Token: This needs to match the name of the Automation Engine DLL file that you're using (see the SpiraTest/Team Automated Testing Integration Guide for more details on your specific tool) for the specific automation engine. When finished, click the \"Insert\" button and you will be taken back to the test automation engine list page, with new automation engine listed. To edit the settings for an existing test automation engine, just click on the \"Edit\" link next to the name of the engine and you will be able to edit the same settings that were shown above when you first created it. Once you have made the appropriate changes, click the [Save] button to commit them. You are now ready to use SpiraPlan\u00ae in conjunction with the test automation engine you added. For details on how to use the test automation features of SpiraPlan, please refer to the SpiraPlan\u00ae User Manual .","title":"Test Automation"},{"location":"Spira-Administration-Guide/System-Reporting/","text":"System: Reporting SpiraPlan has a powerful set of reports and charts available out of the box that cover most product's needs. However, there is often a need to be able to generate custom reports and graphs that are specific to your organization. In this section, you can create custom graphs and reports for your users to use. Edit Reports The \"Edit Reports\" administration page lets you create custom reports in the system that your users can run in the various products they have access to. Note that the report definitions themselves are global to the system and therefore available in all products. The list of report definitions contains both the standard (default) reports that ship with the system and any custom reports that you have defined. However, any of the reports listed with the \"Default\" option checked will not be editable. So, if you want to modify one of the built-in reports to make it better suit your needs, you should instead click on the \"Clone\" button next to the report and make a copy of the report that you can then modify. You can view any of the default reports by clicking on the associated \"View\" button. To edit an existing non-default report, click on the \"Edit\" button. To add a new report from scratch, click on the \"Add New Report\" option at the bottom of the list. Either of these will take you to the Report editing screen: The top-half of this screen (illustrated above) lets you specify the name of the report, the long description (displayed in tooltips but not in the report itself) and a rich-text footer and header. The header and footer will be displayed at the top and bottom of the generated report. In addition, you can specify whether the report is active (and therefore can be used in the SpiraPlan reports center) and which report category heading the report will appear in. This is also used to determine which role(s) are able to run the report (e.g. a user that has permissions to view requirements will be able to run all reports listed under the \"Requirement Reports\" category). The lower-half of the screen displays the list of formats, standard sections and custom sections that make up the report: The list of formats is fixed in the system, you can simply choose which formats this specific report will be available in. The reporting engine will take care of converting your report into the target format, you just need to specify which type(s) are applicable. a) Standard Sections The list of standard sections contains a list of the various pre-defined report sections that are to be included in the report. A standard section consists of a set of nested queries and embedded elements that will return back data. For example, the \"Requirements Details\" section consists of a list of all the requirements in a product, together with the associated test cases, tasks, custom properties, attachments, discussions, change history, source code revisions and other related items. With a standard section, you cannot change the underlying data query, but you can change the header, footer and XSLT template used to format the results: When you either click on \"Add New Standard Section\" or the \"Customize\" link next to an existing standard section, the popup dialog illustrated above will be displayed. On this page you can change the following fields: Name -- Choose the name of the standard report section you want to use from the dropdown list. Changing the name of the section will automatically update the Description field below. Description -- This is the description of the report section, it is not displayed in the final report. Header -- This is the header that will be displayed before the dynamic data retrieved as part of the report section. You can enter in formatted rich text in this field. Footer -- This is the footer that will be displayed after the dynamic data retrieved as part of the report section. You can enter in formatted rich text in this field. Template -- This is the eXtensible Markup Language Stylesheet Transform (XSLT) used to transform the raw XML data from the report query into the final HTML display format. When you choose/change the name dropdown list, clicking on the \"Create Default Template\" will populate this field with the default template used to render the data. When you first create a new standard report section, we recommend using the option to \"Create Default Template\". This will then allow you to run the report in the main reports center and have all the available data fields displayed in the standard format. If you would like to customize the content of the section, you have several options: Customize Header/Footer -- if you want to keep the data and layout as-is, you can simply add a custom header and footer to add organization specific information into the report. Customize the Data/Layout -- if you want to customize how the data is displayed and formatted, you will need to edit the XSLT Template. You can learn more about XSLT at the W3Schools website ( http://www.w3schools.com/xsl ). However, the recommended approach is to first run the \"Raw XML\" format report from the main SpiraPlan reports center. An example XML report is partially shown below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 \u201c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?\u201d \u201cReport\u201d \u201cTitle\u201d Requirements Detailed Report \u201c/Title\u201d \u201cProductData\u201d \u201cProduct\u201d \u201cProjectId\u201d1\u201d/ProjectId\u201d \u201cProjectGroupId\u201d2\u201d/ProjectGroupId\u201d \u201cName\u201dLibrary Information System\u201d/Name\u201d \u201cDescription\u201dSample application that allows users to manage books, authors and lending records for a typical branch library\u201d/Description\u201d \u201cWebsite\u201dwww.libraryinformationsystem.org\u201d/Website\u201d \u201cCreationDate\u201d2005-11-30T19:00:00\u201d/CreationDate\u201d \u201cActiveYn\u201dY\u201d/ActiveYn\u201d \u201cWorkingHours\u201d8\u201d/WorkingHours\u201d \u201cWorkingDays\u201d5\u201d/WorkingDays\u201d \u201cNonWorkingHours\u201d0\u201d/NonWorkingHours\u201d \u201cTimeTrackIncidentsYn\u201dY\u201d/TimeTrackIncidentsYn\u201d \u201cTimeTrackTasksYn\u201dY\u201d/TimeTrackTasksYn\u201d \u201cEffortIncidentsYn\u201dY\u201d/EffortIncidentsYn\u201d \u201cEffortTasksYn\u201dY\u201d/EffortTasksYn\u201d \u201cTasksAutoCreateYn\u201dY\u201d/TasksAutoCreateYn\u201d \u201cReqDefaultEffort\u201d480\u201d/ReqDefaultEffort\u201d \u201cTaskDefaultEffort\u201d360\u201d/TaskDefaultEffort\u201d \u201cProductGroupName\u201dInternal Products\u201d/ProductGroupName\u201d \u201c/Product\u201d \u201c/ProductData\u201d \u201cRequirementData\u201d \u201cRequirement\u201d \u201cRequirementId\u201d1\u201d/RequirementId\u201d \u201cProjectId\u201d1\u201d/ProjectId\u201d \u201cScopeLevelId\u201d3\u201d/ScopeLevelId\u201d \u201cAuthorId\u201d2\u201d/AuthorId\u201d \u201cName\u201dFunctional System Requirements\u201d/Name\u201d \u201cCreationDate\u201d2003-11-30T19:00:00\u201d/CreationDate\u201d \u201cLastUpdateDate\u201d2003-11-30T19:00:00\u201d/LastUpdateDate\u201d \u201cIndentLevel\u201dAAA\u201d/IndentLevel\u201d \u201cExpandedYn\u201dY\u201d/ExpandedYn\u201d \u201cVisibleYn\u201dY\u201d/VisibleYn\u201d \u201cSummaryYn\u201dY\u201d/SummaryYn\u201d \u201cAttachmentsYn\u201dN\u201d/AttachmentsYn\u201d \u201cCoverageCountTotal\u201d21\u201d/CoverageCountTotal\u201d \u201cCoverageCountPassed\u201d10\u201d/CoverageCountPassed\u201d \u201cCoverageCountFailed\u201d3\u201d/CoverageCountFailed\u201d \u201cCoverageCountCaution\u201d1\u201d/CoverageCountCaution\u201d \u201cCoverageCountBlocked\u201d1\u201d/CoverageCountBlocked\u201d \u201cPlannedEffort\u201d8700\u201d/PlannedEffort\u201d \u201cTaskEstimatedEffort\u201d11400\u201d/TaskEstimatedEffort\u201d \u201cTaskActualEffort\u201d7570\u201d/TaskActualEffort\u201d \u201cTaskProductedEffort\u201d3855\u201d/TaskProductedEffort\u201d \u201cTaskRemainingEffort\u201d11485\u201d/TaskRemainingEffort\u201d \u201cTaskCount\u201d42\u201d/TaskCount\u201d \u201cTaskPercentOnTime\u201d59\u201d/TaskPercentOnTime\u201d \u201cTaskPercentLateFinish\u201d6\u201d/TaskPercentLateFinish\u201d \u201cTaskPercentNotStart\u201d7\u201d/TaskPercentNotStart\u201d \u201cTaskPercentLateStart\u201d28\u201d/TaskPercentLateStart\u201d \u201cScopeLevelName\u201dIn Progress\u201d/ScopeLevelName\u201d \u201cAuthorName\u201dFred Bloggs\u201d/AuthorName\u201d \u201cHasDiscussionChanged\u201dfalse\u201d/HasDiscussionChanged\u201d \u201cIsDeleted\u201dfalse\u201d/IsDeleted\u201d \u201cCustomProperties\u201d \u201cCustomProperty\u201d \u201cAlias\u201dURL\u201d/Alias\u201d \u201cName\u201dCustom_01\u201d/Name\u201d \u201cType\u201dText\u201d/Type\u201d \u201c/CustomProperty\u201d \u201cCustomProperty\u201d \u201cAlias\u201dDifficulty\u201d/Alias\u201d \u201cName\u201dCustom_02\u201d/Name\u201d \u201cType\u201dList\u201d/Type\u201d \u201c/CustomProperty\u201d \u201cCustomProperty\u201d \u201cAlias\u201dRequirement Type\u201d/Alias\u201d \u201cName\u201dCustom_03\u201d/Name\u201d \u201cType\u201dList\u201d/Type\u201d \u201c/CustomProperty\u201d \u201cCustomProperty\u201d \u201cAlias\u201dNotes\u201d/Alias\u201d \u201cName\u201dCustom_04\u201d/Name\u201d \u201cType\u201dText\u201d/Type\u201d \u201c/CustomProperty\u201d \u201cCustomProperty\u201d \u201cAlias\u201dReview Date\u201d/Alias\u201d \u201cName\u201dCustom_05\u201d/Name\u201d \u201cType\u201dDate\u201d/Type\u201d \u201c/CustomProperty\u201d \u201cCustomProperty\u201d \u201cAlias\u201dDecimal\u201d/Alias\u201d \u201cName\u201dCustom_06\u201d/Name\u201d \u201cType\u201dDecimal\u201d/Type\u201d \u201c/CustomProperty\u201d \u201c/CustomProperties\u201d \u201cDiscussions /\u201d \u201cTestCases /\u201d \u201cTasks /\u201d \u201cAttachments /\u201d \u201cHistory\u201d \u201cHistoryChangeSetType\u201d \u201cChangeTypeId\u201d1\u201d/ChangeTypeId\u201d \u201cChangeTypeName\u201dModified\u201d/ChangeTypeName\u201d \u201c/HistoryChangeSetType\u201d \u201cHistoryChangeSetType\u201d \u201cChangeTypeId\u201d2\u201d/ChangeTypeId\u201d \u201cChangeTypeName\u201dDeleted\u201d/ChangeTypeName\u201d \u201c/HistoryChangeSetType\u201d \u201cHistoryChangeSetType\u201d \u201cChangeTypeId\u201d3\u201d/ChangeTypeId\u201d \u201cChangeTypeName\u201dAdded\u201d/ChangeTypeName\u201d \u201c/HistoryChangeSetType\u201d \u201cHistoryChangeSetType\u201d \u201cChangeTypeId\u201d4\u201d/ChangeTypeId\u201d \u201cChangeTypeName\u201dPurged\u201d/ChangeTypeName\u201d \u201c/HistoryChangeSetType\u201d \u201cHistoryChangeSetType\u201d \u201cChangeTypeId\u201d5\u201d/ChangeTypeId\u201d \u201cChangeTypeName\u201dRollback\u201d/ChangeTypeName\u201d \u201c/HistoryChangeSetType\u201d \u201cHistoryChangeSetType\u201d \u201cChangeTypeId\u201d6\u201d/ChangeTypeId\u201d \u201cChangeTypeName\u201dUndelete\u201d/ChangeTypeName\u201d \u201c/HistoryChangeSetType\u201d \u201cHistoryChangeSetType\u201d \u201cChangeTypeId\u201d7\u201d/ChangeTypeId\u201d \u201cChangeTypeName\u201dImported\u201d/ChangeTypeName\u201d \u201c/HistoryChangeSetType\u201d \u201cHistoryChangeSetType\u201d \u201cChangeTypeId\u201d8\u201d/ChangeTypeId\u201d \u201cChangeTypeName\u201dExported\u201d/ChangeTypeName\u201d \u201c/HistoryChangeSetType\u201d \u201c/History\u201d \u201cRequirements /\u201d \u201cIncidents /\u201d \u201cSourceCodeRevisions /\u201d \u201c/Requirement\u201d \u201c/RequirementData\u201d \u201c/Report\u201d This XML data is then converted by the XSLT template into HTML format so that it can be included into the final generated report. An example fragment of the XSLT template looks like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u201c?xml version=\"1.0\" encoding=\"utf-8\"?\u201d \u201cxsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\" exclude-result-prefixes=\"msxsl\"\u201c \u201cxsl:template match=\"/RequirementData\"\u201c \u201cxsl:for-each select=\"Requirement\"\u201c \u201cdiv\u201d \u201cxsl:attribute name=\"style\"\u201c padding-left: \u201cxsl:value-of select=\"string-length(IndentLevel)*2\"/\u201dpx; \u201c/xsl:attribute\u201d \u201cxsl:if test=\"SummaryYn='Y'\"\u201c \u201cdiv class=\"Title2\"\u201c RQ:\u201dxsl:value-of select=\"RequirementId\"/\u201d - \u201cxsl:value-of select=\"Name\"/\u201d \u201c/div\u201d \u201cdiv class=\"Description\"\u201c \u201cxsl:value-of select=\"Description\" disable-output-escaping=\"yes\"/\u201d \u201c/div\u201d \u201cbr /\u201d \u201c/xsl:if\u201d \u201cxsl:if test=\"SummaryYn='N'\"\u201c \u201cxsl:attribute name=\"style\"\u201c padding-left: \u201cxsl:value-of select=\"string-length(IndentLevel)*2\"/\u201dpx; \u201c/xsl:attribute\u201d \u201cdiv class=\"Title3\"\u201c RQ:\u201dxsl:value-of select=\"RequirementId\"/\u201d - \u201cxsl:value-of select=\"Name\"/\u201d \u201c/div\u201d \u201cp\u201d \u201cxsl:value-of select=\"Description\" disable-output-escaping=\"yes\"/\u201d \u201c/p\u201d \u201c/xsl:if\u201d \u201c/div\u201d \u201c/xsl:for-each\u201d \u201c/xsl:template\u201d So using a combination of XSLT and the Raw XML report format, you can generate a customized view of the standard report section that will be included in the final report. Sometimes, however you want to be able to create a completely custom report that includes customized data as well as a custom format. In which case you need to use a custom report section instead. b) Custom Section Back on the main report details page, if you click on \"Add New Custom Section\", the following dialog box will be displayed: On this page you can enter / change the following fields: Name -- Enter the name of the new custom report section that you will be adding to the report. This is not displayed in the final report Description -- This is the description of the custom section, it is not displayed in the final report. Header -- This is the header that will be displayed before the dynamic data retrieved as part of the report section. You can enter in formatted rich text in this field. Footer -- This is the footer that will be displayed after the dynamic data retrieved as part of the report section. You can enter in formatted rich text in this field. Active -- You should make sure this checkbox is checked if you want the custom section to appear in the final report. Further down on the page you can actually enter the custom query and associated XSLT template: On this page you need to first choose the appropriate reportable entity from the dropdown list. In the example illustrated above, we have selected the \"Requirements\" reportable entity. This will automatically populate the following query in the Query editor: select value R from SpiraTestEntities.R_Requirements as R where R.PROJECT_ID = ${ProjectId} This query tells SpiraPlan to select all of the rows in the R_Requirements collection that are in the current product and include all of the columns in the final report. This generally will result in more columns than is desirable, so you should click on the \"Preview Results\" option to view a list of the various columns and the sample data. That will help you decide which columns are important for your report. You can then adjust the query to only include those columns: select R.REQUIREMENT_ID, R.NAME from SpiraTestEntities.R_Requirements as R where R.PROJECT_ID = ${ProjectId} In this modified query, we have replaced the keyword value with the specific column names. When you use the \"Preview Results\" option on this query, you will only see the two desired columns: Once you have verified that the data being returned matches your requirements, click on the \"Create Default Template\" option and SpiraPlan will automatically generate a new XSLT template that displays just these columns in a nice table format: You can now click the [Save] button to save your changes to the report. You may have noticed that we had a special token in the query {ProjectId}**, this token will be evaluated during the generation of the report and ensures that only items in the current product are included. If you want to include all the items in a specific Program, you should instead use the token ** {ProjectId}**, this token will be evaluated during the generation of the report and ensures that only items in the current product are included. If you want to include all the items in a specific Program, you should instead use the token ** . If you don't use either token, the report will include all the items in the entire system, across all products and groups. For example: select value R from SpiraTestEntities.R_Requirements as R where R.PROJECT_ID = ${ProjectId} will display all the requirements in the specific product select value R from SpiraTestEntities.R_Requirements as R where R.PROJECT_GROUP_ID = ${ProjectGroupId} will display all the requirements in the specific program select value R from SpiraTestEntities.R_Requirements as R will display all the requirements in the entire system For more information on creating custom report queries, please refer to the knowledge base articles on the Inflectra customer support website: http://www.inflectra.com/Support . Warning: If you create a report that doesn't have either ${ProjectId} or ${ProjectGroupId} in the WHERE clause you could end up displaying data to a user that shouldn't have permission to see that data. Edit Graphs The \"Edit Graphs\" administration page lets you create custom graphs and charts in the system that your users can run in the various products they have access to. Note that the graph definitions themselves are global to the system and therefore available in all products. When you click on the 'Edit Graphs' menu option, the system will display a list of any existing custom graphs that have been already defined (it will not list the standard graphs that come with the system): To add a new graph, click on the ' Add New Custom Graph ' option in the bottom of the table: This is the same screen you will see if you click on the Edit button for an existing graph. In addition, the graph list page has the following additional operations: Clone -- this will make a copy of the graph with '- Copy' appended to the name Delete -- this will permanently delete the selected custom graph. On the graph editing page, you can enter the following fields: Name -- This is the short name of the graph that will be displayed to users when they choose to display a custom graph. Description -- This is the longer description of the graph, and should be used to explain what the data in the graph shows, what the purpose of the graph is and how the data should be interpreted. This is what the user will see when they click on the help link on the graph. Active -- If you set this to \"No\", the graph will not be accessible by end users Position -- use this to specify the relative position of the graph in the list of custom graphs. Query -- this is where you enter the actual query used to generate the graph data. We shall discuss this below. Entering the Query We recommend that you first choose the appropriate reportable entity from the dropdown list. In the example illustrated above, we have selected the \"Test Runs\" reportable entity. This will automatically populate the following query in the Query editor: select value R from SpiraTestEntities.R_TestRuns as R where R.PROJECT_ID = ${ProjectId} This query tells SpiraPlan to select all of the rows in the R_TestRuns collection that are in the current product and include all of the columns in the final report. You cannot graph non-numeric columns, so usually we'd recommend clicking Display Data Grid to see all of the columns that you can use in the graph: This will help you decide which columns are important for your graph. You can then adjust the query to only include those columns: select R.EXECUTION_STATUS_NAME, COUNT (R.TEST_RUN_ID) as COUNT from SpiraTestEntities.R_TestRuns as R where R.PROJECT_ID = ${ProjectId} group by R.EXECUTION_STATUS_NAME In this modified query, we have replaced the keyword value with the specific column names. We have also added an aggregation function called COUNT to count the number of test runs and group by the execution status name column. SpiraPlan uses a modified SQL language called Entity SQL. For more information on creating custom graph queries, please refer to the knowledge base articles on the Inflectra customer support website: http://www.inflectra.com/Support . When you click Display Data Grid , you will now see: The graphing module requires that the first column be the list of categories to display on the x-axis of the graph. It can be any format (text, numeric, dates, etc.). The remaining columns have to be numeric and will be used to display the different data ranges. The column name will be used to display the data range. For donut graphs, only one data range is supported, for line/bar charts, you can have multiple ranges. You can see how the graph looks in the three different styles (donuts, bar, line): a) Donut Graph b) Bar Graph c) Line Graph Once you are happy with your custom graph, click the Save button to commit the changes. If the Active flag is set to \"Yes\" then the graph will be available for end users to use. Warning: If you create a graph that doesn't have either ${ProjectId} or ${ProjectGroupId} in the WHERE clause you could end up displaying data to a user that shouldn't have permission to see that data.","title":"Reporting"},{"location":"Spira-Administration-Guide/System-Reporting/#system-reporting","text":"SpiraPlan has a powerful set of reports and charts available out of the box that cover most product's needs. However, there is often a need to be able to generate custom reports and graphs that are specific to your organization. In this section, you can create custom graphs and reports for your users to use.","title":"System: Reporting"},{"location":"Spira-Administration-Guide/System-Reporting/#edit-reports","text":"The \"Edit Reports\" administration page lets you create custom reports in the system that your users can run in the various products they have access to. Note that the report definitions themselves are global to the system and therefore available in all products. The list of report definitions contains both the standard (default) reports that ship with the system and any custom reports that you have defined. However, any of the reports listed with the \"Default\" option checked will not be editable. So, if you want to modify one of the built-in reports to make it better suit your needs, you should instead click on the \"Clone\" button next to the report and make a copy of the report that you can then modify. You can view any of the default reports by clicking on the associated \"View\" button. To edit an existing non-default report, click on the \"Edit\" button. To add a new report from scratch, click on the \"Add New Report\" option at the bottom of the list. Either of these will take you to the Report editing screen: The top-half of this screen (illustrated above) lets you specify the name of the report, the long description (displayed in tooltips but not in the report itself) and a rich-text footer and header. The header and footer will be displayed at the top and bottom of the generated report. In addition, you can specify whether the report is active (and therefore can be used in the SpiraPlan reports center) and which report category heading the report will appear in. This is also used to determine which role(s) are able to run the report (e.g. a user that has permissions to view requirements will be able to run all reports listed under the \"Requirement Reports\" category). The lower-half of the screen displays the list of formats, standard sections and custom sections that make up the report: The list of formats is fixed in the system, you can simply choose which formats this specific report will be available in. The reporting engine will take care of converting your report into the target format, you just need to specify which type(s) are applicable. a) Standard Sections The list of standard sections contains a list of the various pre-defined report sections that are to be included in the report. A standard section consists of a set of nested queries and embedded elements that will return back data. For example, the \"Requirements Details\" section consists of a list of all the requirements in a product, together with the associated test cases, tasks, custom properties, attachments, discussions, change history, source code revisions and other related items. With a standard section, you cannot change the underlying data query, but you can change the header, footer and XSLT template used to format the results: When you either click on \"Add New Standard Section\" or the \"Customize\" link next to an existing standard section, the popup dialog illustrated above will be displayed. On this page you can change the following fields: Name -- Choose the name of the standard report section you want to use from the dropdown list. Changing the name of the section will automatically update the Description field below. Description -- This is the description of the report section, it is not displayed in the final report. Header -- This is the header that will be displayed before the dynamic data retrieved as part of the report section. You can enter in formatted rich text in this field. Footer -- This is the footer that will be displayed after the dynamic data retrieved as part of the report section. You can enter in formatted rich text in this field. Template -- This is the eXtensible Markup Language Stylesheet Transform (XSLT) used to transform the raw XML data from the report query into the final HTML display format. When you choose/change the name dropdown list, clicking on the \"Create Default Template\" will populate this field with the default template used to render the data. When you first create a new standard report section, we recommend using the option to \"Create Default Template\". This will then allow you to run the report in the main reports center and have all the available data fields displayed in the standard format. If you would like to customize the content of the section, you have several options: Customize Header/Footer -- if you want to keep the data and layout as-is, you can simply add a custom header and footer to add organization specific information into the report. Customize the Data/Layout -- if you want to customize how the data is displayed and formatted, you will need to edit the XSLT Template. You can learn more about XSLT at the W3Schools website ( http://www.w3schools.com/xsl ). However, the recommended approach is to first run the \"Raw XML\" format report from the main SpiraPlan reports center. An example XML report is partially shown below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 \u201c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?\u201d \u201cReport\u201d \u201cTitle\u201d Requirements Detailed Report \u201c/Title\u201d \u201cProductData\u201d \u201cProduct\u201d \u201cProjectId\u201d1\u201d/ProjectId\u201d \u201cProjectGroupId\u201d2\u201d/ProjectGroupId\u201d \u201cName\u201dLibrary Information System\u201d/Name\u201d \u201cDescription\u201dSample application that allows users to manage books, authors and lending records for a typical branch library\u201d/Description\u201d \u201cWebsite\u201dwww.libraryinformationsystem.org\u201d/Website\u201d \u201cCreationDate\u201d2005-11-30T19:00:00\u201d/CreationDate\u201d \u201cActiveYn\u201dY\u201d/ActiveYn\u201d \u201cWorkingHours\u201d8\u201d/WorkingHours\u201d \u201cWorkingDays\u201d5\u201d/WorkingDays\u201d \u201cNonWorkingHours\u201d0\u201d/NonWorkingHours\u201d \u201cTimeTrackIncidentsYn\u201dY\u201d/TimeTrackIncidentsYn\u201d \u201cTimeTrackTasksYn\u201dY\u201d/TimeTrackTasksYn\u201d \u201cEffortIncidentsYn\u201dY\u201d/EffortIncidentsYn\u201d \u201cEffortTasksYn\u201dY\u201d/EffortTasksYn\u201d \u201cTasksAutoCreateYn\u201dY\u201d/TasksAutoCreateYn\u201d \u201cReqDefaultEffort\u201d480\u201d/ReqDefaultEffort\u201d \u201cTaskDefaultEffort\u201d360\u201d/TaskDefaultEffort\u201d \u201cProductGroupName\u201dInternal Products\u201d/ProductGroupName\u201d \u201c/Product\u201d \u201c/ProductData\u201d \u201cRequirementData\u201d \u201cRequirement\u201d \u201cRequirementId\u201d1\u201d/RequirementId\u201d \u201cProjectId\u201d1\u201d/ProjectId\u201d \u201cScopeLevelId\u201d3\u201d/ScopeLevelId\u201d \u201cAuthorId\u201d2\u201d/AuthorId\u201d \u201cName\u201dFunctional System Requirements\u201d/Name\u201d \u201cCreationDate\u201d2003-11-30T19:00:00\u201d/CreationDate\u201d \u201cLastUpdateDate\u201d2003-11-30T19:00:00\u201d/LastUpdateDate\u201d \u201cIndentLevel\u201dAAA\u201d/IndentLevel\u201d \u201cExpandedYn\u201dY\u201d/ExpandedYn\u201d \u201cVisibleYn\u201dY\u201d/VisibleYn\u201d \u201cSummaryYn\u201dY\u201d/SummaryYn\u201d \u201cAttachmentsYn\u201dN\u201d/AttachmentsYn\u201d \u201cCoverageCountTotal\u201d21\u201d/CoverageCountTotal\u201d \u201cCoverageCountPassed\u201d10\u201d/CoverageCountPassed\u201d \u201cCoverageCountFailed\u201d3\u201d/CoverageCountFailed\u201d \u201cCoverageCountCaution\u201d1\u201d/CoverageCountCaution\u201d \u201cCoverageCountBlocked\u201d1\u201d/CoverageCountBlocked\u201d \u201cPlannedEffort\u201d8700\u201d/PlannedEffort\u201d \u201cTaskEstimatedEffort\u201d11400\u201d/TaskEstimatedEffort\u201d \u201cTaskActualEffort\u201d7570\u201d/TaskActualEffort\u201d \u201cTaskProductedEffort\u201d3855\u201d/TaskProductedEffort\u201d \u201cTaskRemainingEffort\u201d11485\u201d/TaskRemainingEffort\u201d \u201cTaskCount\u201d42\u201d/TaskCount\u201d \u201cTaskPercentOnTime\u201d59\u201d/TaskPercentOnTime\u201d \u201cTaskPercentLateFinish\u201d6\u201d/TaskPercentLateFinish\u201d \u201cTaskPercentNotStart\u201d7\u201d/TaskPercentNotStart\u201d \u201cTaskPercentLateStart\u201d28\u201d/TaskPercentLateStart\u201d \u201cScopeLevelName\u201dIn Progress\u201d/ScopeLevelName\u201d \u201cAuthorName\u201dFred Bloggs\u201d/AuthorName\u201d \u201cHasDiscussionChanged\u201dfalse\u201d/HasDiscussionChanged\u201d \u201cIsDeleted\u201dfalse\u201d/IsDeleted\u201d \u201cCustomProperties\u201d \u201cCustomProperty\u201d \u201cAlias\u201dURL\u201d/Alias\u201d \u201cName\u201dCustom_01\u201d/Name\u201d \u201cType\u201dText\u201d/Type\u201d \u201c/CustomProperty\u201d \u201cCustomProperty\u201d \u201cAlias\u201dDifficulty\u201d/Alias\u201d \u201cName\u201dCustom_02\u201d/Name\u201d \u201cType\u201dList\u201d/Type\u201d \u201c/CustomProperty\u201d \u201cCustomProperty\u201d \u201cAlias\u201dRequirement Type\u201d/Alias\u201d \u201cName\u201dCustom_03\u201d/Name\u201d \u201cType\u201dList\u201d/Type\u201d \u201c/CustomProperty\u201d \u201cCustomProperty\u201d \u201cAlias\u201dNotes\u201d/Alias\u201d \u201cName\u201dCustom_04\u201d/Name\u201d \u201cType\u201dText\u201d/Type\u201d \u201c/CustomProperty\u201d \u201cCustomProperty\u201d \u201cAlias\u201dReview Date\u201d/Alias\u201d \u201cName\u201dCustom_05\u201d/Name\u201d \u201cType\u201dDate\u201d/Type\u201d \u201c/CustomProperty\u201d \u201cCustomProperty\u201d \u201cAlias\u201dDecimal\u201d/Alias\u201d \u201cName\u201dCustom_06\u201d/Name\u201d \u201cType\u201dDecimal\u201d/Type\u201d \u201c/CustomProperty\u201d \u201c/CustomProperties\u201d \u201cDiscussions /\u201d \u201cTestCases /\u201d \u201cTasks /\u201d \u201cAttachments /\u201d \u201cHistory\u201d \u201cHistoryChangeSetType\u201d \u201cChangeTypeId\u201d1\u201d/ChangeTypeId\u201d \u201cChangeTypeName\u201dModified\u201d/ChangeTypeName\u201d \u201c/HistoryChangeSetType\u201d \u201cHistoryChangeSetType\u201d \u201cChangeTypeId\u201d2\u201d/ChangeTypeId\u201d \u201cChangeTypeName\u201dDeleted\u201d/ChangeTypeName\u201d \u201c/HistoryChangeSetType\u201d \u201cHistoryChangeSetType\u201d \u201cChangeTypeId\u201d3\u201d/ChangeTypeId\u201d \u201cChangeTypeName\u201dAdded\u201d/ChangeTypeName\u201d \u201c/HistoryChangeSetType\u201d \u201cHistoryChangeSetType\u201d \u201cChangeTypeId\u201d4\u201d/ChangeTypeId\u201d \u201cChangeTypeName\u201dPurged\u201d/ChangeTypeName\u201d \u201c/HistoryChangeSetType\u201d \u201cHistoryChangeSetType\u201d \u201cChangeTypeId\u201d5\u201d/ChangeTypeId\u201d \u201cChangeTypeName\u201dRollback\u201d/ChangeTypeName\u201d \u201c/HistoryChangeSetType\u201d \u201cHistoryChangeSetType\u201d \u201cChangeTypeId\u201d6\u201d/ChangeTypeId\u201d \u201cChangeTypeName\u201dUndelete\u201d/ChangeTypeName\u201d \u201c/HistoryChangeSetType\u201d \u201cHistoryChangeSetType\u201d \u201cChangeTypeId\u201d7\u201d/ChangeTypeId\u201d \u201cChangeTypeName\u201dImported\u201d/ChangeTypeName\u201d \u201c/HistoryChangeSetType\u201d \u201cHistoryChangeSetType\u201d \u201cChangeTypeId\u201d8\u201d/ChangeTypeId\u201d \u201cChangeTypeName\u201dExported\u201d/ChangeTypeName\u201d \u201c/HistoryChangeSetType\u201d \u201c/History\u201d \u201cRequirements /\u201d \u201cIncidents /\u201d \u201cSourceCodeRevisions /\u201d \u201c/Requirement\u201d \u201c/RequirementData\u201d \u201c/Report\u201d This XML data is then converted by the XSLT template into HTML format so that it can be included into the final generated report. An example fragment of the XSLT template looks like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u201c?xml version=\"1.0\" encoding=\"utf-8\"?\u201d \u201cxsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\" exclude-result-prefixes=\"msxsl\"\u201c \u201cxsl:template match=\"/RequirementData\"\u201c \u201cxsl:for-each select=\"Requirement\"\u201c \u201cdiv\u201d \u201cxsl:attribute name=\"style\"\u201c padding-left: \u201cxsl:value-of select=\"string-length(IndentLevel)*2\"/\u201dpx; \u201c/xsl:attribute\u201d \u201cxsl:if test=\"SummaryYn='Y'\"\u201c \u201cdiv class=\"Title2\"\u201c RQ:\u201dxsl:value-of select=\"RequirementId\"/\u201d - \u201cxsl:value-of select=\"Name\"/\u201d \u201c/div\u201d \u201cdiv class=\"Description\"\u201c \u201cxsl:value-of select=\"Description\" disable-output-escaping=\"yes\"/\u201d \u201c/div\u201d \u201cbr /\u201d \u201c/xsl:if\u201d \u201cxsl:if test=\"SummaryYn='N'\"\u201c \u201cxsl:attribute name=\"style\"\u201c padding-left: \u201cxsl:value-of select=\"string-length(IndentLevel)*2\"/\u201dpx; \u201c/xsl:attribute\u201d \u201cdiv class=\"Title3\"\u201c RQ:\u201dxsl:value-of select=\"RequirementId\"/\u201d - \u201cxsl:value-of select=\"Name\"/\u201d \u201c/div\u201d \u201cp\u201d \u201cxsl:value-of select=\"Description\" disable-output-escaping=\"yes\"/\u201d \u201c/p\u201d \u201c/xsl:if\u201d \u201c/div\u201d \u201c/xsl:for-each\u201d \u201c/xsl:template\u201d So using a combination of XSLT and the Raw XML report format, you can generate a customized view of the standard report section that will be included in the final report. Sometimes, however you want to be able to create a completely custom report that includes customized data as well as a custom format. In which case you need to use a custom report section instead. b) Custom Section Back on the main report details page, if you click on \"Add New Custom Section\", the following dialog box will be displayed: On this page you can enter / change the following fields: Name -- Enter the name of the new custom report section that you will be adding to the report. This is not displayed in the final report Description -- This is the description of the custom section, it is not displayed in the final report. Header -- This is the header that will be displayed before the dynamic data retrieved as part of the report section. You can enter in formatted rich text in this field. Footer -- This is the footer that will be displayed after the dynamic data retrieved as part of the report section. You can enter in formatted rich text in this field. Active -- You should make sure this checkbox is checked if you want the custom section to appear in the final report. Further down on the page you can actually enter the custom query and associated XSLT template: On this page you need to first choose the appropriate reportable entity from the dropdown list. In the example illustrated above, we have selected the \"Requirements\" reportable entity. This will automatically populate the following query in the Query editor: select value R from SpiraTestEntities.R_Requirements as R where R.PROJECT_ID = ${ProjectId} This query tells SpiraPlan to select all of the rows in the R_Requirements collection that are in the current product and include all of the columns in the final report. This generally will result in more columns than is desirable, so you should click on the \"Preview Results\" option to view a list of the various columns and the sample data. That will help you decide which columns are important for your report. You can then adjust the query to only include those columns: select R.REQUIREMENT_ID, R.NAME from SpiraTestEntities.R_Requirements as R where R.PROJECT_ID = ${ProjectId} In this modified query, we have replaced the keyword value with the specific column names. When you use the \"Preview Results\" option on this query, you will only see the two desired columns: Once you have verified that the data being returned matches your requirements, click on the \"Create Default Template\" option and SpiraPlan will automatically generate a new XSLT template that displays just these columns in a nice table format: You can now click the [Save] button to save your changes to the report. You may have noticed that we had a special token in the query {ProjectId}**, this token will be evaluated during the generation of the report and ensures that only items in the current product are included. If you want to include all the items in a specific Program, you should instead use the token ** {ProjectId}**, this token will be evaluated during the generation of the report and ensures that only items in the current product are included. If you want to include all the items in a specific Program, you should instead use the token ** . If you don't use either token, the report will include all the items in the entire system, across all products and groups. For example: select value R from SpiraTestEntities.R_Requirements as R where R.PROJECT_ID = ${ProjectId} will display all the requirements in the specific product select value R from SpiraTestEntities.R_Requirements as R where R.PROJECT_GROUP_ID = ${ProjectGroupId} will display all the requirements in the specific program select value R from SpiraTestEntities.R_Requirements as R will display all the requirements in the entire system For more information on creating custom report queries, please refer to the knowledge base articles on the Inflectra customer support website: http://www.inflectra.com/Support . Warning: If you create a report that doesn't have either ${ProjectId} or ${ProjectGroupId} in the WHERE clause you could end up displaying data to a user that shouldn't have permission to see that data.","title":"Edit Reports"},{"location":"Spira-Administration-Guide/System-Reporting/#edit-graphs","text":"The \"Edit Graphs\" administration page lets you create custom graphs and charts in the system that your users can run in the various products they have access to. Note that the graph definitions themselves are global to the system and therefore available in all products. When you click on the 'Edit Graphs' menu option, the system will display a list of any existing custom graphs that have been already defined (it will not list the standard graphs that come with the system): To add a new graph, click on the ' Add New Custom Graph ' option in the bottom of the table: This is the same screen you will see if you click on the Edit button for an existing graph. In addition, the graph list page has the following additional operations: Clone -- this will make a copy of the graph with '- Copy' appended to the name Delete -- this will permanently delete the selected custom graph. On the graph editing page, you can enter the following fields: Name -- This is the short name of the graph that will be displayed to users when they choose to display a custom graph. Description -- This is the longer description of the graph, and should be used to explain what the data in the graph shows, what the purpose of the graph is and how the data should be interpreted. This is what the user will see when they click on the help link on the graph. Active -- If you set this to \"No\", the graph will not be accessible by end users Position -- use this to specify the relative position of the graph in the list of custom graphs. Query -- this is where you enter the actual query used to generate the graph data. We shall discuss this below. Entering the Query We recommend that you first choose the appropriate reportable entity from the dropdown list. In the example illustrated above, we have selected the \"Test Runs\" reportable entity. This will automatically populate the following query in the Query editor: select value R from SpiraTestEntities.R_TestRuns as R where R.PROJECT_ID = ${ProjectId} This query tells SpiraPlan to select all of the rows in the R_TestRuns collection that are in the current product and include all of the columns in the final report. You cannot graph non-numeric columns, so usually we'd recommend clicking Display Data Grid to see all of the columns that you can use in the graph: This will help you decide which columns are important for your graph. You can then adjust the query to only include those columns: select R.EXECUTION_STATUS_NAME, COUNT (R.TEST_RUN_ID) as COUNT from SpiraTestEntities.R_TestRuns as R where R.PROJECT_ID = ${ProjectId} group by R.EXECUTION_STATUS_NAME In this modified query, we have replaced the keyword value with the specific column names. We have also added an aggregation function called COUNT to count the number of test runs and group by the execution status name column. SpiraPlan uses a modified SQL language called Entity SQL. For more information on creating custom graph queries, please refer to the knowledge base articles on the Inflectra customer support website: http://www.inflectra.com/Support . When you click Display Data Grid , you will now see: The graphing module requires that the first column be the list of categories to display on the x-axis of the graph. It can be any format (text, numeric, dates, etc.). The remaining columns have to be numeric and will be used to display the different data ranges. The column name will be used to display the data range. For donut graphs, only one data range is supported, for line/bar charts, you can have multiple ranges. You can see how the graph looks in the three different styles (donuts, bar, line): a) Donut Graph b) Bar Graph c) Line Graph Once you are happy with your custom graph, click the Save button to commit the changes. If the Active flag is set to \"Yes\" then the graph will be available for end users to use. Warning: If you create a graph that doesn't have either ${ProjectId} or ${ProjectGroupId} in the WHERE clause you could end up displaying data to a user that shouldn't have permission to see that data.","title":"Edit Graphs"},{"location":"Spira-Administration-Guide/System-Users/","text":"System: Users View / Edit Users The following screen is displayed when you choose the \"View/Edit Users\" link from the Administration menu: This screen displays the list of users in the system (both inactive and active) together with their first name, middle initial, last name, username (login), administrative permission status and active status. You can filter the list of users by either choosing an administrative / active status, or entering a portion of the first name, middle initial, last name or username into the appropriate text box. When you click the \"Filter\" button, the list of users will be filtered by the criteria you entered. You can clear the filter selection by clicking the \"Clear Filters\" button. To sort the list of users, just click on the appropriate arrow icon located in the header row of each field (one each for ascending / descending). In addition, the list of users is paginated into groups of fifteen (15). You can step through the different pages by clicking the page numbers at the bottom of the user list. To add a new user to the system, click the \"Add\" button at the bottom of the user list, and a new screen will be displayed that allows you to enter the new user information: On this screen, you can enter information about the user, such as their name, email address, and department. You can also create their password, password reset question and answer. If you want the user to be able to subscribe to items in the system as RSS feeds, you should also make sure that the \"Enable RSS Feeds\" checkbox is selected and a GUID token is displayed in the text-box underneath. When creating a new user, you can also set their role for products. A user can be assigned a role to multiple products at once, by checking the required checkboxes in the dropdown list of products. The same role will be applied across all products. Note: If you make a user a System Administrator, it will force that user to always have the 'Product Owner' role on all their assigned products, regardless of the chosen role. If you disable this option, they will then revert back to their true role. In a similar way, to edit the details of an existing user, click the \"Edit\" hyperlink in the user list box, and you will be taken to the following screen that allows you modify the user details: On this screen you can edit the first name, middle initial, last name, username, email address, system administration status and active status. You can also change the user's password (if the user is managed by SpiraPlan) or LDAP information (if managed by an external LDAP directory server). In LDAP-Managed mode you enter the fully Distinguished Name (DN) for that user in your corporate LDAP server and provide no password. SpiraPlan\u00ae will then query your corporate LDAP server for the password information, reducing the number of passwords that a user needs to remember. Please see the sections on \"Importing LDAP Users\" and \"LDAP Configuration\" for more details. Once you have made the necessary changes, click the \"Save\" button to commit them. If you decide that you want to ignore the changes, click the \"Cancel\" button and the changes will be discarded. At the top of the page you can also see information relating to the activity of the user on the system, such as when they last logged in. In addition, there are three tabs that allow you to add/remove the user from products, update the data-mapping used when synchronizing artifacts that are assigned or created by the current user, and, where relevant, specify whether the user can access the linked TaraVault\u2122 source code management service. If you click on the \"Product Membership\" tab you will be shown a list of products that the user is currently a member of: You can change the role that the user has on the various products, by choosing the appropriate role from the drop-down list and then clicking [Save]. To remove the user from a product, select its checkbox and then click [Delete]. To add a user to a new product, click on the [Add] button and then choose the product and associated role from the list of products on the screen that is displayed: Then click [Add] to add the selected product(s) to the user's product membership. To view/change the list of usernames that a user has in an external bug-tracking system, click on the \"Data Mapping\" tab. This section is used by the SpiraPlan data-synchronization service to map incidents from SpiraPlan to other bug-tracking systems Please see the SpiraPlan External Bug-Tracking Integration Guide for more details on using the data-mapping tab. If you click on the TaraVault membership tab, you can choose whether or not the user has access the linked TaraVault source code repository. This service is only available for hosted/cloud instances of SpiraPlan, and more details can be found in LDAP Configuration . Importing LDAP Users If your organization already has an LDAP compatible user management system in place (e.g. Windows Active Directory, Novell eDirectory, OpenLDAP, IBM Tivoli, etc.), then instead of having to manually enter users one by one into SpiraPlan\u00ae, you can simply import them from your LDAP Server. Before doing this however, you need to first setup the LDAP configuration (see the section on LDAP Configuration below. Once you have setup your LDAP server configuration in SpiraPlan\u00ae, clicking on the \"Import Users From and LDAP Server\" will bring up the following screen: This screen lists all the users available in the LDAP server that have not been already imported into SpiraPlan\u00ae. The users are listed by name along with their login, email address and fully distinguished LDAP name (DN). You can narrow down the list by entering partial name matches in any of the fields displayed and clicking [Filter] and/or you can sort the results by clicking on the directional arrows in the field headings. Select the checkbox of any users you want to import and click \"Import\" to complete the operation. These users can now login to SpiraPlan\u00ae and use their existing LDAP login and password information. Active Sessions Often an administrator of the system will want to know how many users are currently logged into the system, especially on installations licensed by concurrent-user. Clicking on the 'Active User Sessions' administration option will display a list of all the users who currently have active sessions in the system: Each user is displayed along with their user ID, whether they're connected through the application or via a third-party add-on, and the date they last logged-in. The administrator is able to forcibly end a user's session using the 'End Session' link to the right of their name. Clicking this link will result in that user being logged out when they try and perform an operation in the system. Warning: You should make sure that the user is not actively using the system to prevent any unsaved data being lost . Pending Requests If you have enabled the ability for users to register for new SpiraPlan accounts themselves , clicking on the \"Pending Requests\" administration option allows you to view a list of all the outstanding requests for new user accounts: For each pending user request you can choose to either Approve or Deny the request: Approve -- clicking this option will approve the user. They will get an email letting them know that they have been approved and can now log into the system. Delete -- clicking this option will delete the pending user request from the system. View / Edit Roles There are six (6) default product roles that a user may be assigned to a product with: Product Owner -- the same rights as a Manager, but in addition can access the product administration tools Manager -- can see all screens and add/edit all artifacts, but cannot access product administration tools Developer -- can see all screens, but can only add/edit incidents, tasks and tests and change requirement coverage Tester -- can see all screens, but can only add/edit incidents and execute tests. Note: cannot delete incidents, only a Manager can do that. Observer -- can see all screens, but cannot perform any write operations (insert / update / delete) Incident User -- can only view and edit incidents. This user cannot even see the product's requirements, tasks, test cases or releases. Note: The System Administrator (with a user id of 1) is automatically added to every product as a Product Owner, and can never be removed as Product Owner, made inactive or made a different role on the product. You can make changes to the permissions associated with each of these default roles, and also create as many additional roles as you like. To customize the roles in your installation of SpiraPlan\u00ae, click on the \"View / Edit Roles\" link in the Administration menu: The screen lists all of the roles currently configured in the system (both active and inactive) together with the name, description, and an active flag. You can create new roles by clicking the \"Add\" button which will create a new default role entry in the list. You can edit the name, description and associated permissions of a role by clicking on the appropriate \"Edit\" button. You can delete an existing role, by clicking the \"Delete\" button. Note that you cannot delete any of the default roles, but can instead make them inactive. Clicking on the edit button will take you to the following screen: On the top of the screen, you can edit the name, description, product admin, limited view and active flags: Product Admin -- this flag denotes whether this role has administration-level access to the product (for example the product owner role has this set by default) Template Admin -- this flag denotes whether this role has administration-level access to the template that controls this product. You can be a product admin, without also being a template admin. However, you cannot be a template admin, without also being a product admin. Limited View -- this flag denotes that the role has a restricted view of the product, with the user only allowed to see the artifacts that they have either created or been assigned Active -- This flag denotes if the role is active in the system Underneath you can specify the various artifact-specific permissions for the role: These permission options allow you to specify if a user can create , modify , delete or view each of the artifacts in the system. If a user does not have view permissions for the artifact, then the corresponding tab in the system will also be disabled. There are three kinds of Modify permission available: Modify All -- this option specifies that the user can modify all the artifacts of this type in the product (e.g. the user can edit all test cases) Modify Owned -- this option specifies that the user can modify only the artifacts in the product that were either created or assigned to this user (e.g. the user can edit only the requirements they created or have been assigned) Bulk Edit -- this option means that the user can modify items on the artifact list pages and on the various planning boards. This means the user can bypass the workflow restrictions on changing status and the need to enter required fields and electronic signatures. This should be disabled in a system that is being used for a regulated product that requires electronic signatures. Note: The permission needed to execute a test case is the \"Create + Test Run\" permission since that initiates the creation of a new test run. In addition, there are some artifact-wide permissions that can be specified for each role: This section lets you specify if the role allows users to add new documents to the product, edit existing documents, delete documents, edit the document folders, and view/edit source code revisions.","title":"Users"},{"location":"Spira-Administration-Guide/System-Users/#system-users","text":"","title":"System: Users"},{"location":"Spira-Administration-Guide/System-Users/#view-edit-users","text":"The following screen is displayed when you choose the \"View/Edit Users\" link from the Administration menu: This screen displays the list of users in the system (both inactive and active) together with their first name, middle initial, last name, username (login), administrative permission status and active status. You can filter the list of users by either choosing an administrative / active status, or entering a portion of the first name, middle initial, last name or username into the appropriate text box. When you click the \"Filter\" button, the list of users will be filtered by the criteria you entered. You can clear the filter selection by clicking the \"Clear Filters\" button. To sort the list of users, just click on the appropriate arrow icon located in the header row of each field (one each for ascending / descending). In addition, the list of users is paginated into groups of fifteen (15). You can step through the different pages by clicking the page numbers at the bottom of the user list. To add a new user to the system, click the \"Add\" button at the bottom of the user list, and a new screen will be displayed that allows you to enter the new user information: On this screen, you can enter information about the user, such as their name, email address, and department. You can also create their password, password reset question and answer. If you want the user to be able to subscribe to items in the system as RSS feeds, you should also make sure that the \"Enable RSS Feeds\" checkbox is selected and a GUID token is displayed in the text-box underneath. When creating a new user, you can also set their role for products. A user can be assigned a role to multiple products at once, by checking the required checkboxes in the dropdown list of products. The same role will be applied across all products. Note: If you make a user a System Administrator, it will force that user to always have the 'Product Owner' role on all their assigned products, regardless of the chosen role. If you disable this option, they will then revert back to their true role. In a similar way, to edit the details of an existing user, click the \"Edit\" hyperlink in the user list box, and you will be taken to the following screen that allows you modify the user details: On this screen you can edit the first name, middle initial, last name, username, email address, system administration status and active status. You can also change the user's password (if the user is managed by SpiraPlan) or LDAP information (if managed by an external LDAP directory server). In LDAP-Managed mode you enter the fully Distinguished Name (DN) for that user in your corporate LDAP server and provide no password. SpiraPlan\u00ae will then query your corporate LDAP server for the password information, reducing the number of passwords that a user needs to remember. Please see the sections on \"Importing LDAP Users\" and \"LDAP Configuration\" for more details. Once you have made the necessary changes, click the \"Save\" button to commit them. If you decide that you want to ignore the changes, click the \"Cancel\" button and the changes will be discarded. At the top of the page you can also see information relating to the activity of the user on the system, such as when they last logged in. In addition, there are three tabs that allow you to add/remove the user from products, update the data-mapping used when synchronizing artifacts that are assigned or created by the current user, and, where relevant, specify whether the user can access the linked TaraVault\u2122 source code management service. If you click on the \"Product Membership\" tab you will be shown a list of products that the user is currently a member of: You can change the role that the user has on the various products, by choosing the appropriate role from the drop-down list and then clicking [Save]. To remove the user from a product, select its checkbox and then click [Delete]. To add a user to a new product, click on the [Add] button and then choose the product and associated role from the list of products on the screen that is displayed: Then click [Add] to add the selected product(s) to the user's product membership. To view/change the list of usernames that a user has in an external bug-tracking system, click on the \"Data Mapping\" tab. This section is used by the SpiraPlan data-synchronization service to map incidents from SpiraPlan to other bug-tracking systems Please see the SpiraPlan External Bug-Tracking Integration Guide for more details on using the data-mapping tab. If you click on the TaraVault membership tab, you can choose whether or not the user has access the linked TaraVault source code repository. This service is only available for hosted/cloud instances of SpiraPlan, and more details can be found in LDAP Configuration .","title":"View / Edit Users"},{"location":"Spira-Administration-Guide/System-Users/#importing-ldap-users","text":"If your organization already has an LDAP compatible user management system in place (e.g. Windows Active Directory, Novell eDirectory, OpenLDAP, IBM Tivoli, etc.), then instead of having to manually enter users one by one into SpiraPlan\u00ae, you can simply import them from your LDAP Server. Before doing this however, you need to first setup the LDAP configuration (see the section on LDAP Configuration below. Once you have setup your LDAP server configuration in SpiraPlan\u00ae, clicking on the \"Import Users From and LDAP Server\" will bring up the following screen: This screen lists all the users available in the LDAP server that have not been already imported into SpiraPlan\u00ae. The users are listed by name along with their login, email address and fully distinguished LDAP name (DN). You can narrow down the list by entering partial name matches in any of the fields displayed and clicking [Filter] and/or you can sort the results by clicking on the directional arrows in the field headings. Select the checkbox of any users you want to import and click \"Import\" to complete the operation. These users can now login to SpiraPlan\u00ae and use their existing LDAP login and password information.","title":"Importing LDAP Users"},{"location":"Spira-Administration-Guide/System-Users/#active-sessions","text":"Often an administrator of the system will want to know how many users are currently logged into the system, especially on installations licensed by concurrent-user. Clicking on the 'Active User Sessions' administration option will display a list of all the users who currently have active sessions in the system: Each user is displayed along with their user ID, whether they're connected through the application or via a third-party add-on, and the date they last logged-in. The administrator is able to forcibly end a user's session using the 'End Session' link to the right of their name. Clicking this link will result in that user being logged out when they try and perform an operation in the system. Warning: You should make sure that the user is not actively using the system to prevent any unsaved data being lost .","title":"Active Sessions"},{"location":"Spira-Administration-Guide/System-Users/#pending-requests","text":"If you have enabled the ability for users to register for new SpiraPlan accounts themselves , clicking on the \"Pending Requests\" administration option allows you to view a list of all the outstanding requests for new user accounts: For each pending user request you can choose to either Approve or Deny the request: Approve -- clicking this option will approve the user. They will get an email letting them know that they have been approved and can now log into the system. Delete -- clicking this option will delete the pending user request from the system.","title":"Pending Requests"},{"location":"Spira-Administration-Guide/System-Users/#view-edit-roles","text":"There are six (6) default product roles that a user may be assigned to a product with: Product Owner -- the same rights as a Manager, but in addition can access the product administration tools Manager -- can see all screens and add/edit all artifacts, but cannot access product administration tools Developer -- can see all screens, but can only add/edit incidents, tasks and tests and change requirement coverage Tester -- can see all screens, but can only add/edit incidents and execute tests. Note: cannot delete incidents, only a Manager can do that. Observer -- can see all screens, but cannot perform any write operations (insert / update / delete) Incident User -- can only view and edit incidents. This user cannot even see the product's requirements, tasks, test cases or releases. Note: The System Administrator (with a user id of 1) is automatically added to every product as a Product Owner, and can never be removed as Product Owner, made inactive or made a different role on the product. You can make changes to the permissions associated with each of these default roles, and also create as many additional roles as you like. To customize the roles in your installation of SpiraPlan\u00ae, click on the \"View / Edit Roles\" link in the Administration menu: The screen lists all of the roles currently configured in the system (both active and inactive) together with the name, description, and an active flag. You can create new roles by clicking the \"Add\" button which will create a new default role entry in the list. You can edit the name, description and associated permissions of a role by clicking on the appropriate \"Edit\" button. You can delete an existing role, by clicking the \"Delete\" button. Note that you cannot delete any of the default roles, but can instead make them inactive. Clicking on the edit button will take you to the following screen: On the top of the screen, you can edit the name, description, product admin, limited view and active flags: Product Admin -- this flag denotes whether this role has administration-level access to the product (for example the product owner role has this set by default) Template Admin -- this flag denotes whether this role has administration-level access to the template that controls this product. You can be a product admin, without also being a template admin. However, you cannot be a template admin, without also being a product admin. Limited View -- this flag denotes that the role has a restricted view of the product, with the user only allowed to see the artifacts that they have either created or been assigned Active -- This flag denotes if the role is active in the system Underneath you can specify the various artifact-specific permissions for the role: These permission options allow you to specify if a user can create , modify , delete or view each of the artifacts in the system. If a user does not have view permissions for the artifact, then the corresponding tab in the system will also be disabled. There are three kinds of Modify permission available: Modify All -- this option specifies that the user can modify all the artifacts of this type in the product (e.g. the user can edit all test cases) Modify Owned -- this option specifies that the user can modify only the artifacts in the product that were either created or assigned to this user (e.g. the user can edit only the requirements they created or have been assigned) Bulk Edit -- this option means that the user can modify items on the artifact list pages and on the various planning boards. This means the user can bypass the workflow restrictions on changing status and the need to enter required fields and electronic signatures. This should be disabled in a system that is being used for a regulated product that requires electronic signatures. Note: The permission needed to execute a test case is the \"Create + Test Run\" permission since that initiates the creation of a new test run. In addition, there are some artifact-wide permissions that can be specified for each role: This section lets you specify if the role allows users to add new documents to the product, edit existing documents, delete documents, edit the document folders, and view/edit source code revisions.","title":"View / Edit Roles"},{"location":"Spira-Administration-Guide/System-Workspaces/","text":"System: Workspaces View/Edit Products The following screen is displayed when you choose the \"View/Edit Products\" link from the administration menu: This screen displays the list of products in the system (both inactive and active) together with their program, template, date of creation, and active status. Clicking on either the \"View\" link in the right-hand column or the name of the product will change the currently selected product to one clicked. By default the table shows you only the active products, but you can select a different option from the dropdown above the table. You can filter the list of products by either choosing an active status, program, or entering a portion of the name or date into the appropriate text box. When you click the \"Filter\" button, the list of products will be filtered by the criteria you entered. You can clear the filter selection by clicking the \"Clear Filters\" button. To sort the list of products, just click on the appropriate arrow icon located in the header row of each field (one each for ascending / descending) In addition, the list of products is paginated into groups of fifteen (15). You can step through the different pages by clicking the page numbers at the bottom of the product list. To permanently delete a product, click the \"Delete\" button to the right of the product details. Doing so will show a popup where the admin will be required to correctly type the name of the selected product. Product deletion is irreversible and will delete all the artifacts associated with the product. If you want to temporarily delete a product, set its Active flag to 'No' instead. To make a copy of a product to reuse its test cases, releases, test sets and requirements, click the \"Copy\" link to the right of the product. Note that this will not make a copy of any historical information, test runs or incidents. To add a new product to the system, click the \"Add\" button at the bottom of the product list, and a new screen will be displayed that allows you to enter the new product information: You need to: enter a name for the product (which cannot be the same as any already in use); select which program it belongs to and optionally enter a detailed description and/or web-site URL; you should initially make sure that the product is marked as \"Active\"; decide what to base the product on. It can either be a new empty product, or be based on another product already in the system. Doing the latter will copy across its membership, settings and customizations; select a template that will control the product. If you are creating an empty product (not based on an existing one) you can select any template in the system to use for this product, or you can start with a brand new template. If you are creating a product based on an existing one, then by default the template will be the same as the one the existing product uses. You can still create a new template in this case, which will effectively be a clone of the template the existing product uses. Once you are satisfied with the information, click the \"Insert\" button to actually create the new product. In a similar way, to edit the details of an existing product, click the \"Edit\" button in the right hand column of the product list box, and you will be taken to the following screen that allows you modify the product details: On this screen you can edit the name, description, program, website URL and active status. Once you have made the necessary changes, click the \"Save\" button to commit them. If you decide that you want to ignore the changes, click the \"Cancel\" button and the changes will be discarded. Next to the current template for the product, is a \"Change\" button. Clicking this will let you change the product to use a different template . View/Edit Programs The following screen is displayed when you choose the \"View/Edit Programs\" link from the Administration menu: This screen displays the list of programs in the system (both inactive and active) together with their template, web site URL, date of creation and active status. Programs are used to relate products that are in the same department/division/organization or are for a common customer, client, etc. When products are in the same program, a user that is a member of the program can see the special Program Dashboard that displays key metrics from all the products in the program combined. Also, such users will have observer-level access to the contained products without needing to be explicitly added to each product. You can filter the list of programs by either choosing an active status, or entering a portion of the name, web-site or date into the appropriate text box. When you click the \"Filter\" button, the list of programs will be filtered by the criteria you entered. You can clear the filter selection by clicking the \"Clear Filters\" button. To sort the list of programs, just click on the appropriate arrow icon located in the header row of each field (one each for ascending / descending) In addition, the list of programs is paginated into groups of fifteen (15). You can step through the different pages by clicking the page numbers at the bottom of the product list. To permanently delete a program, you should click the \"Delete\" button to the right of the program details. Any products contained in the program will not be deleted, but instead just moved to the default program. There has to be at least one program in the system at all times, so the program designated as the 'default' one will not be available for deletion. To add a new program to the system, click the \"Add\" button at the bottom of the program list, and a new screen will be displayed that allows you to enter the new program information: You need to enter: a name for the program; optionally enter a detailed description and/or web-site URL; you should initially make sure that the program is marked as \"Active\"; you can choose to make this program the default one (meaning that it cannot be deleted and products get added to it when their programs are deleted); in addition you can optionally choose to associate the program with a product template. The template only controls the products that use it. It does not control the program, but it can affect what data is visible from some of the program pages. Once you are satisfied with the information, click the \"Insert\" button to actually create the new program. In a similar way, to edit the details of an existing program, click the \"Edit\" button in the right-hand column of the program list box, and you will be taken to the following screen that allows you modify the program details. Please note that this is the only administrative page in the program administration section. On the top part of this screen you can edit the name, description, website URL, active status and default status. Once you have made the necessary changes, click the \"Save\" button to commit them. If you decide that you want to ignore the changes, click the \"Cancel\" button and the changes will be discarded. In addition, the lower part of the screen allows you to view/edit the users that are members of the program and also see which products are in the program: a) Program User Membership This tab allows you to see which users are members of the program and which program role they have: The two program roles are \"Executive\" and \"Program Owner\": Executive -- This role allows the user to see the dashboard for this program, which contains all the key metrics for the contained products displayed in an aggregated manner. Please see the SpiraPlan User Manual for more details on this dashboard. In addition, the user is automatically granted 'observer' permissions for all the products in the program. Program Owner -- This role consists of all the permissions granted to the \"Executive\" role above, but in additional allows the user to make changes to the Program itself in the Administration section. To change the role of an existing program member, just change the role in the drop-down list and click [Save]. To remove a member from the program, just select the appropriate checkboxes and click [Delete]. Finally, to add a new user to the program, click on the [Add] button: You now should narrow down the list of users by entering filter criteria and clicking [Filter]. Once you have located the appropriate user(s), just select a program role for them from the drop-down list and click [Add] to add them to the program in the specified role. b) Program Product List This tab allows you to see the list of products that are contained within the current program. Clicking on the name of the product will take you to the details page for that product: View/Edit Templates The following screen is displayed when you choose the \"View/Edit Templates\" link from the administration menu: This screen displays the list of templates in the system (both inactive and active) with their active status. You can filter the list of products by either choosing an active status, ID, or entering a portion of the name into the appropriate text box. When you click the \"Filter\" button, the list of templates will be filtered by the criteria you entered. You can clear the filter selection by clicking the \"Clear Filter\" button. To sort the list of templates, click on the appropriate arrow icon located in the header row of each field (one each for ascending / descending). To permanently delete a template, click the \"Delete\" button to the right of the template details. This is irreversible. If you want to temporarily delete a product, set its Active flag to 'No' instead. Neither of these actions will be possible if any product (active or inactive) is controlled by the template*.* To add a new template to the system, you need to create a new template when creating a new product (as described in View/Edit Products ). To edit the details of an existing template, click the \"Edit\" button in the right hand column of the template list box, and you will be taken to the following screen that allows you modify the template details: On this screen you can edit the name, description, program, and active status. Once you have made the necessary changes, click the \"Save\" button to commit them. If you decide that you want to ignore the changes, click the \"Cancel\" button and the changes will be discarded.","title":"Workspaces"},{"location":"Spira-Administration-Guide/System-Workspaces/#system-workspaces","text":"","title":"System: Workspaces"},{"location":"Spira-Administration-Guide/System-Workspaces/#viewedit-products","text":"The following screen is displayed when you choose the \"View/Edit Products\" link from the administration menu: This screen displays the list of products in the system (both inactive and active) together with their program, template, date of creation, and active status. Clicking on either the \"View\" link in the right-hand column or the name of the product will change the currently selected product to one clicked. By default the table shows you only the active products, but you can select a different option from the dropdown above the table. You can filter the list of products by either choosing an active status, program, or entering a portion of the name or date into the appropriate text box. When you click the \"Filter\" button, the list of products will be filtered by the criteria you entered. You can clear the filter selection by clicking the \"Clear Filters\" button. To sort the list of products, just click on the appropriate arrow icon located in the header row of each field (one each for ascending / descending) In addition, the list of products is paginated into groups of fifteen (15). You can step through the different pages by clicking the page numbers at the bottom of the product list. To permanently delete a product, click the \"Delete\" button to the right of the product details. Doing so will show a popup where the admin will be required to correctly type the name of the selected product. Product deletion is irreversible and will delete all the artifacts associated with the product. If you want to temporarily delete a product, set its Active flag to 'No' instead. To make a copy of a product to reuse its test cases, releases, test sets and requirements, click the \"Copy\" link to the right of the product. Note that this will not make a copy of any historical information, test runs or incidents. To add a new product to the system, click the \"Add\" button at the bottom of the product list, and a new screen will be displayed that allows you to enter the new product information: You need to: enter a name for the product (which cannot be the same as any already in use); select which program it belongs to and optionally enter a detailed description and/or web-site URL; you should initially make sure that the product is marked as \"Active\"; decide what to base the product on. It can either be a new empty product, or be based on another product already in the system. Doing the latter will copy across its membership, settings and customizations; select a template that will control the product. If you are creating an empty product (not based on an existing one) you can select any template in the system to use for this product, or you can start with a brand new template. If you are creating a product based on an existing one, then by default the template will be the same as the one the existing product uses. You can still create a new template in this case, which will effectively be a clone of the template the existing product uses. Once you are satisfied with the information, click the \"Insert\" button to actually create the new product. In a similar way, to edit the details of an existing product, click the \"Edit\" button in the right hand column of the product list box, and you will be taken to the following screen that allows you modify the product details: On this screen you can edit the name, description, program, website URL and active status. Once you have made the necessary changes, click the \"Save\" button to commit them. If you decide that you want to ignore the changes, click the \"Cancel\" button and the changes will be discarded. Next to the current template for the product, is a \"Change\" button. Clicking this will let you change the product to use a different template .","title":"View/Edit Products"},{"location":"Spira-Administration-Guide/System-Workspaces/#viewedit-programs","text":"The following screen is displayed when you choose the \"View/Edit Programs\" link from the Administration menu: This screen displays the list of programs in the system (both inactive and active) together with their template, web site URL, date of creation and active status. Programs are used to relate products that are in the same department/division/organization or are for a common customer, client, etc. When products are in the same program, a user that is a member of the program can see the special Program Dashboard that displays key metrics from all the products in the program combined. Also, such users will have observer-level access to the contained products without needing to be explicitly added to each product. You can filter the list of programs by either choosing an active status, or entering a portion of the name, web-site or date into the appropriate text box. When you click the \"Filter\" button, the list of programs will be filtered by the criteria you entered. You can clear the filter selection by clicking the \"Clear Filters\" button. To sort the list of programs, just click on the appropriate arrow icon located in the header row of each field (one each for ascending / descending) In addition, the list of programs is paginated into groups of fifteen (15). You can step through the different pages by clicking the page numbers at the bottom of the product list. To permanently delete a program, you should click the \"Delete\" button to the right of the program details. Any products contained in the program will not be deleted, but instead just moved to the default program. There has to be at least one program in the system at all times, so the program designated as the 'default' one will not be available for deletion. To add a new program to the system, click the \"Add\" button at the bottom of the program list, and a new screen will be displayed that allows you to enter the new program information: You need to enter: a name for the program; optionally enter a detailed description and/or web-site URL; you should initially make sure that the program is marked as \"Active\"; you can choose to make this program the default one (meaning that it cannot be deleted and products get added to it when their programs are deleted); in addition you can optionally choose to associate the program with a product template. The template only controls the products that use it. It does not control the program, but it can affect what data is visible from some of the program pages. Once you are satisfied with the information, click the \"Insert\" button to actually create the new program. In a similar way, to edit the details of an existing program, click the \"Edit\" button in the right-hand column of the program list box, and you will be taken to the following screen that allows you modify the program details. Please note that this is the only administrative page in the program administration section. On the top part of this screen you can edit the name, description, website URL, active status and default status. Once you have made the necessary changes, click the \"Save\" button to commit them. If you decide that you want to ignore the changes, click the \"Cancel\" button and the changes will be discarded. In addition, the lower part of the screen allows you to view/edit the users that are members of the program and also see which products are in the program: a) Program User Membership This tab allows you to see which users are members of the program and which program role they have: The two program roles are \"Executive\" and \"Program Owner\": Executive -- This role allows the user to see the dashboard for this program, which contains all the key metrics for the contained products displayed in an aggregated manner. Please see the SpiraPlan User Manual for more details on this dashboard. In addition, the user is automatically granted 'observer' permissions for all the products in the program. Program Owner -- This role consists of all the permissions granted to the \"Executive\" role above, but in additional allows the user to make changes to the Program itself in the Administration section. To change the role of an existing program member, just change the role in the drop-down list and click [Save]. To remove a member from the program, just select the appropriate checkboxes and click [Delete]. Finally, to add a new user to the program, click on the [Add] button: You now should narrow down the list of users by entering filter criteria and clicking [Filter]. Once you have located the appropriate user(s), just select a program role for them from the drop-down list and click [Add] to add them to the program in the specified role. b) Program Product List This tab allows you to see the list of products that are contained within the current program. Clicking on the name of the product will take you to the details page for that product:","title":"View/Edit Programs"},{"location":"Spira-Administration-Guide/System-Workspaces/#viewedit-templates","text":"The following screen is displayed when you choose the \"View/Edit Templates\" link from the administration menu: This screen displays the list of templates in the system (both inactive and active) with their active status. You can filter the list of products by either choosing an active status, ID, or entering a portion of the name into the appropriate text box. When you click the \"Filter\" button, the list of templates will be filtered by the criteria you entered. You can clear the filter selection by clicking the \"Clear Filter\" button. To sort the list of templates, click on the appropriate arrow icon located in the header row of each field (one each for ascending / descending). To permanently delete a template, click the \"Delete\" button to the right of the template details. This is irreversible. If you want to temporarily delete a product, set its Active flag to 'No' instead. Neither of these actions will be possible if any product (active or inactive) is controlled by the template*.* To add a new template to the system, you need to create a new template when creating a new product (as described in View/Edit Products ). To edit the details of an existing template, click the \"Edit\" button in the right hand column of the template list box, and you will be taken to the following screen that allows you modify the template details: On this screen you can edit the name, description, program, and active status. Once you have made the necessary changes, click the \"Save\" button to commit them. If you decide that you want to ignore the changes, click the \"Cancel\" button and the changes will be discarded.","title":"View/Edit Templates"},{"location":"Spira-Administration-Guide/System/","text":"System General Settings The general settings page allows you to configure SpiraPlan\u00ae to better match your environment and setup. In the current version, you can specify the default language, or configure the folder used to store document attachments: The available settings include: Default Culture -- SpiraPlan can display information in a variety of different languages (assuming that the appropriate language packs have been installed) and number formats. By default, SpiraPlan will use the regional settings (language and number formats) of the operating system it has been installed on. However, you can override this default by choosing the appropriate culture from the list of options displayed in the drop-down list. Note: The list of culture options does not reflect the available language packs, so in some cases, the setting will only change the number formats. Default Timezone -- SpiraPlan stores all dates and times internally in Universal Coordinated Time (UTC) and can therefore display dates/times adjusted for different timezones. By default, SpiraPlan will display dates in the timezone specified in the operating system it has been installed on. However, you can override this default by choosing the appropriate display timezone from the list of options displayed in the drop-down list. Web Server URL -- This is the URL that your users use to access the system. Do not put the /Login.aspx or any other page here, as this URL is used to generate links to pages in the application. Attachments Folder - By default when SpiraPlan\u00ae is installed, the document attachments uploaded in the system get stored inside the C:\\Program Files\\SpiraPlan\\Attachments folder located inside the main SpiraPlan\u00ae installation root. However you may want to have the documents stored on a remotely mounted drive or on a different hard disk partition. In which case you can simply change the folder pointed to in the text-box illustrated above and then click [Update] to commit the change. Cache Folder -- By default when SpiraPlan needs to store temporary data (generated reports, the version control cache, etc.) it will store them in the C:\\ProgramData\\Inflectra\\Spira folder. Sometimes this folder is not appropriate (e.g. you want them on a different drive that has more space). You can enter in a different folder for temporary storage and SpiraPlan will use that instead. Login Notice -- this can be used system wide to set a message to permanently display at the bottom of the login screen for all users (for example, a company disclaimer). Administration Message -- this can be used by the administrator to display a temporary notice displayed on the login screen for all users. For example it could be used to remind all users that the server will be down for upgrading over the weekend. The administrator should delete the message once it is no longer needed. Instant Messenger -- SpiraPlan and SpiraTeam come with a built-in instant messenger that allows users to communicate with each other in real-time. This can result in higher levels of network traffic and some system administrators may wish to disable this feature. This option lets you disable the integrated instant messenger. In addition, you can specify how long (in days) instant messages are retained in the system. Event Log Retention -- As described in Event Log , SpiraPlan comes with a built-in diagnostic event log. By default the system will only retain the last 30-days of events to avoid wasting storage space. You can adjust the retention period in this section to match your organization's policies. Enable Free Text Indexes -- This tells SpiraPlan to use SQL Server Free Text Indexing to speed up keyword searches in the Global Search box. You should only have this set to \"Yes\" if you have the Free Text Indexing featured enabled in SQL Server, otherwise you will cause SpiraPlan to display error messages when users try and use the global search. Use TaraVault for source code -- This toggle is only available to cloud hosted versions of SpiraTeam and SpiraPlan. Cloud hosted applications will, by default, use TaraVault for source code management. Administrators can turn off TaraVault and then connect directly to any third party source code provider they choose. File Type Icons The \"File Types List\" administration page allows you to view all the different filetypes that are recognized by SpiraPlan and add or edit the associated icon, name, description and MIME type: If you click on the \"Edit\" button next to a filetype, or click on the \"Add\" button at the bottom of the screen, the system will display the page that lets you add or edit a filetype entry: On this page you can enter/edit the file extension that's used to recognize the type of file uploaded, the description of the file type (displayed in popup tooltips), the MIME type (used to determine how the browser handles the file type) and the path to the icon image. Once you are satisfied with the values, you can click on the \"Save\" button to confirm the changes. License Details The license details page displays the information about the installed license for the particular instance of SpiraPlan\u00ae being used. This will display less information for hosted customers. The information displayed for self-hosted customers includes: the product name (e.g. SpiraPlan), the license version (e.g. v6.0.0.0), type of license in effect (x-user fixed, x-user concurrent, demonstration, enterprise, etc.), the expiration date (if any) of the license, the organization that the license belongs to, and the number of users concurrently logged-in right now. This last piece of information is useful as it helps administrators track down how many licenses are currently in use. A sample page is illustrated below: To change the license key used by the system (for example, if to upgrade from Trial edition to Standard edition), you do not need to reinstall SpiraPlan\u00ae. All you need to do is change the organization and license key text-boxes to match the license key and organization name found in the customer area of our website ( http://www.inflectra.com/CustomerArea ) and click the \"Save\" button. If there is an issue with the license key (e.g. a trial version that is passed its expiration date, or where the license key doesn't match the organization name) an error will be displayed describing the specific issue with the information you entered. If you are unable to get the system to work with the license key information, please contact Inflectra \u00ae customer support at: support@inflectra.com . LDAP Configuration As described previously, you can configure SpiraPlan\u00ae to use an external LDAP server for importing new user profiles into the system, and for authenticating users -- instead of having to store separate passwords inside SpiraPlan\u00ae. However, you need to first configure the LDAP server settings. To do this, click on the \"LDAP Configuration\" link the Administration navigation: You need to fill out the various configuration settings for your LDAP server, each of which is explained in more detail below: **LDAP Host **This should contain the name of the LDAP server that you want SpiraPlan to connect to together with the port number if it's not the default of 389. **Use Secure Sockets Layer (SSL) **You should select this check-box if your LDAP server requires use of the LDAPS secure protocol. Leave unchecked for unencrypted LDAP communication. **Base DN **This should be the distinguished name of the object inside your LDAP server that contains the list of user accounts. This varies by the type of LDAP server, please consult your LDAP server documentation for more details. **Bind DN **This should be the distinguished name of the user inside your LDAP server that will be used to authenticate against when importing users. If not provided, SpiraPlan\u00ae will try and authenticate with the LDAP server anonymously. **Bind Password **The is the password of the user specified in the Bind DN field above. **Login Attribute **When SpiraPlan\u00ae imports users from the LDAP server it needs to know the user attribute inside the LDAP server that it should use to generate the SpiraPlan\u00ae user-name. For most LDAP servers the appropriate attribute would be \"uid\". However for Windows ActiveDirectory, the attribute \"sAMAccountName\" should be used instead. **First Name Attribute **Providing this optional attribute will allow SpiraPlan\u00ae to automatically populate the first name field of the imported user instead of simply using the username as a placeholder. **Last Name Attribute **Providing this optional attribute will allow SpiraPlan\u00ae to automatically populate the last name field of the imported user instead of simply using the username as a placeholder. **Middle Initial Attribute **Providing this optional attribute will allow SpiraPlan\u00ae to automatically populate the middle initial field of the imported user instead of simply leaving it blank. **Email Address Attribute **Providing this optional attribute will allow SpiraPlan\u00ae to automatically populate the email address field of the imported user instead of simply using the username@spiratest.com as a placeholder. **Sample User **You can optionally enter a sample user and password to test that the user is correctly authenticated against the server. You can update the LDAP configuration without setting this, but if you do provide a sample user/password, it will not save the configuration unless the authentication succeeds. If you choose to enter it, the user's name should be the fully-distinguished name of the user (e.g. CN=Sample User, CN=Users, OU=Headquarters, DC=MyCompany, DC=Com). Security Settings The \"Security Settings\" administration page lets you specify the various security settings within SpiraPlan to match your organization's policies and processes: The following settings can be changed within the system, once you are satisfied, click the \"Save\" button to commit the changes: Allow User Registration -- Set this to \"Yes\" if you want to allow users to self-register for SpiraPlan accounts (that you can subsequently approve). If you set this to \"No\", a system administrator will need to create all user accounts. Also set this to \"No\" if you plan on using LDAP-based authentication. Maximum # Invalid Password Attempts -- Set this to the number of times a user can enter an incorrect password before their account is temporarily locked out. This is important in preventing 'brute force' password hacking attempts. Minimum Required Password Length -- Set this to the minimum length of passwords in the system. Choosing a longer password will make it harder for an unauthorized user to crack a password and gain entry into the system. Minimum Required Special Characters - Set this to the minimum number of non-alphanumeric characters that will be required for passwords in the system. Choosing more required special characters will make it harder for an unauthorized user to crack a password and gain entry into the system. Password Attempt Time Window -- Set this to the duration (in minutes) after which a user's account will be automatically unlocked (due to repeated incorrect password attempts). Password Change Interval -- If set to a value, it will require all password to be changed after the specified number of days. Require Password Change on First Login -- Enabling this requires all new users to change their password on first login. Disallow Names in Passwords -- If enabled, passwords cannot contain the user's real name and/or username. Authentication Expiration -- This specifies the amount of time (in minutes) after which a user will be logged out due to inactivity when they login without choosing the 'Keep Me Logged-In' option. Keep Me Logged-In Expiration - This specifies the amount of time (in minutes) after which a user will be logged out due to inactivity if they have chosen to login with the 'Keep Me Logged-In' option. This should normally be longer than the previous setting. Allowed Domains - This should contain the list of other web domains that are allowed to make CORS (cross-origin) REST API calls to this instance. You can specify a comma separated list of base URLs (e.g. https://www.domain1.com , http://www.domain2.com ) or an asterisk (*) to denote all domains are allowed (not recommended). TaraVault\u00ae This section refers to the functionality available to hosted/cloud customers of SpiraPlan. If you are using the on-premise version of SpiraPlan, please refer to Version Control Integration instead. TaraVault\u00ae is the hosted source code repository and software configuration management (SCM) system provided by Inflectra. When you signed-up or purchased a subscription to either SpiraPlan or SpiraTeam, it will have come with an entry-level subscription to TaraVault. When you first click on the Administration > TaraVault administration page, you will see the following screen: This lets you know that you have not yet activated your TaraVault account with Inflectra. When you click on the [Activate TaraVault] button you will see the following: This will let you see how many TaraVault SCM users your subscription allows and also the name of the TaraVault instance that your SpiraPlan instance is associated with. Each product in SpiraPlan has its own corresponding TaraVault product, and each TaraVault product can be configured to use one of the two different SCM providers: Subversion (SVN) -- This is a simple, centralized version control system (VCS) that works best for teams that want to have a centralized SCM environment with only one central instance of the SCM repository. Subversion only allows a single branch to be managed and is generally easier to understand conceptually. Git -- This is a more powerful, distributed version control system (DVCS) that works best for teams that want to have multiple distributed instances of their source code repository. Git offers superior merging and branching functionality to Subversion but is generally more complicated to understand conceptually. For the current SpiraPlan product you can choose the type of provider you wish to use, enter the name of the TaraVault product and click Activate: Since you cannot change the type or name of the TaraVault product once activated, please review your entries and click [OK] to confirm the new product activation. Once the product activation has been completed, the screen will display the following: The screen will display the name of the linked TaraVault product as well as the list of TaraVault SCM users that are configured to use this TaraVault product -- this list will not necessarily be all of the users in the SpiraPlan product, just those that need to connect to TaraVault to commit source code into the repository. If you want to deactivate this TaraVault product, click the [Deactivate] button and the product will be removed from TaraVault. To improve performance, SpiraPlan will cache some of the data it receives from TaraVault. Normally SpiraPlan will know when to update the cached data based on changes made in TaraVault automatically. However sometimes you may wish to flush the cached data completed, to do this, click on the [Clear Cache] button. To add new SCM users to the TaraVault product, click on the 'Add Users' link to add new SCM users to the product. Event Log The \"System Event Log\" administration page lets you view all of the errors, warning and other diagnostic messages that have been logged in the system: Each event entry is displayed along with the date-time it occurred, the type of event (error, warning, information, success audit, failure audit), category (application, source code provider, data-synchronization) and the short name. To view the full message, click on the \"View Item\" hyperlink: The popup dialog box will display the full error message log and stack trace in a moveable dialog box. This information should be provided to Inflectra customer support if you log a help desk ticket. Testing Settings Clicking on the \"Testing Settings\" link brings up a list of options that the administrator can configure regarding testing. Select from the options displayed (as illustrated below) and click \"Save\" to commit the changes. You can enable or disable the following settings: Display Build During Test Execution -- During test execution the system can display a drop-down list of builds associated with the selected release. If you are using SpiraPlan in conjunction with a build server such as Jenkins/Hudson, you should choose \"Yes\", otherwise we recommend hiding the list of builds (to avoid confusing your testers) by choosing \"No\". Auto Unassign Tests -- When a tester passes an assigned test case or all the test cases in an assigned test set the system by default will automatically un-assign the test case / test set from the user. To prevent this from happening, change either setting to \"No\". Auto create a test step - Automatically creating a default test step on the creation of any test case Worx Integration -- Integrating with the Worx desktop application Email Configuration The Email Configuration page is split into two sections. The first section covers email notification details, and the second section configures how email from the application is sent. Email Notifications Active? -- Defaults to Yes. If changed to No, the system will not send out any emails, regardless of other settings. Note that this means that new user requests will not get sent either. From Email Address -- This is the email address specified in the 'From:' field of email notifications sent from the application. Reply-To Email Address -- This is the address specified in the 'ReplyTo:' field for notification emails sent from the application. Send HTML Emails? -- Defaults to Yes. This option specifies whether HTML or Plain-Text emails are sent from the system. Allow Users Control of Receiving Emails? -- Defaults to Yes. This specifies whether or not a user can modify their profile to not receive any emails from the system. If set to no, users' preference will be enabled and locked out. To use the internal IIS's default virtual SMTP server, leave all fields blank. The virtual server must then be configured to use proper SMTP server and network configuration. If you want the application to contact an SMTP server directly, use the following fields: Host Name -- This is the SMTP server to connect to. Port Number -- This is the port number to use, blank uses the default port 25. SSL Connection -- Whether or not to use an SSL connection with the server. Be sure that the SMTP server's SSL certificate is trusted on the application server. User Name -- When using an authentication method, this is the username to log in as. Password -- When using an authentication method, this is the password to use. Example settings for connecting to Gmail/Google Mail for sending notifications: Host Name: smtp.gmail.com Port Number: 587 SSL Connection: Yes User Name: \"account\"@gmail.com Password: \"account password\"","title":"System"},{"location":"Spira-Administration-Guide/System/#system","text":"","title":"System"},{"location":"Spira-Administration-Guide/System/#general-settings","text":"The general settings page allows you to configure SpiraPlan\u00ae to better match your environment and setup. In the current version, you can specify the default language, or configure the folder used to store document attachments: The available settings include: Default Culture -- SpiraPlan can display information in a variety of different languages (assuming that the appropriate language packs have been installed) and number formats. By default, SpiraPlan will use the regional settings (language and number formats) of the operating system it has been installed on. However, you can override this default by choosing the appropriate culture from the list of options displayed in the drop-down list. Note: The list of culture options does not reflect the available language packs, so in some cases, the setting will only change the number formats. Default Timezone -- SpiraPlan stores all dates and times internally in Universal Coordinated Time (UTC) and can therefore display dates/times adjusted for different timezones. By default, SpiraPlan will display dates in the timezone specified in the operating system it has been installed on. However, you can override this default by choosing the appropriate display timezone from the list of options displayed in the drop-down list. Web Server URL -- This is the URL that your users use to access the system. Do not put the /Login.aspx or any other page here, as this URL is used to generate links to pages in the application. Attachments Folder - By default when SpiraPlan\u00ae is installed, the document attachments uploaded in the system get stored inside the C:\\Program Files\\SpiraPlan\\Attachments folder located inside the main SpiraPlan\u00ae installation root. However you may want to have the documents stored on a remotely mounted drive or on a different hard disk partition. In which case you can simply change the folder pointed to in the text-box illustrated above and then click [Update] to commit the change. Cache Folder -- By default when SpiraPlan needs to store temporary data (generated reports, the version control cache, etc.) it will store them in the C:\\ProgramData\\Inflectra\\Spira folder. Sometimes this folder is not appropriate (e.g. you want them on a different drive that has more space). You can enter in a different folder for temporary storage and SpiraPlan will use that instead. Login Notice -- this can be used system wide to set a message to permanently display at the bottom of the login screen for all users (for example, a company disclaimer). Administration Message -- this can be used by the administrator to display a temporary notice displayed on the login screen for all users. For example it could be used to remind all users that the server will be down for upgrading over the weekend. The administrator should delete the message once it is no longer needed. Instant Messenger -- SpiraPlan and SpiraTeam come with a built-in instant messenger that allows users to communicate with each other in real-time. This can result in higher levels of network traffic and some system administrators may wish to disable this feature. This option lets you disable the integrated instant messenger. In addition, you can specify how long (in days) instant messages are retained in the system. Event Log Retention -- As described in Event Log , SpiraPlan comes with a built-in diagnostic event log. By default the system will only retain the last 30-days of events to avoid wasting storage space. You can adjust the retention period in this section to match your organization's policies. Enable Free Text Indexes -- This tells SpiraPlan to use SQL Server Free Text Indexing to speed up keyword searches in the Global Search box. You should only have this set to \"Yes\" if you have the Free Text Indexing featured enabled in SQL Server, otherwise you will cause SpiraPlan to display error messages when users try and use the global search. Use TaraVault for source code -- This toggle is only available to cloud hosted versions of SpiraTeam and SpiraPlan. Cloud hosted applications will, by default, use TaraVault for source code management. Administrators can turn off TaraVault and then connect directly to any third party source code provider they choose.","title":"General Settings"},{"location":"Spira-Administration-Guide/System/#file-type-icons","text":"The \"File Types List\" administration page allows you to view all the different filetypes that are recognized by SpiraPlan and add or edit the associated icon, name, description and MIME type: If you click on the \"Edit\" button next to a filetype, or click on the \"Add\" button at the bottom of the screen, the system will display the page that lets you add or edit a filetype entry: On this page you can enter/edit the file extension that's used to recognize the type of file uploaded, the description of the file type (displayed in popup tooltips), the MIME type (used to determine how the browser handles the file type) and the path to the icon image. Once you are satisfied with the values, you can click on the \"Save\" button to confirm the changes.","title":"File Type Icons"},{"location":"Spira-Administration-Guide/System/#license-details","text":"The license details page displays the information about the installed license for the particular instance of SpiraPlan\u00ae being used. This will display less information for hosted customers. The information displayed for self-hosted customers includes: the product name (e.g. SpiraPlan), the license version (e.g. v6.0.0.0), type of license in effect (x-user fixed, x-user concurrent, demonstration, enterprise, etc.), the expiration date (if any) of the license, the organization that the license belongs to, and the number of users concurrently logged-in right now. This last piece of information is useful as it helps administrators track down how many licenses are currently in use. A sample page is illustrated below: To change the license key used by the system (for example, if to upgrade from Trial edition to Standard edition), you do not need to reinstall SpiraPlan\u00ae. All you need to do is change the organization and license key text-boxes to match the license key and organization name found in the customer area of our website ( http://www.inflectra.com/CustomerArea ) and click the \"Save\" button. If there is an issue with the license key (e.g. a trial version that is passed its expiration date, or where the license key doesn't match the organization name) an error will be displayed describing the specific issue with the information you entered. If you are unable to get the system to work with the license key information, please contact Inflectra \u00ae customer support at: support@inflectra.com .","title":"License Details"},{"location":"Spira-Administration-Guide/System/#ldap-configuration","text":"As described previously, you can configure SpiraPlan\u00ae to use an external LDAP server for importing new user profiles into the system, and for authenticating users -- instead of having to store separate passwords inside SpiraPlan\u00ae. However, you need to first configure the LDAP server settings. To do this, click on the \"LDAP Configuration\" link the Administration navigation: You need to fill out the various configuration settings for your LDAP server, each of which is explained in more detail below: **LDAP Host **This should contain the name of the LDAP server that you want SpiraPlan to connect to together with the port number if it's not the default of 389. **Use Secure Sockets Layer (SSL) **You should select this check-box if your LDAP server requires use of the LDAPS secure protocol. Leave unchecked for unencrypted LDAP communication. **Base DN **This should be the distinguished name of the object inside your LDAP server that contains the list of user accounts. This varies by the type of LDAP server, please consult your LDAP server documentation for more details. **Bind DN **This should be the distinguished name of the user inside your LDAP server that will be used to authenticate against when importing users. If not provided, SpiraPlan\u00ae will try and authenticate with the LDAP server anonymously. **Bind Password **The is the password of the user specified in the Bind DN field above. **Login Attribute **When SpiraPlan\u00ae imports users from the LDAP server it needs to know the user attribute inside the LDAP server that it should use to generate the SpiraPlan\u00ae user-name. For most LDAP servers the appropriate attribute would be \"uid\". However for Windows ActiveDirectory, the attribute \"sAMAccountName\" should be used instead. **First Name Attribute **Providing this optional attribute will allow SpiraPlan\u00ae to automatically populate the first name field of the imported user instead of simply using the username as a placeholder. **Last Name Attribute **Providing this optional attribute will allow SpiraPlan\u00ae to automatically populate the last name field of the imported user instead of simply using the username as a placeholder. **Middle Initial Attribute **Providing this optional attribute will allow SpiraPlan\u00ae to automatically populate the middle initial field of the imported user instead of simply leaving it blank. **Email Address Attribute **Providing this optional attribute will allow SpiraPlan\u00ae to automatically populate the email address field of the imported user instead of simply using the username@spiratest.com as a placeholder. **Sample User **You can optionally enter a sample user and password to test that the user is correctly authenticated against the server. You can update the LDAP configuration without setting this, but if you do provide a sample user/password, it will not save the configuration unless the authentication succeeds. If you choose to enter it, the user's name should be the fully-distinguished name of the user (e.g. CN=Sample User, CN=Users, OU=Headquarters, DC=MyCompany, DC=Com).","title":"LDAP Configuration"},{"location":"Spira-Administration-Guide/System/#security-settings","text":"The \"Security Settings\" administration page lets you specify the various security settings within SpiraPlan to match your organization's policies and processes: The following settings can be changed within the system, once you are satisfied, click the \"Save\" button to commit the changes: Allow User Registration -- Set this to \"Yes\" if you want to allow users to self-register for SpiraPlan accounts (that you can subsequently approve). If you set this to \"No\", a system administrator will need to create all user accounts. Also set this to \"No\" if you plan on using LDAP-based authentication. Maximum # Invalid Password Attempts -- Set this to the number of times a user can enter an incorrect password before their account is temporarily locked out. This is important in preventing 'brute force' password hacking attempts. Minimum Required Password Length -- Set this to the minimum length of passwords in the system. Choosing a longer password will make it harder for an unauthorized user to crack a password and gain entry into the system. Minimum Required Special Characters - Set this to the minimum number of non-alphanumeric characters that will be required for passwords in the system. Choosing more required special characters will make it harder for an unauthorized user to crack a password and gain entry into the system. Password Attempt Time Window -- Set this to the duration (in minutes) after which a user's account will be automatically unlocked (due to repeated incorrect password attempts). Password Change Interval -- If set to a value, it will require all password to be changed after the specified number of days. Require Password Change on First Login -- Enabling this requires all new users to change their password on first login. Disallow Names in Passwords -- If enabled, passwords cannot contain the user's real name and/or username. Authentication Expiration -- This specifies the amount of time (in minutes) after which a user will be logged out due to inactivity when they login without choosing the 'Keep Me Logged-In' option. Keep Me Logged-In Expiration - This specifies the amount of time (in minutes) after which a user will be logged out due to inactivity if they have chosen to login with the 'Keep Me Logged-In' option. This should normally be longer than the previous setting. Allowed Domains - This should contain the list of other web domains that are allowed to make CORS (cross-origin) REST API calls to this instance. You can specify a comma separated list of base URLs (e.g. https://www.domain1.com , http://www.domain2.com ) or an asterisk (*) to denote all domains are allowed (not recommended).","title":"Security Settings"},{"location":"Spira-Administration-Guide/System/#taravault","text":"This section refers to the functionality available to hosted/cloud customers of SpiraPlan. If you are using the on-premise version of SpiraPlan, please refer to Version Control Integration instead. TaraVault\u00ae is the hosted source code repository and software configuration management (SCM) system provided by Inflectra. When you signed-up or purchased a subscription to either SpiraPlan or SpiraTeam, it will have come with an entry-level subscription to TaraVault. When you first click on the Administration > TaraVault administration page, you will see the following screen: This lets you know that you have not yet activated your TaraVault account with Inflectra. When you click on the [Activate TaraVault] button you will see the following: This will let you see how many TaraVault SCM users your subscription allows and also the name of the TaraVault instance that your SpiraPlan instance is associated with. Each product in SpiraPlan has its own corresponding TaraVault product, and each TaraVault product can be configured to use one of the two different SCM providers: Subversion (SVN) -- This is a simple, centralized version control system (VCS) that works best for teams that want to have a centralized SCM environment with only one central instance of the SCM repository. Subversion only allows a single branch to be managed and is generally easier to understand conceptually. Git -- This is a more powerful, distributed version control system (DVCS) that works best for teams that want to have multiple distributed instances of their source code repository. Git offers superior merging and branching functionality to Subversion but is generally more complicated to understand conceptually. For the current SpiraPlan product you can choose the type of provider you wish to use, enter the name of the TaraVault product and click Activate: Since you cannot change the type or name of the TaraVault product once activated, please review your entries and click [OK] to confirm the new product activation. Once the product activation has been completed, the screen will display the following: The screen will display the name of the linked TaraVault product as well as the list of TaraVault SCM users that are configured to use this TaraVault product -- this list will not necessarily be all of the users in the SpiraPlan product, just those that need to connect to TaraVault to commit source code into the repository. If you want to deactivate this TaraVault product, click the [Deactivate] button and the product will be removed from TaraVault. To improve performance, SpiraPlan will cache some of the data it receives from TaraVault. Normally SpiraPlan will know when to update the cached data based on changes made in TaraVault automatically. However sometimes you may wish to flush the cached data completed, to do this, click on the [Clear Cache] button. To add new SCM users to the TaraVault product, click on the 'Add Users' link to add new SCM users to the product.","title":"TaraVault\u00ae"},{"location":"Spira-Administration-Guide/System/#event-log","text":"The \"System Event Log\" administration page lets you view all of the errors, warning and other diagnostic messages that have been logged in the system: Each event entry is displayed along with the date-time it occurred, the type of event (error, warning, information, success audit, failure audit), category (application, source code provider, data-synchronization) and the short name. To view the full message, click on the \"View Item\" hyperlink: The popup dialog box will display the full error message log and stack trace in a moveable dialog box. This information should be provided to Inflectra customer support if you log a help desk ticket.","title":"Event Log"},{"location":"Spira-Administration-Guide/System/#testing-settings","text":"Clicking on the \"Testing Settings\" link brings up a list of options that the administrator can configure regarding testing. Select from the options displayed (as illustrated below) and click \"Save\" to commit the changes. You can enable or disable the following settings: Display Build During Test Execution -- During test execution the system can display a drop-down list of builds associated with the selected release. If you are using SpiraPlan in conjunction with a build server such as Jenkins/Hudson, you should choose \"Yes\", otherwise we recommend hiding the list of builds (to avoid confusing your testers) by choosing \"No\". Auto Unassign Tests -- When a tester passes an assigned test case or all the test cases in an assigned test set the system by default will automatically un-assign the test case / test set from the user. To prevent this from happening, change either setting to \"No\". Auto create a test step - Automatically creating a default test step on the creation of any test case Worx Integration -- Integrating with the Worx desktop application","title":"Testing Settings"},{"location":"Spira-Administration-Guide/System/#email-configuration","text":"The Email Configuration page is split into two sections. The first section covers email notification details, and the second section configures how email from the application is sent. Email Notifications Active? -- Defaults to Yes. If changed to No, the system will not send out any emails, regardless of other settings. Note that this means that new user requests will not get sent either. From Email Address -- This is the email address specified in the 'From:' field of email notifications sent from the application. Reply-To Email Address -- This is the address specified in the 'ReplyTo:' field for notification emails sent from the application. Send HTML Emails? -- Defaults to Yes. This option specifies whether HTML or Plain-Text emails are sent from the system. Allow Users Control of Receiving Emails? -- Defaults to Yes. This specifies whether or not a user can modify their profile to not receive any emails from the system. If set to no, users' preference will be enabled and locked out. To use the internal IIS's default virtual SMTP server, leave all fields blank. The virtual server must then be configured to use proper SMTP server and network configuration. If you want the application to contact an SMTP server directly, use the following fields: Host Name -- This is the SMTP server to connect to. Port Number -- This is the port number to use, blank uses the default port 25. SSL Connection -- Whether or not to use an SSL connection with the server. Be sure that the SMTP server's SSL certificate is trusted on the application server. User Name -- When using an authentication method, this is the username to log in as. Password -- When using an authentication method, this is the password to use. Example settings for connecting to Gmail/Google Mail for sending notifications: Host Name: smtp.gmail.com Port Number: 587 SSL Connection: Yes User Name: \"account\"@gmail.com Password: \"account password\"","title":"Email Configuration"},{"location":"Spira-Administration-Guide/Template-Custom-Properties/","text":"Template: Custom Properties SpiraPlan allows you to customize all of the artifacts in the system (requirements, test cases, incidents, etc.) by adding user-defined custom properties in addition to the built-in fields. You can create a variety of different types of custom properties. This section describes how to setup different custom lists and custom properties in your templates. Artifacts in SpiraPlan can have up to 30 different custom properties per artifact-type, per template. There are different types of custom properties allowed: Text : Normal or Rich-Text field. Integer : Whole-Number entry. Decimal : Fractional number entry (currency, etc.) Boolean : Simple yes/no (on/off) checkbox. Date : Date selector. List : Custom List selector. Multi-List : Custom List selector that allows multiple values. User : List of assignable users. Each custom property can have optional settings applied to it. Optional settings are as follows. (Note that not all settings are allowed for all property types.) Default : The default value when a new artifact is created. Allow Empty : Whether or not an empty value is allowed. Precision : (Decimal Only) How many decimal places is allowed (or the value is rounded to). Minimum Value : The minimum value allowed. Maximum Value : The maximum value allowed. Minimum Length : The minimum length of the data required in the field. Maximum Length : The maximum length of the data allowed in the field. Rich Text : Whether or not the text field allows HTML or not. Custom List : The defined Custom List for the field that users can select from. Important : Note that setting 'Allow Empty' to No will override any workflow step definitions, and will always require a value to be entered in, even if the workflow is configured to have the field disabled! Edit Custom Lists If you are planning on having any list based custom properties in your template, then you first need to create and populate the custom template lists that the user will be able to select from. These lists are stored separately from the individual artifact types so that you can have one set of values (e.g. list of operating systems under test) be reused by multiple artifact types. The following screen is displayed when you choose the \"Custom Lists\" link from the Administration menu: The screen displays all the custom lists currently defined within the template, together the number of values associated with each list. By default the screen will initially be empty so the first thing you need to do is click \"Add List\" to create a new custom list: After changing the name of the list, and specifying whether the values will be ordered by their name or the order in which they were entered (called by ID), you can either click \"Save\" to commit the change, or click the \"Add Value\" option to add some list values: This is the set of values that the user will select from the drop-down list when the custom property is displayed. You can change the display to include: All Active -- displays only custom list values that are active All But Deleted -- displays all custom list values that are active or inactive but have not been deleted All -- displays all custom list values, including those that have been deleted To add a new custom list value, click the \"Add Value\" button and a new row will be added to the list which you can now edit. To edit an existing custom list value, change the name in the textbox and click \"Save\". To delete a custom list value, click on the \"Delete\" hyperlink. If you want to remove an item from the list temporarily, you can set its Active dropdown list to 'No', if you want to remove an item permanently, just click the 'Delete' button. Note: Even if you delete a custom list value, there is an option to undelete by simply changing the display selection to \"All\" and clicking the 'Undelete' hyperlink next to a deleted value. To edit an existing custom list, you just need to click on the \"Edit Values\" button to display the custom list name and list of associated values (which is the same screen as the one displayed for a new list). To remove a custom list from the template, just click on the \"Remove\" button next to the custom list and the list and all its associated values will be deleted from the template. Edit Custom Properties This option is used to actually define the custom properties associated with each artifact type in the template. The following screen is displayed when you choose the \"Custom Properties\" link from the Administration menu: The screen displays a list of all the possible custom properties for a particular artifact type for the current template. Each artifact type (requirement, test case, etc.) can have up to thirty (30) custom properties of various types. Initially the screen will default to showing the existing custom properties for a template's Requirements; to change the list to a different artifact type (e.g. Incidents), all you need to do is change the artifact type in the drop-down-list. This will refresh the list to show the custom properties for that artifact type. To edit an existing custom property definition or add a new definition, click the \"Edit Definition\" button for a specific property, and the following dialog will be displayed: The fields visible will vary depending on the type of custom property you have selected, but every custom property will need to have a Name and a Type. The Name is the caption that will be shown to the user when viewing or editing the artifact. The type is the type of data the field allows. If the custom property is either a List or Multi-List type, you will need to choose the associated Custom List that you previously defined. Under the Options tab will be available options that can be set for the custom property: When finished, click the 'Save' button and you will be returned to the Custom Property list. Important : When changing a custom property's type or removing a custom property, the data is not actually removed from the artifact. Therefore, if you change a custom property from a date type to a text custom property, the field will display the old date value until it is changed by the user.","title":"Custom Properties"},{"location":"Spira-Administration-Guide/Template-Custom-Properties/#template-custom-properties","text":"SpiraPlan allows you to customize all of the artifacts in the system (requirements, test cases, incidents, etc.) by adding user-defined custom properties in addition to the built-in fields. You can create a variety of different types of custom properties. This section describes how to setup different custom lists and custom properties in your templates. Artifacts in SpiraPlan can have up to 30 different custom properties per artifact-type, per template. There are different types of custom properties allowed: Text : Normal or Rich-Text field. Integer : Whole-Number entry. Decimal : Fractional number entry (currency, etc.) Boolean : Simple yes/no (on/off) checkbox. Date : Date selector. List : Custom List selector. Multi-List : Custom List selector that allows multiple values. User : List of assignable users. Each custom property can have optional settings applied to it. Optional settings are as follows. (Note that not all settings are allowed for all property types.) Default : The default value when a new artifact is created. Allow Empty : Whether or not an empty value is allowed. Precision : (Decimal Only) How many decimal places is allowed (or the value is rounded to). Minimum Value : The minimum value allowed. Maximum Value : The maximum value allowed. Minimum Length : The minimum length of the data required in the field. Maximum Length : The maximum length of the data allowed in the field. Rich Text : Whether or not the text field allows HTML or not. Custom List : The defined Custom List for the field that users can select from. Important : Note that setting 'Allow Empty' to No will override any workflow step definitions, and will always require a value to be entered in, even if the workflow is configured to have the field disabled!","title":"Template: Custom Properties"},{"location":"Spira-Administration-Guide/Template-Custom-Properties/#edit-custom-lists","text":"If you are planning on having any list based custom properties in your template, then you first need to create and populate the custom template lists that the user will be able to select from. These lists are stored separately from the individual artifact types so that you can have one set of values (e.g. list of operating systems under test) be reused by multiple artifact types. The following screen is displayed when you choose the \"Custom Lists\" link from the Administration menu: The screen displays all the custom lists currently defined within the template, together the number of values associated with each list. By default the screen will initially be empty so the first thing you need to do is click \"Add List\" to create a new custom list: After changing the name of the list, and specifying whether the values will be ordered by their name or the order in which they were entered (called by ID), you can either click \"Save\" to commit the change, or click the \"Add Value\" option to add some list values: This is the set of values that the user will select from the drop-down list when the custom property is displayed. You can change the display to include: All Active -- displays only custom list values that are active All But Deleted -- displays all custom list values that are active or inactive but have not been deleted All -- displays all custom list values, including those that have been deleted To add a new custom list value, click the \"Add Value\" button and a new row will be added to the list which you can now edit. To edit an existing custom list value, change the name in the textbox and click \"Save\". To delete a custom list value, click on the \"Delete\" hyperlink. If you want to remove an item from the list temporarily, you can set its Active dropdown list to 'No', if you want to remove an item permanently, just click the 'Delete' button. Note: Even if you delete a custom list value, there is an option to undelete by simply changing the display selection to \"All\" and clicking the 'Undelete' hyperlink next to a deleted value. To edit an existing custom list, you just need to click on the \"Edit Values\" button to display the custom list name and list of associated values (which is the same screen as the one displayed for a new list). To remove a custom list from the template, just click on the \"Remove\" button next to the custom list and the list and all its associated values will be deleted from the template.","title":"Edit Custom Lists"},{"location":"Spira-Administration-Guide/Template-Custom-Properties/#edit-custom-properties","text":"This option is used to actually define the custom properties associated with each artifact type in the template. The following screen is displayed when you choose the \"Custom Properties\" link from the Administration menu: The screen displays a list of all the possible custom properties for a particular artifact type for the current template. Each artifact type (requirement, test case, etc.) can have up to thirty (30) custom properties of various types. Initially the screen will default to showing the existing custom properties for a template's Requirements; to change the list to a different artifact type (e.g. Incidents), all you need to do is change the artifact type in the drop-down-list. This will refresh the list to show the custom properties for that artifact type. To edit an existing custom property definition or add a new definition, click the \"Edit Definition\" button for a specific property, and the following dialog will be displayed: The fields visible will vary depending on the type of custom property you have selected, but every custom property will need to have a Name and a Type. The Name is the caption that will be shown to the user when viewing or editing the artifact. The type is the type of data the field allows. If the custom property is either a List or Multi-List type, you will need to choose the associated Custom List that you previously defined. Under the Options tab will be available options that can be set for the custom property: When finished, click the 'Save' button and you will be returned to the Custom Property list. Important : When changing a custom property's type or removing a custom property, the data is not actually removed from the artifact. Therefore, if you change a custom property from a date type to a text custom property, the field will display the old date value until it is changed by the user.","title":"Edit Custom Properties"},{"location":"Spira-Administration-Guide/Template-Documents/","text":"Template: Documents SpiraPlan\u00ae includes a built-in web-based document management system that allows you to upload and share documents between product team members. These documents are stored in folders, categorized by a series of user-defined meta-tags and can also be associated with other artifacts in the system (e.g. requirements, incidents, etc.). The set of administrative options located under the \"Documents\" heading allow the Template Owner to configure how the documents are organized in their particular template. Document Types When users upload documents into a SpiraPlan product, they are required to specify the type of document that is being uploaded. The list of document types is configurable by the Template Owner for each individual template. When you click on Documents \"Types\", you can edit the list of types available: By default, each template will be created with a single document type called 'Default'. You can add additional document types and/or change the name of the ones already created. If you decide that you no longer want to use a specific document type, you can set its active flag to \"No\". The only requirement is that each template needs to have at least one active document type available, and that there is one active type designated as the default type. The default type is the option that will be initially selected when a user uploads a file / URL to the template's product(s). Document Statuses The following screen is displayed when you choose the \"Statuses\" link from the Documents section of the administration menu: The screen displays a list of all the defined document statuses for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae document statuses. To edit an existing document status, change the name, open check-box, set it as the default status and/or change the active flag then click \"Save\". You can't delete an existing document status, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new document status, click the \"Add\" button and a new row will be added to the list which you can now edit. The open check-box allow you to specify if the document status should be considered open or not, which means it is would be eligible for display in the various sections of the user's home page and the product home page that list open document. The default radio button allows you to specify which document status should be the default for newly created documents. This is the status that a new document will be set to when first created, and acts as the first step in the document workflow. Note that you must have at least one active incident status, and you cannot set a document status as the default. Document Workflows Clicking on the \"Workflows\" link in the Administration menu Documents section brings up the list of defined document workflows for the current template. A workflow is a predefined sequence of document statuses linked together by \"workflow transitions\" to enable a newly created document to be reviewed, prioritized, assigned, resolved and closed, as well as to checking documents in and out of the system. The workflow list screen for a sample template is illustrated below: To modify the name, default status, notify and/or active flags, change the values in the appropriate text-box, radio-button, check-box or drop-down list and click the \"Save\" button. To add a new workflow, click the \"Add\" button and a new workflow will be created with the standard SpiraPlan\u00ae steps and transitions. You can have as many document workflows as you like in a template, but only one can be marked as the default. Each document type is assigned to a workflow; this allows you to have different document types follow different paths from creation of closure. However, when a new document type is created, it will be initially associated with the template's default workflow. Note: You can only assign an active workflow to a document type, and similarly you cannot make a workflow inactive that is currently linked to a document type. This is important as all document types need to be linked to an active workflow at all times. Workflow Details Clicking on the \"Steps\" button of a workflow brings up the following screen that lists all the workflow steps and workflow transitions that comprise the workflow: This page lists in the left-most column all the various document statuses defined for the template. The next column lists all the possible transitions that can occur from that status . In addition, to the right of each transition is the name of the resulting destination status that the transition leads to. E.g. from the Under Review status, depending on your role (see later) you can move the document to either Approved, Rejected or Draft depending on which transition the user takes. Clicking on the name of a step or transition takes you to the appropriate details page (see below) where you can set the properties of the step or transition respectively. To delete an existing transition, click the \"x\" button after the transition name, and to add a new transition, click the \"Add Transition\" button in the Operations column. Edit Workflow Transition When you click on the transition name link from the previous screen, you are taken to the workflow transition details screen: The top part of the screen is the \"workflow browser\" which illustrates how the transition relates to the workflow as a whole. It displays the current transition in the middle, with the originating and destination steps listed to either side. Clicking on either document status name will take you to the appropriate workflow step details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. If a digital signature from the user is required to authorize and record the transition, set the toggle to yes for \"Require Electronic Signature\". Each transition has a series of conditions which need to be satisfied for a user to actually execute the transition (i.e. move the document from the originating status to the destination status). Edit Workflow Step When you click on the document status name link from either of the previous screens, you are taken to the workflow step details screen: The top part of the screen is the \"workflow browser\" which illustrates how the step relates to the workflow as a whole. It displays the current document status in the middle, with the possible originating and destination transitions listed to either side. Clicking on either workflow transition name will take you to the appropriate workflow transition details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This page allows you to define the behavior of the various document fields (i.e. those that are a standard part of SpiraPlan\u00ae such as Type): This page also allows you to define the behavior of the various document custom properties for this particular step in the workflow: You can set each of the fields/custom properties as being: Hidden -- The field / custom property will not be displayed when the document is in this status Disabled -- The field / custom property will be displayed, but will be greyed-out and read-only Required -- The field / custom property will be required when the document is in this status Note that you cannot set a field/property as being required and either disabled or hidden since this would prevent a user from ever updating the document. After you have made the changes, click the \"Save\" button.","title":"Documents"},{"location":"Spira-Administration-Guide/Template-Documents/#template-documents","text":"SpiraPlan\u00ae includes a built-in web-based document management system that allows you to upload and share documents between product team members. These documents are stored in folders, categorized by a series of user-defined meta-tags and can also be associated with other artifacts in the system (e.g. requirements, incidents, etc.). The set of administrative options located under the \"Documents\" heading allow the Template Owner to configure how the documents are organized in their particular template.","title":"Template: Documents"},{"location":"Spira-Administration-Guide/Template-Documents/#document-types","text":"When users upload documents into a SpiraPlan product, they are required to specify the type of document that is being uploaded. The list of document types is configurable by the Template Owner for each individual template. When you click on Documents \"Types\", you can edit the list of types available: By default, each template will be created with a single document type called 'Default'. You can add additional document types and/or change the name of the ones already created. If you decide that you no longer want to use a specific document type, you can set its active flag to \"No\". The only requirement is that each template needs to have at least one active document type available, and that there is one active type designated as the default type. The default type is the option that will be initially selected when a user uploads a file / URL to the template's product(s).","title":"Document Types"},{"location":"Spira-Administration-Guide/Template-Documents/#document-statuses","text":"The following screen is displayed when you choose the \"Statuses\" link from the Documents section of the administration menu: The screen displays a list of all the defined document statuses for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae document statuses. To edit an existing document status, change the name, open check-box, set it as the default status and/or change the active flag then click \"Save\". You can't delete an existing document status, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new document status, click the \"Add\" button and a new row will be added to the list which you can now edit. The open check-box allow you to specify if the document status should be considered open or not, which means it is would be eligible for display in the various sections of the user's home page and the product home page that list open document. The default radio button allows you to specify which document status should be the default for newly created documents. This is the status that a new document will be set to when first created, and acts as the first step in the document workflow. Note that you must have at least one active incident status, and you cannot set a document status as the default.","title":"Document Statuses"},{"location":"Spira-Administration-Guide/Template-Documents/#document-workflows","text":"Clicking on the \"Workflows\" link in the Administration menu Documents section brings up the list of defined document workflows for the current template. A workflow is a predefined sequence of document statuses linked together by \"workflow transitions\" to enable a newly created document to be reviewed, prioritized, assigned, resolved and closed, as well as to checking documents in and out of the system. The workflow list screen for a sample template is illustrated below: To modify the name, default status, notify and/or active flags, change the values in the appropriate text-box, radio-button, check-box or drop-down list and click the \"Save\" button. To add a new workflow, click the \"Add\" button and a new workflow will be created with the standard SpiraPlan\u00ae steps and transitions. You can have as many document workflows as you like in a template, but only one can be marked as the default. Each document type is assigned to a workflow; this allows you to have different document types follow different paths from creation of closure. However, when a new document type is created, it will be initially associated with the template's default workflow. Note: You can only assign an active workflow to a document type, and similarly you cannot make a workflow inactive that is currently linked to a document type. This is important as all document types need to be linked to an active workflow at all times.","title":"Document Workflows"},{"location":"Spira-Administration-Guide/Template-Documents/#workflow-details","text":"Clicking on the \"Steps\" button of a workflow brings up the following screen that lists all the workflow steps and workflow transitions that comprise the workflow: This page lists in the left-most column all the various document statuses defined for the template. The next column lists all the possible transitions that can occur from that status . In addition, to the right of each transition is the name of the resulting destination status that the transition leads to. E.g. from the Under Review status, depending on your role (see later) you can move the document to either Approved, Rejected or Draft depending on which transition the user takes. Clicking on the name of a step or transition takes you to the appropriate details page (see below) where you can set the properties of the step or transition respectively. To delete an existing transition, click the \"x\" button after the transition name, and to add a new transition, click the \"Add Transition\" button in the Operations column.","title":"Workflow Details"},{"location":"Spira-Administration-Guide/Template-Documents/#edit-workflow-transition","text":"When you click on the transition name link from the previous screen, you are taken to the workflow transition details screen: The top part of the screen is the \"workflow browser\" which illustrates how the transition relates to the workflow as a whole. It displays the current transition in the middle, with the originating and destination steps listed to either side. Clicking on either document status name will take you to the appropriate workflow step details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. If a digital signature from the user is required to authorize and record the transition, set the toggle to yes for \"Require Electronic Signature\". Each transition has a series of conditions which need to be satisfied for a user to actually execute the transition (i.e. move the document from the originating status to the destination status).","title":"Edit Workflow Transition"},{"location":"Spira-Administration-Guide/Template-Documents/#edit-workflow-step","text":"When you click on the document status name link from either of the previous screens, you are taken to the workflow step details screen: The top part of the screen is the \"workflow browser\" which illustrates how the step relates to the workflow as a whole. It displays the current document status in the middle, with the possible originating and destination transitions listed to either side. Clicking on either workflow transition name will take you to the appropriate workflow transition details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This page allows you to define the behavior of the various document fields (i.e. those that are a standard part of SpiraPlan\u00ae such as Type): This page also allows you to define the behavior of the various document custom properties for this particular step in the workflow: You can set each of the fields/custom properties as being: Hidden -- The field / custom property will not be displayed when the document is in this status Disabled -- The field / custom property will be displayed, but will be greyed-out and read-only Required -- The field / custom property will be required when the document is in this status Note that you cannot set a field/property as being required and either disabled or hidden since this would prevent a user from ever updating the document. After you have made the changes, click the \"Save\" button.","title":"Edit Workflow Step"},{"location":"Spira-Administration-Guide/Template-Home/","text":"Template: Home Page The Template Administration Home page is accessible to users whose product role includes template admin permission. It provides template administrators with quick access to important information. There are multiple ways to navigate to it: In the main workspace dropdown, in the dedicated Templates section at the bottom, click on the template name. First select a product. Then click the \"Administration\" link in the upper right. This will display the context aware administration menu popup. Then click on the Template section heading. From the product admin home page, within the Product Overview widget, click on the template link. Template Overview This widget shows a list of its owners. Click the Edit link to go to the template editing page. Product List This widget shows a list of the products which use this template. Links This widget provides an alternate way to access the template-specific configuration pages.","title":"Home page"},{"location":"Spira-Administration-Guide/Template-Home/#template-home-page","text":"The Template Administration Home page is accessible to users whose product role includes template admin permission. It provides template administrators with quick access to important information. There are multiple ways to navigate to it: In the main workspace dropdown, in the dedicated Templates section at the bottom, click on the template name. First select a product. Then click the \"Administration\" link in the upper right. This will display the context aware administration menu popup. Then click on the Template section heading. From the product admin home page, within the Product Overview widget, click on the template link.","title":"Template: Home Page"},{"location":"Spira-Administration-Guide/Template-Home/#template-overview","text":"This widget shows a list of its owners. Click the Edit link to go to the template editing page.","title":"Template Overview"},{"location":"Spira-Administration-Guide/Template-Home/#product-list","text":"This widget shows a list of the products which use this template.","title":"Product List"},{"location":"Spira-Administration-Guide/Template-Home/#links","text":"This widget provides an alternate way to access the template-specific configuration pages.","title":"Links"},{"location":"Spira-Administration-Guide/Template-Incidents/","text":"Template: Incidents In addition to being able to create custom properties and values for incidents (same as for all artifacts in SpiraPlan\u00ae), you can also change the values populated in many of the standard fields used in the incident tracker -- types, statuses, priorities and severities. The process for changing each of these is described below: Edit Types The following screen is displayed when you choose the \"Types\" link from the Incidents section of the administration menu: The screen displays a list of all the defined incident types for the current template. By default the screen will be populated with the standard SpiraPlan\u00ae incident types. To edit an existing incident type, change the name, associated workflow, issue check-box, risk check-box, set a default type and/or change the active flag then click \"Save\". You can't delete an existing incident type, but to prevent it appearing in any drop-down-lists, all you need to do is change its active flag to \"No\" and click \"Save\". To add a new incident type, click the \"Add\" button and a new row will be added to the list which you can now edit. The associated workflow drop-down list allows you to specify which workflow the incident type will follow. This is a very powerful feature since it allows you to configure different workflows for different incident types; i.e. a bug may follow a workflow geared to identification and resolution, whereas a risk may only need a much simpler set of steps and actions. The issue check-boxes allow you to specify if the incident type is an issue, which means it would be eligible for display in the issue section of the product home page. The default radio button allows you to specify which incident type should be the default for newly created incidents. This is the type that a new incident will be set to unless changed by the creator of the incident. Note that you must have at least one active incident type, and you cannot set an inactive type as the default. Edit Statuses The following screen is displayed when you choose the \"Statuses\" link from the Incidents section of the administration menu: The screen displays a list of all the defined incident statuses for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae incident statuses. To edit an existing incident status, change the name, open check-box, set it as the default status and/or change the active flag then click \"Save\". You can't delete an existing incident status, but to prevent it appearing in any drop-down-lists, all you need to do is change its active flag to \"No\" and click \"Save\". To add a new incident status, click the \"Add\" button and a new row will be added to the list which you can now edit. The open check-box allow you to specify if the incident status should be considered open or not, which means it is would be eligible for display in the various sections of the user's home page and the product home page that list open incidents. The default radio button allows you to specify which incident status should be the default for newly created incidents. This is the status that a new incident will be set to when first created, and acts as the first step in the incident workflow. Note that you must have at least one active incident status, and you cannot set an inactive status as the default. Priorities The following screen is displayed when you choose the \"Priorities\" link from the Incidents section of the administration menu: The screen displays a list of all the defined incident priorities for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae incident priorities. To edit an existing incident priority, change the name, color and/or change the active flag then click \"Save\". Note that you can either enter the hexadecimal RRGGBB code for the color or use the pop-up color picker. You can't delete an existing incident priority, but to prevent it appearing in any drop-down-lists, all you need to do is change its active flag to \"No\" and click \"Save\". To add a new incident priority, click the \"Add\" button and a new row will be added to the list which you can now edit. Severities The following screen is displayed when you choose the \"Severities\" link from the Incidents section of the administration menu: The screen displays a list of all the defined incident severities for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae incident severities. To edit an existing incident severity, change the name, color and/or change the active flag then click \"Save\". Note that you can either enter the hexadecimal RRGGBB code for the color or use the pop-up color picker. You can't delete an existing incident severity, but to prevent it appearing in any drop-down-lists, all you need to do is change its active flag to \"No\" and click \"Save\". To add a new incident severity, click the \"Add\" button and a new row will be added to the list which you can now edit. Incident Workflows Clicking on the \"Workflows\" link in the Administration menu brings up the list of defined incident workflows for the current template. A workflow is a predefined sequence of incident statuses linked together by \"workflow transitions\" to enable a newly created incident to be reviewed, prioritized, assigned, resolved and closed, as well as to handle exception cases such as the case of a duplicate or non-reproducible incident. The workflow list screen for a sample template is illustrated below: To modify the name, default status, notify and/or active flags, change the values in the appropriate text-box, radio-button, check-box or drop-down list and click the \"Save\" button. To add a new workflow, click the \"Add\" button and a new workflow will be created with the standard SpiraPlan\u00ae steps and transitions. You can have as many workflows as you like in a template, but only one can be marked as the default. Each incident type is assigned to a workflow; this allows you to have different incident types follow different paths from creation of closure. However when a new incident type is created, it will be initially associated with the template's default workflow. The steps and transitions that make up the default workflow are illustrated in the diagram below: The notify flag is used to tell SpiraPlan\u00ae whether that particular workflow should have email notifications turned on or off. You define what transitions and which recipients should receive the emails in the workflow transition editor (see below), but you can globally turn on/off notifications here as well. This is useful if you find that the notifications are becoming an annoyance, or if the email server is unavailable for a period of time. Note: You can only assign an active workflow to an incident type, and similarly you cannot make a workflow inactive that is currently linked to an incident type. This is important as all incident types need to be linked to an active workflow at all times. Edit Workflow Details Clicking on the \"Steps\" button of a workflow brings up the following screen that lists all the workflow steps and workflow transitions that comprise the workflow: This page lists in the left-most column all the various incident statuses defined for the template. The next column lists all the possible transitions that can occur from that status . In addition, with each transition is listed the name of the resulting destination status that the transition leads to. E.g. from the assigned status, depending on your role (see later) you can move the incident to either duplicate, resolves or not-reproducible depending on which transition the user takes. Clicking on the name of a step or transition takes you to the appropriate details page (see below) where you can set the properties of the step or transition respectively. To delete an existing transition, click the \"x\" button after the transition name, and to add a new transition, click the \"Add Transition\" button in the Operations column. Edit Workflow Transition When you click on the transition name link from the previous screen, you are taken to the workflow transition details screen: The top part of the screen is the \"workflow browser\" which illustrates how the transition relates to the workflow as a whole. It displays the current transition in the middle, with the originating and destination steps listed to either side. Clicking on either incident status name will take you to the appropriate workflow step details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This part of the screen lets you change the name of the transition and specify the subject line of any email notifications sent as part of this transition. To view the list of special tokens that can be used in the email subject, click on the \"Display Email Subject Special Tokens\" hyperlink: If a digital signature from the user is required to authorize and record the transition, set the toggle to yes for \"Require Electronic Signature\". Each transition has a series of conditions which need to be satisfied for a user to actually execute the transition (i.e. move the incident from the originating status to the destination status): Each transition also has a set of notification rules that allow you to specify who should get an email notification if the transition is executed. Both the conditions and notifications allow you to set three types of user role: The detector of the incident can be allowed to execute the transition, and/or be notified when the transition occurs. For example, when an incident is marked as Resolved, the detector should be the only one who's allowed to move it to Closed. Similarly when an incident is moved from Assigned to Resolved, the detector should probably be notified so that he knows to log in and verify that it has been resolved satisfactorily. The owner of the incident can be allowed to execute the transition, and/or be notified when the transition occurs. For example, when an incident is marked as Assigned, the assigned owner should be the only one who's allowed to move it to Resolved. Similarly when an incident is moved from Open to Assigned, the owner should probably be notified so that he knows to log in and begin resolving the incident. A user with a specified role can be allowed to execute the transition, and/or be notified when the transition occurs regardless of whether they are the detector or owner. For example a user with role \"Manager\" might want the power to close all incidents regardless of ownership status, and might also want to be notified when any incident is marked as Not-Reproducible. You can set any of these conditions by changing the drop-down list and/or check-boxes and clicking the appropriate \"Save\" button. Edit Workflow Step When you click on the incident status name link from either of the previous screens, you are taken to the workflow step details screen: The top part of the screen is the \"workflow browser\" which illustrates how the step relates to the workflow as a whole. It displays the current incident status in the middle, with the possible originating and destination transitions listed to either side. Clicking on either workflow transition name will take you to the appropriate workflow transition details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This page allows you to define the behavior of the various incident fields (i.e. those that are a standard part of SpiraPlan\u00ae such as Priority): This page also allows you to define the behavior of the various incident custom properties for this particular step in the workflow: You can set each of the fields/custom properties as being: Hidden -- The field / custom property will not be displayed when the incident is in this status Disabled -- The field / custom property will be displayed, but will be greyed-out and read-only Required -- The field / custom property will be required when the incident is in this status Note that you cannot set a field/property as being required and either disabled or hidden since this would prevent a user from ever updating the incident. For example, when an incident is in the New status, you might make the owner field hidden (since a detector shouldn't need to know who will ultimately own it), when it gets to the Open status, you might make the field active, and when it gets to the Assigned status, you might make it active and required. This allows you to tailor the information gathered to the appropriate place in the workflow. To actually make these changes, all you need to do is select the appropriate checkboxes in the list of fields and custom properties and click the corresponding \"Save\" button.","title":"Incidents"},{"location":"Spira-Administration-Guide/Template-Incidents/#template-incidents","text":"In addition to being able to create custom properties and values for incidents (same as for all artifacts in SpiraPlan\u00ae), you can also change the values populated in many of the standard fields used in the incident tracker -- types, statuses, priorities and severities. The process for changing each of these is described below:","title":"Template: Incidents"},{"location":"Spira-Administration-Guide/Template-Incidents/#edit-types","text":"The following screen is displayed when you choose the \"Types\" link from the Incidents section of the administration menu: The screen displays a list of all the defined incident types for the current template. By default the screen will be populated with the standard SpiraPlan\u00ae incident types. To edit an existing incident type, change the name, associated workflow, issue check-box, risk check-box, set a default type and/or change the active flag then click \"Save\". You can't delete an existing incident type, but to prevent it appearing in any drop-down-lists, all you need to do is change its active flag to \"No\" and click \"Save\". To add a new incident type, click the \"Add\" button and a new row will be added to the list which you can now edit. The associated workflow drop-down list allows you to specify which workflow the incident type will follow. This is a very powerful feature since it allows you to configure different workflows for different incident types; i.e. a bug may follow a workflow geared to identification and resolution, whereas a risk may only need a much simpler set of steps and actions. The issue check-boxes allow you to specify if the incident type is an issue, which means it would be eligible for display in the issue section of the product home page. The default radio button allows you to specify which incident type should be the default for newly created incidents. This is the type that a new incident will be set to unless changed by the creator of the incident. Note that you must have at least one active incident type, and you cannot set an inactive type as the default.","title":"Edit Types"},{"location":"Spira-Administration-Guide/Template-Incidents/#edit-statuses","text":"The following screen is displayed when you choose the \"Statuses\" link from the Incidents section of the administration menu: The screen displays a list of all the defined incident statuses for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae incident statuses. To edit an existing incident status, change the name, open check-box, set it as the default status and/or change the active flag then click \"Save\". You can't delete an existing incident status, but to prevent it appearing in any drop-down-lists, all you need to do is change its active flag to \"No\" and click \"Save\". To add a new incident status, click the \"Add\" button and a new row will be added to the list which you can now edit. The open check-box allow you to specify if the incident status should be considered open or not, which means it is would be eligible for display in the various sections of the user's home page and the product home page that list open incidents. The default radio button allows you to specify which incident status should be the default for newly created incidents. This is the status that a new incident will be set to when first created, and acts as the first step in the incident workflow. Note that you must have at least one active incident status, and you cannot set an inactive status as the default.","title":"Edit Statuses"},{"location":"Spira-Administration-Guide/Template-Incidents/#priorities","text":"The following screen is displayed when you choose the \"Priorities\" link from the Incidents section of the administration menu: The screen displays a list of all the defined incident priorities for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae incident priorities. To edit an existing incident priority, change the name, color and/or change the active flag then click \"Save\". Note that you can either enter the hexadecimal RRGGBB code for the color or use the pop-up color picker. You can't delete an existing incident priority, but to prevent it appearing in any drop-down-lists, all you need to do is change its active flag to \"No\" and click \"Save\". To add a new incident priority, click the \"Add\" button and a new row will be added to the list which you can now edit.","title":"Priorities"},{"location":"Spira-Administration-Guide/Template-Incidents/#severities","text":"The following screen is displayed when you choose the \"Severities\" link from the Incidents section of the administration menu: The screen displays a list of all the defined incident severities for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae incident severities. To edit an existing incident severity, change the name, color and/or change the active flag then click \"Save\". Note that you can either enter the hexadecimal RRGGBB code for the color or use the pop-up color picker. You can't delete an existing incident severity, but to prevent it appearing in any drop-down-lists, all you need to do is change its active flag to \"No\" and click \"Save\". To add a new incident severity, click the \"Add\" button and a new row will be added to the list which you can now edit.","title":"Severities"},{"location":"Spira-Administration-Guide/Template-Incidents/#incident-workflows","text":"Clicking on the \"Workflows\" link in the Administration menu brings up the list of defined incident workflows for the current template. A workflow is a predefined sequence of incident statuses linked together by \"workflow transitions\" to enable a newly created incident to be reviewed, prioritized, assigned, resolved and closed, as well as to handle exception cases such as the case of a duplicate or non-reproducible incident. The workflow list screen for a sample template is illustrated below: To modify the name, default status, notify and/or active flags, change the values in the appropriate text-box, radio-button, check-box or drop-down list and click the \"Save\" button. To add a new workflow, click the \"Add\" button and a new workflow will be created with the standard SpiraPlan\u00ae steps and transitions. You can have as many workflows as you like in a template, but only one can be marked as the default. Each incident type is assigned to a workflow; this allows you to have different incident types follow different paths from creation of closure. However when a new incident type is created, it will be initially associated with the template's default workflow. The steps and transitions that make up the default workflow are illustrated in the diagram below: The notify flag is used to tell SpiraPlan\u00ae whether that particular workflow should have email notifications turned on or off. You define what transitions and which recipients should receive the emails in the workflow transition editor (see below), but you can globally turn on/off notifications here as well. This is useful if you find that the notifications are becoming an annoyance, or if the email server is unavailable for a period of time. Note: You can only assign an active workflow to an incident type, and similarly you cannot make a workflow inactive that is currently linked to an incident type. This is important as all incident types need to be linked to an active workflow at all times.","title":"Incident Workflows"},{"location":"Spira-Administration-Guide/Template-Incidents/#edit-workflow-details","text":"Clicking on the \"Steps\" button of a workflow brings up the following screen that lists all the workflow steps and workflow transitions that comprise the workflow: This page lists in the left-most column all the various incident statuses defined for the template. The next column lists all the possible transitions that can occur from that status . In addition, with each transition is listed the name of the resulting destination status that the transition leads to. E.g. from the assigned status, depending on your role (see later) you can move the incident to either duplicate, resolves or not-reproducible depending on which transition the user takes. Clicking on the name of a step or transition takes you to the appropriate details page (see below) where you can set the properties of the step or transition respectively. To delete an existing transition, click the \"x\" button after the transition name, and to add a new transition, click the \"Add Transition\" button in the Operations column.","title":"Edit Workflow Details"},{"location":"Spira-Administration-Guide/Template-Incidents/#edit-workflow-transition","text":"When you click on the transition name link from the previous screen, you are taken to the workflow transition details screen: The top part of the screen is the \"workflow browser\" which illustrates how the transition relates to the workflow as a whole. It displays the current transition in the middle, with the originating and destination steps listed to either side. Clicking on either incident status name will take you to the appropriate workflow step details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This part of the screen lets you change the name of the transition and specify the subject line of any email notifications sent as part of this transition. To view the list of special tokens that can be used in the email subject, click on the \"Display Email Subject Special Tokens\" hyperlink: If a digital signature from the user is required to authorize and record the transition, set the toggle to yes for \"Require Electronic Signature\". Each transition has a series of conditions which need to be satisfied for a user to actually execute the transition (i.e. move the incident from the originating status to the destination status): Each transition also has a set of notification rules that allow you to specify who should get an email notification if the transition is executed. Both the conditions and notifications allow you to set three types of user role: The detector of the incident can be allowed to execute the transition, and/or be notified when the transition occurs. For example, when an incident is marked as Resolved, the detector should be the only one who's allowed to move it to Closed. Similarly when an incident is moved from Assigned to Resolved, the detector should probably be notified so that he knows to log in and verify that it has been resolved satisfactorily. The owner of the incident can be allowed to execute the transition, and/or be notified when the transition occurs. For example, when an incident is marked as Assigned, the assigned owner should be the only one who's allowed to move it to Resolved. Similarly when an incident is moved from Open to Assigned, the owner should probably be notified so that he knows to log in and begin resolving the incident. A user with a specified role can be allowed to execute the transition, and/or be notified when the transition occurs regardless of whether they are the detector or owner. For example a user with role \"Manager\" might want the power to close all incidents regardless of ownership status, and might also want to be notified when any incident is marked as Not-Reproducible. You can set any of these conditions by changing the drop-down list and/or check-boxes and clicking the appropriate \"Save\" button.","title":"Edit Workflow Transition"},{"location":"Spira-Administration-Guide/Template-Incidents/#edit-workflow-step","text":"When you click on the incident status name link from either of the previous screens, you are taken to the workflow step details screen: The top part of the screen is the \"workflow browser\" which illustrates how the step relates to the workflow as a whole. It displays the current incident status in the middle, with the possible originating and destination transitions listed to either side. Clicking on either workflow transition name will take you to the appropriate workflow transition details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This page allows you to define the behavior of the various incident fields (i.e. those that are a standard part of SpiraPlan\u00ae such as Priority): This page also allows you to define the behavior of the various incident custom properties for this particular step in the workflow: You can set each of the fields/custom properties as being: Hidden -- The field / custom property will not be displayed when the incident is in this status Disabled -- The field / custom property will be displayed, but will be greyed-out and read-only Required -- The field / custom property will be required when the incident is in this status Note that you cannot set a field/property as being required and either disabled or hidden since this would prevent a user from ever updating the incident. For example, when an incident is in the New status, you might make the owner field hidden (since a detector shouldn't need to know who will ultimately own it), when it gets to the Open status, you might make the field active, and when it gets to the Assigned status, you might make it active and required. This allows you to tailor the information gathered to the appropriate place in the workflow. To actually make these changes, all you need to do is select the appropriate checkboxes in the list of fields and custom properties and click the corresponding \"Save\" button.","title":"Edit Workflow Step"},{"location":"Spira-Administration-Guide/Template-Notifications/","text":"Template: Notifications Email Configuration discusses how to configure emails across the entire system. However, notification events can be configured in the Notifications section of the template administration. Notification Templates Notification templates are used by notification events, and are defined for each artifact type in the template. To edit a template, click the Edit button. To send a test email notification to yourself using the current template, click the Test button. Clicking the Edit button will take you to a page similar to the following. Depending on the artifact type you selected, the list of available fields will vary. On this screen you are presented with the same rich text editor available elsewhere in the application. Displayed in it is the current template (with template tags showing) for the artifact. Template tags start with a $ (dollar sign) and then a string name enclosed in {} parentheses. When email notifications are sent, tokens will be replaced with specific information from the artifact that the notification is being sent for. Invalid tokens will be stripped from the template text. Clicking the link \"(Display Email Template Field Tokens\" to see a list of available tokens to insert into the textbox for easy selecting and editing. If HTML notifications are disabled, the template will be converted to plain text before sending. When finished, click the update button to save your new template. The new template will take effect immediately. Notification Events The Notification Events section is where template administrators can set up when and to whom notifications are sent out to users of the system. Clicking on the Notification Events link will present you with a list of all events defined for the current template: Note: These events can handle all changes to any of the artifacts except changes handled by Status changes to Incidents. Incident status changes are handled through the Workflow configuration. When clicking on the Edit or Add buttons, you will be presented with the event details screen: The top section defines general configuration items for the event: Event Name: used to name the event, only used for administrative purposes. Artifact Type: The artifact type this event is attached to. Once an event is created, the artifact type cannot be changed. On Creation? If set to yes, this event will fire when an artifact is created, as well as when any configured fields are changed. Active? If set to yes, this event is active and will send notifications when configured fields are modified. Subject Line: The subject line of the notification email. The Artifact Fields will let you configure which fields will cause this notification to send an email notification: Selected fields are treated in an OR-based query, so that if you have two or more fields checked for an event, the event will send a notification if either of the two fields are changed. Depending on the artifact type configured above, the available fields will vary. The last section is the configuration of whom to send the notifications to: If a user belongs to more than one group or they have manually signed up to receive notifications to any changes in the artifact, they will only receive one notification for the artifact change.","title":"Notifications"},{"location":"Spira-Administration-Guide/Template-Notifications/#template-notifications","text":"Email Configuration discusses how to configure emails across the entire system. However, notification events can be configured in the Notifications section of the template administration.","title":"Template: Notifications"},{"location":"Spira-Administration-Guide/Template-Notifications/#notification-templates","text":"Notification templates are used by notification events, and are defined for each artifact type in the template. To edit a template, click the Edit button. To send a test email notification to yourself using the current template, click the Test button. Clicking the Edit button will take you to a page similar to the following. Depending on the artifact type you selected, the list of available fields will vary. On this screen you are presented with the same rich text editor available elsewhere in the application. Displayed in it is the current template (with template tags showing) for the artifact. Template tags start with a $ (dollar sign) and then a string name enclosed in {} parentheses. When email notifications are sent, tokens will be replaced with specific information from the artifact that the notification is being sent for. Invalid tokens will be stripped from the template text. Clicking the link \"(Display Email Template Field Tokens\" to see a list of available tokens to insert into the textbox for easy selecting and editing. If HTML notifications are disabled, the template will be converted to plain text before sending. When finished, click the update button to save your new template. The new template will take effect immediately.","title":"Notification Templates"},{"location":"Spira-Administration-Guide/Template-Notifications/#notification-events","text":"The Notification Events section is where template administrators can set up when and to whom notifications are sent out to users of the system. Clicking on the Notification Events link will present you with a list of all events defined for the current template: Note: These events can handle all changes to any of the artifacts except changes handled by Status changes to Incidents. Incident status changes are handled through the Workflow configuration. When clicking on the Edit or Add buttons, you will be presented with the event details screen: The top section defines general configuration items for the event: Event Name: used to name the event, only used for administrative purposes. Artifact Type: The artifact type this event is attached to. Once an event is created, the artifact type cannot be changed. On Creation? If set to yes, this event will fire when an artifact is created, as well as when any configured fields are changed. Active? If set to yes, this event is active and will send notifications when configured fields are modified. Subject Line: The subject line of the notification email. The Artifact Fields will let you configure which fields will cause this notification to send an email notification: Selected fields are treated in an OR-based query, so that if you have two or more fields checked for an event, the event will send a notification if either of the two fields are changed. Depending on the artifact type configured above, the available fields will vary. The last section is the configuration of whom to send the notifications to: If a user belongs to more than one group or they have manually signed up to receive notifications to any changes in the artifact, they will only receive one notification for the artifact change.","title":"Notification Events"},{"location":"Spira-Administration-Guide/Template-Releases/","text":"Template: Releases Release Workflows Clicking on the \"Release Workflows\" link under the Planning heading, brings up the list of defined release workflows for the current template. A workflow is a predefined sequence of release statuses linked together by \"workflow transitions\" to enable a newly created release to be reviewed, prioritized, assigned, developed and tested, as well as to handle exception cases such as the case of a cancelled or deferred release. The workflow list screen for the sample template is illustrated below: The screen displays a list of all the standard release types in the system. The associated workflow drop-down list allows you to specify which workflow the release type will follow. This is a very powerful feature since it allows you to configure different workflows for different release types; i.e. a Major release may follow a different process than an iteration. You can have as many workflows as you like in a template, but only one can be marked as the default. Each release type must be assigned to a workflow. To modify the name, default flag, and/or active flag of an existing workflow, change the values in the appropriate text-box, radio-button, or drop-down list and click the \"Save\" button. To add a new workflow, click the 'Add Workflow' link and a new workflow will be created with the standard SpiraPlan\u00ae steps and transitions. Note: You can only assign an active workflow to a release type, and similarly you cannot make a workflow inactive that is currently linked to a release type. This is important as all release types need to be linked to an active workflow at all times. Edit Workflow Details Clicking on the 'Steps' hyperlink of a workflow brings up the following screen that lists all the workflow steps and workflow transitions that comprise the workflow: This page lists in the left-most column all the various release statuses defined in the system. The next column lists all the possible transitions that can occur from that status . In addition, with each transition is listed the name of the resulting destination status that the transition leads to. E.g. from the Planned status, depending on your role (see later) the user can move the release to either Cancelled, Deferred, or In Progress, depending on which transition the user takes. Clicking on the name of a step or transition takes you to the appropriate details page (see below) where you can set the properties of the step or transition respectively. To delete an existing transition, click the 'x button after the transition name, and to add a new transition, click the 'Add Transition' button in the Operations column. Edit Workflow Transition When you click on the transition name link from the previous screen, you are taken to the workflow transition details screen: The top part of the screen is the \"workflow browser\" which illustrates how the transition relates to the workflow as a whole. It displays the current transition in the middle, with the originating and destination steps listed to either side. Clicking on either task status name will take you to the appropriate workflow step details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This part of the screen lets you change the name of the transition. If a digital signature from the user is required to authorize and record the transition, set the toggle to yes for \"Require Electronic Signature\". In addition, each transition has a series of conditions which need to be satisfied for a user to actually execute the transition (i.e. move the release from the originating status to the destination status): The conditions section allows you to set three types of user role: The author of the release can be allowed to execute the transition. For example, when a release is marked as Completed, the author might be allowed to move it to In Progress if there is still work remaining. The owner of the release can be allowed to execute the transition. For example, when a release is marked as In Progress, the assigned owner should be the only one who's allowed to move it to Competed. A user with a specified role can be allowed to execute the transition regardless of whether they are the author or owner. For example a user with role \"Manager\" might want the power to defer all releases regardless of ownership status. You can set any of these conditions by changing the drop-down list and/or check-boxes and clicking the appropriate \"Save\" button. Edit Workflow Step When you click on the release status name link from either of the previous screens, you are taken to the workflow step details screen: The top part of the screen is the \"workflow browser\" which illustrates how the step relates to the workflow as a whole. It displays the current release status in the middle, with the possible originating and destination transitions listed to either side. Clicking on either workflow transition name will take you to the appropriate workflow transition details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This page allows you to define the behavior of the various release fields (i.e. those that are a standard part of SpiraPlan\u00ae such as Priority): This page also allows you to define the behavior of the various release custom properties for this particular step in the workflow: You can set each of the fields/custom properties as being: Hidden -- The field / custom property will not be displayed when the release is in this status Disabled -- The field / custom property will be displayed, but will be greyed-out and read-only Required -- The field / custom property will be required when the release is in this status Note that you cannot set a field/property as being required and either disabled or hidden since this would prevent a user from ever updating the release. For example, when a release is in the Planned status, you might make the owner field hidden (since the author shouldn't need to know who will ultimately own it), when it gets to the In Progress status, you might make the field enabled and required, and when it gets to the Completed status, you might make it disabled. This allows you to tailor the information gathered to the appropriate place in the workflow. To actually make these changes, all you need to do is select the appropriate checkboxes in the list of fields and custom properties and click the corresponding \"Save\" button.","title":"Releases"},{"location":"Spira-Administration-Guide/Template-Releases/#template-releases","text":"","title":"Template: Releases"},{"location":"Spira-Administration-Guide/Template-Releases/#release-workflows","text":"Clicking on the \"Release Workflows\" link under the Planning heading, brings up the list of defined release workflows for the current template. A workflow is a predefined sequence of release statuses linked together by \"workflow transitions\" to enable a newly created release to be reviewed, prioritized, assigned, developed and tested, as well as to handle exception cases such as the case of a cancelled or deferred release. The workflow list screen for the sample template is illustrated below: The screen displays a list of all the standard release types in the system. The associated workflow drop-down list allows you to specify which workflow the release type will follow. This is a very powerful feature since it allows you to configure different workflows for different release types; i.e. a Major release may follow a different process than an iteration. You can have as many workflows as you like in a template, but only one can be marked as the default. Each release type must be assigned to a workflow. To modify the name, default flag, and/or active flag of an existing workflow, change the values in the appropriate text-box, radio-button, or drop-down list and click the \"Save\" button. To add a new workflow, click the 'Add Workflow' link and a new workflow will be created with the standard SpiraPlan\u00ae steps and transitions. Note: You can only assign an active workflow to a release type, and similarly you cannot make a workflow inactive that is currently linked to a release type. This is important as all release types need to be linked to an active workflow at all times.","title":"Release Workflows"},{"location":"Spira-Administration-Guide/Template-Releases/#edit-workflow-details","text":"Clicking on the 'Steps' hyperlink of a workflow brings up the following screen that lists all the workflow steps and workflow transitions that comprise the workflow: This page lists in the left-most column all the various release statuses defined in the system. The next column lists all the possible transitions that can occur from that status . In addition, with each transition is listed the name of the resulting destination status that the transition leads to. E.g. from the Planned status, depending on your role (see later) the user can move the release to either Cancelled, Deferred, or In Progress, depending on which transition the user takes. Clicking on the name of a step or transition takes you to the appropriate details page (see below) where you can set the properties of the step or transition respectively. To delete an existing transition, click the 'x button after the transition name, and to add a new transition, click the 'Add Transition' button in the Operations column.","title":"Edit Workflow Details"},{"location":"Spira-Administration-Guide/Template-Releases/#edit-workflow-transition","text":"When you click on the transition name link from the previous screen, you are taken to the workflow transition details screen: The top part of the screen is the \"workflow browser\" which illustrates how the transition relates to the workflow as a whole. It displays the current transition in the middle, with the originating and destination steps listed to either side. Clicking on either task status name will take you to the appropriate workflow step details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This part of the screen lets you change the name of the transition. If a digital signature from the user is required to authorize and record the transition, set the toggle to yes for \"Require Electronic Signature\". In addition, each transition has a series of conditions which need to be satisfied for a user to actually execute the transition (i.e. move the release from the originating status to the destination status): The conditions section allows you to set three types of user role: The author of the release can be allowed to execute the transition. For example, when a release is marked as Completed, the author might be allowed to move it to In Progress if there is still work remaining. The owner of the release can be allowed to execute the transition. For example, when a release is marked as In Progress, the assigned owner should be the only one who's allowed to move it to Competed. A user with a specified role can be allowed to execute the transition regardless of whether they are the author or owner. For example a user with role \"Manager\" might want the power to defer all releases regardless of ownership status. You can set any of these conditions by changing the drop-down list and/or check-boxes and clicking the appropriate \"Save\" button.","title":"Edit Workflow Transition"},{"location":"Spira-Administration-Guide/Template-Releases/#edit-workflow-step","text":"When you click on the release status name link from either of the previous screens, you are taken to the workflow step details screen: The top part of the screen is the \"workflow browser\" which illustrates how the step relates to the workflow as a whole. It displays the current release status in the middle, with the possible originating and destination transitions listed to either side. Clicking on either workflow transition name will take you to the appropriate workflow transition details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This page allows you to define the behavior of the various release fields (i.e. those that are a standard part of SpiraPlan\u00ae such as Priority): This page also allows you to define the behavior of the various release custom properties for this particular step in the workflow: You can set each of the fields/custom properties as being: Hidden -- The field / custom property will not be displayed when the release is in this status Disabled -- The field / custom property will be displayed, but will be greyed-out and read-only Required -- The field / custom property will be required when the release is in this status Note that you cannot set a field/property as being required and either disabled or hidden since this would prevent a user from ever updating the release. For example, when a release is in the Planned status, you might make the owner field hidden (since the author shouldn't need to know who will ultimately own it), when it gets to the In Progress status, you might make the field enabled and required, and when it gets to the Completed status, you might make it disabled. This allows you to tailor the information gathered to the appropriate place in the workflow. To actually make these changes, all you need to do is select the appropriate checkboxes in the list of fields and custom properties and click the corresponding \"Save\" button.","title":"Edit Workflow Step"},{"location":"Spira-Administration-Guide/Template-Requirements/","text":"Template: Requirements This section contains administrative options that are specific to the requirements functionality in the system. Importance The following screen is displayed when you choose the \"Importance\" link from the Requirements section of the administration menu: The screen displays a list of all the defined requirement importances for the current template. By default the screen will be populated with the standard SpiraPlan\u00ae requirement importances. To edit an existing requirement importance, change the name, color, score (this is used for ranking the different items -- the item with the lowest score will appear at the top of dropdown lists in the application), and/or change the active flag then click \"Save\". Note that you can either enter the hexadecimal RRGGBB code for the color or use the pop-up color picker. You can't delete an existing requirement importance, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new requirement importance, click the \"Add\" button and a new row will be added to the list which you can now edit. Types The following screen is displayed when you choose the \"Types\" link from the Requirements section of the administration menu: The screen displays a list of all the defined requirement types for the current template. By default the screen will be populated with the standard SpiraPlan\u00ae requirement types. To edit an existing requirement type, change the name, associated workflow, issue check-box, risk check-box, set a default type and/or change the active flag then click \"Save\". You can't delete an existing requirement type, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new requirement type, click the \"Add\" button and a new row will be added to the list which you can now edit. The associated workflow drop-down list allows you to specify which workflow the requirement type will follow. This is a very powerful feature since it allows you to configure different workflows for different requirement types; i.e. a User Story may follow a simpler review process than a Feature or Use Case requirement. The Has Steps check-box allows you to specify if the requirement type should be able to contain scenario steps (as is typical with use cases). The default radio button allows you to specify which requirement type should be the default for newly created requirements. This is the type that a new requirement will be set to unless changed by the creator of the requirement. Note that you must have at least one active requirement type, and you cannot set an inactive type as the default. Workflows Clicking on the \"Workflow\" link under the Requirements heading, brings up the list of defined requirement workflows for the current template. A workflow is a predefined sequence of requirement statuses linked together by \"workflow transitions\" to enable a newly created requirement to be reviewed, prioritized, assigned, developed and tested, as well as to handle exception cases such as the case of a rejected or obsolete requirement. The workflow list screen for the sample template is illustrated below: You can have as many workflows as you like in a template, but only one can be marked as the default. Each requirement type must be assigned to a workflow. To modify the name, default flag, and/or active flag of an existing workflow, change the values in the appropriate text-box, radio-button, or drop-down list and click the \"Save\" button. To add a new workflow, click the 'Add Workflow' link and a new workflow will be created with the standard SpiraPlan\u00ae steps and transitions. Note: You cannot make a workflow inactive that is currently linked to a requirement type. This is important as all requirement types need to be linked to an active workflow at all times. Edit Workflow Details Clicking on the 'Steps' button of a workflow brings up the following screen that lists all the workflow steps and workflow transitions that comprise the workflow: This page lists in the left-most column all the various requirement statuses defined in the system. The next column lists all the possible transitions that can occur from that status . In addition, with each transition is listed the name of the resulting destination status that the transition leads to. E.g. from the Requested status, depending on your role (see later) the user can move the requirement to either Accepted or Under Review, depending on which transition the user takes. Clicking on the name of a step or transition takes you to the appropriate details page (see below) where you can set the properties of the step or transition respectively. To delete an existing transition, click the 'x button after the transition name, and to add a new transition, click the 'Add Transition' button in the Operations column. Edit Workflow Transition When you click on the transition name link from the previous screen, you are taken to the workflow transition details screen: The top part of the screen is the \"workflow browser\" which illustrates how the transition relates to the workflow as a whole. It displays the current transition in the middle, with the originating and destination steps listed to either side. Clicking on either requirement status name will take you to the appropriate workflow step details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This part of the screen lets you change the name of the transition. If a digital signature from the user is required to authorize and record the transition, set the toggle to yes for \"Require Electronic Signature\". In addition, each transition has a series of conditions which need to be satisfied for a user to actually execute the transition (i.e. move the requirement from the originating status to the destination status): The conditions section allows you to set three types of user role: The author of the requirement can be allowed to execute the transition. For example, when a requirement is marked as Completed, the author might be allowed to move it to Obsolete when it's no longer applicable. The owner of the requirement can be allowed to execute the transition. For example, when a requirement is marked as Under Review, the assigned owner should be the only one who's allowed to move it to Accepted. A user with a specified role can be allowed to execute the transition regardless of whether they are the author or owner. For example a user with role \"Manager\" might want the power to close all requirements regardless of ownership status. You can set any of these conditions by changing the drop-down list and/or check-boxes and clicking the appropriate \"Save\" button. Edit Workflow Step When you click on the requirement status name link from either of the previous screens, you are taken to the workflow step details screen: The top part of the screen is the \"workflow browser\" which illustrates how the step relates to the workflow as a whole. It displays the current requirement status in the middle, with the possible originating and destination transitions listed to either side. Clicking on either workflow transition name will take you to the appropriate workflow transition details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This page allows you to define the behavior of the various requirement fields (i.e. those that are a standard part of SpiraPlan\u00ae such as Importance): This page also allows you to define the behavior of the various requirement custom properties for this particular step in the workflow: You can set each of the fields/custom properties as being: Hidden -- The field / custom property will not be displayed when the requirement is in this status Disabled -- The field / custom property will be displayed, but will be greyed-out and read-only Required -- The field / custom property will be required when the requirement is in this status Note that you cannot set a field/property as being required and either disabled or hidden since this would prevent a user from ever updating the requirement. For example, when a requirement is in the Requested status, you might make the owner field hidden (since the author shouldn't need to know who will ultimately own it), when it gets to the Accepted status, you might make the field enabled, and when it gets to the In Progress status, you might make it enabled and required. This allows you to tailor the information gathered to the appropriate place in the workflow. To actually make these changes, all you need to do is select the appropriate checkboxes in the list of fields and custom properties and click the corresponding \"Save\" button.","title":"Requirements"},{"location":"Spira-Administration-Guide/Template-Requirements/#template-requirements","text":"This section contains administrative options that are specific to the requirements functionality in the system.","title":"Template: Requirements"},{"location":"Spira-Administration-Guide/Template-Requirements/#importance","text":"The following screen is displayed when you choose the \"Importance\" link from the Requirements section of the administration menu: The screen displays a list of all the defined requirement importances for the current template. By default the screen will be populated with the standard SpiraPlan\u00ae requirement importances. To edit an existing requirement importance, change the name, color, score (this is used for ranking the different items -- the item with the lowest score will appear at the top of dropdown lists in the application), and/or change the active flag then click \"Save\". Note that you can either enter the hexadecimal RRGGBB code for the color or use the pop-up color picker. You can't delete an existing requirement importance, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new requirement importance, click the \"Add\" button and a new row will be added to the list which you can now edit.","title":"Importance"},{"location":"Spira-Administration-Guide/Template-Requirements/#types","text":"The following screen is displayed when you choose the \"Types\" link from the Requirements section of the administration menu: The screen displays a list of all the defined requirement types for the current template. By default the screen will be populated with the standard SpiraPlan\u00ae requirement types. To edit an existing requirement type, change the name, associated workflow, issue check-box, risk check-box, set a default type and/or change the active flag then click \"Save\". You can't delete an existing requirement type, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new requirement type, click the \"Add\" button and a new row will be added to the list which you can now edit. The associated workflow drop-down list allows you to specify which workflow the requirement type will follow. This is a very powerful feature since it allows you to configure different workflows for different requirement types; i.e. a User Story may follow a simpler review process than a Feature or Use Case requirement. The Has Steps check-box allows you to specify if the requirement type should be able to contain scenario steps (as is typical with use cases). The default radio button allows you to specify which requirement type should be the default for newly created requirements. This is the type that a new requirement will be set to unless changed by the creator of the requirement. Note that you must have at least one active requirement type, and you cannot set an inactive type as the default.","title":"Types"},{"location":"Spira-Administration-Guide/Template-Requirements/#workflows","text":"Clicking on the \"Workflow\" link under the Requirements heading, brings up the list of defined requirement workflows for the current template. A workflow is a predefined sequence of requirement statuses linked together by \"workflow transitions\" to enable a newly created requirement to be reviewed, prioritized, assigned, developed and tested, as well as to handle exception cases such as the case of a rejected or obsolete requirement. The workflow list screen for the sample template is illustrated below: You can have as many workflows as you like in a template, but only one can be marked as the default. Each requirement type must be assigned to a workflow. To modify the name, default flag, and/or active flag of an existing workflow, change the values in the appropriate text-box, radio-button, or drop-down list and click the \"Save\" button. To add a new workflow, click the 'Add Workflow' link and a new workflow will be created with the standard SpiraPlan\u00ae steps and transitions. Note: You cannot make a workflow inactive that is currently linked to a requirement type. This is important as all requirement types need to be linked to an active workflow at all times.","title":"Workflows"},{"location":"Spira-Administration-Guide/Template-Requirements/#edit-workflow-details","text":"Clicking on the 'Steps' button of a workflow brings up the following screen that lists all the workflow steps and workflow transitions that comprise the workflow: This page lists in the left-most column all the various requirement statuses defined in the system. The next column lists all the possible transitions that can occur from that status . In addition, with each transition is listed the name of the resulting destination status that the transition leads to. E.g. from the Requested status, depending on your role (see later) the user can move the requirement to either Accepted or Under Review, depending on which transition the user takes. Clicking on the name of a step or transition takes you to the appropriate details page (see below) where you can set the properties of the step or transition respectively. To delete an existing transition, click the 'x button after the transition name, and to add a new transition, click the 'Add Transition' button in the Operations column.","title":"Edit Workflow Details"},{"location":"Spira-Administration-Guide/Template-Requirements/#edit-workflow-transition","text":"When you click on the transition name link from the previous screen, you are taken to the workflow transition details screen: The top part of the screen is the \"workflow browser\" which illustrates how the transition relates to the workflow as a whole. It displays the current transition in the middle, with the originating and destination steps listed to either side. Clicking on either requirement status name will take you to the appropriate workflow step details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This part of the screen lets you change the name of the transition. If a digital signature from the user is required to authorize and record the transition, set the toggle to yes for \"Require Electronic Signature\". In addition, each transition has a series of conditions which need to be satisfied for a user to actually execute the transition (i.e. move the requirement from the originating status to the destination status): The conditions section allows you to set three types of user role: The author of the requirement can be allowed to execute the transition. For example, when a requirement is marked as Completed, the author might be allowed to move it to Obsolete when it's no longer applicable. The owner of the requirement can be allowed to execute the transition. For example, when a requirement is marked as Under Review, the assigned owner should be the only one who's allowed to move it to Accepted. A user with a specified role can be allowed to execute the transition regardless of whether they are the author or owner. For example a user with role \"Manager\" might want the power to close all requirements regardless of ownership status. You can set any of these conditions by changing the drop-down list and/or check-boxes and clicking the appropriate \"Save\" button.","title":"Edit Workflow Transition"},{"location":"Spira-Administration-Guide/Template-Requirements/#edit-workflow-step","text":"When you click on the requirement status name link from either of the previous screens, you are taken to the workflow step details screen: The top part of the screen is the \"workflow browser\" which illustrates how the step relates to the workflow as a whole. It displays the current requirement status in the middle, with the possible originating and destination transitions listed to either side. Clicking on either workflow transition name will take you to the appropriate workflow transition details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This page allows you to define the behavior of the various requirement fields (i.e. those that are a standard part of SpiraPlan\u00ae such as Importance): This page also allows you to define the behavior of the various requirement custom properties for this particular step in the workflow: You can set each of the fields/custom properties as being: Hidden -- The field / custom property will not be displayed when the requirement is in this status Disabled -- The field / custom property will be displayed, but will be greyed-out and read-only Required -- The field / custom property will be required when the requirement is in this status Note that you cannot set a field/property as being required and either disabled or hidden since this would prevent a user from ever updating the requirement. For example, when a requirement is in the Requested status, you might make the owner field hidden (since the author shouldn't need to know who will ultimately own it), when it gets to the Accepted status, you might make the field enabled, and when it gets to the In Progress status, you might make it enabled and required. This allows you to tailor the information gathered to the appropriate place in the workflow. To actually make these changes, all you need to do is select the appropriate checkboxes in the list of fields and custom properties and click the corresponding \"Save\" button.","title":"Edit Workflow Step"},{"location":"Spira-Administration-Guide/Template-Risks/","text":"Template: Risks This section contains administrative options that are specific to the risk functionality in the system. Edit Types The following screen is displayed when you choose the \"Types\" link from the Incidents section of the administration menu: The screen displays a list of all the defined risk types for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae risk types. To edit an existing type, change the name, associated workflow, set a default type and/or change the active flag then click \"Save\". You can't delete an existing risk type, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new type, click the \"Add\" button and a new row will be added to the list which you can now edit. The associated workflow drop-down list allows you to specify which workflow the type will follow. This is a very powerful feature since it allows you to configure different workflows for different risk types. The default radio button allows you to specify which type should be the default for newly created risks. This is the type that a new risk will be set to unless changed by the creator of the risk. Note that you must have at least one active risk type, and you cannot set an inactive type as the default. Edit Statuses The following screen is displayed when you choose the \"Statuses\" link from the Risks section of the administration menu: The screen displays a list of all the defined risk statuses for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae risks statuses. To edit an existing status, change the name, open check-box, set it as the default status and/or change the active flag then click \"Save\". You can't delete an existing risk status, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new risk status, click the \"Add\" button and a new row will be added to the list which you can now edit. The open check-box allow you to specify if the risk status should be considered open or not, which means it is would be eligible for display in the various sections of the user's home page and the product home page that list open risks. The default radio button allows you to specify which risk status should be the default for newly created risks. This is the status that a new risk will be set to when first created, and acts as the first step in the risk workflow. Note that you must have at least one active status, and you cannot set an inactive status as the default. Impact The following screen is displayed when you choose the \"Impact\" link from the Risks section of the administration menu. The impact of a risk specifies how serious it will be if the risk happens. The screen displays a list of all the defined risk impacts for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae risk impacts. To edit an existing impact: change the name, color, score (which is used, together with a risks probability to calculate its exposure), position, or change the active flag then click \"Save\". Note that you can either enter the hexadecimal RRGGBB code for the color or use the pop-up color picker. You can't delete an existing impact, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new impact, click the \"Add\" button and a new row will be added to the list which you can now edit. Probability The following screen is displayed when you choose the \"Probability\" link from the Risks section of the administration menu: The screen displays a list of all the defined risk probabilities for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae risk probabilities. To edit an existing probability: change the name, color, score (which is used, together with a risks impact to calculate its exposure), position, or change the active flag then click \"Save\". Note that you can either enter the hexadecimal RRGGBB code for the color or use the pop-up color picker. You can't delete an existing risk probability, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new risk probability, click the \"Add\" button and a new row will be added to the list which you can now edit. Risk Workflows Clicking on the \"Workflows\" link in the Administration menu brings up the list of defined risk workflows for the current template. A workflow is a predefined sequence of risk statuses linked together by \"workflow transitions\" to enable a newly created risk to be reviewed, prioritized, assigned, resolved and closed. The workflow list screen for a sample template is illustrated below: To modify the name, default status, notify and/or active flags, change the values in the appropriate text-box, radio-button, check-box or drop-down list and click the \"Save\" button. To add a new workflow, click the \"Add\" button and a new workflow will be created with the standard SpiraPlan\u00ae steps and transitions. You can have as many workflows as you like in a template, but only one can be marked as the default. Each risk type is assigned to a workflow; this allows you to have different risk types follow different paths from creation of closure. However, when a new risk type is created, it will be initially associated with the template's default workflow. Note: You can only assign an active workflow to a risk type, and similarly you cannot make a workflow inactive that is currently linked to a risk type. This is important as all risk types need to be linked to an active workflow at all times. Edit Workflow Details Clicking on the \"Steps\" button of a workflow brings up the following screen that lists all the workflow steps and workflow transitions that comprise the workflow: This page lists in the left-most column all the various risk statuses defined for the template. The next column lists all the possible transitions that can occur from that status . In addition, with each transition is listed the name of the resulting destination status that the transition leads to. E.g. from the evaluated status, depending on your role (see elsewhere in this manual) you can move the risk to either rejected, or open depending on which transition the user takes. Clicking on the name of a step or transition takes you to the appropriate details page (see below) where you can set the properties of the step or transition respectively. To delete an existing transition, click the \"x\" button after the transition name, and to add a new transition, click the \"Add Transition\" button in the Operations column. Edit Workflow Transition When you click on the transition name link from the previous screen, you are taken to the workflow transition details screen: The top part of the screen is the \"workflow browser\" which illustrates how the transition relates to the workflow as a whole. It displays the current transition in the middle, with the originating and destination steps listed to either side. Clicking on either risk status name will take you to the appropriate workflow step details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. If a digital signature from the user is required to authorize and record the transition, set the toggle to yes for \"Require Electronic Signature\". Each transition has a series of conditions which need to be satisfied for a user to actually execute the transition (i.e. move the incident from the originating status to the destination status). Edit Workflow Step When you click on the incident status name link from either of the previous screens, you are taken to the workflow step details screen: The top part of the screen is the \"workflow browser\" which illustrates how the step relates to the workflow as a whole. It displays the current risk status in the middle, with the possible originating and destination transitions listed to either side. Clicking on either workflow transition name will take you to the appropriate workflow transition details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This page allows you to define the behavior of the various risk fields (i.e. those that are a standard part of SpiraPlan\u00ae such as probability): This page also allows you to define the behavior of the various risk custom properties for this particular step in the workflow: You can set each of the fields/custom properties as being: Hidden -- The field / custom property will not be displayed when the risk is in this status Disabled -- The field / custom property will be displayed, but will be greyed-out and read-only Required -- The field / custom property will be required when the risk is in this status Note that you cannot set a field/property as being required and either disabled or hidden since this would prevent a user from ever updating the risk. To make any changes, select the appropriate checkboxes in the list of fields and custom properties and click the \"Save\" button.","title":"Risks"},{"location":"Spira-Administration-Guide/Template-Risks/#template-risks","text":"This section contains administrative options that are specific to the risk functionality in the system.","title":"Template: Risks"},{"location":"Spira-Administration-Guide/Template-Risks/#edit-types","text":"The following screen is displayed when you choose the \"Types\" link from the Incidents section of the administration menu: The screen displays a list of all the defined risk types for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae risk types. To edit an existing type, change the name, associated workflow, set a default type and/or change the active flag then click \"Save\". You can't delete an existing risk type, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new type, click the \"Add\" button and a new row will be added to the list which you can now edit. The associated workflow drop-down list allows you to specify which workflow the type will follow. This is a very powerful feature since it allows you to configure different workflows for different risk types. The default radio button allows you to specify which type should be the default for newly created risks. This is the type that a new risk will be set to unless changed by the creator of the risk. Note that you must have at least one active risk type, and you cannot set an inactive type as the default.","title":"Edit Types"},{"location":"Spira-Administration-Guide/Template-Risks/#edit-statuses","text":"The following screen is displayed when you choose the \"Statuses\" link from the Risks section of the administration menu: The screen displays a list of all the defined risk statuses for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae risks statuses. To edit an existing status, change the name, open check-box, set it as the default status and/or change the active flag then click \"Save\". You can't delete an existing risk status, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new risk status, click the \"Add\" button and a new row will be added to the list which you can now edit. The open check-box allow you to specify if the risk status should be considered open or not, which means it is would be eligible for display in the various sections of the user's home page and the product home page that list open risks. The default radio button allows you to specify which risk status should be the default for newly created risks. This is the status that a new risk will be set to when first created, and acts as the first step in the risk workflow. Note that you must have at least one active status, and you cannot set an inactive status as the default.","title":"Edit Statuses"},{"location":"Spira-Administration-Guide/Template-Risks/#impact","text":"The following screen is displayed when you choose the \"Impact\" link from the Risks section of the administration menu. The impact of a risk specifies how serious it will be if the risk happens. The screen displays a list of all the defined risk impacts for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae risk impacts. To edit an existing impact: change the name, color, score (which is used, together with a risks probability to calculate its exposure), position, or change the active flag then click \"Save\". Note that you can either enter the hexadecimal RRGGBB code for the color or use the pop-up color picker. You can't delete an existing impact, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new impact, click the \"Add\" button and a new row will be added to the list which you can now edit.","title":"Impact"},{"location":"Spira-Administration-Guide/Template-Risks/#probability","text":"The following screen is displayed when you choose the \"Probability\" link from the Risks section of the administration menu: The screen displays a list of all the defined risk probabilities for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae risk probabilities. To edit an existing probability: change the name, color, score (which is used, together with a risks impact to calculate its exposure), position, or change the active flag then click \"Save\". Note that you can either enter the hexadecimal RRGGBB code for the color or use the pop-up color picker. You can't delete an existing risk probability, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new risk probability, click the \"Add\" button and a new row will be added to the list which you can now edit.","title":"Probability"},{"location":"Spira-Administration-Guide/Template-Risks/#risk-workflows","text":"Clicking on the \"Workflows\" link in the Administration menu brings up the list of defined risk workflows for the current template. A workflow is a predefined sequence of risk statuses linked together by \"workflow transitions\" to enable a newly created risk to be reviewed, prioritized, assigned, resolved and closed. The workflow list screen for a sample template is illustrated below: To modify the name, default status, notify and/or active flags, change the values in the appropriate text-box, radio-button, check-box or drop-down list and click the \"Save\" button. To add a new workflow, click the \"Add\" button and a new workflow will be created with the standard SpiraPlan\u00ae steps and transitions. You can have as many workflows as you like in a template, but only one can be marked as the default. Each risk type is assigned to a workflow; this allows you to have different risk types follow different paths from creation of closure. However, when a new risk type is created, it will be initially associated with the template's default workflow. Note: You can only assign an active workflow to a risk type, and similarly you cannot make a workflow inactive that is currently linked to a risk type. This is important as all risk types need to be linked to an active workflow at all times.","title":"Risk Workflows"},{"location":"Spira-Administration-Guide/Template-Risks/#edit-workflow-details","text":"Clicking on the \"Steps\" button of a workflow brings up the following screen that lists all the workflow steps and workflow transitions that comprise the workflow: This page lists in the left-most column all the various risk statuses defined for the template. The next column lists all the possible transitions that can occur from that status . In addition, with each transition is listed the name of the resulting destination status that the transition leads to. E.g. from the evaluated status, depending on your role (see elsewhere in this manual) you can move the risk to either rejected, or open depending on which transition the user takes. Clicking on the name of a step or transition takes you to the appropriate details page (see below) where you can set the properties of the step or transition respectively. To delete an existing transition, click the \"x\" button after the transition name, and to add a new transition, click the \"Add Transition\" button in the Operations column.","title":"Edit Workflow Details"},{"location":"Spira-Administration-Guide/Template-Risks/#edit-workflow-transition","text":"When you click on the transition name link from the previous screen, you are taken to the workflow transition details screen: The top part of the screen is the \"workflow browser\" which illustrates how the transition relates to the workflow as a whole. It displays the current transition in the middle, with the originating and destination steps listed to either side. Clicking on either risk status name will take you to the appropriate workflow step details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. If a digital signature from the user is required to authorize and record the transition, set the toggle to yes for \"Require Electronic Signature\". Each transition has a series of conditions which need to be satisfied for a user to actually execute the transition (i.e. move the incident from the originating status to the destination status).","title":"Edit Workflow Transition"},{"location":"Spira-Administration-Guide/Template-Risks/#edit-workflow-step","text":"When you click on the incident status name link from either of the previous screens, you are taken to the workflow step details screen: The top part of the screen is the \"workflow browser\" which illustrates how the step relates to the workflow as a whole. It displays the current risk status in the middle, with the possible originating and destination transitions listed to either side. Clicking on either workflow transition name will take you to the appropriate workflow transition details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This page allows you to define the behavior of the various risk fields (i.e. those that are a standard part of SpiraPlan\u00ae such as probability): This page also allows you to define the behavior of the various risk custom properties for this particular step in the workflow: You can set each of the fields/custom properties as being: Hidden -- The field / custom property will not be displayed when the risk is in this status Disabled -- The field / custom property will be displayed, but will be greyed-out and read-only Required -- The field / custom property will be required when the risk is in this status Note that you cannot set a field/property as being required and either disabled or hidden since this would prevent a user from ever updating the risk. To make any changes, select the appropriate checkboxes in the list of fields and custom properties and click the \"Save\" button.","title":"Edit Workflow Step"},{"location":"Spira-Administration-Guide/Template-Tasks/","text":"Template: Tasks This section contains administrative options that are specific to the task functionality in the system. Priority The following screen is displayed when you choose the \"Priority\" link from the Tasks section of the administration menu: The screen displays a list of all the defined task priorities for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae task priorities. To edit an existing task priority, change the name, color, score (this is used for ranking the different items -- the item with the lowest score will appear at the top of dropdown lists in the application), and/or change the active flag then click \"Save\". Note that you can either enter the hexadecimal RRGGBB code for the color or use the pop-up color picker. You can't delete an existing task priority, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new task priority, click the \"Add\" button and a new row will be added to the list which you can now edit. Types The following screen is displayed when you choose the \"Types\" link from the Tasks section of the administration menu: The screen displays a list of all the defined task types for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae task types. To edit an existing task type, change the name, associated workflow, set a default type, and/or change the active flag then click \"Save\". You can't delete an existing task type, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new type, click the \"Add\" button and a new row will be added to the list which you can now edit. The associated workflow drop-down list allows you to specify which workflow the type will follow. This is a very powerful feature since it allows you to configure different workflows for different types. The default radio button allows you to specify which type should be the default for newly created tasks. This is the type that a new task will be set to unless changed by the creator of the task. Note that you must have at least one active type, and you cannot set an inactive type as the default. Task Workflows Clicking on the \"Task Workflows\" link under the Planning heading, brings up the list of defined task workflows for the current template. A workflow is a predefined sequence of task statuses linked together by \"workflow transitions\" to enable a newly created task to be reviewed, prioritized, assigned, developed and tested, as well as to handle exception cases such as the case of a blocked or deferred task. The workflow list screen for the sample template is illustrated below: You can have as many workflows as you like in a template, but only one can be marked as the default. Each task type must be assigned to a workflow. To modify the name, default flag, and/or active flag of an existing workflow, change the values in the appropriate text-box, radio-button, or drop-down list and click the \"Save\" button. To add a new workflow, click the 'Add Workflow' link and a new workflow will be created with the standard SpiraPlan\u00ae steps and transitions. Note: You can only assign an active workflow to a task type, and similarly you cannot make a workflow inactive that is currently linked to a task type. This is important as all task types need to be linked to an active workflow at all times. Edit Workflow Details Clicking on the 'Steps' hyperlink of a workflow brings up the following screen that lists all the workflow steps and workflow transitions that comprise the workflow: This page lists in the left-most column all the various task statuses defined in the system. The next column lists all the possible transitions that can occur from that status . In addition, with each transition is listed the name of the resulting destination status that the transition leads to. E.g. from the Not Started status, depending on your role (see later) the user can move the task to either Deferred or In Progress, depending on which transition the user takes. Clicking on the name of a step or transition takes you to the appropriate details page (see below) where you can set the properties of the step or transition respectively. To delete an existing transition, click the 'x button after the transition name, and to add a new transition, click the 'Add Transition' button in the Operations column. Edit Workflow Transition When you click on the transition name link from the previous screen, you are taken to the workflow transition details screen: The top part of the screen is the \"workflow browser\" which illustrates how the transition relates to the workflow as a whole. It displays the current transition in the middle, with the originating and destination steps listed to either side. Clicking on either task status name will take you to the appropriate workflow step details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This part of the screen lets you change the name of the transition. If a digital signature from the user is required to authorize and record the transition, set the toggle to yes for \"Require Electronic Signature\". In addition, each transition has a series of conditions which need to be satisfied for a user to actually execute the transition (i.e. move the task from the originating status to the destination status): The conditions section allows you to set three types of user role: The author of the task can be allowed to execute the transition. For example, when a task is marked as Completed, the author might be allowed to move it to In Progress if there is still work remaining. The owner of the task can be allowed to execute the transition. For example, when a task is marked as In Progress, the assigned owner should be the only one who's allowed to move it to Competed. A user with a specified role can be allowed to execute the transition regardless of whether they are the author or owner. For example a user with role \"Manager\" might want the power to defer all tasks regardless of ownership status. You can set any of these conditions by changing the drop-down list and/or check-boxes and clicking the appropriate \"Save\" button. Edit Workflow Step When you click on the task status name link from either of the previous screens, you are taken to the workflow step details screen: The top part of the screen is the \"workflow browser\" which illustrates how the step relates to the workflow as a whole. It displays the current task status in the middle, with the possible originating and destination transitions listed to either side. Clicking on either workflow transition name will take you to the appropriate workflow transition details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This page allows you to define the behavior of the various task fields (i.e. those that are a standard part of SpiraPlan\u00ae such as Priority): This page also allows you to define the behavior of the various task custom properties for this particular step in the workflow: You can set each of the fields/custom properties as being: Hidden -- The field / custom property will not be displayed when the task is in this status Disabled -- The field / custom property will be displayed, but will be greyed-out and read-only Required -- The field / custom property will be required when the task is in this status Note that you cannot set a field/property as being required and either disabled or hidden since this would prevent a user from ever updating the task. For example, when a task is in the Not Started status, you might make the owner field hidden (since the author shouldn't need to know who will ultimately own it), when it gets to the In Progress status, you might make the field enabled and required, and when it gets to the Completed status, you might make it disabled. This allows you to tailor the information gathered to the appropriate place in the workflow. To actually make these changes, all you need to do is select the appropriate checkboxes in the list of fields and custom properties and click the corresponding \"Save\" button.","title":"Tasks"},{"location":"Spira-Administration-Guide/Template-Tasks/#template-tasks","text":"This section contains administrative options that are specific to the task functionality in the system.","title":"Template: Tasks"},{"location":"Spira-Administration-Guide/Template-Tasks/#priority","text":"The following screen is displayed when you choose the \"Priority\" link from the Tasks section of the administration menu: The screen displays a list of all the defined task priorities for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae task priorities. To edit an existing task priority, change the name, color, score (this is used for ranking the different items -- the item with the lowest score will appear at the top of dropdown lists in the application), and/or change the active flag then click \"Save\". Note that you can either enter the hexadecimal RRGGBB code for the color or use the pop-up color picker. You can't delete an existing task priority, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new task priority, click the \"Add\" button and a new row will be added to the list which you can now edit.","title":"Priority"},{"location":"Spira-Administration-Guide/Template-Tasks/#types","text":"The following screen is displayed when you choose the \"Types\" link from the Tasks section of the administration menu: The screen displays a list of all the defined task types for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae task types. To edit an existing task type, change the name, associated workflow, set a default type, and/or change the active flag then click \"Save\". You can't delete an existing task type, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new type, click the \"Add\" button and a new row will be added to the list which you can now edit. The associated workflow drop-down list allows you to specify which workflow the type will follow. This is a very powerful feature since it allows you to configure different workflows for different types. The default radio button allows you to specify which type should be the default for newly created tasks. This is the type that a new task will be set to unless changed by the creator of the task. Note that you must have at least one active type, and you cannot set an inactive type as the default.","title":"Types"},{"location":"Spira-Administration-Guide/Template-Tasks/#task-workflows","text":"Clicking on the \"Task Workflows\" link under the Planning heading, brings up the list of defined task workflows for the current template. A workflow is a predefined sequence of task statuses linked together by \"workflow transitions\" to enable a newly created task to be reviewed, prioritized, assigned, developed and tested, as well as to handle exception cases such as the case of a blocked or deferred task. The workflow list screen for the sample template is illustrated below: You can have as many workflows as you like in a template, but only one can be marked as the default. Each task type must be assigned to a workflow. To modify the name, default flag, and/or active flag of an existing workflow, change the values in the appropriate text-box, radio-button, or drop-down list and click the \"Save\" button. To add a new workflow, click the 'Add Workflow' link and a new workflow will be created with the standard SpiraPlan\u00ae steps and transitions. Note: You can only assign an active workflow to a task type, and similarly you cannot make a workflow inactive that is currently linked to a task type. This is important as all task types need to be linked to an active workflow at all times.","title":"Task Workflows"},{"location":"Spira-Administration-Guide/Template-Tasks/#edit-workflow-details","text":"Clicking on the 'Steps' hyperlink of a workflow brings up the following screen that lists all the workflow steps and workflow transitions that comprise the workflow: This page lists in the left-most column all the various task statuses defined in the system. The next column lists all the possible transitions that can occur from that status . In addition, with each transition is listed the name of the resulting destination status that the transition leads to. E.g. from the Not Started status, depending on your role (see later) the user can move the task to either Deferred or In Progress, depending on which transition the user takes. Clicking on the name of a step or transition takes you to the appropriate details page (see below) where you can set the properties of the step or transition respectively. To delete an existing transition, click the 'x button after the transition name, and to add a new transition, click the 'Add Transition' button in the Operations column.","title":"Edit Workflow Details"},{"location":"Spira-Administration-Guide/Template-Tasks/#edit-workflow-transition","text":"When you click on the transition name link from the previous screen, you are taken to the workflow transition details screen: The top part of the screen is the \"workflow browser\" which illustrates how the transition relates to the workflow as a whole. It displays the current transition in the middle, with the originating and destination steps listed to either side. Clicking on either task status name will take you to the appropriate workflow step details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This part of the screen lets you change the name of the transition. If a digital signature from the user is required to authorize and record the transition, set the toggle to yes for \"Require Electronic Signature\". In addition, each transition has a series of conditions which need to be satisfied for a user to actually execute the transition (i.e. move the task from the originating status to the destination status): The conditions section allows you to set three types of user role: The author of the task can be allowed to execute the transition. For example, when a task is marked as Completed, the author might be allowed to move it to In Progress if there is still work remaining. The owner of the task can be allowed to execute the transition. For example, when a task is marked as In Progress, the assigned owner should be the only one who's allowed to move it to Competed. A user with a specified role can be allowed to execute the transition regardless of whether they are the author or owner. For example a user with role \"Manager\" might want the power to defer all tasks regardless of ownership status. You can set any of these conditions by changing the drop-down list and/or check-boxes and clicking the appropriate \"Save\" button.","title":"Edit Workflow Transition"},{"location":"Spira-Administration-Guide/Template-Tasks/#edit-workflow-step","text":"When you click on the task status name link from either of the previous screens, you are taken to the workflow step details screen: The top part of the screen is the \"workflow browser\" which illustrates how the step relates to the workflow as a whole. It displays the current task status in the middle, with the possible originating and destination transitions listed to either side. Clicking on either workflow transition name will take you to the appropriate workflow transition details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This page allows you to define the behavior of the various task fields (i.e. those that are a standard part of SpiraPlan\u00ae such as Priority): This page also allows you to define the behavior of the various task custom properties for this particular step in the workflow: You can set each of the fields/custom properties as being: Hidden -- The field / custom property will not be displayed when the task is in this status Disabled -- The field / custom property will be displayed, but will be greyed-out and read-only Required -- The field / custom property will be required when the task is in this status Note that you cannot set a field/property as being required and either disabled or hidden since this would prevent a user from ever updating the task. For example, when a task is in the Not Started status, you might make the owner field hidden (since the author shouldn't need to know who will ultimately own it), when it gets to the In Progress status, you might make the field enabled and required, and when it gets to the Completed status, you might make it disabled. This allows you to tailor the information gathered to the appropriate place in the workflow. To actually make these changes, all you need to do is select the appropriate checkboxes in the list of fields and custom properties and click the corresponding \"Save\" button.","title":"Edit Workflow Step"},{"location":"Spira-Administration-Guide/Template-Test-Cases/","text":"Template: Test Cases This section contains administrative options that are specific to the testing functionality in the system. Priority The following screen is displayed when you choose the \"Priority\" link from the Test Cases section of the administration menu: The screen displays a list of all the defined test case priorities for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae test case priorities. To edit an existing test case priority, change the name, color, score (this is used for ranking the different items -- the item with the lowest score will appear at the top of dropdown lists in the application), and/or change the active flag then click \"Save\". Note that you can either enter the hexadecimal RRGGBB code for the color or use the pop-up color picker. You can't delete an existing test case priority, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new test case priority, click the \"Add\" button and a new row will be added to the list which you can now edit. Types The following screen is displayed when you choose the \"Types\" link from the Test Cases section of the administration menu: The screen displays a list of all the defined test case types for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae test case types. To edit an existing test case type, change the name, associated workflow, issue check-box, risk check-box, set a default type and/or change the active flag then click \"Save\". You can't delete an existing test case type, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new test case type, click the \"Add\" button and a new row will be added to the list which you can now edit. The associated workflow drop-down list allows you to specify which workflow the test case type will follow. This is a very powerful feature since it allows you to configure different workflows for different test case types; i.e. a User Story may follow a simpler review process than a Feature or Use Case test case. The Is Exploratory check-box allows you to specify if the test case type should be able to be executed in exploratory mode (which allows more editing of the test case and its steps during execution). Note that this mode is only available to users with a certain permission level and when executing an individual test case. The default radio button allows you to specify which test case type should be the default for newly created test cases. This is the type that a new test case will be set to unless changed by the creator of the test case. Note that you must have at least one active test case type, and you cannot set an inactive type as the default. Test Case Workflows Clicking on the \"Workflows\" link under the Test Cases section, brings up the list of defined test case workflows for the current template. A workflow is a predefined sequence of test cases statuses linked together by \"workflow transitions\" to enable a newly created test case to be reviewed, prioritized, assigned, and tested, as well as to handle exception cases such as the case of a rejected or obsolete test case. The workflow list screen for the sample template is illustrated below: You can have as many workflows as you like in a template, but only one can be marked as the default. Each test case type must be assigned to a workflow. To modify the name, default flag, and/or active flag of an existing workflow, change the values in the appropriate text-box, radio-button, or drop-down list and click the \"Save\" button. To add a new workflow, click the 'Add Workflow' link and a new workflow will be created with the standard SpiraPlan\u00ae steps and transitions. Note: You can only assign an active workflow to a test case type, and similarly you cannot make a workflow inactive that is currently linked to a test case type. This is important as all test case types need to be linked to an active workflow at all times. Edit Workflow Details Clicking on the 'Steps' button of a workflow brings up the following screen that lists all the workflow steps and workflow transitions that comprise the workflow: This page lists in the left-most column all the various test case statuses defined in the system. The next column lists all the possible transitions that can occur from that status . In addition, with each transition is listed the name of the resulting destination status that the transition leads to. E.g. from the Draft status, depending on your role (see elsewhere in this manual) the user can move the test case to either Rejected, or Ready for Review, depending on which transition the user takes. Clicking on the name of a step or transition takes you to the appropriate details page (see below) where you can set the properties of the step or transition respectively. To delete an existing transition, click the 'x button after the transition name, and to add a new transition, click the 'Add Transition' button in the Operations column. Edit Workflow Transition When you click on the transition name link from the previous screen, you are taken to the workflow transition details screen: The top part of the screen is the \"workflow browser\" which illustrates how the transition relates to the workflow as a whole. It displays the current transition in the middle, with the originating and destination steps listed to either side. Clicking on either task status name will take you to the appropriate workflow step details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This part of the screen lets you change the name of the transition. If a digital signature from the user is required to authorize and record the transition, set the toggle to yes for \"Require Electronic Signature\". In addition, each transition has a series of conditions which need to be satisfied for a user to actually execute the transition (i.e. move the test case ease from the originating status to the destination status): The conditions section allows you to set three types of user role: The author of the test case can be allowed to execute the transition. For example, when a test case is marked as Ready for Review, the author might be allowed to move it to Ready to Test. The owner of the test case can be allowed to execute the transition. For example, when a test case is marked as Approved, the assigned owner should be the only one who's allowed to move it to Ready for Test. A user with a specified role can be allowed to execute the transition regardless of whether they are the author or owner. For example a user with role \"Manager\" might want the power to approve all test cases regardless of ownership status. You can set any of these conditions by changing the drop-down list and/or check-boxes and clicking the appropriate \"Save\" button. Edit Workflow Step When you click on the test case status name link from either of the previous screens, you are taken to the workflow step details screen: The top part of the screen is the \"workflow browser\" which illustrates how the step relates to the workflow as a whole. It displays the current test case status in the middle, with the possible originating and destination transitions listed to either side. Clicking on either workflow transition name will take you to the appropriate workflow transition details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This page allows you to define the behavior of the various test case fields (i.e. those that are a standard part of SpiraPlan\u00ae such as Priority): This page also allows you to define the behavior of the various test case custom properties for this particular step in the workflow: You can set each of the fields/custom properties as being: Hidden -- The field / custom property will not be displayed when the test case is in this status Disabled -- The field / custom property will be displayed, but will be greyed-out and read-only Required -- The field / custom property will be required when the test case is in this status Note that you cannot set a field/property as being required and either disabled or hidden since this would prevent a user from ever updating the test case. For example, when a test case is in the Draft status, you might make the owner field hidden (since the author shouldn't need to know who will ultimately own it), when it gets to the Ready for Review status, you might make the field enabled and required, and when it gets to the Approve status, you might make it disabled. This allows you to tailor the information gathered to the appropriate place in the workflow. To actually make these changes, all you need to do is select the appropriate checkboxes in the list of fields and custom properties and click the corresponding \"Save\" button. Note that two test case fields have special meanings: Test Steps? - when this field is marked as Disabled = True, you will not be able to edit the test steps Execution Status - when this field is marked as Disabled = True, you will not be able to execute the test case in this status.","title":"Test Cases"},{"location":"Spira-Administration-Guide/Template-Test-Cases/#template-test-cases","text":"This section contains administrative options that are specific to the testing functionality in the system.","title":"Template: Test Cases"},{"location":"Spira-Administration-Guide/Template-Test-Cases/#priority","text":"The following screen is displayed when you choose the \"Priority\" link from the Test Cases section of the administration menu: The screen displays a list of all the defined test case priorities for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae test case priorities. To edit an existing test case priority, change the name, color, score (this is used for ranking the different items -- the item with the lowest score will appear at the top of dropdown lists in the application), and/or change the active flag then click \"Save\". Note that you can either enter the hexadecimal RRGGBB code for the color or use the pop-up color picker. You can't delete an existing test case priority, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new test case priority, click the \"Add\" button and a new row will be added to the list which you can now edit.","title":"Priority"},{"location":"Spira-Administration-Guide/Template-Test-Cases/#types","text":"The following screen is displayed when you choose the \"Types\" link from the Test Cases section of the administration menu: The screen displays a list of all the defined test case types for the current template. By default, the screen will be populated with the standard SpiraPlan\u00ae test case types. To edit an existing test case type, change the name, associated workflow, issue check-box, risk check-box, set a default type and/or change the active flag then click \"Save\". You can't delete an existing test case type, but to prevent it appearing in any drop-down-lists, change its active flag to \"No\" and click \"Save\". To add a new test case type, click the \"Add\" button and a new row will be added to the list which you can now edit. The associated workflow drop-down list allows you to specify which workflow the test case type will follow. This is a very powerful feature since it allows you to configure different workflows for different test case types; i.e. a User Story may follow a simpler review process than a Feature or Use Case test case. The Is Exploratory check-box allows you to specify if the test case type should be able to be executed in exploratory mode (which allows more editing of the test case and its steps during execution). Note that this mode is only available to users with a certain permission level and when executing an individual test case. The default radio button allows you to specify which test case type should be the default for newly created test cases. This is the type that a new test case will be set to unless changed by the creator of the test case. Note that you must have at least one active test case type, and you cannot set an inactive type as the default.","title":"Types"},{"location":"Spira-Administration-Guide/Template-Test-Cases/#test-case-workflows","text":"Clicking on the \"Workflows\" link under the Test Cases section, brings up the list of defined test case workflows for the current template. A workflow is a predefined sequence of test cases statuses linked together by \"workflow transitions\" to enable a newly created test case to be reviewed, prioritized, assigned, and tested, as well as to handle exception cases such as the case of a rejected or obsolete test case. The workflow list screen for the sample template is illustrated below: You can have as many workflows as you like in a template, but only one can be marked as the default. Each test case type must be assigned to a workflow. To modify the name, default flag, and/or active flag of an existing workflow, change the values in the appropriate text-box, radio-button, or drop-down list and click the \"Save\" button. To add a new workflow, click the 'Add Workflow' link and a new workflow will be created with the standard SpiraPlan\u00ae steps and transitions. Note: You can only assign an active workflow to a test case type, and similarly you cannot make a workflow inactive that is currently linked to a test case type. This is important as all test case types need to be linked to an active workflow at all times.","title":"Test Case Workflows"},{"location":"Spira-Administration-Guide/Template-Test-Cases/#edit-workflow-details","text":"Clicking on the 'Steps' button of a workflow brings up the following screen that lists all the workflow steps and workflow transitions that comprise the workflow: This page lists in the left-most column all the various test case statuses defined in the system. The next column lists all the possible transitions that can occur from that status . In addition, with each transition is listed the name of the resulting destination status that the transition leads to. E.g. from the Draft status, depending on your role (see elsewhere in this manual) the user can move the test case to either Rejected, or Ready for Review, depending on which transition the user takes. Clicking on the name of a step or transition takes you to the appropriate details page (see below) where you can set the properties of the step or transition respectively. To delete an existing transition, click the 'x button after the transition name, and to add a new transition, click the 'Add Transition' button in the Operations column.","title":"Edit Workflow Details"},{"location":"Spira-Administration-Guide/Template-Test-Cases/#edit-workflow-transition","text":"When you click on the transition name link from the previous screen, you are taken to the workflow transition details screen: The top part of the screen is the \"workflow browser\" which illustrates how the transition relates to the workflow as a whole. It displays the current transition in the middle, with the originating and destination steps listed to either side. Clicking on either task status name will take you to the appropriate workflow step details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This part of the screen lets you change the name of the transition. If a digital signature from the user is required to authorize and record the transition, set the toggle to yes for \"Require Electronic Signature\". In addition, each transition has a series of conditions which need to be satisfied for a user to actually execute the transition (i.e. move the test case ease from the originating status to the destination status): The conditions section allows you to set three types of user role: The author of the test case can be allowed to execute the transition. For example, when a test case is marked as Ready for Review, the author might be allowed to move it to Ready to Test. The owner of the test case can be allowed to execute the transition. For example, when a test case is marked as Approved, the assigned owner should be the only one who's allowed to move it to Ready for Test. A user with a specified role can be allowed to execute the transition regardless of whether they are the author or owner. For example a user with role \"Manager\" might want the power to approve all test cases regardless of ownership status. You can set any of these conditions by changing the drop-down list and/or check-boxes and clicking the appropriate \"Save\" button.","title":"Edit Workflow Transition"},{"location":"Spira-Administration-Guide/Template-Test-Cases/#edit-workflow-step","text":"When you click on the test case status name link from either of the previous screens, you are taken to the workflow step details screen: The top part of the screen is the \"workflow browser\" which illustrates how the step relates to the workflow as a whole. It displays the current test case status in the middle, with the possible originating and destination transitions listed to either side. Clicking on either workflow transition name will take you to the appropriate workflow transition details page. This allows you to click through the whole workflow from start to finish without having to return to the workflow details page. This page allows you to define the behavior of the various test case fields (i.e. those that are a standard part of SpiraPlan\u00ae such as Priority): This page also allows you to define the behavior of the various test case custom properties for this particular step in the workflow: You can set each of the fields/custom properties as being: Hidden -- The field / custom property will not be displayed when the test case is in this status Disabled -- The field / custom property will be displayed, but will be greyed-out and read-only Required -- The field / custom property will be required when the test case is in this status Note that you cannot set a field/property as being required and either disabled or hidden since this would prevent a user from ever updating the test case. For example, when a test case is in the Draft status, you might make the owner field hidden (since the author shouldn't need to know who will ultimately own it), when it gets to the Ready for Review status, you might make the field enabled and required, and when it gets to the Approve status, you might make it disabled. This allows you to tailor the information gathered to the appropriate place in the workflow. To actually make these changes, all you need to do is select the appropriate checkboxes in the list of fields and custom properties and click the corresponding \"Save\" button. Note that two test case fields have special meanings: Test Steps? - when this field is marked as Disabled = True, you will not be able to edit the test steps Execution Status - when this field is marked as Disabled = True, you will not be able to execute the test case in this status.","title":"Edit Workflow Step"},{"location":"Spira-User-Manual/Appendix-1-Keyboard-Shortcuts/","text":"Appendix 1: Keyboard Shortcuts SpiraPlan\u00ae includes an array of keyboard shortcuts to speed up navigation and use of the application. All functionality can be performed using a mouse and clicking and therefore using a keyboard shortcut is never required. However, keyboard shortcuts can be an efficient way of performing common tasks. A list of the keyboard shortcuts and what they do is available throughout the application in two ways: Via the user profile action menu By typing \"?\" anywhere in the application (not when the cursor is in a text field). For example, on Windows machines typing shift and the ? key together. There are two main ways of using the shortcuts: either pressing a key or key(s) at the same time (indicated by a single key or \"a + b\"); or pressing a number of keys in succession as with normal typing (indicated by \"a ... b\"). The popup menu explaining the shortcuts is illustrated below (please note that the keyboard shortcuts displayed will vary depending on the current page:","title":"Appendix 1: Keyboard Shortcuts"},{"location":"Spira-User-Manual/Appendix-1-Keyboard-Shortcuts/#appendix-1-keyboard-shortcuts","text":"SpiraPlan\u00ae includes an array of keyboard shortcuts to speed up navigation and use of the application. All functionality can be performed using a mouse and clicking and therefore using a keyboard shortcut is never required. However, keyboard shortcuts can be an efficient way of performing common tasks. A list of the keyboard shortcuts and what they do is available throughout the application in two ways: Via the user profile action menu By typing \"?\" anywhere in the application (not when the cursor is in a text field). For example, on Windows machines typing shift and the ? key together. There are two main ways of using the shortcuts: either pressing a key or key(s) at the same time (indicated by a single key or \"a + b\"); or pressing a number of keys in succession as with normal typing (indicated by \"a ... b\"). The popup menu explaining the shortcuts is illustrated below (please note that the keyboard shortcuts displayed will vary depending on the current page:","title":"Appendix 1: Keyboard Shortcuts"},{"location":"Spira-User-Manual/Application-Wide/","text":"Common Elements Across the Application There are lots of different artifacts in the application (described here ). This means each artifact has its own settings, uses, and logical links to other artifacts, and reporting. Each artifact is different but they also share many similarities. These are explained below. Artifact List Pages When you first visit an artifact section in the app (by clicking on the relevant link in the global navigation bar), you will be taken to the artifact list page. This may look something like below (this image is of the requirements list page) with a grid of data - each row representing a single artifact, and often a sidebar on the left with charts or links: Filtering You can easily filter artifact lists as you can see in the screen-shot below. Here, we are filtering Requirements by the status \"Requested\": To filter the list: make sure the columns you want to filter on are visible (you can hide them later if you want) use the dropdowns or free-text search fields immediately beneath the column names click the Filter icon or press the ENTER key to apply the filters Note that the NAME field is searched using a \"like\" comparison, so that searching for \"database\" would match \"Database is ready\", \"There is a database\", \"The data in the database is correct\", and so on. All other freetext fields need to be exact matches (e.g. dates or numbers). To clear the current filter (whether it is saved or not), either click the Clear Filters button above the table (as you can see in the screenshot above), or go to Filter > Clear Filter from the operations toolbar. Managing Filters You can do a number of things with filters. First let's talk about using the Filters button on the operations toolbar (at the top of the page just below the main navigation bar). To reuse a filter , save it by going to Filter > Save Filter from the operations toolbar. Give your new filter a name and click Save . By default, when you save a filter it will also save your column selection information. Uncheck the box next to \"Save the column selection with the filter\" if you do not want to save this information. When you apply a saved filter with column selection information, the system will show the specific columns visible (including their relative ordering and width) to match those in the filter. This means that you can Show/Hide different columns, filter on them, and save the entire combination as a saved view. When you switch between saved views, the system will show/hide and reposition the columns associated with the view automatically. To share the filter with other members of the product, in the Save Filter dialog, check the box next to \"Share with other members of the product\". To update an existing filter , go to Filter > Save Filter and click on Update Existing . You will see a dropdown of all your saved filters. Pick one, and then click Save . This will update the filter itself, any sort applied, whether it is shared or not, or if it should save the column selection with the filter. To see your saved filters for this artifact, go to Filter > Retrieve Filter . Apply the filter by selecting it. From your \"My Page\" you can see all your save filters across all artifacts and products. You can also delete any filter from there. This is all through the My Saved Searches widget. Quick Filter Side Panel As a shortcut, the left hand panel on artifact list pages includes a set of Quick Filters . Click the name of the filter in this panel to apply it. This panel is NOT visible for list pages that do not have a side panel at all - i.e. Releases, Automation Hosts, Test Configurations, and Resources. The quick filter panel shows a list of all saved filters created by you (with an icon of a person) or shared by others (with an icon of a group of people) for the current artifact. For Requirements, Test Cases, Incidents, Risks, and Tasks the quick filter panel also shows a list of Components for the current product. Picking a component will filter the list to only show those associated with that component. For Requirements and Test Runs the quick filter panel additionally shows a dropdown for Releases . Picking a release will filter the list to only show items that are set for that particular release. Sorting Many artifact lists let you sort by a specific column (either ascending or descending). To change the column being sorted, click on the up or down arrow icon next to the title of that column. Click the other icon will reverse the sort order. The currently sorted column is indicated by the darker arrow. When you save a filter it will always save the selected sort. Show / Hide Columns This drop-down list allows you to change the fields that are displayed in the artifact list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner. Right-Click Context Menu SpiraPlan\u00ae provides a shortcut -- called the context menu - for accessing some of the most commonly used functions, so that you don't need to move your mouse up to the toolbar each time. To access the context menu, right-click on any of the rows in the artifacts list and the following menu will be displayed (the one below is specific to requirements - different artifacts have different options in the context menu ): Artifact Details Pages To view details about a specific artifact, you need to go to the artifact's detail page. Clicking on an item on the artifact list page will open the corresponding detail page. Most of these details pages are made up of three areas; the left pane with artifact list navigation options and information the right pane's header, which displays: the operations toolbar; the editable name of the selected artifact; and the info bar (with a shaded background), which also contains the workflow status transitions the right pane's tabbed interface with rich information related to the artifact Please note that on smaller screen sizes the left navigation pane is not displayed. While the navigation pane has a link to take you back to the artifact list, on mobile devices a 'back' button is shown on the left of the operations toolbar. The navigation pane can be collapsed by clicking on the \"-\" button, or expanded by clicking anywhere on the gray title area. On desktops the user can also control the exact width of the navigation pane by dragging and dropping a red handle that appears on hovering at the rightmost edge of the navigation pane. The navigation pane often shows a list of the peer artifacts to the one selected. This list is useful as a navigation shortcut. Breadcrumbs For folders and hierarchical / tree view artifacts at the top of the details page right hand side you will see the breadcrumb trail, where relevant. If the artifact you are looking at is in a folder, above its name you will see a breadcrumb trail for the full folder path. It will be in the form of Grandparent Folder / Parent Folder . You can click on any part of this breadcrumb / path to navigate to that folder. Artifacts that have folders are: documents, test cases, test sets, and tasks. Requirements and releases exist in a hierarchy with other requirements and releases. For these you will also see a breadcrumb, but instead of showing folders it will show the hierarchy to the container requirements or releases. Clicking on the breadcrumb link will take you to the specific requirement or release clicked on. Tip : when navigating to folders (for all artifacts that support them), the URL in your browser's address bar will change. Each folder has a unique, sharable URL that you can give to someone to display the list of artifacts with the appropriate folder selected. You can also open up multiple folders in different browser tabs and easily toggle between them from the same browser. Workflows A number of artifacts can be controlled using workflows (these include requirements, releases, test cases, documents, risks, incidents, and tasks). Depending on the user's role and whether they are listed as the owner or author of the artifact, displayed in the info bar beneath the artifact name is the current workflow status and an Operations button. When you click this button you will see a set of allowed workflow operations - called transitions (below we are looking at that for a requirement): These workflow transitions specify, given a starting status, which statuses you can move the artifact to. After changing the status of the artifact by clicking on a transition, the form on the overview tab may change. Different fields may be visible, enabled, or required. For example, a requested requirement has its \"Release\" field hidden, but once the requirement is planned, that release field is visible and required. The types of change allowed and the fields that are enabled/visible/required will depend on how your product administrator has set up the workflow. Administrators should refer to the Administration Guide for details on configuring workflows. Once you've made the changes to the appropriate artifact fields, you can either click \" Save \", \" Save and Close \", or \" Save and New \" to commit the changes or \" Refresh \" to discard the changes and reload the artifact from the database. In addition you can print the current artifact by clicking \" Print \", which will display a printable version of the page in a separate window. Please note that if digital signatures have been enabled for a particular workflow operation (and therefore a digital signature is required to confirm the status change. Workflow operations requiring a digital signature are marked with a padlock icon: On attempting to save changes made after clicking a workflow operation that requires a digital signature you will be presented with a popup like the one below: Emailing Using the \" Email \" button on the toolbar, you can send an email containing details of the artifact to an email address or another user on the system: You can specify the subject line for the email, and either a list of email addresses, separated by semicolons, or an existing product user .The content of the email is specified in the System Administration -- Notification Templates. The bottom part of the right pane can be switched between six views: \"Overview\", \"Test Coverage\", \"Tasks\", \"Attachments\", \"History\" and \"Associations\", each of which will be described in more detail below. Followers To be notified of any changes made to the current artifact via email, click the \" Subscribe \" button. If you already subscribed, the button will instead let you \" Unsubscribe \" to stop receiving emails about that particular artifact. Depending on your role, you may also see a dropdown arrow to the right of this button. This will let you subscribe others in the product to this artifact. You can also quickly see who is following an artifact under the \"People\" section in the Overview tab. To view information about the follower, or to unfollow them from the item, hover over their avatar to display a user profile card. Overview The Overview tab is divided into a number of different sections. Each of these can be collapsed or expanded by clicking on the title of that section. This tab displays information about all the main fields of the artifact, as well as descriptions, comments, and other information. Many artifacts have a comments section that allows you to add and view discussions relating to the artifact: Existing comments are displayed in order underneath the textbox in date order (either newest first or oldest first). To add a new comment, enter it into the textbox, and click the \" Add Comment \" button. Attachments The attachment tab displays the list of documents, screenshots or web-links (URLs) that have been \"attached\" to the artifact. The documents can be in any format, though SpiraPlan\u00ae will only display icons for certain known types. The attachment list includes the filename/URL that was originally uploaded together with the file-size (in KB), name of the person who attached it and the date uploaded. In addition, if you position the pointer over the filename and hold it there for a few seconds, a detailed description is displayed as a tooltip. To actually view the document, click on the filename hyperlink and a new web browser window will open. Depending on the type of file, this window will either display the document / web-page or prompt you for a place to save it on your local computer. To remove an existing attachment from an artifact, click the \" Remove \" button and the attachment will be removed from the list. Using the standard filter/sort options you can also sort and filter the list of attachments to make it more manageable. If you are using SpiraPlan or SpiraTeam (but not SpiraTest) you can also choose to include file attachments stored in a linked version control system (e.g. Git, Subversion, CVS, Perforce, etc.) by selecting the \"Include Source Code Documents\" option. To attach a new document to the artifact, you need to first click the \" Add New \" button to display the new attachment dialog box: There are three different types of item that can be attached to an artifact: To upload a file, choose \"File\" as the type and then click the Browse button and select the file from your local computer, optionally enter a detailed description then click the \" Upload \" button. The document will be copied from your computer and attached to the artifact. To attach a web-link (URL) to the artifact, you need to choose \"URL\" as the type and then enter the fully qualified URL (e.g. http://mywebsite.com?Document=1 ), an optional description and then click the \" Upload \" button to attach the web-link. To attach a screenshot to the artifact, you need to choose \"Screenshot\" as the type and then copy the image to your computer's clipboard (e.g. on Windows computers, the PRINT SCREEN button captures the current page and adds to the clipboard). Once the image is in the clipboard, paste it into the editor using CTRL+V (or the equivalent keystroke for your operating system) and the item will appear in the preview window. You can then fill in the other fields and click \" Upload \" to attach the image. Note: If you are using a non-Windows\u00ae computer (e.g. Macintosh\u00ae) that doesn't put file extensions on filenames (e.g. .xls for an Excel sheet) automatically, then you will need to manually add the file extension to the filename before uploading if you want it to be displayed with the correct icon in the attachment list. You can also associate an existing document (that's already stored in SpiraPlan) with the artifact. To do that, click on the \" Add Existing \" button to bring up the add file association dialog box: You can then choose to either associate a document stored in the SpiraPlan Documents repository or (in the case of SpiraPlan/SpiraTeam but not SpiraTest) from the linked source code repository. In either case you first select the appropriate folder, and then pick the document(s) from the file list on the right. In the case of a source code file association you can also add a comment. History This tab displays the list of changes that have been performed on the artifact since its creation. An example change history for a requirement is shown below: The change history displays the date that each change was made, together with the fields that were changed, the old and new values and the person who made the change. This allows a complete audit trail to be maintained of all changes in the system. In addition, if you are logged in as a product administrator you can also click on the \"Admin View\" hyperlink to revert any unwanted changes. Associations You can associate artifacts to one another. For instance, you can associate (or link) one requirement to another requirement, or a test case to a risk. The following artifacts have association tabs: Documents Incidents Requirements Risks Tasks Test cases (in SpiraTeam and SpiraPlan only) From the associations tab you can see and manage the list of artifacts associated with the specific artifact you are looking at. You can even make links between artifacts across different products (if the admin has set this up). The image below shows the association tab for a requirement. The requirements and risks in this list are those a user has decided are relevant to the current artifact. They therefore created a direct link between them. Each association is displayed with the: type of association (related-to, dependency, etc) name of the artifact being linked-to type of artifact (requirement, incident, etc.) name of the person who created the association a comment that describes why the association was made. In the case of an indirect association (eg when a link to an incident is added to a requirement during a test run), the comment will contain the name of the specific artifact that created that indirect association. In addition, when using SpiraPlan or SpiraTeam, the system automatically scans the source code repository for any revisions that are linked to this artifact. You can perform the following actions on the list of associations: Delete -- removes the selected association to the other artifact. This will only delete the association, not the linked artifact itself. Refresh -- updates the list of associations from the server, useful if other people are adding associations to this requirement at the same time. Filter / Apply Filter -- Applies the entries in the filter boxes to the list of associations Clear Filters -- Clears the current filter, so that all associations for the current requirement are shown. Edit -- Clicking the \" Edit \" button to the right of the associations allows you to edit the association type and comment fields inline directly on this screen. To create a new association, click the \" Add \" button to display the add association panel (below is an example from requirements): If you know the ID of the artifact you want to associate, you can enter its ID prefixed by the appropriate token (eg \"RQ\" for requirement): Otherwise choose the Artifact Type (and Product if making a cross-product association) from the dropdowns: You can narrow down your search by entering a keyword: Artifacts that have folders let you choose a folder to narrow your search. When attempting to add an association to a requirement, you can choose a package from the list to narrow down the results: Once you have a list of artifacts, select the checkboxes of the items you want to associate with the current artifact and click the 'Save' button. You can add a comment that explains the rationale for the association and choose the type of association being created: Related-to: this is used to specify that the two artifacts are simply related Depends-on: this is used to specify that the current artifact has a dependency on the one being linked to.","title":"Common Elements Across the Application"},{"location":"Spira-User-Manual/Application-Wide/#common-elements-across-the-application","text":"There are lots of different artifacts in the application (described here ). This means each artifact has its own settings, uses, and logical links to other artifacts, and reporting. Each artifact is different but they also share many similarities. These are explained below.","title":"Common Elements Across the Application"},{"location":"Spira-User-Manual/Application-Wide/#artifact-list-pages","text":"When you first visit an artifact section in the app (by clicking on the relevant link in the global navigation bar), you will be taken to the artifact list page. This may look something like below (this image is of the requirements list page) with a grid of data - each row representing a single artifact, and often a sidebar on the left with charts or links:","title":"Artifact List Pages"},{"location":"Spira-User-Manual/Application-Wide/#filtering","text":"You can easily filter artifact lists as you can see in the screen-shot below. Here, we are filtering Requirements by the status \"Requested\": To filter the list: make sure the columns you want to filter on are visible (you can hide them later if you want) use the dropdowns or free-text search fields immediately beneath the column names click the Filter icon or press the ENTER key to apply the filters Note that the NAME field is searched using a \"like\" comparison, so that searching for \"database\" would match \"Database is ready\", \"There is a database\", \"The data in the database is correct\", and so on. All other freetext fields need to be exact matches (e.g. dates or numbers). To clear the current filter (whether it is saved or not), either click the Clear Filters button above the table (as you can see in the screenshot above), or go to Filter > Clear Filter from the operations toolbar.","title":"Filtering"},{"location":"Spira-User-Manual/Application-Wide/#managing-filters","text":"You can do a number of things with filters. First let's talk about using the Filters button on the operations toolbar (at the top of the page just below the main navigation bar). To reuse a filter , save it by going to Filter > Save Filter from the operations toolbar. Give your new filter a name and click Save . By default, when you save a filter it will also save your column selection information. Uncheck the box next to \"Save the column selection with the filter\" if you do not want to save this information. When you apply a saved filter with column selection information, the system will show the specific columns visible (including their relative ordering and width) to match those in the filter. This means that you can Show/Hide different columns, filter on them, and save the entire combination as a saved view. When you switch between saved views, the system will show/hide and reposition the columns associated with the view automatically. To share the filter with other members of the product, in the Save Filter dialog, check the box next to \"Share with other members of the product\". To update an existing filter , go to Filter > Save Filter and click on Update Existing . You will see a dropdown of all your saved filters. Pick one, and then click Save . This will update the filter itself, any sort applied, whether it is shared or not, or if it should save the column selection with the filter. To see your saved filters for this artifact, go to Filter > Retrieve Filter . Apply the filter by selecting it. From your \"My Page\" you can see all your save filters across all artifacts and products. You can also delete any filter from there. This is all through the My Saved Searches widget.","title":"Managing Filters"},{"location":"Spira-User-Manual/Application-Wide/#quick-filter-side-panel","text":"As a shortcut, the left hand panel on artifact list pages includes a set of Quick Filters . Click the name of the filter in this panel to apply it. This panel is NOT visible for list pages that do not have a side panel at all - i.e. Releases, Automation Hosts, Test Configurations, and Resources. The quick filter panel shows a list of all saved filters created by you (with an icon of a person) or shared by others (with an icon of a group of people) for the current artifact. For Requirements, Test Cases, Incidents, Risks, and Tasks the quick filter panel also shows a list of Components for the current product. Picking a component will filter the list to only show those associated with that component. For Requirements and Test Runs the quick filter panel additionally shows a dropdown for Releases . Picking a release will filter the list to only show items that are set for that particular release.","title":"Quick Filter Side Panel"},{"location":"Spira-User-Manual/Application-Wide/#sorting","text":"Many artifact lists let you sort by a specific column (either ascending or descending). To change the column being sorted, click on the up or down arrow icon next to the title of that column. Click the other icon will reverse the sort order. The currently sorted column is indicated by the darker arrow. When you save a filter it will always save the selected sort.","title":"Sorting"},{"location":"Spira-User-Manual/Application-Wide/#show-hide-columns","text":"This drop-down list allows you to change the fields that are displayed in the artifact list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner.","title":"Show / Hide Columns"},{"location":"Spira-User-Manual/Application-Wide/#right-click-context-menu","text":"SpiraPlan\u00ae provides a shortcut -- called the context menu - for accessing some of the most commonly used functions, so that you don't need to move your mouse up to the toolbar each time. To access the context menu, right-click on any of the rows in the artifacts list and the following menu will be displayed (the one below is specific to requirements - different artifacts have different options in the context menu ):","title":"Right-Click Context Menu"},{"location":"Spira-User-Manual/Application-Wide/#artifact-details-pages","text":"To view details about a specific artifact, you need to go to the artifact's detail page. Clicking on an item on the artifact list page will open the corresponding detail page. Most of these details pages are made up of three areas; the left pane with artifact list navigation options and information the right pane's header, which displays: the operations toolbar; the editable name of the selected artifact; and the info bar (with a shaded background), which also contains the workflow status transitions the right pane's tabbed interface with rich information related to the artifact Please note that on smaller screen sizes the left navigation pane is not displayed. While the navigation pane has a link to take you back to the artifact list, on mobile devices a 'back' button is shown on the left of the operations toolbar. The navigation pane can be collapsed by clicking on the \"-\" button, or expanded by clicking anywhere on the gray title area. On desktops the user can also control the exact width of the navigation pane by dragging and dropping a red handle that appears on hovering at the rightmost edge of the navigation pane. The navigation pane often shows a list of the peer artifacts to the one selected. This list is useful as a navigation shortcut.","title":"Artifact Details Pages"},{"location":"Spira-User-Manual/Application-Wide/#breadcrumbs","text":"For folders and hierarchical / tree view artifacts at the top of the details page right hand side you will see the breadcrumb trail, where relevant. If the artifact you are looking at is in a folder, above its name you will see a breadcrumb trail for the full folder path. It will be in the form of Grandparent Folder / Parent Folder . You can click on any part of this breadcrumb / path to navigate to that folder. Artifacts that have folders are: documents, test cases, test sets, and tasks. Requirements and releases exist in a hierarchy with other requirements and releases. For these you will also see a breadcrumb, but instead of showing folders it will show the hierarchy to the container requirements or releases. Clicking on the breadcrumb link will take you to the specific requirement or release clicked on. Tip : when navigating to folders (for all artifacts that support them), the URL in your browser's address bar will change. Each folder has a unique, sharable URL that you can give to someone to display the list of artifacts with the appropriate folder selected. You can also open up multiple folders in different browser tabs and easily toggle between them from the same browser.","title":"Breadcrumbs"},{"location":"Spira-User-Manual/Application-Wide/#workflows","text":"A number of artifacts can be controlled using workflows (these include requirements, releases, test cases, documents, risks, incidents, and tasks). Depending on the user's role and whether they are listed as the owner or author of the artifact, displayed in the info bar beneath the artifact name is the current workflow status and an Operations button. When you click this button you will see a set of allowed workflow operations - called transitions (below we are looking at that for a requirement): These workflow transitions specify, given a starting status, which statuses you can move the artifact to. After changing the status of the artifact by clicking on a transition, the form on the overview tab may change. Different fields may be visible, enabled, or required. For example, a requested requirement has its \"Release\" field hidden, but once the requirement is planned, that release field is visible and required. The types of change allowed and the fields that are enabled/visible/required will depend on how your product administrator has set up the workflow. Administrators should refer to the Administration Guide for details on configuring workflows. Once you've made the changes to the appropriate artifact fields, you can either click \" Save \", \" Save and Close \", or \" Save and New \" to commit the changes or \" Refresh \" to discard the changes and reload the artifact from the database. In addition you can print the current artifact by clicking \" Print \", which will display a printable version of the page in a separate window. Please note that if digital signatures have been enabled for a particular workflow operation (and therefore a digital signature is required to confirm the status change. Workflow operations requiring a digital signature are marked with a padlock icon: On attempting to save changes made after clicking a workflow operation that requires a digital signature you will be presented with a popup like the one below:","title":"Workflows"},{"location":"Spira-User-Manual/Application-Wide/#emailing","text":"Using the \" Email \" button on the toolbar, you can send an email containing details of the artifact to an email address or another user on the system: You can specify the subject line for the email, and either a list of email addresses, separated by semicolons, or an existing product user .The content of the email is specified in the System Administration -- Notification Templates. The bottom part of the right pane can be switched between six views: \"Overview\", \"Test Coverage\", \"Tasks\", \"Attachments\", \"History\" and \"Associations\", each of which will be described in more detail below.","title":"Emailing"},{"location":"Spira-User-Manual/Application-Wide/#followers","text":"To be notified of any changes made to the current artifact via email, click the \" Subscribe \" button. If you already subscribed, the button will instead let you \" Unsubscribe \" to stop receiving emails about that particular artifact. Depending on your role, you may also see a dropdown arrow to the right of this button. This will let you subscribe others in the product to this artifact. You can also quickly see who is following an artifact under the \"People\" section in the Overview tab. To view information about the follower, or to unfollow them from the item, hover over their avatar to display a user profile card.","title":"Followers"},{"location":"Spira-User-Manual/Application-Wide/#overview","text":"The Overview tab is divided into a number of different sections. Each of these can be collapsed or expanded by clicking on the title of that section. This tab displays information about all the main fields of the artifact, as well as descriptions, comments, and other information. Many artifacts have a comments section that allows you to add and view discussions relating to the artifact: Existing comments are displayed in order underneath the textbox in date order (either newest first or oldest first). To add a new comment, enter it into the textbox, and click the \" Add Comment \" button.","title":"Overview"},{"location":"Spira-User-Manual/Application-Wide/#attachments","text":"The attachment tab displays the list of documents, screenshots or web-links (URLs) that have been \"attached\" to the artifact. The documents can be in any format, though SpiraPlan\u00ae will only display icons for certain known types. The attachment list includes the filename/URL that was originally uploaded together with the file-size (in KB), name of the person who attached it and the date uploaded. In addition, if you position the pointer over the filename and hold it there for a few seconds, a detailed description is displayed as a tooltip. To actually view the document, click on the filename hyperlink and a new web browser window will open. Depending on the type of file, this window will either display the document / web-page or prompt you for a place to save it on your local computer. To remove an existing attachment from an artifact, click the \" Remove \" button and the attachment will be removed from the list. Using the standard filter/sort options you can also sort and filter the list of attachments to make it more manageable. If you are using SpiraPlan or SpiraTeam (but not SpiraTest) you can also choose to include file attachments stored in a linked version control system (e.g. Git, Subversion, CVS, Perforce, etc.) by selecting the \"Include Source Code Documents\" option. To attach a new document to the artifact, you need to first click the \" Add New \" button to display the new attachment dialog box: There are three different types of item that can be attached to an artifact: To upload a file, choose \"File\" as the type and then click the Browse button and select the file from your local computer, optionally enter a detailed description then click the \" Upload \" button. The document will be copied from your computer and attached to the artifact. To attach a web-link (URL) to the artifact, you need to choose \"URL\" as the type and then enter the fully qualified URL (e.g. http://mywebsite.com?Document=1 ), an optional description and then click the \" Upload \" button to attach the web-link. To attach a screenshot to the artifact, you need to choose \"Screenshot\" as the type and then copy the image to your computer's clipboard (e.g. on Windows computers, the PRINT SCREEN button captures the current page and adds to the clipboard). Once the image is in the clipboard, paste it into the editor using CTRL+V (or the equivalent keystroke for your operating system) and the item will appear in the preview window. You can then fill in the other fields and click \" Upload \" to attach the image. Note: If you are using a non-Windows\u00ae computer (e.g. Macintosh\u00ae) that doesn't put file extensions on filenames (e.g. .xls for an Excel sheet) automatically, then you will need to manually add the file extension to the filename before uploading if you want it to be displayed with the correct icon in the attachment list. You can also associate an existing document (that's already stored in SpiraPlan) with the artifact. To do that, click on the \" Add Existing \" button to bring up the add file association dialog box: You can then choose to either associate a document stored in the SpiraPlan Documents repository or (in the case of SpiraPlan/SpiraTeam but not SpiraTest) from the linked source code repository. In either case you first select the appropriate folder, and then pick the document(s) from the file list on the right. In the case of a source code file association you can also add a comment.","title":"Attachments"},{"location":"Spira-User-Manual/Application-Wide/#history","text":"This tab displays the list of changes that have been performed on the artifact since its creation. An example change history for a requirement is shown below: The change history displays the date that each change was made, together with the fields that were changed, the old and new values and the person who made the change. This allows a complete audit trail to be maintained of all changes in the system. In addition, if you are logged in as a product administrator you can also click on the \"Admin View\" hyperlink to revert any unwanted changes.","title":"History"},{"location":"Spira-User-Manual/Application-Wide/#associations","text":"You can associate artifacts to one another. For instance, you can associate (or link) one requirement to another requirement, or a test case to a risk. The following artifacts have association tabs: Documents Incidents Requirements Risks Tasks Test cases (in SpiraTeam and SpiraPlan only) From the associations tab you can see and manage the list of artifacts associated with the specific artifact you are looking at. You can even make links between artifacts across different products (if the admin has set this up). The image below shows the association tab for a requirement. The requirements and risks in this list are those a user has decided are relevant to the current artifact. They therefore created a direct link between them. Each association is displayed with the: type of association (related-to, dependency, etc) name of the artifact being linked-to type of artifact (requirement, incident, etc.) name of the person who created the association a comment that describes why the association was made. In the case of an indirect association (eg when a link to an incident is added to a requirement during a test run), the comment will contain the name of the specific artifact that created that indirect association. In addition, when using SpiraPlan or SpiraTeam, the system automatically scans the source code repository for any revisions that are linked to this artifact. You can perform the following actions on the list of associations: Delete -- removes the selected association to the other artifact. This will only delete the association, not the linked artifact itself. Refresh -- updates the list of associations from the server, useful if other people are adding associations to this requirement at the same time. Filter / Apply Filter -- Applies the entries in the filter boxes to the list of associations Clear Filters -- Clears the current filter, so that all associations for the current requirement are shown. Edit -- Clicking the \" Edit \" button to the right of the associations allows you to edit the association type and comment fields inline directly on this screen. To create a new association, click the \" Add \" button to display the add association panel (below is an example from requirements): If you know the ID of the artifact you want to associate, you can enter its ID prefixed by the appropriate token (eg \"RQ\" for requirement): Otherwise choose the Artifact Type (and Product if making a cross-product association) from the dropdowns: You can narrow down your search by entering a keyword: Artifacts that have folders let you choose a folder to narrow your search. When attempting to add an association to a requirement, you can choose a package from the list to narrow down the results: Once you have a list of artifacts, select the checkboxes of the items you want to associate with the current artifact and click the 'Save' button. You can add a comment that explains the rationale for the association and choose the type of association being created: Related-to: this is used to specify that the two artifacts are simply related Depends-on: this is used to specify that the current artifact has a dependency on the one being linked to.","title":"Associations"},{"location":"Spira-User-Manual/Automation-Host-Management/","text":"Automation Host Management Automation Host List This section outlines how to use the Automation Host Management features of SpiraPlan\u00ae to manage the different host systems that will be running automated tests in your environment. Typically when scheduling automated tests you will want to execute the same tests on multiple computers running different environments. SpiraPlan allows you to build a master list of automation hosts in each product, which can be used to schedule test sets containing automated test cases against. Please refer to the Test Set section of this manual for more information on managing and scheduling test sets. When you click on the Testing > Automation Hosts global navigation link, you will initially be taken to the automation host list screen illustrated below: The automation host list screen displays all the automation hosts entered for the current product, in a filterable, sortable grid. The grid displays the automation host ID together with fields such as name, description, last updated date, token, and any custom properties. The choice of columns displayed is configurable per-user, per-product, giving extensive flexibility when it comes to viewing and searching automation hosts. In addition, you can view a more detailed description of the automation host by positioning the mouse pointer over the host name hyperlink and waiting for the popup \"tooltip\" to appear. If you click on the host name hyperlink, you will be taken to the automation host details page . Clicking on any of the pagination links at the bottom of the page will advance you to the next set of hosts in the list according to the applied filter and sort-order. There is also a drop-down-list at the bottom of the page which allows you to specify how many rows should be displayed in each page, helping accommodate different user preferences. One special column that is unique to automation hosts is the \"Token\" field. This needs to contain a short textual identifier that uniquely identifies each automation host in the product. This will be used by each host computer to identify itself to SpiraPlan. Filtering & Sorting Read about how to create and manage filters, and how to sort the artifact list . New Host Clicking on the \" New Host \" button adds a new automation host to the bottom of the automation host list with a default name and token. Delete Clicking on the \" Delete \" button deletes the automation hosts whose check-boxes have been selected in the host list. Refresh Clicking on the \" Refresh \" button reloads the list of automation hosts; this is useful when new hosts are being added by other users, and you want to make sure you have the most up-to-date list displayed. Show / Hide Columns This drop-down list allows you to change the fields that are displayed in the host list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner. Edit Each automation host in the list has an \" Edit \" button in its right-most column. When you click this button or just double-click on any of the cells in the row, you change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Save \" buttons are displayed in the last column. If you click \" Edit \" on more than one row, the \" Save \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then update the changes by clicking the one \" Save \" button. Also, if you want to make the same change to multiple rows (e.g. to change five automation hosts from Active = No to Active = Yes), you can click on the \"fill\" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the \" Edit \" button on the same row as the Filters and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Save \"to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes. Automation Host Details When you click on an automation host entry in the host list, you are taken to the automation host details page illustrated below: This page is made up of three areas; the left pane is the navigation window, the upper part of the right pane contains the automation host name and ID, and the bottom part of the right pane displays different information associated with the automation host. The navigation pane consists of a link that will take you back to the host list, as well as a list of the peer automation hosts to the one selected. This latter list is useful as a navigation shortcut; you can quickly view the peer hosts by clicking on the navigation links without having to first return to the host list page. The navigation list can be switched between two different modes: The list of hosts matching the current filter The list of all hosts, irrespective of the current filter The top part of the right pane allows you to view and/or edit the details of the particular automation host. You can edit the various fields (name, description, token, etc.) and custom properties. Once you are satisfied with the changes, click either the \" Save \" button or the alternative options from the \" Save \" dropdown list. In addition you can delete the current automation host by clicking \" Delete \", or discard any changes made by clicking \" Refresh \". Overview This tab shows the fields and description associated with the automation host. Standard and custom fields are grouped by type (eg all date and time fields are grouped together). Test Runs This tab displays the list of all the test runs executed against the automation host. Each test run is listed together with the date of execution, the name of the test case, the name of the tester, the release/version of the system that the test was executed against, the name of the test set (if applicable), the overall execution status for the test case in that run and a link to the actual test run details . In addition, you can choose to display any of the custom properties associated with the test run. The \"Show/hide columns\" drop-down list allows you to change the fields that are displayed in the test run list as columns. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. The displayed columns can be any standard field or custom property. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field. Attachments Read about how the attachments tab works History Read about how the history tab works","title":"Automation Host Management"},{"location":"Spira-User-Manual/Automation-Host-Management/#automation-host-management","text":"","title":"Automation Host Management"},{"location":"Spira-User-Manual/Automation-Host-Management/#automation-host-list","text":"This section outlines how to use the Automation Host Management features of SpiraPlan\u00ae to manage the different host systems that will be running automated tests in your environment. Typically when scheduling automated tests you will want to execute the same tests on multiple computers running different environments. SpiraPlan allows you to build a master list of automation hosts in each product, which can be used to schedule test sets containing automated test cases against. Please refer to the Test Set section of this manual for more information on managing and scheduling test sets. When you click on the Testing > Automation Hosts global navigation link, you will initially be taken to the automation host list screen illustrated below: The automation host list screen displays all the automation hosts entered for the current product, in a filterable, sortable grid. The grid displays the automation host ID together with fields such as name, description, last updated date, token, and any custom properties. The choice of columns displayed is configurable per-user, per-product, giving extensive flexibility when it comes to viewing and searching automation hosts. In addition, you can view a more detailed description of the automation host by positioning the mouse pointer over the host name hyperlink and waiting for the popup \"tooltip\" to appear. If you click on the host name hyperlink, you will be taken to the automation host details page . Clicking on any of the pagination links at the bottom of the page will advance you to the next set of hosts in the list according to the applied filter and sort-order. There is also a drop-down-list at the bottom of the page which allows you to specify how many rows should be displayed in each page, helping accommodate different user preferences. One special column that is unique to automation hosts is the \"Token\" field. This needs to contain a short textual identifier that uniquely identifies each automation host in the product. This will be used by each host computer to identify itself to SpiraPlan.","title":"Automation Host List"},{"location":"Spira-User-Manual/Automation-Host-Management/#filtering-sorting","text":"Read about how to create and manage filters, and how to sort the artifact list .","title":"Filtering &amp; Sorting"},{"location":"Spira-User-Manual/Automation-Host-Management/#new-host","text":"Clicking on the \" New Host \" button adds a new automation host to the bottom of the automation host list with a default name and token.","title":"New Host"},{"location":"Spira-User-Manual/Automation-Host-Management/#delete","text":"Clicking on the \" Delete \" button deletes the automation hosts whose check-boxes have been selected in the host list.","title":"Delete"},{"location":"Spira-User-Manual/Automation-Host-Management/#refresh","text":"Clicking on the \" Refresh \" button reloads the list of automation hosts; this is useful when new hosts are being added by other users, and you want to make sure you have the most up-to-date list displayed.","title":"Refresh"},{"location":"Spira-User-Manual/Automation-Host-Management/#show-hide-columns","text":"This drop-down list allows you to change the fields that are displayed in the host list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner.","title":"Show / Hide Columns"},{"location":"Spira-User-Manual/Automation-Host-Management/#edit","text":"Each automation host in the list has an \" Edit \" button in its right-most column. When you click this button or just double-click on any of the cells in the row, you change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Save \" buttons are displayed in the last column. If you click \" Edit \" on more than one row, the \" Save \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then update the changes by clicking the one \" Save \" button. Also, if you want to make the same change to multiple rows (e.g. to change five automation hosts from Active = No to Active = Yes), you can click on the \"fill\" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the \" Edit \" button on the same row as the Filters and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Save \"to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes.","title":"Edit"},{"location":"Spira-User-Manual/Automation-Host-Management/#automation-host-details","text":"When you click on an automation host entry in the host list, you are taken to the automation host details page illustrated below: This page is made up of three areas; the left pane is the navigation window, the upper part of the right pane contains the automation host name and ID, and the bottom part of the right pane displays different information associated with the automation host. The navigation pane consists of a link that will take you back to the host list, as well as a list of the peer automation hosts to the one selected. This latter list is useful as a navigation shortcut; you can quickly view the peer hosts by clicking on the navigation links without having to first return to the host list page. The navigation list can be switched between two different modes: The list of hosts matching the current filter The list of all hosts, irrespective of the current filter The top part of the right pane allows you to view and/or edit the details of the particular automation host. You can edit the various fields (name, description, token, etc.) and custom properties. Once you are satisfied with the changes, click either the \" Save \" button or the alternative options from the \" Save \" dropdown list. In addition you can delete the current automation host by clicking \" Delete \", or discard any changes made by clicking \" Refresh \".","title":"Automation Host Details"},{"location":"Spira-User-Manual/Automation-Host-Management/#overview","text":"This tab shows the fields and description associated with the automation host. Standard and custom fields are grouped by type (eg all date and time fields are grouped together).","title":"Overview"},{"location":"Spira-User-Manual/Automation-Host-Management/#test-runs","text":"This tab displays the list of all the test runs executed against the automation host. Each test run is listed together with the date of execution, the name of the test case, the name of the tester, the release/version of the system that the test was executed against, the name of the test set (if applicable), the overall execution status for the test case in that run and a link to the actual test run details . In addition, you can choose to display any of the custom properties associated with the test run. The \"Show/hide columns\" drop-down list allows you to change the fields that are displayed in the test run list as columns. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. The displayed columns can be any standard field or custom property. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field.","title":"Test Runs"},{"location":"Spira-User-Manual/Automation-Host-Management/#attachments","text":"Read about how the attachments tab works","title":"Attachments"},{"location":"Spira-User-Manual/Automation-Host-Management/#history","text":"Read about how the history tab works","title":"History"},{"location":"Spira-User-Manual/Document-Management/","text":"Document Management This section outlines the document management features of SpiraPlan\u00ae that can be used to upload, manage and share documents between the different members of the product. This module includes support for uploading files and URLs, versioning of documents, the ability to organize into folders and categorize and search using meta-tags. In addition the document management features are fully integrated into the rest of the system, so that documents attached to other artifacts (e.g. requirements, test cases, etc.) are automatically connected to the product documentation repository. Document List When you click Product Home > Documents on the global navigation bar, you will initially be taken to the product documents list screen illustrated below: This screen consists of three main sections: The top left-hand pane displays a hierarchical list of the various folders that have been setup for the current product. Clicking on the triangle icon will expand the child folders and clicking on the name of the folder will display the list of documents in the folder in the main pane to the right. The main right-hand pane displays a list of all the documents contained within the currently selected folder. This list can be filtered and sorted, and you can choose how many rows of documents to display on the page at one time. The bottom left-hand pane contains the \"Tag Cloud\". This is a list of all the tag names associated with documents in the product. The size of the font is proportional to the number of documents associated with the tag. Clicking on a tag name will automatically filter the list of documents to find items that contain the selected tag. The main toolbar contains icons for all the operations that can be performed on the document list. You can add documents to the current folder, delete existing documents from the product, refresh the list of documents, export documents to another product, apply a filter, and clear the current filter. In addition there is the option to either display just the documents in the current folder or all documents in all folders. The latter is useful when you want to search for a specific document by keyword or tag name. Filtering Read about how to create and manage filters, and how to sort the artifact list . Add New Document To attach a new document to the incident, you need to first click the \" Add New \" button to display the new attachment dialog box: There are three different types of item that can be attached to an incident: To upload a file, choose \"File\" as the type and then click the Browse button and select the file from your local computer, optionally enter a detailed description then click the \" Upload \" button. The document will be copied from your computer and attached to the artifact. To attach a web-link (URL) to the artifact, you need to choose \"URL\" as the type and then enter the fully qualified URL (e.g. http://mywebsite.com?Document=1 ), an optional description and then click the \" Upload \" button to attach the web-link. To attach a screenshot to the artifact, you need to choose \"Screenshot\" as the type and then copy the image to your computer's clipboard (e.g. on Windows computers, the PRINT SCREEN button captures the current page and adds to the clipboard). Once the image is in the clipboard, paste it into the editor using CTRL+V (or the equivalent keystroke for your operating system) and the item will appear in the preview window. You can then fill in the other fields and click \" Upload \" to attach the image. Note: If you are using a non-Windows\u00ae computer (e.g. Macintosh\u00ae) that doesn't put file extensions on filenames (e.g. .xls for an Excel sheet) automatically, then you will need to manually add the file extension to the filename before uploading if you want it to be displayed with the correct icon in the attachment list. View Document Information When you hover the mouse pointer over any of the documents displayed in the document list, an information panel will be displayed that contains the name, description, version, document type and meta-tags of the document. You can click on the document URL to actually open the document itself in a new window, click on the meta-tag links to find related documents that contain the same meta-tag, or click on \" View Details \" to see more information regarding the document, including an ability to edit its meta-information and see the different versions of the document. Edit Document Folders If you are a product administrator, you will see the \"Edit\" and \"Add\" buttons beneath the folder tree: This lets you add, edit and delete task folders in the product. To add a new folder, click the \" Add \" button: Choose the parent folder that you want to add the new folder under (or None if you are adding a new top-level folder) from the dropdown list and then enter the name of the new folder. Then click 'Add' save the new folder. To edit or delete an existing folder, click the 'Edit' button to switch the folder tree to edit mode: To edit or delete a specific folder, click on the 'Edit' button next to the folder: You can change the parent folder and/or name of the folder and click \" Update \" to commit the change or click \" Delete \" to delete the folder entirely (including its contents). 1 Document Details When you click on an item in the document list described above, you are taken to the document details page illustrated below: This page is made up of three areas; the left pane displays the documents list navigation; the right pane's header, which displays: the operations toolbar; the editable name of the selected document; and the info bar (with a shaded background), which also contains the workflow status transitions (see below); and the right pane's tabbed interface with rich information related to the document, including, where available, the folder the document is in , a preview of the document, the list of document versions, the list of artifacts that the document is associated with, and history of changes made to the document). Please note that on smaller screen sizes the navigation pane is not displayed. While the navigation pane has a link to take you back to the documents list, on mobile devices a 'back' button is shown on the left of the operations toolbar. The navigation pane can be collapsed by clicking on the \"-\" button, or expanded by clicking anywhere on the gray title area. On desktops the user can also control the exact width of the navigation pane by dragging and dropping a red handle that appears on hovering at the rightmost edge of the navigation pane. The navigation pane consists of a link that will take you back to the product document list, as well as a list of other documents in the current folder. This latter list is useful as a navigation shortcut; you can quickly view the detailed information of all the peer documents by clicking on the navigation links without having to first return to the main document list page. Emailing Read about emailing a document to colleagues using Spira . Followers Read about how to add and manage followers to an artifact . Workflows Read about using workflows to change the status of your document . For documents, you can, depending on how the product administrator has set this up, use workflows to control who can add a new version to a document when. This can be useful for \"checking-out\" a document, during which time it is locked. When the document is checked back in the workflow can require that the person checking in the document upload a new version (make sure you upload the version before changing the status). Overview - details The top part of the main pane allows you to view and/or edit the details of the particular document. You can edit the various fields (name, description, etc.) and once you are satisfied with them, click one of the \" Save \" buttons to commit the changes. In addition, you can delete the current document by choosing \" Delete \", or discard any changes made by clicking \" Refresh \". The lower part of the main pane can be switched between four different views by clicking the appropriate tab. Initially the pane will be in \"Versions\" mode. The functionality in each of these views is described below. Preview This tab displays a preview of the currently active version of the document. Previews are shown for a number of file types, notably plain text or code files, and images. If a format cannot be previewed (for example a PDF or Microsoft Word document), the following message is displayed: Document Versions This view displays the list of different versions that exist for the current document. When you initially create a new document there will be only a single version (e.g. v1.0), however as revisions are made to the document, rather than having to create a whole new document, you can just upload the new revision as a new version (e.g. v1.1) and it will be added to the list of versions. Each version in the list is displayed with its name, a description of what changed in the version, the version number assigned to the revision, the file-size, who uploaded the new version and a link to actually open the new version: On this page, you have the option to delete an existing version, make a different version the active one (the one that users see when they view the document list and click on the link) and upload a new revision. To upload a new version, click on the 'Upload New Version' hyperlink: In the popup dialog, you need to drag the file to be uploaded onto the upload icon (or click on the icon to browse to the file), enter a description of the changes made, a new version number and whether the new version should be made the active one, then click the [Upload] button to confirm the changes. Note: This option is only available for File attachments. To change a URL attachment, you can simply edit the Filename field directly. Associations You can associate a document to many other artifacts in the system from this tab. If you originally uploaded the document as an attachment to an artifact, then the initial association will be already listed. Read more about how to manage and add associations to this artifact History Read about how the history tab works when navigating to folders (for all artifacts that support them), the URL in your browser's address bar will change. Each folder has a unique, sharable URL that you can give to someone to display the list of artifacts with the appropriate folder selected. You can also open up multiple folders in different browser tabs and easily toggle between them from the same browser. \u21a9","title":"Document Management"},{"location":"Spira-User-Manual/Document-Management/#document-management","text":"This section outlines the document management features of SpiraPlan\u00ae that can be used to upload, manage and share documents between the different members of the product. This module includes support for uploading files and URLs, versioning of documents, the ability to organize into folders and categorize and search using meta-tags. In addition the document management features are fully integrated into the rest of the system, so that documents attached to other artifacts (e.g. requirements, test cases, etc.) are automatically connected to the product documentation repository.","title":"Document Management"},{"location":"Spira-User-Manual/Document-Management/#document-list","text":"When you click Product Home > Documents on the global navigation bar, you will initially be taken to the product documents list screen illustrated below: This screen consists of three main sections: The top left-hand pane displays a hierarchical list of the various folders that have been setup for the current product. Clicking on the triangle icon will expand the child folders and clicking on the name of the folder will display the list of documents in the folder in the main pane to the right. The main right-hand pane displays a list of all the documents contained within the currently selected folder. This list can be filtered and sorted, and you can choose how many rows of documents to display on the page at one time. The bottom left-hand pane contains the \"Tag Cloud\". This is a list of all the tag names associated with documents in the product. The size of the font is proportional to the number of documents associated with the tag. Clicking on a tag name will automatically filter the list of documents to find items that contain the selected tag. The main toolbar contains icons for all the operations that can be performed on the document list. You can add documents to the current folder, delete existing documents from the product, refresh the list of documents, export documents to another product, apply a filter, and clear the current filter. In addition there is the option to either display just the documents in the current folder or all documents in all folders. The latter is useful when you want to search for a specific document by keyword or tag name.","title":"Document List"},{"location":"Spira-User-Manual/Document-Management/#filtering","text":"Read about how to create and manage filters, and how to sort the artifact list .","title":"Filtering"},{"location":"Spira-User-Manual/Document-Management/#add-new-document","text":"To attach a new document to the incident, you need to first click the \" Add New \" button to display the new attachment dialog box: There are three different types of item that can be attached to an incident: To upload a file, choose \"File\" as the type and then click the Browse button and select the file from your local computer, optionally enter a detailed description then click the \" Upload \" button. The document will be copied from your computer and attached to the artifact. To attach a web-link (URL) to the artifact, you need to choose \"URL\" as the type and then enter the fully qualified URL (e.g. http://mywebsite.com?Document=1 ), an optional description and then click the \" Upload \" button to attach the web-link. To attach a screenshot to the artifact, you need to choose \"Screenshot\" as the type and then copy the image to your computer's clipboard (e.g. on Windows computers, the PRINT SCREEN button captures the current page and adds to the clipboard). Once the image is in the clipboard, paste it into the editor using CTRL+V (or the equivalent keystroke for your operating system) and the item will appear in the preview window. You can then fill in the other fields and click \" Upload \" to attach the image. Note: If you are using a non-Windows\u00ae computer (e.g. Macintosh\u00ae) that doesn't put file extensions on filenames (e.g. .xls for an Excel sheet) automatically, then you will need to manually add the file extension to the filename before uploading if you want it to be displayed with the correct icon in the attachment list.","title":"Add New Document"},{"location":"Spira-User-Manual/Document-Management/#view-document-information","text":"When you hover the mouse pointer over any of the documents displayed in the document list, an information panel will be displayed that contains the name, description, version, document type and meta-tags of the document. You can click on the document URL to actually open the document itself in a new window, click on the meta-tag links to find related documents that contain the same meta-tag, or click on \" View Details \" to see more information regarding the document, including an ability to edit its meta-information and see the different versions of the document.","title":"View Document Information"},{"location":"Spira-User-Manual/Document-Management/#edit-document-folders","text":"If you are a product administrator, you will see the \"Edit\" and \"Add\" buttons beneath the folder tree: This lets you add, edit and delete task folders in the product. To add a new folder, click the \" Add \" button: Choose the parent folder that you want to add the new folder under (or None if you are adding a new top-level folder) from the dropdown list and then enter the name of the new folder. Then click 'Add' save the new folder. To edit or delete an existing folder, click the 'Edit' button to switch the folder tree to edit mode: To edit or delete a specific folder, click on the 'Edit' button next to the folder: You can change the parent folder and/or name of the folder and click \" Update \" to commit the change or click \" Delete \" to delete the folder entirely (including its contents). 1","title":"Edit Document Folders"},{"location":"Spira-User-Manual/Document-Management/#document-details","text":"When you click on an item in the document list described above, you are taken to the document details page illustrated below: This page is made up of three areas; the left pane displays the documents list navigation; the right pane's header, which displays: the operations toolbar; the editable name of the selected document; and the info bar (with a shaded background), which also contains the workflow status transitions (see below); and the right pane's tabbed interface with rich information related to the document, including, where available, the folder the document is in , a preview of the document, the list of document versions, the list of artifacts that the document is associated with, and history of changes made to the document). Please note that on smaller screen sizes the navigation pane is not displayed. While the navigation pane has a link to take you back to the documents list, on mobile devices a 'back' button is shown on the left of the operations toolbar. The navigation pane can be collapsed by clicking on the \"-\" button, or expanded by clicking anywhere on the gray title area. On desktops the user can also control the exact width of the navigation pane by dragging and dropping a red handle that appears on hovering at the rightmost edge of the navigation pane. The navigation pane consists of a link that will take you back to the product document list, as well as a list of other documents in the current folder. This latter list is useful as a navigation shortcut; you can quickly view the detailed information of all the peer documents by clicking on the navigation links without having to first return to the main document list page.","title":"Document Details"},{"location":"Spira-User-Manual/Document-Management/#emailing","text":"Read about emailing a document to colleagues using Spira .","title":"Emailing"},{"location":"Spira-User-Manual/Document-Management/#followers","text":"Read about how to add and manage followers to an artifact .","title":"Followers"},{"location":"Spira-User-Manual/Document-Management/#workflows","text":"Read about using workflows to change the status of your document . For documents, you can, depending on how the product administrator has set this up, use workflows to control who can add a new version to a document when. This can be useful for \"checking-out\" a document, during which time it is locked. When the document is checked back in the workflow can require that the person checking in the document upload a new version (make sure you upload the version before changing the status).","title":"Workflows"},{"location":"Spira-User-Manual/Document-Management/#overview-details","text":"The top part of the main pane allows you to view and/or edit the details of the particular document. You can edit the various fields (name, description, etc.) and once you are satisfied with them, click one of the \" Save \" buttons to commit the changes. In addition, you can delete the current document by choosing \" Delete \", or discard any changes made by clicking \" Refresh \". The lower part of the main pane can be switched between four different views by clicking the appropriate tab. Initially the pane will be in \"Versions\" mode. The functionality in each of these views is described below.","title":"Overview - details"},{"location":"Spira-User-Manual/Document-Management/#preview","text":"This tab displays a preview of the currently active version of the document. Previews are shown for a number of file types, notably plain text or code files, and images. If a format cannot be previewed (for example a PDF or Microsoft Word document), the following message is displayed:","title":"Preview"},{"location":"Spira-User-Manual/Document-Management/#document-versions","text":"This view displays the list of different versions that exist for the current document. When you initially create a new document there will be only a single version (e.g. v1.0), however as revisions are made to the document, rather than having to create a whole new document, you can just upload the new revision as a new version (e.g. v1.1) and it will be added to the list of versions. Each version in the list is displayed with its name, a description of what changed in the version, the version number assigned to the revision, the file-size, who uploaded the new version and a link to actually open the new version: On this page, you have the option to delete an existing version, make a different version the active one (the one that users see when they view the document list and click on the link) and upload a new revision. To upload a new version, click on the 'Upload New Version' hyperlink: In the popup dialog, you need to drag the file to be uploaded onto the upload icon (or click on the icon to browse to the file), enter a description of the changes made, a new version number and whether the new version should be made the active one, then click the [Upload] button to confirm the changes. Note: This option is only available for File attachments. To change a URL attachment, you can simply edit the Filename field directly.","title":"Document Versions"},{"location":"Spira-User-Manual/Document-Management/#associations","text":"You can associate a document to many other artifacts in the system from this tab. If you originally uploaded the document as an attachment to an artifact, then the initial association will be already listed. Read more about how to manage and add associations to this artifact","title":"Associations"},{"location":"Spira-User-Manual/Document-Management/#history","text":"Read about how the history tab works when navigating to folders (for all artifacts that support them), the URL in your browser's address bar will change. Each folder has a unique, sharable URL that you can give to someone to display the list of artifacts with the appropriate folder selected. You can also open up multiple folders in different browser tabs and easily toggle between them from the same browser. \u21a9","title":"History"},{"location":"Spira-User-Manual/Functionality-Overview/","text":"Functionality Overview This section outlines the functionality provided by SpiraPlan\u00ae in the areas of requirements management, test case management, release planning, sprint planning, incident tracking, task management and product / user management. Please note, that SpiraPlan\u00ae is designed for use on a very wide range of devices from desktops, to tablets, to smartphones. This guide is written using desktop conventions (e.g. using 'click' throughout where 'tap' would apply on mobile devices) but the functionality remains very similar throughout the application across all devices and platforms. See Mobile Access for more information. Requirements Management SpiraPlan\u00ae provides the ability to create, edit and delete product scope / requirements in a hierarchical organization that resembles a typical scope matrix. Each requirement is associated with a particular importance level and a status identifier that designates where the requirement is in the development lifecycle (requested, planned, in-progress and completed). The requirements can be organized according to which part of the system they relate to (called the Component) as well as being organized into different types (features, qualities, use cases, etc.). Certain types (such as use cases) allow you to define the scenario steps that help describe that requirement. In addition, each requirement can be mapped to one or more test cases that can be used to validate that the functionality works as expected. This mapping is called the \"Requirement Test Coverage\", since the test cases \"cover\" the requirement so that if all the tests can be executed successfully, then the requirement is validated. At the same time, from a development perspective, the team begins initial estimation of the lowest-level requirements in the requirements matrix to determine the complexity and associated resourcing. Once the high-level release schedule has been determined, the requirements can then be prioritized and scheduled against the appropriate release according to their business priority. Once the release is underway, the requirements are further decomposed into their constituent low-level product tasks that can be assigned to the product team. The system will track the progress and revised estimates for the tasks and display them against the requirements so that risks to the schedule can be quickly determined. Test Case Management SpiraPlan\u00ae provides the ability to create, edit and delete product test cases that are stored in a hierarchical folder structure that resembles Windows Explorer \u00ae. Each test case consists of a set of test steps that represent the individual actions a user must take to complete the test. These test steps also contain a description of the expected result and any sample data elements that the tester should use when performing the action. When a user executes a test case, the results are stored in a test run that contains the success/failure status of each test step as well as the actual observed result that the tester experienced. In addition each test case is mapped to one or more requirements that the test is effectively validating, providing the test coverage for the requirement. During the execution of the test case, each failure can be optionally used to record a new incident, which can then be managed in the incident tracking module (see below). This provides complete traceability from a recorded incident to the underlying requirement that was not satisfied. To streamline the assignment and tracking of multiple test cases, SpiraPlan\u00ae allows users to select groups of test cases and arrange them into test sets . Each test set can contain test cases from a variety of different folders and can be associated with a specific release of the system being tested. Test Automation As well as being able to store and manage manual test cases, SpiraPlan\u00ae can be used to manage the scheduling and execution of automated test scripts for a variety of third-party test automation engines. This allows you to centrally plan your automated testing and monitor the results of automated unit, functional and load testing remotely. For example, you could schedule a set of automated functional tests to run on five different machines (each with a different browser/OS combination) at 2:00 AM and have the results be ready for the next morning. Release Planning SpiraPlan\u00ae provides the ability to track different versions / releases of the application being tested. Each product in the system can be decomposed into an unlimited number of specific product releases, denoted by name and version number. Requirements and Test Cases developed during the design phase can then be assigned to these different releases. When a tester executes a series of test cases, they are able to choose the version of the product being tested and the resulting test run information is then associated with that release. From a product planning perspective, the releases are the major milestones in the product, which are further sub-divided into sprints which are separate mini-products with associated product scope and tasks. The product's requirements are scheduled at a high-level against the releases and the detailed tasks are scheduled against specific sprint within the release. In addition, all incidents raised during the testing process are associated with this release, allowing the development team to easily determine which version of the product is affected. Finally as the incidents are resolved and verified during the testing phase, the appropriate release can be selected to indicate which release the incident was resolved and/or verified in. Sprint Planning As described in Release Planning , in addition to high-level product releases, SpiraPlan\u00ae can also track the individual sprints that comprise a release, giving the product manager the option to manage agile methodology products within the SpiraPlan\u00ae environment. Unlike the release planning stage, where high-level requirements are estimated and scheduled, the sprint planning phase involves assigning each of the requirements, incidents and tasks in the product backlog against a specific sprint until the available effort in the sprint has been completely allocated. When you first create sprints, you specify the start and end-dates together with the notional number of product resources assigned to the sprint and any non-working days. SpiraPlan\u00ae uses this information to calculate the planned effort available to the sprint, from which it will subtract the estimated task and incident effort values to determine how much effort is available to schedule. Incident Tracking SpiraPlan\u00ae provides the ability to create, edit, assign, track, manage and close incidents that are raised during the testing of the software system under development. These incidents can be categorized into bugs, enhancements, issues, training items, limitations, change requests, and risks, and each type has its own specific workflow and business rules. Typically each incident is raised initially as a 'New' item of type 'Incident'. Following the review by the product manager and customer, they are changed to one of the other specific types, given a priority (critical, high, medium or low), and status changed to 'Open'. Once it is assigned to a developer for fixing, it is changed to status 'Assigned'. The developer now works to correct the incident, after which time its status changes to 'Fixed' or 'Not Reproducible' depending on the actions taken (or not taken). Finally the product manager and customer verify that it has indeed been fixed, and the status is changed to 'Closed'. SpiraPlan\u00ae provides robust sorting and filtering of all the incidents in the system, as well as the ability to view the incidents associated with particular test cases and test runs, enabling drill-down from the requirements coverage display, right through to the open incidents that are affecting the requirement in question. Task Management As described above, in addition to storing the requirements for a product, SpiraPlan\u00ae includes the capability of drilling each lowest-level requirement down further into a series of work items called 'Tasks'. These tasks are the discrete activities that each member of the development team would need to carry out for the requirement to be fulfilled. Each task can be assigned to an individual user as well as associated with a particular release or sprint. The system can then be used by the product manager to track the completion of the different tasks to determine if the product is on schedule. The tasks can be organized into different folders as well as categorized by different types (development, testing, infrastructure, etc.), each of which can have its own workflow which defines the process by which the task changes status during the product lifecycle. Products and Users SpiraPlan\u00ae supports the management of an unlimited number of users and products, which can be administered through the same web interface as the rest of the application. All artifacts (requirements, tests and incidents) are associated with a particular product, and each user of the system can be given a specific role for the particular product. So, a power user of one software product may be merely an observer of another. That way, a central set of users can be managed across the enterprise, whilst devolving product-level administration to the manager of the product. In addition to these administration functions, each user profile and product has its own personalized dashboard view of all the pertinent and relevant information. This feature reduces the information overload associated with managing such a rich source of product information, and allows a single user or product snapshot to be viewable at all times for rapid decision-making. Document Management SpiraPlan\u00ae includes an integrated document management collaboration system that can be used to upload, manage and share documents between the different members of the product. This module includes support for uploading files and URLs, versioning of documents, the ability to organize into folders and categorize and search using meta-tags. Risk Management SpiraPlan\u00ae (not available in SpiraTest or SpiraTeam) enables a complete risk management workflow. This module aids in the analyzing and categorizing of risks based on their Probability and their impact, which produces a calculated risk exposure. The tool tracks both risks and their mitigations, and provides dynamic risk reporting tools. Source Code Tracking SpiraPlan\u00ae and SpiraPlan\u00ae provide the ability to browse your source code repository from within the main web application. This is an excellent way for managers and casual users of the product to browse the files and revisions of the software code without needing to install the version control software on their own workstations. In addition all users have the ability to link source code revisions with SpiraPlan\u00ae artifacts--providing traceability from requirements, incidents, and tasks to the code changes that were made to implement the required feature, or fix the identified defect. Should a defect resurface later, you can view the associated source code revisions to determine which changes were made and did they truly correct the defect. Build Management SpiraPlan\u00ae includes the ability to integrate with a variety of continuous integration / automated build servers so that the results of automated builds can be displayed in SpiraPlan linked to the associated release or sprint. In addition, the results of automated tests and source code operations can be linked to the build events, providing traceability from a specific build to the bugs that were fixed, tests that were run and source code files that were modified. Instant Messenger SpiraPlan\u00ae comes with a build-in integrated instant messaging capability. This lets users see which users are currently logged-into the system, maintain a list of contacts and where available, send short instant messages to other users. Any messages exchanged can then be posted to relevant artifacts in the system as permanent comments. Miscellaneous Artifact Relationships The sections above have outlined the different features and functions available in the system, and have described the various artifacts managed in the system (e.g. products, users, requirements, tests, etc.). To aid in understanding how the information is related, the following diagrams illustrates the relationships between the different artifacts and entities: Figure 1: The main entities that comprise a SpiraTest product. Figure 2: The relationships between the various SpiraTest entities With these overall concepts in mind, the rest of this help manual will outline the functionality in each of the SpiraPlan\u00ae screens, and provide specific information on how to manage each of the artifacts illustrated above. Note that this manual does not explain the Administration-level functionality of the system; for that, please refer to the SpiraPlan\u00ae Administration Guide . Artifact Naming Conventions On various screens in the system, you will see lists of artifacts (requirements, test cases, etc.) together with a unique identification number. In order to make it easier to recognize at a glance which type of artifact the identification number refers to, SpiraPlan\u00ae uses a system of two-letter prefixes which help identify the type of artifact being displayed. The current prefixes used by the system are: Artifact Prefix Artifact Prefix Product PR Program PG User US Incident Type IT Requirement RQ Incident Priority IP Requirement Step RS Incident Severity IV Test Case TC Workflow WK Test Step TS Workflow Transition WT Test Run TR Custom Property Values PV Test Run Step RS Product Role RX Incident IN Task TK Incident Status IS Test Set TX Custom List CL Document DC Document Type DT Document Folder DF Automation Host AH Build BL Release/Sprint RL Component CP Risk RK Risk Mitigation RM In addition, certain artifacts in the system are displayed with an icon that helps distinguish them from each other, and provides additional context on the state of the artifact: Icon Artifact Description Program Product Summary Requirement Detailed Requirement Use Case Requirement Use Case Scenario Step Folder Test Case with Test Steps Test Case without Test Steps Test Set Test Run Test Step Linked Test Case Test Automation Host Test Configuration Release Iteration / Sprint Component Task Incident Risk Risk Mitigation Source Code Revision Product User Build Artifact has an Attachment","title":"Functionality Overview"},{"location":"Spira-User-Manual/Functionality-Overview/#functionality-overview","text":"This section outlines the functionality provided by SpiraPlan\u00ae in the areas of requirements management, test case management, release planning, sprint planning, incident tracking, task management and product / user management. Please note, that SpiraPlan\u00ae is designed for use on a very wide range of devices from desktops, to tablets, to smartphones. This guide is written using desktop conventions (e.g. using 'click' throughout where 'tap' would apply on mobile devices) but the functionality remains very similar throughout the application across all devices and platforms. See Mobile Access for more information.","title":"Functionality Overview"},{"location":"Spira-User-Manual/Functionality-Overview/#requirements-management","text":"SpiraPlan\u00ae provides the ability to create, edit and delete product scope / requirements in a hierarchical organization that resembles a typical scope matrix. Each requirement is associated with a particular importance level and a status identifier that designates where the requirement is in the development lifecycle (requested, planned, in-progress and completed). The requirements can be organized according to which part of the system they relate to (called the Component) as well as being organized into different types (features, qualities, use cases, etc.). Certain types (such as use cases) allow you to define the scenario steps that help describe that requirement. In addition, each requirement can be mapped to one or more test cases that can be used to validate that the functionality works as expected. This mapping is called the \"Requirement Test Coverage\", since the test cases \"cover\" the requirement so that if all the tests can be executed successfully, then the requirement is validated. At the same time, from a development perspective, the team begins initial estimation of the lowest-level requirements in the requirements matrix to determine the complexity and associated resourcing. Once the high-level release schedule has been determined, the requirements can then be prioritized and scheduled against the appropriate release according to their business priority. Once the release is underway, the requirements are further decomposed into their constituent low-level product tasks that can be assigned to the product team. The system will track the progress and revised estimates for the tasks and display them against the requirements so that risks to the schedule can be quickly determined.","title":"Requirements Management"},{"location":"Spira-User-Manual/Functionality-Overview/#test-case-management","text":"SpiraPlan\u00ae provides the ability to create, edit and delete product test cases that are stored in a hierarchical folder structure that resembles Windows Explorer \u00ae. Each test case consists of a set of test steps that represent the individual actions a user must take to complete the test. These test steps also contain a description of the expected result and any sample data elements that the tester should use when performing the action. When a user executes a test case, the results are stored in a test run that contains the success/failure status of each test step as well as the actual observed result that the tester experienced. In addition each test case is mapped to one or more requirements that the test is effectively validating, providing the test coverage for the requirement. During the execution of the test case, each failure can be optionally used to record a new incident, which can then be managed in the incident tracking module (see below). This provides complete traceability from a recorded incident to the underlying requirement that was not satisfied. To streamline the assignment and tracking of multiple test cases, SpiraPlan\u00ae allows users to select groups of test cases and arrange them into test sets . Each test set can contain test cases from a variety of different folders and can be associated with a specific release of the system being tested.","title":"Test Case Management"},{"location":"Spira-User-Manual/Functionality-Overview/#test-automation","text":"As well as being able to store and manage manual test cases, SpiraPlan\u00ae can be used to manage the scheduling and execution of automated test scripts for a variety of third-party test automation engines. This allows you to centrally plan your automated testing and monitor the results of automated unit, functional and load testing remotely. For example, you could schedule a set of automated functional tests to run on five different machines (each with a different browser/OS combination) at 2:00 AM and have the results be ready for the next morning.","title":"Test Automation"},{"location":"Spira-User-Manual/Functionality-Overview/#release-planning","text":"SpiraPlan\u00ae provides the ability to track different versions / releases of the application being tested. Each product in the system can be decomposed into an unlimited number of specific product releases, denoted by name and version number. Requirements and Test Cases developed during the design phase can then be assigned to these different releases. When a tester executes a series of test cases, they are able to choose the version of the product being tested and the resulting test run information is then associated with that release. From a product planning perspective, the releases are the major milestones in the product, which are further sub-divided into sprints which are separate mini-products with associated product scope and tasks. The product's requirements are scheduled at a high-level against the releases and the detailed tasks are scheduled against specific sprint within the release. In addition, all incidents raised during the testing process are associated with this release, allowing the development team to easily determine which version of the product is affected. Finally as the incidents are resolved and verified during the testing phase, the appropriate release can be selected to indicate which release the incident was resolved and/or verified in.","title":"Release Planning"},{"location":"Spira-User-Manual/Functionality-Overview/#sprint-planning","text":"As described in Release Planning , in addition to high-level product releases, SpiraPlan\u00ae can also track the individual sprints that comprise a release, giving the product manager the option to manage agile methodology products within the SpiraPlan\u00ae environment. Unlike the release planning stage, where high-level requirements are estimated and scheduled, the sprint planning phase involves assigning each of the requirements, incidents and tasks in the product backlog against a specific sprint until the available effort in the sprint has been completely allocated. When you first create sprints, you specify the start and end-dates together with the notional number of product resources assigned to the sprint and any non-working days. SpiraPlan\u00ae uses this information to calculate the planned effort available to the sprint, from which it will subtract the estimated task and incident effort values to determine how much effort is available to schedule.","title":"Sprint Planning"},{"location":"Spira-User-Manual/Functionality-Overview/#incident-tracking","text":"SpiraPlan\u00ae provides the ability to create, edit, assign, track, manage and close incidents that are raised during the testing of the software system under development. These incidents can be categorized into bugs, enhancements, issues, training items, limitations, change requests, and risks, and each type has its own specific workflow and business rules. Typically each incident is raised initially as a 'New' item of type 'Incident'. Following the review by the product manager and customer, they are changed to one of the other specific types, given a priority (critical, high, medium or low), and status changed to 'Open'. Once it is assigned to a developer for fixing, it is changed to status 'Assigned'. The developer now works to correct the incident, after which time its status changes to 'Fixed' or 'Not Reproducible' depending on the actions taken (or not taken). Finally the product manager and customer verify that it has indeed been fixed, and the status is changed to 'Closed'. SpiraPlan\u00ae provides robust sorting and filtering of all the incidents in the system, as well as the ability to view the incidents associated with particular test cases and test runs, enabling drill-down from the requirements coverage display, right through to the open incidents that are affecting the requirement in question.","title":"Incident Tracking"},{"location":"Spira-User-Manual/Functionality-Overview/#task-management","text":"As described above, in addition to storing the requirements for a product, SpiraPlan\u00ae includes the capability of drilling each lowest-level requirement down further into a series of work items called 'Tasks'. These tasks are the discrete activities that each member of the development team would need to carry out for the requirement to be fulfilled. Each task can be assigned to an individual user as well as associated with a particular release or sprint. The system can then be used by the product manager to track the completion of the different tasks to determine if the product is on schedule. The tasks can be organized into different folders as well as categorized by different types (development, testing, infrastructure, etc.), each of which can have its own workflow which defines the process by which the task changes status during the product lifecycle.","title":"Task Management"},{"location":"Spira-User-Manual/Functionality-Overview/#products-and-users","text":"SpiraPlan\u00ae supports the management of an unlimited number of users and products, which can be administered through the same web interface as the rest of the application. All artifacts (requirements, tests and incidents) are associated with a particular product, and each user of the system can be given a specific role for the particular product. So, a power user of one software product may be merely an observer of another. That way, a central set of users can be managed across the enterprise, whilst devolving product-level administration to the manager of the product. In addition to these administration functions, each user profile and product has its own personalized dashboard view of all the pertinent and relevant information. This feature reduces the information overload associated with managing such a rich source of product information, and allows a single user or product snapshot to be viewable at all times for rapid decision-making.","title":"Products and Users"},{"location":"Spira-User-Manual/Functionality-Overview/#document-management","text":"SpiraPlan\u00ae includes an integrated document management collaboration system that can be used to upload, manage and share documents between the different members of the product. This module includes support for uploading files and URLs, versioning of documents, the ability to organize into folders and categorize and search using meta-tags.","title":"Document Management"},{"location":"Spira-User-Manual/Functionality-Overview/#risk-management","text":"SpiraPlan\u00ae (not available in SpiraTest or SpiraTeam) enables a complete risk management workflow. This module aids in the analyzing and categorizing of risks based on their Probability and their impact, which produces a calculated risk exposure. The tool tracks both risks and their mitigations, and provides dynamic risk reporting tools.","title":"Risk Management"},{"location":"Spira-User-Manual/Functionality-Overview/#source-code-tracking","text":"SpiraPlan\u00ae and SpiraPlan\u00ae provide the ability to browse your source code repository from within the main web application. This is an excellent way for managers and casual users of the product to browse the files and revisions of the software code without needing to install the version control software on their own workstations. In addition all users have the ability to link source code revisions with SpiraPlan\u00ae artifacts--providing traceability from requirements, incidents, and tasks to the code changes that were made to implement the required feature, or fix the identified defect. Should a defect resurface later, you can view the associated source code revisions to determine which changes were made and did they truly correct the defect.","title":"Source Code Tracking"},{"location":"Spira-User-Manual/Functionality-Overview/#build-management","text":"SpiraPlan\u00ae includes the ability to integrate with a variety of continuous integration / automated build servers so that the results of automated builds can be displayed in SpiraPlan linked to the associated release or sprint. In addition, the results of automated tests and source code operations can be linked to the build events, providing traceability from a specific build to the bugs that were fixed, tests that were run and source code files that were modified.","title":"Build Management"},{"location":"Spira-User-Manual/Functionality-Overview/#instant-messenger","text":"SpiraPlan\u00ae comes with a build-in integrated instant messaging capability. This lets users see which users are currently logged-into the system, maintain a list of contacts and where available, send short instant messages to other users. Any messages exchanged can then be posted to relevant artifacts in the system as permanent comments.","title":"Instant Messenger"},{"location":"Spira-User-Manual/Functionality-Overview/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"Spira-User-Manual/Functionality-Overview/#artifact-relationships","text":"The sections above have outlined the different features and functions available in the system, and have described the various artifacts managed in the system (e.g. products, users, requirements, tests, etc.). To aid in understanding how the information is related, the following diagrams illustrates the relationships between the different artifacts and entities: Figure 1: The main entities that comprise a SpiraTest product. Figure 2: The relationships between the various SpiraTest entities With these overall concepts in mind, the rest of this help manual will outline the functionality in each of the SpiraPlan\u00ae screens, and provide specific information on how to manage each of the artifacts illustrated above. Note that this manual does not explain the Administration-level functionality of the system; for that, please refer to the SpiraPlan\u00ae Administration Guide .","title":"Artifact Relationships"},{"location":"Spira-User-Manual/Functionality-Overview/#artifact-naming-conventions","text":"On various screens in the system, you will see lists of artifacts (requirements, test cases, etc.) together with a unique identification number. In order to make it easier to recognize at a glance which type of artifact the identification number refers to, SpiraPlan\u00ae uses a system of two-letter prefixes which help identify the type of artifact being displayed. The current prefixes used by the system are: Artifact Prefix Artifact Prefix Product PR Program PG User US Incident Type IT Requirement RQ Incident Priority IP Requirement Step RS Incident Severity IV Test Case TC Workflow WK Test Step TS Workflow Transition WT Test Run TR Custom Property Values PV Test Run Step RS Product Role RX Incident IN Task TK Incident Status IS Test Set TX Custom List CL Document DC Document Type DT Document Folder DF Automation Host AH Build BL Release/Sprint RL Component CP Risk RK Risk Mitigation RM In addition, certain artifacts in the system are displayed with an icon that helps distinguish them from each other, and provides additional context on the state of the artifact: Icon Artifact Description Program Product Summary Requirement Detailed Requirement Use Case Requirement Use Case Scenario Step Folder Test Case with Test Steps Test Case without Test Steps Test Set Test Run Test Step Linked Test Case Test Automation Host Test Configuration Release Iteration / Sprint Component Task Incident Risk Risk Mitigation Source Code Revision Product User Build Artifact has an Attachment","title":"Artifact Naming Conventions"},{"location":"Spira-User-Manual/Incident-Tracking/","text":"Incident Tracking This section outlines how the incident/defect tracking features of SpiraPlan\u00ae can be used to manage key product artifacts during the software development lifecycle. In addition to managing the defects raised during the execution of test cases in the test management module, the Incident Tracker is also a powerful risk/issue/bug tracking system in its own right. When coupled with the product dashboard it is a powerful tool for representing all the key risks and issues associated with a product in a single, graphical format. Unlike a standalone bug/issue tracking tool however, you can trace the incidents/defects back to the test case and the underlying requirement that generated them, giving the product manager unprecedented power in analyzing the \"in-process\" quality of a system during its lifecycle. This power is clearly illustrated in the \"Requirement Incident Count\" pane in the Product Home dashboard (see User/Product Management > Requirements Coverage ). Incident List When you click on the Tracking > Incidents global navigation link, you will initially be taken to the incidents list screen illustrated below: The incident list screen displays all the incidents entered for the current product, in a filterable, sortable grid. The grid displays the incident number together with fields such as incident type (bug, issue, risk, etc.), status (new, open, etc.), priority, name, assigned owner, detection date, detector, closed date, etc. The choice of columns displayed is configurable per-user, per-product, giving extensive flexibility when it comes to viewing and searching incidents. The sidebar on the left gives you quick access to saved filters, along with some useful charts to get an at-a-glance view of incidents for this product. In addition, you can view a more detailed description of the incident (along with a resolution if any) by positioning the mouse pointer over the incident name hyperlink and waiting for the popup \"tooltip\" to appear. If you click on the incident name hyperlink, you will be taken to the incident details page described in Incident Tracking > Incident Details . Clicking on any of the pagination links at the bottom of the page will advance you to the next set of incidents in the list according to the applied filter and sort-order. There is also a drop-down-list at the bottom of the page which allows you to specify how many rows should be displayed in each page, helping accommodate different user preferences. Filtering & Sorting Read about how to create and manage filters, and how to sort the artifact list . New Incident Clicking on the \" New Incident \" button takes you to the new incident screen. This is essentially the same screen as the incident details screen shown in Incident Details except, depending on how the workflow has been configured for your product, certain fields may be disabled. For more details on setting and up configuring workflow for your product, please refer to the SpiraTest Administration Guide . Delete Clicking on the \" Delete \" button deletes the incidents whose check-boxes have been selected in the incident list. Refresh Clicking on the \" Refresh \" button simply reloads the list of incidents; this is useful when new incidents are being added by other users, and you want to make sure you have the most up-to-date list displayed. Show / Hide Columns This drop-down list allows you to change the fields that are displayed in the incident list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner. Edit Each incident in the list has an \" Edit \" button display in its right-most column. When you click this button or just double-click on any of the cells in the row, you change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Save \" buttons are displayed in the last column: If you click \" Edit \" on more than one row, the \" Save \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then update the changes by clicking the one \" Save \" button. Also, if you want to make the same change to multiple rows (e.g. to change five incidents from \"Resolved\" status to \"Closed\"), you can click on the \"fill\" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the \" Edit \" button on the same row as the Filters and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Save \" to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes. Cloning Incidents To create a clone of an existing incident or set of incidents, simply select the check-boxes of the incidents you want to copy and then click \" Clone \". This will make a copy of the current incident with its name prefixed 'Copy of ....' to distinguish itself from the original. Any file attachments will also be copied along with the incident itself. Exporting Incidents To export an incident or set of incidents from the current product to another product in the system, select the check-boxes of the incident(s) you want to export and then click the Tools > \" Export to Product \". This will then bring up a list of possible destination products: Once you have chosen the destination product and clicked the \" Export \" button, the incidents will be exported from the current product to the destination product. Any file attachments will also be copied to the destination product along with the incidents. Creating Requirement from Incidents Sometimes you may have enhancements logged that now need to be converted into formal requirements. This may be useful for sprint planning or so test cases and tasks can be made from it. There is a shortcut to create new requirements from selected incidents (1 or more); and it automatically creates an association between each new requirement and the corresponding incident. 1 To use this feature: select the checkboxes of the incidents you want to convert click Tools > Convert Into Requirements Printing Items To quickly print a single incident or list of incidents you can select the items' checkboxes and then click Tools > Print Items. This will display a popup window containing a printable version of the selected items. You can also save the report in a variety of common formats from the same Tools menu. Incident Details When you click on an incident item in the incident list, or click the \" New Incident \" button (as described in Incident List ), you are taken to the incident details page illustrated below: This page is made up of three areas: the left pane is the navigation window where you can quickly jump to other incidents; the upper part of the right pane contains the incident name and key information about it (it's ID number, and what type of incident it is), as well as the current status (see below); and the bottom part of the right pane displays different information associated with the incident across a number of tabs. The navigation pane consists of a link that will take you back to the incidents list, as well as a list of the peer incidents to the one selected. This latter list is useful as a navigation shortcut; you can quickly view the peer incidents by clicking on the navigation links without having to first return to the incidents list page. The navigation list can be switched between four different modes: The list of incidents matching the current filter The list of all incidents, irrespective of the current filter The list of incidents assigned to the current user The list of incidents detected/found by the current user In addition to the left hand navigation, you can enter a specific incident number in the text-box in the toolbar and click the \" Find \" button. In the same toolbar, there is also a shortcut for creating a copy of the current by clicking the \" Clone \" button. Editing an Existing Incident If you are editing an existing incident, the fields that are available and the fields that are required will depend on your stage in the incident workflow. For example an open incident might not require a \"Resolved Version\" whereas a resolved incident may well. The types of change allowed and the email notifications that are sent will depend on how your product administrator has setup the system for you. Administrators should refer to the SpiraPlan Administration Guide for details on configuring the incident workflows to meet their needs. Depending on the user's role and whether they are listed as the owner or detector of the incident or not, the dropdown next to the incident's current status shows the allowed workflow operations: These workflow transitions allow the user to move the incident from one status to another. For example when the incident is in the Assigned status, you will be given the options to: Resolve the Incident -- changes status to \"Resolved\" Unable to Reproduce -- changes the status to \"Not Reproducible\" Duplicate Incident - changes the status to \"Duplicate\" After changing the status of the incident by clicking on the link, you can then fill in the additional fields that are now enabled and/or required. Once you've made the changes to the appropriate incident fields, you can click \" Save \" or one of the options from the \" Save \" dropdown list to commit the changes or \" Refresh \" to discard the changes and reload the incident from the database. Please note that if digital signatures have been enabled for a particular workflow operation (and therefore a digital signature is required to confirm the status change. Workflow operations requiring a digital signature are marked with a padlock icon as in the example below: On attempting to save changes made after clicking a workflow operation that requires a digital signature you will be presented with a popup similar to the one below (which is for a requirement): You can print the current incident by clicking Tools > Print, which will display a printable version of the page in a separate window. Alternatively, you can export the incident to a number of formats by selecting the appropriate option from the Tools menu. Inserting a New Incident If you are creating a new incident, the fields that are available and the fields that are required will depend on how your product has been for configured. For example, some products may require that all incidents be started with Status=New and Type=Incident, others may allow you to specify the incident type. The types of change allowed will depend on how your product administrator has setup the system for you. Administrators should refer to the SpiraPlan Administration Guide for details on configuring the incident workflows to meet their needs. Once you've filled out the appropriate incident fields, you can either click \" Save \" or one of the options from the \" Save \" dropdown list to commit the changes or click on \" Back to Incident List \" to discard the insertion and return back to the incident list. Overview - Comments The Comments section allows users to add and view discussions related to the incident: Existing comments are displayed by date (either newest-first or oldest-first) above the text box. To add a comment to the incident, enter your text into the textbox, then click the \" Add Comment \" button to save. Overview -- Dates and Times This section displays the general schedule and completion status of the specific incident. You can enter/edit: the start-date (this gets set automatically when you add the incident to a release/sprint from the planning board) closed-date (i.e. the due-date) estimated effort actual effort remaining effort From the above values, the system will display the calculated percent completion, progress indicator and projected (final) effort. Any custom date fields set up by the system administrator or product owner will also appear in this section (as shown below with the Review Date field). Attachments Read about how the attachments tab works Associations You can associate other incidents, requirements, test steps, tasks, and risks to an incident from this tab. The incidents and tasks in this list are ones that a user has decided are relevant to the current one and has created a direct link between them. In the case of requirements and test cases, the association can be either due to the creator of an incident directly linking the incident to the requirement or test step, or it can be the result of a tester executing a test-run and creating an incident during the test run. In this latter case, the check-box to the left of the association will be unavailable as the link is not editable. Read more about how to manage and add associations to this artifact History Read about how the history tab works Creating a Requirement from an Incident Sometimes you may have an enhancement logged that now needs to be converted into a formal requirement. This may be useful for sprint planning or so test cases and tasks can be made from it. There is a shortcut to create a new requirement from the current incident; and it automatically creates an association between the new requirement and the incident. 1 To use this feature: go to the Associations tab click the Add button at the bottom right of the panel that displays click the Create Requirement from this Incident button Emailing Read about emailing an incident to colleagues . Incident Followers Read about how to add and manage followers to an artifact Incident Board The incident board is an alternative to the incident list page designed to let you view the incidents planned for the current product. You can access this feature by clicking on the Board icon in the top-right of the Incidents list page. You can switch back to the Incident list page by clicking on the Table view. The incident board has the following different display modes: All Releases By Release By Priority By Status By Person Release By Sprint By Priority By Status By Person Sprint By Priority By Status By Person Each of these views is described below: Incidents -- By Priority This view is designed to let you see the list of planned incidents organized by priority. Each of the possible priority values is displayed on the left-hand side and the incidents displayed in the same row on the right: The top section will contain the list of incidents that are not assigned a priority, with the other sections containing the incidents that have been assigned to the specific priority. Incidents -- By Status This view is designed to let you see the incidents in the current product / release / sprint organized by their status. Each incident status (not started, in progress, completed, blocked, deferred) is displayed as a heading, with the incidents displayed in the same column underneath: You can click on the expand/collapse icons to hide any resources that are not relevant. Depending on the view (all releases, release, or sprint), there may be sections with the release and sprint name. You can drag and drop the incidents between statuses or to/from the release/sprint backlog. Any incidents not assigned to a release/sprint will be listed in the (Unassigned Items) section at the top. Incidents - By Person This view is designed to let you see the incidents in the current product / release / sprint organized by resource / person. Each of the users that is a member of the current product is displayed as a heading, with the incidents displayed in the same column underneath: You can click on the expand/collapse icons to hide any resources that are not relevant. The system will display a progress bar for each resource to illustrate the allocation for that resource. Any resource that has a progress bar that is completely green has been fully scheduled and should not have any additional incidents assigned. If the progress bar for that resource turns red, it means that they have been over-scheduled and you need to reassign some of the incidents. Depending on the view (all releases, release, or sprint), there may be sections with the release and sprint name; they contain incidents that are scheduled for the current release or sprint but have not yet been assigned to a resource. You can drag and drop the incidents between resources or to/from the release/sprint backlog. Any incidents not assigned to a resource and release/sprint will be listed in the (Unassigned Items) section at the top. Incidents - By Release This view is only available when you are displaying the incident board for 'all releases'. Each of the active releases defined for the current product is displayed as a heading, with the incidents displayed in the same column underneath You can drag and drop the incidents between the different releases. Once the incident has been added to the release, the utilized effort for the release will increase, and the available effort will decrease by the same amount. Note: The system will allow you to assign more incidents to a release than it is possible to complete, however this will result in a negative value for 'available effort'. If this happens, the \"Available Effort\" value will be displayed in red, and you need to rebalance the items, extend the release length or add product personnel resources to the release. Clicking on the release hyperlinks in the headers will switch the incident board into the release view. Incidents - By Sprint This view is only available when you are displaying the incident board for a specific release. Each of the sprints defined for the current release is displayed as a heading, with the incidents displayed in the same column underneath. This view is commonly used in Scrum products: You can drag and drop the incidents between the different sprints. Once the incident has been added to the sprint, the utilized effort for the sprint will increase, and the available effort will decrease by the same amount. Note: The system will allow you to assign more incidents to a sprint than it is possible to complete, however this will result in a negative value for 'available effort'. If this happens, the \"Available Effort\" value will be displayed in red, and you need to rebalance the items, extend the sprint length or add product personnel resources to the sprint. Clicking on the sprint hyperlinks in the headers will switch the incident board into the sprint view. To create a requirement from an incident, the user needs must have the permission to create requirements (which makes sense). The creation process does not enforce the relevant requirement workflow to make sure that all required fields are filled in. What gets copied over from the incident to the new requirement: Name Description Owner \"Detected By\" becomes Author Component (as long as only a single component is selected on the incident) \"Resolved Release\" becomes Release Priority becomes Importance (using an intelligent name match) \"Estimated Effort\" becomes Estimate (converting hours into points) Custom Fields of type list or multilist that use the same list and have the same name (case insensitive) Comments (using the name of the original author, but the comment creation date is the current date) Auto-link any attachments linked to the incident to the requirement too \u21a9 \u21a9","title":"Incident Tracking"},{"location":"Spira-User-Manual/Incident-Tracking/#incident-tracking","text":"This section outlines how the incident/defect tracking features of SpiraPlan\u00ae can be used to manage key product artifacts during the software development lifecycle. In addition to managing the defects raised during the execution of test cases in the test management module, the Incident Tracker is also a powerful risk/issue/bug tracking system in its own right. When coupled with the product dashboard it is a powerful tool for representing all the key risks and issues associated with a product in a single, graphical format. Unlike a standalone bug/issue tracking tool however, you can trace the incidents/defects back to the test case and the underlying requirement that generated them, giving the product manager unprecedented power in analyzing the \"in-process\" quality of a system during its lifecycle. This power is clearly illustrated in the \"Requirement Incident Count\" pane in the Product Home dashboard (see User/Product Management > Requirements Coverage ).","title":"Incident Tracking"},{"location":"Spira-User-Manual/Incident-Tracking/#incident-list","text":"When you click on the Tracking > Incidents global navigation link, you will initially be taken to the incidents list screen illustrated below: The incident list screen displays all the incidents entered for the current product, in a filterable, sortable grid. The grid displays the incident number together with fields such as incident type (bug, issue, risk, etc.), status (new, open, etc.), priority, name, assigned owner, detection date, detector, closed date, etc. The choice of columns displayed is configurable per-user, per-product, giving extensive flexibility when it comes to viewing and searching incidents. The sidebar on the left gives you quick access to saved filters, along with some useful charts to get an at-a-glance view of incidents for this product. In addition, you can view a more detailed description of the incident (along with a resolution if any) by positioning the mouse pointer over the incident name hyperlink and waiting for the popup \"tooltip\" to appear. If you click on the incident name hyperlink, you will be taken to the incident details page described in Incident Tracking > Incident Details . Clicking on any of the pagination links at the bottom of the page will advance you to the next set of incidents in the list according to the applied filter and sort-order. There is also a drop-down-list at the bottom of the page which allows you to specify how many rows should be displayed in each page, helping accommodate different user preferences.","title":"Incident List"},{"location":"Spira-User-Manual/Incident-Tracking/#filtering-sorting","text":"Read about how to create and manage filters, and how to sort the artifact list .","title":"Filtering &amp; Sorting"},{"location":"Spira-User-Manual/Incident-Tracking/#new-incident","text":"Clicking on the \" New Incident \" button takes you to the new incident screen. This is essentially the same screen as the incident details screen shown in Incident Details except, depending on how the workflow has been configured for your product, certain fields may be disabled. For more details on setting and up configuring workflow for your product, please refer to the SpiraTest Administration Guide .","title":"New Incident"},{"location":"Spira-User-Manual/Incident-Tracking/#delete","text":"Clicking on the \" Delete \" button deletes the incidents whose check-boxes have been selected in the incident list.","title":"Delete"},{"location":"Spira-User-Manual/Incident-Tracking/#refresh","text":"Clicking on the \" Refresh \" button simply reloads the list of incidents; this is useful when new incidents are being added by other users, and you want to make sure you have the most up-to-date list displayed.","title":"Refresh"},{"location":"Spira-User-Manual/Incident-Tracking/#show-hide-columns","text":"This drop-down list allows you to change the fields that are displayed in the incident list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner.","title":"Show / Hide Columns"},{"location":"Spira-User-Manual/Incident-Tracking/#edit","text":"Each incident in the list has an \" Edit \" button display in its right-most column. When you click this button or just double-click on any of the cells in the row, you change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Save \" buttons are displayed in the last column: If you click \" Edit \" on more than one row, the \" Save \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then update the changes by clicking the one \" Save \" button. Also, if you want to make the same change to multiple rows (e.g. to change five incidents from \"Resolved\" status to \"Closed\"), you can click on the \"fill\" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the \" Edit \" button on the same row as the Filters and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Save \" to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes.","title":"Edit"},{"location":"Spira-User-Manual/Incident-Tracking/#cloning-incidents","text":"To create a clone of an existing incident or set of incidents, simply select the check-boxes of the incidents you want to copy and then click \" Clone \". This will make a copy of the current incident with its name prefixed 'Copy of ....' to distinguish itself from the original. Any file attachments will also be copied along with the incident itself.","title":"Cloning Incidents"},{"location":"Spira-User-Manual/Incident-Tracking/#exporting-incidents","text":"To export an incident or set of incidents from the current product to another product in the system, select the check-boxes of the incident(s) you want to export and then click the Tools > \" Export to Product \". This will then bring up a list of possible destination products: Once you have chosen the destination product and clicked the \" Export \" button, the incidents will be exported from the current product to the destination product. Any file attachments will also be copied to the destination product along with the incidents.","title":"Exporting Incidents"},{"location":"Spira-User-Manual/Incident-Tracking/#creating-requirement-from-incidents","text":"Sometimes you may have enhancements logged that now need to be converted into formal requirements. This may be useful for sprint planning or so test cases and tasks can be made from it. There is a shortcut to create new requirements from selected incidents (1 or more); and it automatically creates an association between each new requirement and the corresponding incident. 1 To use this feature: select the checkboxes of the incidents you want to convert click Tools > Convert Into Requirements","title":"Creating Requirement from Incidents"},{"location":"Spira-User-Manual/Incident-Tracking/#printing-items","text":"To quickly print a single incident or list of incidents you can select the items' checkboxes and then click Tools > Print Items. This will display a popup window containing a printable version of the selected items. You can also save the report in a variety of common formats from the same Tools menu.","title":"Printing Items"},{"location":"Spira-User-Manual/Incident-Tracking/#incident-details","text":"When you click on an incident item in the incident list, or click the \" New Incident \" button (as described in Incident List ), you are taken to the incident details page illustrated below: This page is made up of three areas: the left pane is the navigation window where you can quickly jump to other incidents; the upper part of the right pane contains the incident name and key information about it (it's ID number, and what type of incident it is), as well as the current status (see below); and the bottom part of the right pane displays different information associated with the incident across a number of tabs. The navigation pane consists of a link that will take you back to the incidents list, as well as a list of the peer incidents to the one selected. This latter list is useful as a navigation shortcut; you can quickly view the peer incidents by clicking on the navigation links without having to first return to the incidents list page. The navigation list can be switched between four different modes: The list of incidents matching the current filter The list of all incidents, irrespective of the current filter The list of incidents assigned to the current user The list of incidents detected/found by the current user In addition to the left hand navigation, you can enter a specific incident number in the text-box in the toolbar and click the \" Find \" button. In the same toolbar, there is also a shortcut for creating a copy of the current by clicking the \" Clone \" button.","title":"Incident Details"},{"location":"Spira-User-Manual/Incident-Tracking/#editing-an-existing-incident","text":"If you are editing an existing incident, the fields that are available and the fields that are required will depend on your stage in the incident workflow. For example an open incident might not require a \"Resolved Version\" whereas a resolved incident may well. The types of change allowed and the email notifications that are sent will depend on how your product administrator has setup the system for you. Administrators should refer to the SpiraPlan Administration Guide for details on configuring the incident workflows to meet their needs. Depending on the user's role and whether they are listed as the owner or detector of the incident or not, the dropdown next to the incident's current status shows the allowed workflow operations: These workflow transitions allow the user to move the incident from one status to another. For example when the incident is in the Assigned status, you will be given the options to: Resolve the Incident -- changes status to \"Resolved\" Unable to Reproduce -- changes the status to \"Not Reproducible\" Duplicate Incident - changes the status to \"Duplicate\" After changing the status of the incident by clicking on the link, you can then fill in the additional fields that are now enabled and/or required. Once you've made the changes to the appropriate incident fields, you can click \" Save \" or one of the options from the \" Save \" dropdown list to commit the changes or \" Refresh \" to discard the changes and reload the incident from the database. Please note that if digital signatures have been enabled for a particular workflow operation (and therefore a digital signature is required to confirm the status change. Workflow operations requiring a digital signature are marked with a padlock icon as in the example below: On attempting to save changes made after clicking a workflow operation that requires a digital signature you will be presented with a popup similar to the one below (which is for a requirement): You can print the current incident by clicking Tools > Print, which will display a printable version of the page in a separate window. Alternatively, you can export the incident to a number of formats by selecting the appropriate option from the Tools menu.","title":"Editing an Existing Incident"},{"location":"Spira-User-Manual/Incident-Tracking/#inserting-a-new-incident","text":"If you are creating a new incident, the fields that are available and the fields that are required will depend on how your product has been for configured. For example, some products may require that all incidents be started with Status=New and Type=Incident, others may allow you to specify the incident type. The types of change allowed will depend on how your product administrator has setup the system for you. Administrators should refer to the SpiraPlan Administration Guide for details on configuring the incident workflows to meet their needs. Once you've filled out the appropriate incident fields, you can either click \" Save \" or one of the options from the \" Save \" dropdown list to commit the changes or click on \" Back to Incident List \" to discard the insertion and return back to the incident list.","title":"Inserting a New Incident"},{"location":"Spira-User-Manual/Incident-Tracking/#overview-comments","text":"The Comments section allows users to add and view discussions related to the incident: Existing comments are displayed by date (either newest-first or oldest-first) above the text box. To add a comment to the incident, enter your text into the textbox, then click the \" Add Comment \" button to save.","title":"Overview - Comments"},{"location":"Spira-User-Manual/Incident-Tracking/#overview-dates-and-times","text":"This section displays the general schedule and completion status of the specific incident. You can enter/edit: the start-date (this gets set automatically when you add the incident to a release/sprint from the planning board) closed-date (i.e. the due-date) estimated effort actual effort remaining effort From the above values, the system will display the calculated percent completion, progress indicator and projected (final) effort. Any custom date fields set up by the system administrator or product owner will also appear in this section (as shown below with the Review Date field).","title":"Overview -- Dates and Times"},{"location":"Spira-User-Manual/Incident-Tracking/#attachments","text":"Read about how the attachments tab works","title":"Attachments"},{"location":"Spira-User-Manual/Incident-Tracking/#associations","text":"You can associate other incidents, requirements, test steps, tasks, and risks to an incident from this tab. The incidents and tasks in this list are ones that a user has decided are relevant to the current one and has created a direct link between them. In the case of requirements and test cases, the association can be either due to the creator of an incident directly linking the incident to the requirement or test step, or it can be the result of a tester executing a test-run and creating an incident during the test run. In this latter case, the check-box to the left of the association will be unavailable as the link is not editable. Read more about how to manage and add associations to this artifact","title":"Associations"},{"location":"Spira-User-Manual/Incident-Tracking/#history","text":"Read about how the history tab works","title":"History"},{"location":"Spira-User-Manual/Incident-Tracking/#creating-a-requirement-from-an-incident","text":"Sometimes you may have an enhancement logged that now needs to be converted into a formal requirement. This may be useful for sprint planning or so test cases and tasks can be made from it. There is a shortcut to create a new requirement from the current incident; and it automatically creates an association between the new requirement and the incident. 1 To use this feature: go to the Associations tab click the Add button at the bottom right of the panel that displays click the Create Requirement from this Incident button","title":"Creating a Requirement from an Incident"},{"location":"Spira-User-Manual/Incident-Tracking/#emailing","text":"Read about emailing an incident to colleagues .","title":"Emailing"},{"location":"Spira-User-Manual/Incident-Tracking/#incident-followers","text":"Read about how to add and manage followers to an artifact","title":"Incident Followers"},{"location":"Spira-User-Manual/Incident-Tracking/#incident-board","text":"The incident board is an alternative to the incident list page designed to let you view the incidents planned for the current product. You can access this feature by clicking on the Board icon in the top-right of the Incidents list page. You can switch back to the Incident list page by clicking on the Table view. The incident board has the following different display modes: All Releases By Release By Priority By Status By Person Release By Sprint By Priority By Status By Person Sprint By Priority By Status By Person Each of these views is described below:","title":"Incident Board"},{"location":"Spira-User-Manual/Incident-Tracking/#incidents-by-priority","text":"This view is designed to let you see the list of planned incidents organized by priority. Each of the possible priority values is displayed on the left-hand side and the incidents displayed in the same row on the right: The top section will contain the list of incidents that are not assigned a priority, with the other sections containing the incidents that have been assigned to the specific priority.","title":"Incidents -- By Priority"},{"location":"Spira-User-Manual/Incident-Tracking/#incidents-by-status","text":"This view is designed to let you see the incidents in the current product / release / sprint organized by their status. Each incident status (not started, in progress, completed, blocked, deferred) is displayed as a heading, with the incidents displayed in the same column underneath: You can click on the expand/collapse icons to hide any resources that are not relevant. Depending on the view (all releases, release, or sprint), there may be sections with the release and sprint name. You can drag and drop the incidents between statuses or to/from the release/sprint backlog. Any incidents not assigned to a release/sprint will be listed in the (Unassigned Items) section at the top.","title":"Incidents -- By Status"},{"location":"Spira-User-Manual/Incident-Tracking/#incidents-by-person","text":"This view is designed to let you see the incidents in the current product / release / sprint organized by resource / person. Each of the users that is a member of the current product is displayed as a heading, with the incidents displayed in the same column underneath: You can click on the expand/collapse icons to hide any resources that are not relevant. The system will display a progress bar for each resource to illustrate the allocation for that resource. Any resource that has a progress bar that is completely green has been fully scheduled and should not have any additional incidents assigned. If the progress bar for that resource turns red, it means that they have been over-scheduled and you need to reassign some of the incidents. Depending on the view (all releases, release, or sprint), there may be sections with the release and sprint name; they contain incidents that are scheduled for the current release or sprint but have not yet been assigned to a resource. You can drag and drop the incidents between resources or to/from the release/sprint backlog. Any incidents not assigned to a resource and release/sprint will be listed in the (Unassigned Items) section at the top.","title":"Incidents - By Person"},{"location":"Spira-User-Manual/Incident-Tracking/#incidents-by-release","text":"This view is only available when you are displaying the incident board for 'all releases'. Each of the active releases defined for the current product is displayed as a heading, with the incidents displayed in the same column underneath You can drag and drop the incidents between the different releases. Once the incident has been added to the release, the utilized effort for the release will increase, and the available effort will decrease by the same amount. Note: The system will allow you to assign more incidents to a release than it is possible to complete, however this will result in a negative value for 'available effort'. If this happens, the \"Available Effort\" value will be displayed in red, and you need to rebalance the items, extend the release length or add product personnel resources to the release. Clicking on the release hyperlinks in the headers will switch the incident board into the release view.","title":"Incidents - By Release"},{"location":"Spira-User-Manual/Incident-Tracking/#incidents-by-sprint","text":"This view is only available when you are displaying the incident board for a specific release. Each of the sprints defined for the current release is displayed as a heading, with the incidents displayed in the same column underneath. This view is commonly used in Scrum products: You can drag and drop the incidents between the different sprints. Once the incident has been added to the sprint, the utilized effort for the sprint will increase, and the available effort will decrease by the same amount. Note: The system will allow you to assign more incidents to a sprint than it is possible to complete, however this will result in a negative value for 'available effort'. If this happens, the \"Available Effort\" value will be displayed in red, and you need to rebalance the items, extend the sprint length or add product personnel resources to the sprint. Clicking on the sprint hyperlinks in the headers will switch the incident board into the sprint view. To create a requirement from an incident, the user needs must have the permission to create requirements (which makes sense). The creation process does not enforce the relevant requirement workflow to make sure that all required fields are filled in. What gets copied over from the incident to the new requirement: Name Description Owner \"Detected By\" becomes Author Component (as long as only a single component is selected on the incident) \"Resolved Release\" becomes Release Priority becomes Importance (using an intelligent name match) \"Estimated Effort\" becomes Estimate (converting hours into points) Custom Fields of type list or multilist that use the same list and have the same name (case insensitive) Comments (using the name of the original author, but the comment creation date is the current date) Auto-link any attachments linked to the incident to the requirement too \u21a9 \u21a9","title":"Incidents - By Sprint"},{"location":"Spira-User-Manual/Mobile-Access/","text":"Mobile Access This section describes the functionality available in SpiraPlan\u00ae when accessing the system from a mobile device such as an iOS\u00ae smartphone / tablet (iPod Touch\u00ae, iPhone\u00ae and iPad\u00ae) or an Android\u00ae smartphone / tablet (Galaxy, Nexus, Droid, Kindle Fire\u00ae, etc.). The application has been designed to be fully \"responsive\", which means that it will dynamically rearrange the page based on the screen-sized used, to create an optimal experience on any device. As much as possible the application provides a consistent set of functions for any device. However, in order to make using the application on smaller devices as easy as possible, necessarily the experience on say, a smartphone, is less complete than on a desktop. Whenever this user guide has referred to performing an action by 'clicking' if the same functionality is available, then 'tapping' on a mobile device will yield the same result. Due to the limitations of mobile devices, hovering over an element to display a \"tooltip\" is not possible. Below, some illustrations of how the application looks at different screen sizes are provided. My Page Desktop (a tablet in landscape mode will appear largely identical) Table in portrait mode Smartphone in portrait mode My Profile Desktop (a tablet in landscape mode will appear largely identical) Tablet in portrait mode Smartphone in portrait mode Example List Page Desktop (a tablet in landscape mode will appear largely identical) Tablet in portrait mode Smartphone in portrait mode Example Details Page Desktop (a tablet in landscape mode will appear largely identical) Tablet in portrait mode Smartphone in portrait mode Test Execution Desktop (a tablet in landscape mode will appear largely identical) Tablet in portrait mode Smartphone in portrait mode","title":"Mobile Access"},{"location":"Spira-User-Manual/Mobile-Access/#mobile-access","text":"This section describes the functionality available in SpiraPlan\u00ae when accessing the system from a mobile device such as an iOS\u00ae smartphone / tablet (iPod Touch\u00ae, iPhone\u00ae and iPad\u00ae) or an Android\u00ae smartphone / tablet (Galaxy, Nexus, Droid, Kindle Fire\u00ae, etc.). The application has been designed to be fully \"responsive\", which means that it will dynamically rearrange the page based on the screen-sized used, to create an optimal experience on any device. As much as possible the application provides a consistent set of functions for any device. However, in order to make using the application on smaller devices as easy as possible, necessarily the experience on say, a smartphone, is less complete than on a desktop. Whenever this user guide has referred to performing an action by 'clicking' if the same functionality is available, then 'tapping' on a mobile device will yield the same result. Due to the limitations of mobile devices, hovering over an element to display a \"tooltip\" is not possible. Below, some illustrations of how the application looks at different screen sizes are provided.","title":"Mobile Access"},{"location":"Spira-User-Manual/Mobile-Access/#my-page","text":"Desktop (a tablet in landscape mode will appear largely identical) Table in portrait mode Smartphone in portrait mode","title":"My Page"},{"location":"Spira-User-Manual/Mobile-Access/#my-profile","text":"Desktop (a tablet in landscape mode will appear largely identical) Tablet in portrait mode Smartphone in portrait mode","title":"My Profile"},{"location":"Spira-User-Manual/Mobile-Access/#example-list-page","text":"Desktop (a tablet in landscape mode will appear largely identical) Tablet in portrait mode Smartphone in portrait mode","title":"Example List Page"},{"location":"Spira-User-Manual/Mobile-Access/#example-details-page","text":"Desktop (a tablet in landscape mode will appear largely identical) Tablet in portrait mode Smartphone in portrait mode","title":"Example Details Page"},{"location":"Spira-User-Manual/Mobile-Access/#test-execution","text":"Desktop (a tablet in landscape mode will appear largely identical) Tablet in portrait mode Smartphone in portrait mode","title":"Test Execution"},{"location":"Spira-User-Manual/Planning-Board/","text":"Planning Board The SpiraPlan planning board is a great way to visualize the backlog items (requirements, tasks, test cases and incidents) planned for your product. Based on the principles of agile methodologies such as Scrum and Kanban, the planning board is a great tool for planning agile products. To access the SpiraPlan product planning board, select a product and go to Artifacts > Planning Board and the following screen will be displayed: To access the SpiraTest program planning board, select a program and go to the Planning menu and the following screen will be displayed: We shall first discuss the product planning board, and then we will cover the program planning board. By default, the system will display the product planning board in the product backlog view, with the backlog organized by component. You can change the view by click on the ' Planning' drop down list: Product Backlog -- This displays a list of all the backlog items that are not currently scheduled for a specific release or sprint. The items can be organized by component, package, priority or person. All Releases -- This displays a list of all the releases as well as the product backlog and is designed to let you easily move items from the product backlog to a specific release. Release View -- This displays a list of all the backlog items that are scheduled for the selected release and lets you organize them by sprint, status, or person. Sprint View - This displays a list of all the backlog items that are scheduled for the selected sprint (also known as a Sprint in some methodologies) and lets you organize them by status, or person. The ' Group By' dropdown list is used to change how the view is organized. This list of options available in the 'Group By' dropdown will depend on the view being displayed. The planning board will include the following backlog items: Requirements and Incidents -- these are displayed as 'story cards' and are the primary items that can be moved in the planning board. Tasks and Test Cases -- these are secondary artifacts and are considered part of a requirement. So within the planning board they are displayed as being part of a specific requirement, and if you move a requirement, the associated tasks and test cases will move as well. The backlog items themselves can be configured to display in different ways. The choice of display will depend on how many backlog items you have to display, how large your screen is and what information you need. The display is controlled by the four checkboxes at the top of the planning board: Standard View -- This is the view that will be displayed when 'detailed view' is unchecked. It displays the minimum necessary information in each story card, but maximizes how many story cards can be displayed on the screen. Each story card will contain the icon, ID, name, user avatar, and estimate (in story points) of the requirement. Detailed View -- This view includes additional information in each story card. It adds the long description, a progress bar indicator (that indicates what percentage of the item has been completed) and for requirement artifacts it includes the number of tasks (red background) and number of test cases (yellow background) in the two small boxes under the user. Numerical rankings are also shown. The ranking numbers go from left to right and top to bottom. They indicate the relative ordering and priority of the various story cards and defects. Incidents -- The planning board will always include requirement backlog items, but because the number of incidents can be very large, there is the option to include/exclude them from the planning board. When you have the \"Incidents\" checkbox selected, incidents will appear in the planning board with their own story card format. The main difference is that the effort is recorded in hours rather than story points: Tasks -- When the Tasks option is selected, the planning board will display the tasks associated with the requirements as part of each story card. Each task will be displayed with its ID and a miniature progress bar: Test Cases -- When the Test Cases option is selected, the planning board will display the test cases associated with the requirements as part of each story card. Each test case will be displayed with its ID and a miniature test coverage bar-chart: Regardless of the view, backlog items can be moved using \"drag and drop\" between the different parts of the planning board. To drag and drop multiple items, you should first select the items so that they are highlighted. Then you can drag and drop the entire selection: You can add new requirement backlog items by clicking the \" + \" button. This will display the following dialog box: On this screen you can enter the fields for a new requirement, click \" Add Requirement \" and the requirement will be added to the appropriate section of the planning board. In some of the views of the planning board there will be more data that can be displayed on one screen, in which case you will be able to scroll the planning board left and right using the specially provided arrow buttons. Each of the views is now described in more detail in the sections below. Product Backlog Planning The product backlog view is designed to let you view the backlog items that have been created for the product and have not yet been assigned to a specific release or sprint. The backlog items can be requirements or incidents, and in the case of requirements, you can see the tasks and test cases associated with a specific requirement. In this view you can drag and drop the backlog items from one section (e.g. component) to another and also rearrange the backlog items in their relative order. By default, the items are sorted according to their priority/importance value (the color of which is indicated in the left-hand side of the story card), but you can drag and drop them into a different order. This is particularly useful when you have several items of the same priority and you need to rank them. This process is typically called backlog grooming . Product Backlog -- By Component This view is designed to let you see the product backlog organized by Component. Each of the components is displayed on the left-hand side and the backlog items displayed in the same row on the right. The backlog items can be requirements (with associated tasks and test cases) or incidents. The top section will contain the list of items that are not assigned to a component, with the other sections containing the items that belong to the specific component. Product Backlog -- By Package This view is designed to let you see the product backlog organized by requirement package (a summary requirement). Each of the packages is displayed on the left-hand side in a hierarchical structure, and the backlog items displayed in the same row on the right. The backlog items can be child requirements (with associated tasks and test cases) or incidents. In this view the incidents are the ones linked to the package through an association. The top section will contain the list of items that are not assigned to a package, with the other sections containing the items that are children of the specific package. Product Backlog -- By Priority This view is designed to let you see the product backlog organized by requirement importance. Each of the possible importance values is displayed on the left-hand side and the backlog items displayed in the same row on the right. The backlog items in this view will only be requirements (with associated tasks and test cases). The top section will contain the list of items that are not assigned a priority, with the other sections containing the items that have been assigned to the specific priority. Product Backlog -- By Status This view is designed to let you see the product backlog organized by requirement status. Each of the possible status values (for an unscheduled item) is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view will only be requirements (with associated tasks and test cases). This view is commonly called a Kanban board: Each of the vertical sections is one of the requirements' statuses, in order of the requirement lifecycle (Requested > Accepted). Once a requirement is assigned to a release or sprint it will come automatically 'Planned' and not appear in this view. You can drag and drop the requirements between the different statuses. Release Planning The 'All Releases' option lets you view all of the backlog items that have already been assigned to a release - and are therefore not in the product backlog. The backlog items can be requirements or incidents, and in the case of requirements, you can see the tasks and test cases associated with a specific requirement. The lower section of the board allows you to view the items by either by release, priority, status, or person. Each section below will discuss each option in turn. Release Planning -- By Release This release planning view is designed to let you view the backlog items that have been created for the product and associate them with different releases defined for the product The 'Unassigned Items' section at the top allows you to see all the items not currently planned, and you can then drag and drop them into one of the lower sections that correspond to a specific release. Using the scroll arrows you can cycle through the releases and move any items from one release to another. The header of each release section shows the overall progress and utilization of the release: Clicking on the Release hyperlink will switch the planning board into the Release Backlog view described below. Release Planning -- By Priority This view is designed to let you see the list of planned backlog items, organized by requirement importance. Each of the possible importance values is displayed on the left-hand side and the backlog items displayed in the same row on the right. The backlog items in this view will only be requirements (with associated tasks and test cases). The top section will contain the list of items that are not assigned a priority, with the other sections containing the items that have been assigned to the specific priority. Release Planning -- By Status This view is designed to let you see the product planned items organized by requirement status. Each of the possible status values (for a planned item) is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view will only be requirements (with associated tasks and test cases). This view is commonly called a Kanban board: Each of the vertical sections is one of the requirements' statuses, in order of the requirement lifecycle (Planned > Completed). You can click on the expand/collapse icons to hide any statuses that are not used. You can drag and drop the requirements between the different statuses. If you have the planning options enabled to have requirements status' automatically update based on changes to the associated tasks and test cases, then items will automatically move between the statuses based on tasks being completed and test cases being executed. Release Planning -- By Person This view is designed to let you see the product planned items organized by resource / person. Each of the users that is a member of the current release is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view can be either requirements (with associated tasks and test cases) or incidents. You can click on the expand/collapse icons to hide any resources that are not relevant. Above the resource headings there is a section with the release name; that contains backlog items that are scheduled for the current release but have not yet been assigned to a resource. You can drag and drop the backlog items between resources or to/from the release backlog. Any backlog items not assigned to a resource and release will be listed in the (Unassigned Items) section at the top. Release Backlog Planning The release backlog view is designed to let you view the backlog items that have been assigned to the selected release. You can always see the items not currently assigned to any release by expanding the 'Unassigned Items' section and then drag those items into the current release. The lower section of the board allows you to segment the items by either iteration/sprint (typically used in Scrum ), by status (typically used in Kanban ), or by person. Release Backlog -- By Sprint This view is designed to let you see the release backlog organized by iteration / sprint. Each of the sprints defined for the current release is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view can be either requirements (with associated tasks and test cases) or incidents. This view is commonly called a Scrum board: You can drag and drop the requirements between the different sprints. If you schedule a requirement for a specific sprint, all the child tasks that have not yet been started, will follow the parent requirement in being associated with the sprint. Once the backlog item has been added to the sprint, the utilized effort for the sprint will increase, and the available effort will decrease by the same amount. Note: The system will allow you to assign more backlog items to an sprint than it is possible to complete, however this will result in a negative value for 'available effort'. If this happens, the \"Available Effort\" value will be displayed in red, and you need to rebalance the items, extend the sprint length or add product personnel resources to the sprint. Clicking on the Sprint hyperlinks in the headers will switch the planning board into the Sprint Backlog view described below. Release Backlog -- By Status This view is designed to let you see the release backlog organized by requirement status. Each of the possible status values (for a planned item) is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view will only be requirements (with associated tasks and test cases). This view is commonly called a Kanban board: Each of the vertical sections is one of the requirements' statuses, in order of the requirement lifecycle (Planned > Completed). You can click on the expand/collapse icons to hide any statuses that are not used. You can drag and drop the requirements between the different statuses. If you have the planning options enabled to have requirements status' automatically update based on changes to the associated tasks and test cases, then items will automatically move between the statuses based on tasks being completed and test cases being executed. Release Backlog -- By Person This view is designed to let you see the release backlog organized by resource / person. Each of the users that is a member of the current release is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view can be either requirements (with associated tasks and test cases) or incidents. You can click on the expand/collapse icons to hide any resources that are not relevant. The system will display a progress bar for each resource to illustrate the allocation for that resource. Any resource that has a progress bar that is completely green has been fully scheduled and should not have any additional items assigned. If the progress bar for that resource turns red, it means that they have been over-scheduled and you need to reassign some of the items. Above the resource headings there is a section with the release name; that contains backlog items that are scheduled for the current release but have not yet been assigned to a resource. You can drag and drop the backlog items between resources or to/from the release backlog. Any backlog items not assigned to a resource and release will be listed in the (Unassigned Items) section at the top. Release Backlog -- By Priority This view is designed to let you see the list of planned backlog items in the current release, organized by requirement importance. Each of the possible importance values is displayed on the left-hand side and the backlog items displayed in the same row on the right. The backlog items in this view will only be requirements (with associated tasks and test cases). The top section will contain the list of items that are not assigned a priority, with the other sections containing the items that have been assigned to the specific priority. Sprint Backlog Planning The sprint backlog view is designed to let you view the backlog items that have been assigned to the selected iteration / sprint. You can always see the items not currently assigned to any release or sprint by expanding the 'Unassigned Items' section and then drag those items into the current release or sprint. The lower section of the board allows you to segment the items by either status (typically used in Kanban ), or by person. You can also view the Task artifacts by person or status for the current sprint. Sprint Backlog -- By Status This view is designed to let you see the iteration / sprint plan organized by requirement status. Each of the possible status values (for a planned item) is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view will only be requirements (with associated tasks and test cases). Each of the vertical sections is one of the requirements' statuses, in order of the requirement lifecycle (Planned > Completed). You can drag and drop the requirements between the different statuses. If you have the planning options enabled to have requirements status' automatically update based on changes to the associated tasks and test cases, then items will automatically move between the statuses based on tasks being completed and test cases being executed. Sprint Backlog -- By Person This view is designed to let you see the iteration / sprint plan organized by resource / person. Each of the users that is a member of the current sprint is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view can be either requirements (with associated tasks and test cases) or incidents. You can click on the expand/collapse icons to hide any resources that are not relevant. The system will display a progress bar for each resource to illustrate the allocation for that resource. Any resource that has a progress bar that is completely green has been fully scheduled and should not have any additional items assigned. If the progress bar for that resource turns red, it means that they have been over-scheduled and you need to reassign some of the items. Above the resource headings there are sections with the release and sprint name; they contain backlog items that are scheduled for the current release or sprint but have not yet been assigned to a resource. You can drag and drop the backlog items between resources or to/from the release/sprint backlog. Any backlog items not assigned to a resource and release/sprint will be listed in the (Unassigned Items) section at the top. Sprint Backlog -- By Priority This view is designed to let you see the list of planned backlog items in the current sprint, organized by requirement importance. Each of the possible importance values is displayed on the left-hand side and the backlog items displayed in the same row on the right. The backlog items in this view will only be requirements (with associated tasks and test cases). The top section will contain the list of items that are not assigned a priority, with the other sections containing the items that have been assigned to the specific priority.","title":"Planning Board"},{"location":"Spira-User-Manual/Planning-Board/#planning-board","text":"The SpiraPlan planning board is a great way to visualize the backlog items (requirements, tasks, test cases and incidents) planned for your product. Based on the principles of agile methodologies such as Scrum and Kanban, the planning board is a great tool for planning agile products. To access the SpiraPlan product planning board, select a product and go to Artifacts > Planning Board and the following screen will be displayed: To access the SpiraTest program planning board, select a program and go to the Planning menu and the following screen will be displayed: We shall first discuss the product planning board, and then we will cover the program planning board. By default, the system will display the product planning board in the product backlog view, with the backlog organized by component. You can change the view by click on the ' Planning' drop down list: Product Backlog -- This displays a list of all the backlog items that are not currently scheduled for a specific release or sprint. The items can be organized by component, package, priority or person. All Releases -- This displays a list of all the releases as well as the product backlog and is designed to let you easily move items from the product backlog to a specific release. Release View -- This displays a list of all the backlog items that are scheduled for the selected release and lets you organize them by sprint, status, or person. Sprint View - This displays a list of all the backlog items that are scheduled for the selected sprint (also known as a Sprint in some methodologies) and lets you organize them by status, or person. The ' Group By' dropdown list is used to change how the view is organized. This list of options available in the 'Group By' dropdown will depend on the view being displayed. The planning board will include the following backlog items: Requirements and Incidents -- these are displayed as 'story cards' and are the primary items that can be moved in the planning board. Tasks and Test Cases -- these are secondary artifacts and are considered part of a requirement. So within the planning board they are displayed as being part of a specific requirement, and if you move a requirement, the associated tasks and test cases will move as well. The backlog items themselves can be configured to display in different ways. The choice of display will depend on how many backlog items you have to display, how large your screen is and what information you need. The display is controlled by the four checkboxes at the top of the planning board: Standard View -- This is the view that will be displayed when 'detailed view' is unchecked. It displays the minimum necessary information in each story card, but maximizes how many story cards can be displayed on the screen. Each story card will contain the icon, ID, name, user avatar, and estimate (in story points) of the requirement. Detailed View -- This view includes additional information in each story card. It adds the long description, a progress bar indicator (that indicates what percentage of the item has been completed) and for requirement artifacts it includes the number of tasks (red background) and number of test cases (yellow background) in the two small boxes under the user. Numerical rankings are also shown. The ranking numbers go from left to right and top to bottom. They indicate the relative ordering and priority of the various story cards and defects. Incidents -- The planning board will always include requirement backlog items, but because the number of incidents can be very large, there is the option to include/exclude them from the planning board. When you have the \"Incidents\" checkbox selected, incidents will appear in the planning board with their own story card format. The main difference is that the effort is recorded in hours rather than story points: Tasks -- When the Tasks option is selected, the planning board will display the tasks associated with the requirements as part of each story card. Each task will be displayed with its ID and a miniature progress bar: Test Cases -- When the Test Cases option is selected, the planning board will display the test cases associated with the requirements as part of each story card. Each test case will be displayed with its ID and a miniature test coverage bar-chart: Regardless of the view, backlog items can be moved using \"drag and drop\" between the different parts of the planning board. To drag and drop multiple items, you should first select the items so that they are highlighted. Then you can drag and drop the entire selection: You can add new requirement backlog items by clicking the \" + \" button. This will display the following dialog box: On this screen you can enter the fields for a new requirement, click \" Add Requirement \" and the requirement will be added to the appropriate section of the planning board. In some of the views of the planning board there will be more data that can be displayed on one screen, in which case you will be able to scroll the planning board left and right using the specially provided arrow buttons. Each of the views is now described in more detail in the sections below.","title":"Planning Board"},{"location":"Spira-User-Manual/Planning-Board/#product-backlog-planning","text":"The product backlog view is designed to let you view the backlog items that have been created for the product and have not yet been assigned to a specific release or sprint. The backlog items can be requirements or incidents, and in the case of requirements, you can see the tasks and test cases associated with a specific requirement. In this view you can drag and drop the backlog items from one section (e.g. component) to another and also rearrange the backlog items in their relative order. By default, the items are sorted according to their priority/importance value (the color of which is indicated in the left-hand side of the story card), but you can drag and drop them into a different order. This is particularly useful when you have several items of the same priority and you need to rank them. This process is typically called backlog grooming .","title":"Product Backlog Planning"},{"location":"Spira-User-Manual/Planning-Board/#product-backlog-by-component","text":"This view is designed to let you see the product backlog organized by Component. Each of the components is displayed on the left-hand side and the backlog items displayed in the same row on the right. The backlog items can be requirements (with associated tasks and test cases) or incidents. The top section will contain the list of items that are not assigned to a component, with the other sections containing the items that belong to the specific component.","title":"Product Backlog -- By Component"},{"location":"Spira-User-Manual/Planning-Board/#product-backlog-by-package","text":"This view is designed to let you see the product backlog organized by requirement package (a summary requirement). Each of the packages is displayed on the left-hand side in a hierarchical structure, and the backlog items displayed in the same row on the right. The backlog items can be child requirements (with associated tasks and test cases) or incidents. In this view the incidents are the ones linked to the package through an association. The top section will contain the list of items that are not assigned to a package, with the other sections containing the items that are children of the specific package.","title":"Product Backlog -- By Package"},{"location":"Spira-User-Manual/Planning-Board/#product-backlog-by-priority","text":"This view is designed to let you see the product backlog organized by requirement importance. Each of the possible importance values is displayed on the left-hand side and the backlog items displayed in the same row on the right. The backlog items in this view will only be requirements (with associated tasks and test cases). The top section will contain the list of items that are not assigned a priority, with the other sections containing the items that have been assigned to the specific priority.","title":"Product Backlog -- By Priority"},{"location":"Spira-User-Manual/Planning-Board/#product-backlog-by-status","text":"This view is designed to let you see the product backlog organized by requirement status. Each of the possible status values (for an unscheduled item) is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view will only be requirements (with associated tasks and test cases). This view is commonly called a Kanban board: Each of the vertical sections is one of the requirements' statuses, in order of the requirement lifecycle (Requested > Accepted). Once a requirement is assigned to a release or sprint it will come automatically 'Planned' and not appear in this view. You can drag and drop the requirements between the different statuses.","title":"Product Backlog -- By Status"},{"location":"Spira-User-Manual/Planning-Board/#release-planning","text":"The 'All Releases' option lets you view all of the backlog items that have already been assigned to a release - and are therefore not in the product backlog. The backlog items can be requirements or incidents, and in the case of requirements, you can see the tasks and test cases associated with a specific requirement. The lower section of the board allows you to view the items by either by release, priority, status, or person. Each section below will discuss each option in turn.","title":"Release Planning"},{"location":"Spira-User-Manual/Planning-Board/#release-planning-by-release","text":"This release planning view is designed to let you view the backlog items that have been created for the product and associate them with different releases defined for the product The 'Unassigned Items' section at the top allows you to see all the items not currently planned, and you can then drag and drop them into one of the lower sections that correspond to a specific release. Using the scroll arrows you can cycle through the releases and move any items from one release to another. The header of each release section shows the overall progress and utilization of the release: Clicking on the Release hyperlink will switch the planning board into the Release Backlog view described below.","title":"Release Planning -- By Release"},{"location":"Spira-User-Manual/Planning-Board/#release-planning-by-priority","text":"This view is designed to let you see the list of planned backlog items, organized by requirement importance. Each of the possible importance values is displayed on the left-hand side and the backlog items displayed in the same row on the right. The backlog items in this view will only be requirements (with associated tasks and test cases). The top section will contain the list of items that are not assigned a priority, with the other sections containing the items that have been assigned to the specific priority.","title":"Release Planning -- By Priority"},{"location":"Spira-User-Manual/Planning-Board/#release-planning-by-status","text":"This view is designed to let you see the product planned items organized by requirement status. Each of the possible status values (for a planned item) is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view will only be requirements (with associated tasks and test cases). This view is commonly called a Kanban board: Each of the vertical sections is one of the requirements' statuses, in order of the requirement lifecycle (Planned > Completed). You can click on the expand/collapse icons to hide any statuses that are not used. You can drag and drop the requirements between the different statuses. If you have the planning options enabled to have requirements status' automatically update based on changes to the associated tasks and test cases, then items will automatically move between the statuses based on tasks being completed and test cases being executed.","title":"Release Planning -- By Status"},{"location":"Spira-User-Manual/Planning-Board/#release-planning-by-person","text":"This view is designed to let you see the product planned items organized by resource / person. Each of the users that is a member of the current release is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view can be either requirements (with associated tasks and test cases) or incidents. You can click on the expand/collapse icons to hide any resources that are not relevant. Above the resource headings there is a section with the release name; that contains backlog items that are scheduled for the current release but have not yet been assigned to a resource. You can drag and drop the backlog items between resources or to/from the release backlog. Any backlog items not assigned to a resource and release will be listed in the (Unassigned Items) section at the top.","title":"Release Planning -- By Person"},{"location":"Spira-User-Manual/Planning-Board/#release-backlog-planning","text":"The release backlog view is designed to let you view the backlog items that have been assigned to the selected release. You can always see the items not currently assigned to any release by expanding the 'Unassigned Items' section and then drag those items into the current release. The lower section of the board allows you to segment the items by either iteration/sprint (typically used in Scrum ), by status (typically used in Kanban ), or by person.","title":"Release Backlog Planning"},{"location":"Spira-User-Manual/Planning-Board/#release-backlog-by-sprint","text":"This view is designed to let you see the release backlog organized by iteration / sprint. Each of the sprints defined for the current release is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view can be either requirements (with associated tasks and test cases) or incidents. This view is commonly called a Scrum board: You can drag and drop the requirements between the different sprints. If you schedule a requirement for a specific sprint, all the child tasks that have not yet been started, will follow the parent requirement in being associated with the sprint. Once the backlog item has been added to the sprint, the utilized effort for the sprint will increase, and the available effort will decrease by the same amount. Note: The system will allow you to assign more backlog items to an sprint than it is possible to complete, however this will result in a negative value for 'available effort'. If this happens, the \"Available Effort\" value will be displayed in red, and you need to rebalance the items, extend the sprint length or add product personnel resources to the sprint. Clicking on the Sprint hyperlinks in the headers will switch the planning board into the Sprint Backlog view described below.","title":"Release Backlog -- By Sprint"},{"location":"Spira-User-Manual/Planning-Board/#release-backlog-by-status","text":"This view is designed to let you see the release backlog organized by requirement status. Each of the possible status values (for a planned item) is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view will only be requirements (with associated tasks and test cases). This view is commonly called a Kanban board: Each of the vertical sections is one of the requirements' statuses, in order of the requirement lifecycle (Planned > Completed). You can click on the expand/collapse icons to hide any statuses that are not used. You can drag and drop the requirements between the different statuses. If you have the planning options enabled to have requirements status' automatically update based on changes to the associated tasks and test cases, then items will automatically move between the statuses based on tasks being completed and test cases being executed.","title":"Release Backlog -- By Status"},{"location":"Spira-User-Manual/Planning-Board/#release-backlog-by-person","text":"This view is designed to let you see the release backlog organized by resource / person. Each of the users that is a member of the current release is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view can be either requirements (with associated tasks and test cases) or incidents. You can click on the expand/collapse icons to hide any resources that are not relevant. The system will display a progress bar for each resource to illustrate the allocation for that resource. Any resource that has a progress bar that is completely green has been fully scheduled and should not have any additional items assigned. If the progress bar for that resource turns red, it means that they have been over-scheduled and you need to reassign some of the items. Above the resource headings there is a section with the release name; that contains backlog items that are scheduled for the current release but have not yet been assigned to a resource. You can drag and drop the backlog items between resources or to/from the release backlog. Any backlog items not assigned to a resource and release will be listed in the (Unassigned Items) section at the top.","title":"Release Backlog -- By Person"},{"location":"Spira-User-Manual/Planning-Board/#release-backlog-by-priority","text":"This view is designed to let you see the list of planned backlog items in the current release, organized by requirement importance. Each of the possible importance values is displayed on the left-hand side and the backlog items displayed in the same row on the right. The backlog items in this view will only be requirements (with associated tasks and test cases). The top section will contain the list of items that are not assigned a priority, with the other sections containing the items that have been assigned to the specific priority.","title":"Release Backlog -- By Priority"},{"location":"Spira-User-Manual/Planning-Board/#sprint-backlog-planning","text":"The sprint backlog view is designed to let you view the backlog items that have been assigned to the selected iteration / sprint. You can always see the items not currently assigned to any release or sprint by expanding the 'Unassigned Items' section and then drag those items into the current release or sprint. The lower section of the board allows you to segment the items by either status (typically used in Kanban ), or by person. You can also view the Task artifacts by person or status for the current sprint.","title":"Sprint Backlog Planning"},{"location":"Spira-User-Manual/Planning-Board/#sprint-backlog-by-status","text":"This view is designed to let you see the iteration / sprint plan organized by requirement status. Each of the possible status values (for a planned item) is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view will only be requirements (with associated tasks and test cases). Each of the vertical sections is one of the requirements' statuses, in order of the requirement lifecycle (Planned > Completed). You can drag and drop the requirements between the different statuses. If you have the planning options enabled to have requirements status' automatically update based on changes to the associated tasks and test cases, then items will automatically move between the statuses based on tasks being completed and test cases being executed.","title":"Sprint Backlog -- By Status"},{"location":"Spira-User-Manual/Planning-Board/#sprint-backlog-by-person","text":"This view is designed to let you see the iteration / sprint plan organized by resource / person. Each of the users that is a member of the current sprint is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view can be either requirements (with associated tasks and test cases) or incidents. You can click on the expand/collapse icons to hide any resources that are not relevant. The system will display a progress bar for each resource to illustrate the allocation for that resource. Any resource that has a progress bar that is completely green has been fully scheduled and should not have any additional items assigned. If the progress bar for that resource turns red, it means that they have been over-scheduled and you need to reassign some of the items. Above the resource headings there are sections with the release and sprint name; they contain backlog items that are scheduled for the current release or sprint but have not yet been assigned to a resource. You can drag and drop the backlog items between resources or to/from the release/sprint backlog. Any backlog items not assigned to a resource and release/sprint will be listed in the (Unassigned Items) section at the top.","title":"Sprint Backlog -- By Person"},{"location":"Spira-User-Manual/Planning-Board/#sprint-backlog-by-priority","text":"This view is designed to let you see the list of planned backlog items in the current sprint, organized by requirement importance. Each of the possible importance values is displayed on the left-hand side and the backlog items displayed in the same row on the right. The backlog items in this view will only be requirements (with associated tasks and test cases). The top section will contain the list of items that are not assigned a priority, with the other sections containing the items that have been assigned to the specific priority.","title":"Sprint Backlog -- By Priority"},{"location":"Spira-User-Manual/Program-Management/","text":"Program Management The program management features of SpiraPlan let you manage multiple products as a single program. The features described in the section require that you are logged in as a user that has membership of the program (aka program) in question. You can be either of the two program roles (program owner or executive) to access these features. They can be accessed from the SpiraPlan workspace menu. Note: SpiraTest and SpiraTeam do not include these features. Program Planning Board The program planning board is designed to let you view the backlog items that need to be planned for all of the products in a specific program (aka program) as well as view all of the planned items in each of the individual products. It is designed to let you see a product-group wide view of all requirements and associated test cases and tasks. You can access this feature by clicking on the Planning menu entry in the program navigation. The program planning board has the following views: Program Backlog By Priority By Status All Products By Product By Priority By Status By Person Product By Priority By Status By Person Each of these views is described below: Program Backlog -- by Priority This view is designed to let you see the program backlog organized by requirement importance. Each of the possible importance values is displayed on the left-hand side and the backlog items displayed in the same row on the right. The backlog items in this view will only be requirements (with associated tasks and test cases). The top section will contain the list of items that are not assigned a priority, with the other sections containing the items that have been assigned to the specific priority. Program Backlog -- by Status This view is designed to let you see the program backlog organized by requirement status. Each of the possible status values (for an unscheduled item) is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view will only be requirements (with associated tasks and test cases). This view is commonly called a Kanban board: Each of the vertical sections is one of the requirements' statuses, in order of the requirement lifecycle (Requested > Accepted). Once a requirement is assigned to a release or sprint it will come automatically 'Planned' and not appear in this view. You can drag and drop the requirements between the different statuses. All Products -- by Priority This program planning view is designed to let you see all of the backlog items that have been scheduled for all of the products in the current program, organized by requirement importance/priority. Each of the possible importance values is displayed on the left-hand side and the backlog items displayed in the same row on the right. The backlog items in this view will only be requirements (with associated tasks and test cases). The top section will contain the list of items that are not assigned a priority, with the other sections containing the items that have been assigned to the specific priority. All Products -- by Product The program planning view is designed to let you view the open (not-completed) backlog items currently planned per product. The backlog items are themselves only requirements, however you can see the tasks and test cases associated with a specific requirement. Clicking on the product hyperlink will switch the planning board into the Product Backlog view described below. All Products -- by Status This view is designed to let you see the scheduled backlog items for the entire program organized by requirement status. Each of the possible status values (for a planned item) is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view will only be requirements (with associated tasks and test cases). This view is commonly called a Kanban board: Each of the vertical sections is one of the requirements' statuses, in order of the requirement lifecycle (Planned > Completed). You can click on the expand/collapse icons to hide any statuses that are not used. You can drag and drop the requirements between the different statuses. If you have the planning options enabled to have requirements status' automatically update based on changes to the associated tasks and test cases, then items will automatically move between the statuses based on tasks being completed and test cases being executed. All Products -- by Person This view is designed to let you see the program backlog organized by resource / person. Each of the users that is a member of any of the products in the current program is displayed as a heading, with the backlog items displayed in the same column underneath. You can click on the expand/collapse icons to hide any resources that are not relevant. Above the resource headings there is a section called 'Unassigned Items'; that contains backlog items that are scheduled but have not yet been assigned to a person. Product -- by Priority This program planning view is designed to let you see all of the backlog items that have been scheduled for all of the products in the current program, organized by requirement importance/priority. Each of the possible importance values is displayed on the left-hand side and the backlog items displayed in the same row on the right. The backlog items in this view will only be requirements (with associated tasks and test cases). The top section will contain the list of items that are not assigned a priority, with the other sections containing the items that have been assigned to the specific priority. Product -- by Status This view is designed to let you see the product backlog organized by requirement status. Each of the possible status values (for a planned item) is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view will only be requirements (with associated tasks and test cases). This view is commonly called a Kanban board: Each of the vertical sections is one of the requirements' statuses, in order of the requirement lifecycle (Planned > Completed). You can click on the expand/collapse icons to hide any statuses that are not used. You can drag and drop the requirements between the different statuses. If you have the planning options enabled to have requirements status' automatically update based on changes to the associated tasks and test cases, then items will automatically move between the statuses based on tasks being completed and test cases being executed. Product -- by Person This view is designed to let you see the product backlog organized by resource / person. Each of the users that is a member of the current product is displayed as a heading, with the backlog items displayed in the same column underneath. You can click on the expand/collapse icons to hide any resources that are not relevant. Above the resource headings there is a section with the product name; that contains backlog items that are scheduled for the current product but have not yet been assigned to a person. Program Release Plan The program release plan lets you see all of the products in the current program, together with their releases, sprints, and phases displayed in an integrated hierarchical view: You can access this feature by clicking on the Releases menu entry in the program navigation. This view lets you see all the releases, sprints, and phases with their dates, test coverage, progress and estimated/producted estimates. You can expand and collapse the products and releases to display the appropriate level of detail as well as filter by the various fields in the grid. Program Incident List The program incident list lets you see all of the incidents (bugs, enhancements, issues, risks, etc.) in the current program, displayed in an integrated table view. This view products program managers with the ability to see their incidents' progress, dates, priorities, and other important fields: You can access this feature by clicking on the Incidents menu entry in the program navigation. You can filter and sort by specific product, or by the various fields displayed in the table.","title":"Program Management"},{"location":"Spira-User-Manual/Program-Management/#program-management","text":"The program management features of SpiraPlan let you manage multiple products as a single program. The features described in the section require that you are logged in as a user that has membership of the program (aka program) in question. You can be either of the two program roles (program owner or executive) to access these features. They can be accessed from the SpiraPlan workspace menu. Note: SpiraTest and SpiraTeam do not include these features.","title":"Program Management"},{"location":"Spira-User-Manual/Program-Management/#program-planning-board","text":"The program planning board is designed to let you view the backlog items that need to be planned for all of the products in a specific program (aka program) as well as view all of the planned items in each of the individual products. It is designed to let you see a product-group wide view of all requirements and associated test cases and tasks. You can access this feature by clicking on the Planning menu entry in the program navigation. The program planning board has the following views: Program Backlog By Priority By Status All Products By Product By Priority By Status By Person Product By Priority By Status By Person Each of these views is described below:","title":"Program Planning Board"},{"location":"Spira-User-Manual/Program-Management/#program-backlog-by-priority","text":"This view is designed to let you see the program backlog organized by requirement importance. Each of the possible importance values is displayed on the left-hand side and the backlog items displayed in the same row on the right. The backlog items in this view will only be requirements (with associated tasks and test cases). The top section will contain the list of items that are not assigned a priority, with the other sections containing the items that have been assigned to the specific priority.","title":"Program Backlog -- by Priority"},{"location":"Spira-User-Manual/Program-Management/#program-backlog-by-status","text":"This view is designed to let you see the program backlog organized by requirement status. Each of the possible status values (for an unscheduled item) is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view will only be requirements (with associated tasks and test cases). This view is commonly called a Kanban board: Each of the vertical sections is one of the requirements' statuses, in order of the requirement lifecycle (Requested > Accepted). Once a requirement is assigned to a release or sprint it will come automatically 'Planned' and not appear in this view. You can drag and drop the requirements between the different statuses.","title":"Program Backlog -- by Status"},{"location":"Spira-User-Manual/Program-Management/#all-products-by-priority","text":"This program planning view is designed to let you see all of the backlog items that have been scheduled for all of the products in the current program, organized by requirement importance/priority. Each of the possible importance values is displayed on the left-hand side and the backlog items displayed in the same row on the right. The backlog items in this view will only be requirements (with associated tasks and test cases). The top section will contain the list of items that are not assigned a priority, with the other sections containing the items that have been assigned to the specific priority.","title":"All Products -- by Priority"},{"location":"Spira-User-Manual/Program-Management/#all-products-by-product","text":"The program planning view is designed to let you view the open (not-completed) backlog items currently planned per product. The backlog items are themselves only requirements, however you can see the tasks and test cases associated with a specific requirement. Clicking on the product hyperlink will switch the planning board into the Product Backlog view described below.","title":"All Products -- by Product"},{"location":"Spira-User-Manual/Program-Management/#all-products-by-status","text":"This view is designed to let you see the scheduled backlog items for the entire program organized by requirement status. Each of the possible status values (for a planned item) is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view will only be requirements (with associated tasks and test cases). This view is commonly called a Kanban board: Each of the vertical sections is one of the requirements' statuses, in order of the requirement lifecycle (Planned > Completed). You can click on the expand/collapse icons to hide any statuses that are not used. You can drag and drop the requirements between the different statuses. If you have the planning options enabled to have requirements status' automatically update based on changes to the associated tasks and test cases, then items will automatically move between the statuses based on tasks being completed and test cases being executed.","title":"All Products -- by Status"},{"location":"Spira-User-Manual/Program-Management/#all-products-by-person","text":"This view is designed to let you see the program backlog organized by resource / person. Each of the users that is a member of any of the products in the current program is displayed as a heading, with the backlog items displayed in the same column underneath. You can click on the expand/collapse icons to hide any resources that are not relevant. Above the resource headings there is a section called 'Unassigned Items'; that contains backlog items that are scheduled but have not yet been assigned to a person.","title":"All Products -- by Person"},{"location":"Spira-User-Manual/Program-Management/#product-by-priority","text":"This program planning view is designed to let you see all of the backlog items that have been scheduled for all of the products in the current program, organized by requirement importance/priority. Each of the possible importance values is displayed on the left-hand side and the backlog items displayed in the same row on the right. The backlog items in this view will only be requirements (with associated tasks and test cases). The top section will contain the list of items that are not assigned a priority, with the other sections containing the items that have been assigned to the specific priority.","title":"Product -- by Priority"},{"location":"Spira-User-Manual/Program-Management/#product-by-status","text":"This view is designed to let you see the product backlog organized by requirement status. Each of the possible status values (for a planned item) is displayed as a heading, with the backlog items displayed in the same column underneath. The backlog items in this view will only be requirements (with associated tasks and test cases). This view is commonly called a Kanban board: Each of the vertical sections is one of the requirements' statuses, in order of the requirement lifecycle (Planned > Completed). You can click on the expand/collapse icons to hide any statuses that are not used. You can drag and drop the requirements between the different statuses. If you have the planning options enabled to have requirements status' automatically update based on changes to the associated tasks and test cases, then items will automatically move between the statuses based on tasks being completed and test cases being executed.","title":"Product -- by Status"},{"location":"Spira-User-Manual/Program-Management/#product-by-person","text":"This view is designed to let you see the product backlog organized by resource / person. Each of the users that is a member of the current product is displayed as a heading, with the backlog items displayed in the same column underneath. You can click on the expand/collapse icons to hide any resources that are not relevant. Above the resource headings there is a section with the product name; that contains backlog items that are scheduled for the current product but have not yet been assigned to a person.","title":"Product -- by Person"},{"location":"Spira-User-Manual/Program-Management/#program-release-plan","text":"The program release plan lets you see all of the products in the current program, together with their releases, sprints, and phases displayed in an integrated hierarchical view: You can access this feature by clicking on the Releases menu entry in the program navigation. This view lets you see all the releases, sprints, and phases with their dates, test coverage, progress and estimated/producted estimates. You can expand and collapse the products and releases to display the appropriate level of detail as well as filter by the various fields in the grid.","title":"Program Release Plan"},{"location":"Spira-User-Manual/Program-Management/#program-incident-list","text":"The program incident list lets you see all of the incidents (bugs, enhancements, issues, risks, etc.) in the current program, displayed in an integrated table view. This view products program managers with the ability to see their incidents' progress, dates, priorities, and other important fields: You can access this feature by clicking on the Incidents menu entry in the program navigation. You can filter and sort by specific product, or by the various fields displayed in the table.","title":"Program Incident List"},{"location":"Spira-User-Manual/Release-Management/","text":"Release Management This section outlines how to use the Release Management features of SpiraPlan\u00ae to manage different versions of the system being tested in a particular product. This is an optional feature of the system, and you can manage the testing for a product successfully without tracking individual releases. Typically, when you develop a system, it is important to ensure that features introduced in successive versions do not impair existing functionality - this is known as regression testing . In such situations, you will want to be able to execute the same set of test scripts against multiple versions of the system and be able to track failures by version. A feature that works correctly in version 1.0 may fail in version 1.1, and the maintenance team may be testing the existing lifecycle of v1.0 in parallel with the development team testing v1.1. Therefore, by developing a master set of releases/versions in the Release Management module, you can have the different testing teams correctly assign their testing actions to the appropriate version. There are two types of release artifact in SpiraPlan\u00ae - major product releases that are displayed with the blue release icon and represent major versions of the system, and release Sprints (aka builds) that are displayed with a yellow icon and represent intermediate builds/sprints of the system. Note: Sprints can be contained within a Release, but not the other way round. The main differences between releases and sprints are as follows: Releases are independent versions of the system being tested and as such, you can map a requirement directly to a release, indicating the release of the system that the requirement will be fulfilled in. When you report on a release (e.g. on the product home or in one of the reports) any child sprints are automatically taken into account, and test runs and incidents that are related to the child builds/sprints will get included in the release reports. Child releases on the other hand are not aggregated up into the parent release. Release List When you click on the Planning > Releases global navigation link, you will initially be taken to the release list screen illustrated below: The release list will contain all the releases and sprints associated with current product. When you create a new product, this list will initially be empty, and you will have to use the \" Insert \" button to start adding releases and sprints to the product. The hierarchical organization of releases in the list is configurable, so you can organize the various releases in the way that makes most sense for a particular product. Typically you have the major releases as the top-level items, with sub-releases, builds and sprints as the lower-level items. All of the releases in the list have a release-name, together with the assigned version number for that release, the start-date and end-date for the release, the number of estimated product personnel working on that release, the planned effort for the release, the total effort currently scheduled (as tasks), the available effort for new tasking, the release id, the type of each release, its status, and a set of custom properties defined by the product owner. For those releases that have test cases mapped against them, the execution status of the various test cases associated with the release is displayed in aggregate for each item as a graphical bar diagram. If you position the mouse over the execution status indicator you will see the detailed execution information displayed as a tooltip. For those releases that have at least one requirement task associated with them, they will display a block graph that illustrates the relative numbers of task that are on-schedule (green), late-starting (yellow), late-finishing (red) or just not-started (grey). These values are weighted by the effort of the task, so that larger, more complex tasks will be change the graph more than the smaller tasks. To determine the exact task progress information, position the mouse pointer over the bar-chart and the number of associated tasks, along with the details of how many are in each status will be displayed as a \"tooltip\". Clicking on a release's hyperlink will take you to the release details page for the item in question. Filtering Read about how to create and manage filters . Insert The \" Insert \" button has an attached dropdown menu that allows you to choose whether to insert a release or sprint (if you just click \" Insert \" it defaults to inserting a release). In either case, it will insert the new release / sprint above the currently selected item -- i.e. the one whose check-box has been selected, at the same level in the hierarchy. If you want to insert a release/sprint below a summary item, you need to insert it first, then indent it with the \" Indent \" button. If you insert a release without first selecting an existing release from the list, the new release will simply be inserted at the end of the list. Once the new release has been inserted, the item is switched to \"Edit\" mode so that you can change the default name, active flag, version number and creator. Delete Clicking on the \" Delete \" button deletes all the releases whose check-boxes have been selected. If any of the releases have child releases/sprint, then the child releases and sprints are also deleted. Indent Clicking on the \" Indent \" button indents all the releases whose check-boxes have been selected. Note: you cannot indent a release or sprint if it is below a sprint, as sprints are not allowed to have child items. Outdent Clicking on the \" Outdent \" button de-indents all the releases whose check-boxes have been selected. Refresh Clicking on the \" Refresh \" button simply reloads the release list. This is useful as other people may be modifying the list of releases at the same time as you, and after stepping away from the computer for a short-time, you should click this button to make sure you are viewing the most current release list for the product. Edit Each release/sprint in the list has an \" Edit \" button display in its right-most column. When you click this button or click on any of the cells in the row, you change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Save \" buttons are displayed in the last column: If you click \" Edit \" on more than one row, the \" Save \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then update the changes by clicking the one \" Save \" button. Also, if you want to make the same change to multiple rows (e.g. to change five releases from \"active\" to \"inactive\"), you can click on the \"fill\" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the \" Edit \" button on the same row as the Filters and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Save \" to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes. Show Level Choosing an indent level from the 'Show Level' drop down box allows you to quickly and easily view the entire release list at a specific indent level. For example you may want to see all releases drilled-down to the third level of detail. To do this you would simply choose 'Level 3' from the list, and the releases will be expanded / collapsed accordingly. Show / Hide Columns This drop-down list allows you to change the fields that are displayed in the release list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner. Copying Releases/Sprints To copy a release/sprint or set of releases/sprints, simply select the check-boxes of the release/sprint you want to copy and then select the Edit > Copy Items menu option. This will copy the current release/sprint selection to the clipboard. Then you should select the place where you want the releases/sprints to be inserted and choose the Edit > Paste Items option. The releases/sprints will now be copied into the destination location you specified. The name of the copied releases/sprints will be prefixed with \"Copy of...\" to distinguish them from the originals. Note that copied releases/sprints will also include the test mapping information from the originals. Moving Releases/Sprints To move a release/sprint in the hierarchy, there are two options: Click on the release/sprint you want to move and drag the icon to the location you want it moved. An empty space will appear to show you where it will be inserted. Once you have the requirement positioned at the correct place that you want it inserted, just release the mouse button. To move multiple items simply select their checkboxes and then drag-and-drop one of the selected items Alternatively you can simply select the check-boxes of the release/sprint you want to move and then select the Edit > Cut Items menu option. This will cut the current release/sprint selection to the clipboard. Then you should select the place where you want the release/sprint to be inserted and choose the Edit > Paste Items option. The release/sprint will now be moved into the destination location you specified. Exporting Releases/Sprints To export releases/sprints from the current product to another product in the system, select the check-boxes of the releases/sprints you want to export and then click the Tools > Export to Product item. This will then bring up a list of possible destination products: Once you have chosen the destination product and clicked the \" Export \" button, the releases/sprints will be exported from the current product to the destination product. Any file attachments will also be copied to the destination product along with the release/sprint. Creating Test Sets from Releases As a shortcut you can click the Tools > Create Test Set option to create a new test set for each of selected releases. The created test sets will include all of the test cases associated with a release. This is useful in regression testing when you have created a new release and want to be able to quickly assign a tester to ensure that all the functionality in the release works as expected. Printing or Saving Items To quickly print a single release/sprint or list of releases/sprints you can select the items' checkboxes and then click Tools > Print Items. This will display a popup window containing a printable version of the selected items. You can also save the report in a variety of common formats from the same Tools menu. Right-Click Context Menu SpiraPlan\u00ae provides a shortcut -- called the context menu - for accessing some of the most commonly used functions, so that you don't need to move your mouse up to the toolbar each time. To access the context menu, right-click on any of the rows in the release list and the following menu will be displayed: You can now choose any of these options as an alternative to using the icons in the toolbar Release Details When you click on release item in the release list , you are taken to the release details page illustrated below: This page is made up of three areas; the left pane displays the releases list navigation; the right pane's header, which displays: the operations toolbar; the hierarchical structure the release is in ; the editable name of the selected release; and the info bar (with a shaded background), which also contains the workflow status transitions (see below); and the right pane's tabbed interface with rich information related to the release. Please note that on smaller screen sizes the navigation pane is not displayed. While the navigation pane has a link to take you back to the releases list, on mobile devices a 'back' button is shown on the left of the operations toolbar. The navigation pane can be collapsed by clicking on the \"-\" button, or expanded by clicking anywhere on the gray title area. On desktops the user can also control the exact width of the navigation pane by dragging and dropping a red handle that appears on hovering at the rightmost edge of the navigation pane. The navigation pane consists of a link that will take you back to the release list, as well as a list of the other releases in the current product. This latter list is useful as a navigation shortcut; you can quickly view the test run information of all the other releases by clicking on the navigation links without having to first return to the release list page. The navigation list can be switched between two different modes: The list of releases matching the current filter The list of all releases, irrespective of the current filter The top part of the right pane allows you to view and/or edit the details of the particular release. In addition you can delete the current artifact by choosing \" Delete \", discard any changes made by clicking \" Refresh \", or print or export it by clicking one of the options from the Tools dropdown menu. The lower part of the right pane can be in one of seven possible modes that can be selected: \"Overview\", \"Incidents\", \"Reqs & Tasks\", \"Test Cases\", \"Test Runs\", \"Attachments\", and \"History\". Each of the different views is described separately below. Emailing Read about emailing an artifact to colleagues using Spira . Followers Read about how to add and manage followers to an artifact . Workflows and Statuses Releases can have the following statuses: planned, in progress, completed, closed, deferred, and cancelled. Note that releases marked as closed, deferred, or cancelled cannot be associated with other artifacts -- for example an incident's resolved release cannot by a cancelled release. Read about using workflows to change the status of your artifact . Overview -- Details The Overview tab is divided into a number of different sections. Each of these can be collapsed or expanded by clicking on the title of that section. It displays the description, fields and comments associated with the requirement. The top part of this tab displays the various standard fields and custom properties associated with the requirement. Fields (both standard and custom) are grouped under the collapsible headings (marked by orange text and underline) in the screenshot below. For instance, all fields regarding dates are grouped together in the \"Dates and Times\" area. When you make changes to the release/sprint's start-date, end-date, number of product personnel resources, or number of non-working person days, the system will automatically calculate how many hours of effort (planned effort) are available in the release/sprint for assigning tasks. As you begin assigning tasks -- either through the Tasks tab or the Sprint Planning screen -- the total estimated effort of the tasks is subtracted from this planned effort to give the \"available effort\". Overview -- Detailed Information The Detailed Information section contains the long, formatted description of the requirement, as well as any rich text custom fields. You can enter rich text or paste in from a word processing program or web page into these fields. Clicking on the shaded areas of one of these detailed fields will display the rich text toolbar. Overview - Comments The Comments tab shows the current discussion thread for this release: All existing comments are listed in order by entered date (either newest-first or oldest-first). To create a new comment, enter the text into the text box, and then click the \" Add Comment \" button. Overview - Builds This section displays the list of builds associated with the current release/sprint. Each build is listed together with its name, creation date, status (whether the build succeeded or failed), and last updated date. Clicking on the hyperlink for the build name will open up the Build Details page . You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Apply Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field. Incidents This tab displays the incidents associated with the selected release. The incident list can be one of three modes: Detected in this Release -- this will display a list of all the incidents that were detected during the testing of the selected release. This is useful in determining if there are open incidents associated with a release that need to be dealt with. Resolved in this Release -- This will display a list of all the incidents that have been reportedly resolved in this release. This is useful for double-checking that all the resolved incidents for a release have indeed been fixed. Verified in this Release -- This will display a list of the incidents that have been verified as being fixed in this release. This is useful for generating release notes for a specific release indicating what changes and enhancements have been made in the release. Regardless of the mode, each incident is listed together with the type, status, priority, name, owner, detector, detection date and a link to the actual incident details : To change between the three modes outlined above, select the desired mode from the drop-down list contained within the header of the incident list table. You can perform the following actions: Refresh -- updates the list of incidents from the server, useful if other people are adding incidents to this release at the same time. You can filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field. Edit -- Clicking the \" Edit \" button to the right of the incident allows you to edit the incident inline directly on this screen. This functionality is limited to product owners. Show/Hide Columns -- Allows you to choose which incident columns are visible Reqs & Tasks This tab displays the list of requirements (excluding packages - in other words it displays 'user stories') and their associated child tasks that need to be completed for the release/sprint to be completed: Each of the requirements and associated tasks is displayed together with its: name description (by hovering the mouse over the name) priority progress indicator current owner estimated effort actual effort producted effort story points (requirements only) and numeric task identifier Clicking on a requirement will bring up the requirement details page . Clicking the triangle by a requirement will expand/collapse its list of tasks. Clicking on a task name will bring up the Task Details page which is described in more detail in Task Tracking > Task Details . This allows you to edit the details of an existing task. You can perform the following actions on a task from this screen: Insert Task -- inserts a new task in the task list under the specified requirement, with a default set of values. The task will be associated with the specified requirement and current release/sprint. If no requirement is selected, the task will only be associated with the current release/sprint Delete -- deletes the task from the product. Refresh -- updates the list of requirements and tasks from the server, useful if other people are adding requirements and/or tasks to this release/sprint at the same time. You can filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field. Edit -- Clicking the \" Edit \" button to the right of the requirement or task allows you to edit the item inline directly on this screen. Only columns visible will be editable. Show Level -- Allows you to quickly expand/collapse all the requirements in the list. Test Cases This tab shows the test coverage information for the release in question: The tab displays a grid containing the test cases already mapped to this release. You can filter that list by the test case type, name, status, execution status, execution date, priority, product name and ID. You can remove an existing test case by selecting its check box and clicking the 'Delete' button. This doesn't delete the test case, just removes it from the release. Hovering the mouse over the names of the test cases will display a \"tooltip\" consisting of the test case name, place in the folder structure and a detailed description. To add a new test case to the release, simply click on the 'Add' button: You can search for a test case by its ID if you know it (make sure to include the \"TC\" prefix): Otherwise, you can search for the test cases by choosing a folder from the dropdown and/or entering a partial name match: One you have found the desired test case(s), simply select their check boxes and click the 'Save' button to add them to the current release. Finally, as a shortcut you can click the \" Create Test Set from This Release \" link to create a new test set from this release, that will include all of the test cases associated with this release. This is useful in regression testing when you have created a new release and want to be able to quickly assign a tester to ensure that all the functionality in the release works as expected. Test Runs This view displays the list of all the test runs executed against the release. Each test run is listed together with the date of execution, the name of the test case, the name of the tester, the release/version of the system that the test was executed against, the name of the test set (if applicable), the overall execution status for the test case in that run and a link to the actual test run details . In addition, you can choose to display any of the custom properties associated with the test run. The \"Show/hide columns\" drop-down list allows you to change the fields that are displayed in the test run list as columns. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. The displayed columns can be any standard field or custom property. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" link. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field. Attachments Read about how the attachments tab works History Read about how the history tab works Build Details When you click on a build entry in the build list, you are taken to the build details page illustrated below: This page is made up of three areas; the left pane is the navigation window, the upper part of the right pane contains the build detailed information itself, and the bottom part of the right pane displays different information associated with the build. The navigation pane consists of a link that will take you back to the build list, as well as a list of the other builds that belong to the same release/sprint as the current one. The top part of the right pane allows you to view the details of the build including a detailed description of why it succeeded or failed. Since builds are populated from an external Continuous Integration server the build information will always be read-only inside the SpiraPlan user interface. The lower part of the right pane contains tabs that can display different information associated with the build. Each of the tabs -- \"Associations\", \"Incidents\", \"Revisions\", and \"Test Runs\" - is described separately below. Associations This tab displays a list of SpiraPlan artifacts that have been associated with any of the source code revisions that were included in the current build: Revisions This tab displays a list of the source code revisions that were included in the current build. The grid can be sorted and filtered by using the appropriate controls: Incidents This tab displays the list of incidents that have been fixed in the current build. The grid can be sorted and filtered by using the appropriate controls: Test Runs This tab displays a list of all the tests that have been executed against the current build. The grid can be sorted and filtered by using the appropriate controls:","title":"Release Management"},{"location":"Spira-User-Manual/Release-Management/#release-management","text":"This section outlines how to use the Release Management features of SpiraPlan\u00ae to manage different versions of the system being tested in a particular product. This is an optional feature of the system, and you can manage the testing for a product successfully without tracking individual releases. Typically, when you develop a system, it is important to ensure that features introduced in successive versions do not impair existing functionality - this is known as regression testing . In such situations, you will want to be able to execute the same set of test scripts against multiple versions of the system and be able to track failures by version. A feature that works correctly in version 1.0 may fail in version 1.1, and the maintenance team may be testing the existing lifecycle of v1.0 in parallel with the development team testing v1.1. Therefore, by developing a master set of releases/versions in the Release Management module, you can have the different testing teams correctly assign their testing actions to the appropriate version. There are two types of release artifact in SpiraPlan\u00ae - major product releases that are displayed with the blue release icon and represent major versions of the system, and release Sprints (aka builds) that are displayed with a yellow icon and represent intermediate builds/sprints of the system. Note: Sprints can be contained within a Release, but not the other way round. The main differences between releases and sprints are as follows: Releases are independent versions of the system being tested and as such, you can map a requirement directly to a release, indicating the release of the system that the requirement will be fulfilled in. When you report on a release (e.g. on the product home or in one of the reports) any child sprints are automatically taken into account, and test runs and incidents that are related to the child builds/sprints will get included in the release reports. Child releases on the other hand are not aggregated up into the parent release.","title":"Release Management"},{"location":"Spira-User-Manual/Release-Management/#release-list","text":"When you click on the Planning > Releases global navigation link, you will initially be taken to the release list screen illustrated below: The release list will contain all the releases and sprints associated with current product. When you create a new product, this list will initially be empty, and you will have to use the \" Insert \" button to start adding releases and sprints to the product. The hierarchical organization of releases in the list is configurable, so you can organize the various releases in the way that makes most sense for a particular product. Typically you have the major releases as the top-level items, with sub-releases, builds and sprints as the lower-level items. All of the releases in the list have a release-name, together with the assigned version number for that release, the start-date and end-date for the release, the number of estimated product personnel working on that release, the planned effort for the release, the total effort currently scheduled (as tasks), the available effort for new tasking, the release id, the type of each release, its status, and a set of custom properties defined by the product owner. For those releases that have test cases mapped against them, the execution status of the various test cases associated with the release is displayed in aggregate for each item as a graphical bar diagram. If you position the mouse over the execution status indicator you will see the detailed execution information displayed as a tooltip. For those releases that have at least one requirement task associated with them, they will display a block graph that illustrates the relative numbers of task that are on-schedule (green), late-starting (yellow), late-finishing (red) or just not-started (grey). These values are weighted by the effort of the task, so that larger, more complex tasks will be change the graph more than the smaller tasks. To determine the exact task progress information, position the mouse pointer over the bar-chart and the number of associated tasks, along with the details of how many are in each status will be displayed as a \"tooltip\". Clicking on a release's hyperlink will take you to the release details page for the item in question.","title":"Release List"},{"location":"Spira-User-Manual/Release-Management/#filtering","text":"Read about how to create and manage filters .","title":"Filtering"},{"location":"Spira-User-Manual/Release-Management/#insert","text":"The \" Insert \" button has an attached dropdown menu that allows you to choose whether to insert a release or sprint (if you just click \" Insert \" it defaults to inserting a release). In either case, it will insert the new release / sprint above the currently selected item -- i.e. the one whose check-box has been selected, at the same level in the hierarchy. If you want to insert a release/sprint below a summary item, you need to insert it first, then indent it with the \" Indent \" button. If you insert a release without first selecting an existing release from the list, the new release will simply be inserted at the end of the list. Once the new release has been inserted, the item is switched to \"Edit\" mode so that you can change the default name, active flag, version number and creator.","title":"Insert"},{"location":"Spira-User-Manual/Release-Management/#delete","text":"Clicking on the \" Delete \" button deletes all the releases whose check-boxes have been selected. If any of the releases have child releases/sprint, then the child releases and sprints are also deleted.","title":"Delete"},{"location":"Spira-User-Manual/Release-Management/#indent","text":"Clicking on the \" Indent \" button indents all the releases whose check-boxes have been selected. Note: you cannot indent a release or sprint if it is below a sprint, as sprints are not allowed to have child items.","title":"Indent"},{"location":"Spira-User-Manual/Release-Management/#outdent","text":"Clicking on the \" Outdent \" button de-indents all the releases whose check-boxes have been selected.","title":"Outdent"},{"location":"Spira-User-Manual/Release-Management/#refresh","text":"Clicking on the \" Refresh \" button simply reloads the release list. This is useful as other people may be modifying the list of releases at the same time as you, and after stepping away from the computer for a short-time, you should click this button to make sure you are viewing the most current release list for the product.","title":"Refresh"},{"location":"Spira-User-Manual/Release-Management/#edit","text":"Each release/sprint in the list has an \" Edit \" button display in its right-most column. When you click this button or click on any of the cells in the row, you change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Save \" buttons are displayed in the last column: If you click \" Edit \" on more than one row, the \" Save \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then update the changes by clicking the one \" Save \" button. Also, if you want to make the same change to multiple rows (e.g. to change five releases from \"active\" to \"inactive\"), you can click on the \"fill\" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the \" Edit \" button on the same row as the Filters and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Save \" to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes.","title":"Edit"},{"location":"Spira-User-Manual/Release-Management/#show-level","text":"Choosing an indent level from the 'Show Level' drop down box allows you to quickly and easily view the entire release list at a specific indent level. For example you may want to see all releases drilled-down to the third level of detail. To do this you would simply choose 'Level 3' from the list, and the releases will be expanded / collapsed accordingly.","title":"Show Level"},{"location":"Spira-User-Manual/Release-Management/#show-hide-columns","text":"This drop-down list allows you to change the fields that are displayed in the release list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner.","title":"Show / Hide Columns"},{"location":"Spira-User-Manual/Release-Management/#copying-releasessprints","text":"To copy a release/sprint or set of releases/sprints, simply select the check-boxes of the release/sprint you want to copy and then select the Edit > Copy Items menu option. This will copy the current release/sprint selection to the clipboard. Then you should select the place where you want the releases/sprints to be inserted and choose the Edit > Paste Items option. The releases/sprints will now be copied into the destination location you specified. The name of the copied releases/sprints will be prefixed with \"Copy of...\" to distinguish them from the originals. Note that copied releases/sprints will also include the test mapping information from the originals.","title":"Copying Releases/Sprints"},{"location":"Spira-User-Manual/Release-Management/#moving-releasessprints","text":"To move a release/sprint in the hierarchy, there are two options: Click on the release/sprint you want to move and drag the icon to the location you want it moved. An empty space will appear to show you where it will be inserted. Once you have the requirement positioned at the correct place that you want it inserted, just release the mouse button. To move multiple items simply select their checkboxes and then drag-and-drop one of the selected items Alternatively you can simply select the check-boxes of the release/sprint you want to move and then select the Edit > Cut Items menu option. This will cut the current release/sprint selection to the clipboard. Then you should select the place where you want the release/sprint to be inserted and choose the Edit > Paste Items option. The release/sprint will now be moved into the destination location you specified.","title":"Moving Releases/Sprints"},{"location":"Spira-User-Manual/Release-Management/#exporting-releasessprints","text":"To export releases/sprints from the current product to another product in the system, select the check-boxes of the releases/sprints you want to export and then click the Tools > Export to Product item. This will then bring up a list of possible destination products: Once you have chosen the destination product and clicked the \" Export \" button, the releases/sprints will be exported from the current product to the destination product. Any file attachments will also be copied to the destination product along with the release/sprint.","title":"Exporting Releases/Sprints"},{"location":"Spira-User-Manual/Release-Management/#creating-test-sets-from-releases","text":"As a shortcut you can click the Tools > Create Test Set option to create a new test set for each of selected releases. The created test sets will include all of the test cases associated with a release. This is useful in regression testing when you have created a new release and want to be able to quickly assign a tester to ensure that all the functionality in the release works as expected.","title":"Creating Test Sets from Releases"},{"location":"Spira-User-Manual/Release-Management/#printing-or-saving-items","text":"To quickly print a single release/sprint or list of releases/sprints you can select the items' checkboxes and then click Tools > Print Items. This will display a popup window containing a printable version of the selected items. You can also save the report in a variety of common formats from the same Tools menu.","title":"Printing or Saving Items"},{"location":"Spira-User-Manual/Release-Management/#right-click-context-menu","text":"SpiraPlan\u00ae provides a shortcut -- called the context menu - for accessing some of the most commonly used functions, so that you don't need to move your mouse up to the toolbar each time. To access the context menu, right-click on any of the rows in the release list and the following menu will be displayed: You can now choose any of these options as an alternative to using the icons in the toolbar","title":"Right-Click Context Menu"},{"location":"Spira-User-Manual/Release-Management/#release-details","text":"When you click on release item in the release list , you are taken to the release details page illustrated below: This page is made up of three areas; the left pane displays the releases list navigation; the right pane's header, which displays: the operations toolbar; the hierarchical structure the release is in ; the editable name of the selected release; and the info bar (with a shaded background), which also contains the workflow status transitions (see below); and the right pane's tabbed interface with rich information related to the release. Please note that on smaller screen sizes the navigation pane is not displayed. While the navigation pane has a link to take you back to the releases list, on mobile devices a 'back' button is shown on the left of the operations toolbar. The navigation pane can be collapsed by clicking on the \"-\" button, or expanded by clicking anywhere on the gray title area. On desktops the user can also control the exact width of the navigation pane by dragging and dropping a red handle that appears on hovering at the rightmost edge of the navigation pane. The navigation pane consists of a link that will take you back to the release list, as well as a list of the other releases in the current product. This latter list is useful as a navigation shortcut; you can quickly view the test run information of all the other releases by clicking on the navigation links without having to first return to the release list page. The navigation list can be switched between two different modes: The list of releases matching the current filter The list of all releases, irrespective of the current filter The top part of the right pane allows you to view and/or edit the details of the particular release. In addition you can delete the current artifact by choosing \" Delete \", discard any changes made by clicking \" Refresh \", or print or export it by clicking one of the options from the Tools dropdown menu. The lower part of the right pane can be in one of seven possible modes that can be selected: \"Overview\", \"Incidents\", \"Reqs & Tasks\", \"Test Cases\", \"Test Runs\", \"Attachments\", and \"History\". Each of the different views is described separately below.","title":"Release Details"},{"location":"Spira-User-Manual/Release-Management/#emailing","text":"Read about emailing an artifact to colleagues using Spira .","title":"Emailing"},{"location":"Spira-User-Manual/Release-Management/#followers","text":"Read about how to add and manage followers to an artifact .","title":"Followers"},{"location":"Spira-User-Manual/Release-Management/#workflows-and-statuses","text":"Releases can have the following statuses: planned, in progress, completed, closed, deferred, and cancelled. Note that releases marked as closed, deferred, or cancelled cannot be associated with other artifacts -- for example an incident's resolved release cannot by a cancelled release. Read about using workflows to change the status of your artifact .","title":"Workflows and Statuses"},{"location":"Spira-User-Manual/Release-Management/#overview-details","text":"The Overview tab is divided into a number of different sections. Each of these can be collapsed or expanded by clicking on the title of that section. It displays the description, fields and comments associated with the requirement. The top part of this tab displays the various standard fields and custom properties associated with the requirement. Fields (both standard and custom) are grouped under the collapsible headings (marked by orange text and underline) in the screenshot below. For instance, all fields regarding dates are grouped together in the \"Dates and Times\" area. When you make changes to the release/sprint's start-date, end-date, number of product personnel resources, or number of non-working person days, the system will automatically calculate how many hours of effort (planned effort) are available in the release/sprint for assigning tasks. As you begin assigning tasks -- either through the Tasks tab or the Sprint Planning screen -- the total estimated effort of the tasks is subtracted from this planned effort to give the \"available effort\".","title":"Overview -- Details"},{"location":"Spira-User-Manual/Release-Management/#overview-detailed-information","text":"The Detailed Information section contains the long, formatted description of the requirement, as well as any rich text custom fields. You can enter rich text or paste in from a word processing program or web page into these fields. Clicking on the shaded areas of one of these detailed fields will display the rich text toolbar.","title":"Overview -- Detailed Information"},{"location":"Spira-User-Manual/Release-Management/#overview-comments","text":"The Comments tab shows the current discussion thread for this release: All existing comments are listed in order by entered date (either newest-first or oldest-first). To create a new comment, enter the text into the text box, and then click the \" Add Comment \" button.","title":"Overview - Comments"},{"location":"Spira-User-Manual/Release-Management/#overview-builds","text":"This section displays the list of builds associated with the current release/sprint. Each build is listed together with its name, creation date, status (whether the build succeeded or failed), and last updated date. Clicking on the hyperlink for the build name will open up the Build Details page . You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Apply Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field.","title":"Overview - Builds"},{"location":"Spira-User-Manual/Release-Management/#incidents","text":"This tab displays the incidents associated with the selected release. The incident list can be one of three modes: Detected in this Release -- this will display a list of all the incidents that were detected during the testing of the selected release. This is useful in determining if there are open incidents associated with a release that need to be dealt with. Resolved in this Release -- This will display a list of all the incidents that have been reportedly resolved in this release. This is useful for double-checking that all the resolved incidents for a release have indeed been fixed. Verified in this Release -- This will display a list of the incidents that have been verified as being fixed in this release. This is useful for generating release notes for a specific release indicating what changes and enhancements have been made in the release. Regardless of the mode, each incident is listed together with the type, status, priority, name, owner, detector, detection date and a link to the actual incident details : To change between the three modes outlined above, select the desired mode from the drop-down list contained within the header of the incident list table. You can perform the following actions: Refresh -- updates the list of incidents from the server, useful if other people are adding incidents to this release at the same time. You can filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field. Edit -- Clicking the \" Edit \" button to the right of the incident allows you to edit the incident inline directly on this screen. This functionality is limited to product owners. Show/Hide Columns -- Allows you to choose which incident columns are visible","title":"Incidents"},{"location":"Spira-User-Manual/Release-Management/#reqs-tasks","text":"This tab displays the list of requirements (excluding packages - in other words it displays 'user stories') and their associated child tasks that need to be completed for the release/sprint to be completed: Each of the requirements and associated tasks is displayed together with its: name description (by hovering the mouse over the name) priority progress indicator current owner estimated effort actual effort producted effort story points (requirements only) and numeric task identifier Clicking on a requirement will bring up the requirement details page . Clicking the triangle by a requirement will expand/collapse its list of tasks. Clicking on a task name will bring up the Task Details page which is described in more detail in Task Tracking > Task Details . This allows you to edit the details of an existing task. You can perform the following actions on a task from this screen: Insert Task -- inserts a new task in the task list under the specified requirement, with a default set of values. The task will be associated with the specified requirement and current release/sprint. If no requirement is selected, the task will only be associated with the current release/sprint Delete -- deletes the task from the product. Refresh -- updates the list of requirements and tasks from the server, useful if other people are adding requirements and/or tasks to this release/sprint at the same time. You can filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field. Edit -- Clicking the \" Edit \" button to the right of the requirement or task allows you to edit the item inline directly on this screen. Only columns visible will be editable. Show Level -- Allows you to quickly expand/collapse all the requirements in the list.","title":"Reqs &amp; Tasks"},{"location":"Spira-User-Manual/Release-Management/#test-cases","text":"This tab shows the test coverage information for the release in question: The tab displays a grid containing the test cases already mapped to this release. You can filter that list by the test case type, name, status, execution status, execution date, priority, product name and ID. You can remove an existing test case by selecting its check box and clicking the 'Delete' button. This doesn't delete the test case, just removes it from the release. Hovering the mouse over the names of the test cases will display a \"tooltip\" consisting of the test case name, place in the folder structure and a detailed description. To add a new test case to the release, simply click on the 'Add' button: You can search for a test case by its ID if you know it (make sure to include the \"TC\" prefix): Otherwise, you can search for the test cases by choosing a folder from the dropdown and/or entering a partial name match: One you have found the desired test case(s), simply select their check boxes and click the 'Save' button to add them to the current release. Finally, as a shortcut you can click the \" Create Test Set from This Release \" link to create a new test set from this release, that will include all of the test cases associated with this release. This is useful in regression testing when you have created a new release and want to be able to quickly assign a tester to ensure that all the functionality in the release works as expected.","title":"Test Cases"},{"location":"Spira-User-Manual/Release-Management/#test-runs","text":"This view displays the list of all the test runs executed against the release. Each test run is listed together with the date of execution, the name of the test case, the name of the tester, the release/version of the system that the test was executed against, the name of the test set (if applicable), the overall execution status for the test case in that run and a link to the actual test run details . In addition, you can choose to display any of the custom properties associated with the test run. The \"Show/hide columns\" drop-down list allows you to change the fields that are displayed in the test run list as columns. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. The displayed columns can be any standard field or custom property. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" link. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field.","title":"Test Runs"},{"location":"Spira-User-Manual/Release-Management/#attachments","text":"Read about how the attachments tab works","title":"Attachments"},{"location":"Spira-User-Manual/Release-Management/#history","text":"Read about how the history tab works","title":"History"},{"location":"Spira-User-Manual/Release-Management/#build-details","text":"When you click on a build entry in the build list, you are taken to the build details page illustrated below: This page is made up of three areas; the left pane is the navigation window, the upper part of the right pane contains the build detailed information itself, and the bottom part of the right pane displays different information associated with the build. The navigation pane consists of a link that will take you back to the build list, as well as a list of the other builds that belong to the same release/sprint as the current one. The top part of the right pane allows you to view the details of the build including a detailed description of why it succeeded or failed. Since builds are populated from an external Continuous Integration server the build information will always be read-only inside the SpiraPlan user interface. The lower part of the right pane contains tabs that can display different information associated with the build. Each of the tabs -- \"Associations\", \"Incidents\", \"Revisions\", and \"Test Runs\" - is described separately below.","title":"Build Details"},{"location":"Spira-User-Manual/Release-Management/#associations","text":"This tab displays a list of SpiraPlan artifacts that have been associated with any of the source code revisions that were included in the current build:","title":"Associations"},{"location":"Spira-User-Manual/Release-Management/#revisions","text":"This tab displays a list of the source code revisions that were included in the current build. The grid can be sorted and filtered by using the appropriate controls:","title":"Revisions"},{"location":"Spira-User-Manual/Release-Management/#incidents_1","text":"This tab displays the list of incidents that have been fixed in the current build. The grid can be sorted and filtered by using the appropriate controls:","title":"Incidents"},{"location":"Spira-User-Manual/Release-Management/#test-runs_1","text":"This tab displays a list of all the tests that have been executed against the current build. The grid can be sorted and filtered by using the appropriate controls:","title":"Test Runs"},{"location":"Spira-User-Manual/Reports-Center/","text":"Reports Center This section describes the reporting features of SpiraPlan\u00ae, including an overview of each of the report types that are available. When you click on the \"Reports\" tab on the global navigation bar, you will initially be taken to the reports home page illustrated below: This page consists of three main areas: The top left-hand pane displays a list of any reports that have either been saved by the currently logged in user, or those reports created by other members of the product, that have been marked (by that user) as 'shareable'. The bottom left-hand main pane displays a list of the printable reports available in the system, categorized by the artifact they primarily relate to (requirements, test cases, incidents and releases). Clicking on any of the report hyperlinks will take you to the configuration page for the report in question below for details). The right-hand pane is a dashboard that contains the set of graph widgets configured by the current user. By default the dashboard will display: the Incident Progress Rate, Test Run Progress Rate, Requirement Summary, Test Case Summary, Incident Aging and Task Burndown. In addition to the graphs displayed by default, you can click on the \" Add Items \" buttons to add additional graphs to the reporting dashboard: Each of the graphs is described in more detail in Summary Graphs to Date-Range Graphs . Reports Configuration The configuration page for each report differs slightly, but the general format is illustrated below (please note all sections are shown in orange text with a line beneath and are shown here in the collapsed state -- click the orange text to expand the section): You can configure the reports in the following ways: Report Format -- This allows you to specify the display format of the report. Depending on the specific report, they can be displayed as a web-page (HTML), downloaded as a Microsoft Word document, downloaded as a Microsoft Excel spreadsheet or downloaded as a Microsoft Product file. In addition there is a raw-XML format that allows you to export the underlying report data into any external reporting system that supports XML import. Report Elements -- This allows you to determine which types of information to include in the report. This varies by report type, but includes the dependent items related to the artifact being reported on (attachments, test steps, coverage, history, etc.) Standard Field Filters -- This allows you to constrain the range of data being reported on, based on the various fields associated with the artifact in question. These filters are typically selections from multi-valued-dropdown lists and date-ranges. Custom Property Filters -- This allows you to constrain the range of data being reported on, based on the custom fields associated with the artifact by your product administrator. These filters can be either freetext or drop-down lists. Sort Options - This option is only available for the non-hierarchical data reports (i.e. for test cases, test sets, test runs, incidents and tasks) and allows you to specify the sort order of the results returned in the report. For the hierarchical-data based reports the sort order is always the order of the hierarchy. Report Name -- If you would like to save the report configuration so that you can quickly re-run it at a later date, you just need to enter a name for the report and indicate (by selecting the checkbox or not) whether you want this report to be private or shared by all members of the product. Once you have selected the format, elements and filters, clicking the \" Create Report \" button launches the report in a new window. Each of the reports is described in Requirement Reports to Release Reports below: Requirement Reports Requirements Summary Report This report displays all of the requirements defined for the current product in the order they appear in the requirements list. The requirement's details and coverage status are displayed in a summary list form: Requirements Detailed Report This printable report displays all of the requirements defined for the current product in the order they appear in the requirements list. For each individual requirement, the name, priority, author, status and coverage status are displayed, along with tables containing the list of covering test cases, linked incidents/requirements, associated tasks, attached documents, and the change history: Requirements Plan This report displays a complete work breakdown structure of the product from a requirements perspective, including all requirements and tasks organized by schedule: Requirements Traceability Matrix This report displays a matrix of the requirements in the system with their list of covering test cases and a**ssociated, mapped requirements:** Test Case Reports Test Case Summary Report This report displays all of the test cases defined for the current product in the order they appear in the test case list. The test case's details and execution status are displayed in a summary grid form with the test steps optionally displayed: Test Case Detailed Report This report displays all of the test cases defined for the current product in the order they appear in the test case list. The test case's details and execution status are displayed, along with sub-tables containing the list of test steps, test runs, attached documents, the change history, and a list of any associated open incidents: Test Set Summary Report This report displays all of the test sets defined for the current product in the order they appear in the test set list. The test set's details and execution status are displayed in a summary list form: Test Set Detailed Report This report displays all of the test sets defined for the current product in the order they appear in the test set list. The test set's details and execution status are displayed, along with sub-tables containing the list of test cases, test runs, attached documents, and the change history: Printable Test Scripts This printable report is useful when you want to be able to conduct the testing activities offline on paper, or when testers need paper copies of the test script in addition to using the online test execution wizard. In either case, this report simply displays all of the test cases defined for the current product in the order they appear in the test case list together with their detailed test steps and a list of any attached documents. Test Run Summary Report This report displays all of the test runs defined for the current product. The test run's details and execution status are displayed in a summary grid form: Test Run Detailed Report This report displays all of the test runs defined for the current product in date order (most recent first). The test run's details and execution status are displayed, along with sub-tables containing the list of test run steps, and a list of any associated open incidents: Test Case Traceability This report displays a matrix of the test cases in the system with the list of mapped releases, incidents and test sets: Incident Reports Incident Summary Report This report displays all of the incidents tracked for the current product. The incident's details are displayed in a summary list form: Incident Detailed Report This printable report displays all of the incidents tracked for the current product sorted by incident number. For each individual incident, the name, type, priority, status, opener, owner and close date are displayed, along with tables containing the detailed description and resolutions as well as a tabular list of attached documents, linked requirements/incidents and the change history: Task Reports Task Summary Report This report displays all of the tasks tracked for the current product. The task's details are displayed in a summary list form: Task Detailed Report This report displays all of the tasks tracked for the current product. The task's details are displayed, along with a tabular list of attached documents and the change history: Release Reports Release Summary Report This report displays all of the releases and sprints defined for the current product in the order they appear in the release/sprint hierarchy. The release's details are displayed in a summary list form: Release Detailed Report This report displays all of the releases and sprints defined for the current product in the order they appear in the release/sprint hierarchy. The release's details are displayed, along with sub-tables containing the list of requirements added, mapped test cases, test runs executed, incidents resolved, attached documents, scheduled tasks and the change history: Release Plan Report This report displays a complete work breakdown structure of the product from a release perspective, including all releases, sprints, requirements, tasks and incidents organized by schedule: Summary Graphs Requirements Summary Graph The requirements summary graph shows how many requirements are currently in a product. The number of requirements is displayed according to the criteria that you specify. You can specify the type of data displayed along the x-axis, and the requirement information which is used to group the data. When you first open the graph you will be asked to pick the field that you would like to display on the x-axis and the field that you would like to group the data by. Once you have chosen the appropriate fields the graph will be displayed: In this version of the report, the x-axis represents the requirements' status, and the individual bars are grouped by requirement importance. Each data-value can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph: Clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Test Case Summary Graph The test case summary graph shows how many test cases are currently in a product. The number of test cases is displayed according to the criteria that you specify. You can specify the type of data displayed along the x-axis, and the test case information which is used to group the data. When you first open the graph you will be asked to pick the field that you would like to display on the x-axis and the field that you would like to group the data by. Once you have chosen the appropriate fields the graph will be displayed: In this version of the report, the x-axis represents the test case execution status, and the individual bars are grouped by test case priority. Each data-value can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Test Run Summary Graph The test run summary graph shows how many test runs are currently in a product. The number of test runs is displayed according to the criteria that you specify. You can specify the type of data displayed along the x-axis, and the test run information which is used to group the data. When you first open the graph you will be asked to pick the field that you would like to display on the x-axis and the field that you would like to group the data by. Once you have chosen the appropriate fields the graph will be displayed: In this version of the report, the x-axis represents the test run execution status, and the individual bars are grouped by test run type. Each data-value can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Incident Summary Graph The incident summary graph shows how many incidents are currently in a product. The number of incidents is displayed according to the criteria that you specify. You can specify the type of data displayed along the x-axis, and the incident information which is used to group the data. When you first open the graph you will be asked to pick the field that you would like to display on the x-axis and the field that you would like to group the data by. Once you have chosen the appropriate fields the graph will be displayed: In this version of the report, the x-axis represents the incidents' status, and the individual bars are grouped by the type of incident. Each data-value can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Task Summary Chart The task summary graph shows how many tasks are currently in a product. The number of tasks is displayed according to the criteria that you specify. You can specify the type of data displayed along the x-axis, and the task information which is used to group the data. When you first open the graph you will be asked to pick the field that you would like to display on the x-axis and the field that you would like to group the data by. Once you have chosen the appropriate fields the graph will be displayed: In this version of the report, the x-axis represents the tasks' priority, and the individual bars are grouped by the status of task. Each data-value can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Test Set Summary Graph The test set summary graph shows how many test set are currently in a product. The number of test sets is displayed according to the criteria that you specify. You can specify the type of data displayed along the x-axis, and the test set information which is used to group the data. When you first open the graph you will be asked to pick the field that you would like to display on the x-axis and the field that you would like to group the data by. Once you have chosen the appropriate fields the graph will be displayed: In this version of the report, the x-axis represents the test set status, and the individual bars are grouped by the name of the tester (owner). Each data-value can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Snapshot Graphs Requirements Coverage Graph The requirements coverage graph shows how many requirements are currently in a product, according to their test coverage status. The x-axis of the report represents the various test execution statuses that a requirement can have as its coverage status (plus the Not-Covered status), and the individual bars are grouped by the requirements importance. Each data-value can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. You can also filter the graph to just display data for a specific release/sprint as well as for the product as a whole. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Requirements Burndown Graph The Requirements Burndown graph shows the remaining number of story points that needs to be completed for each release/sprint in the product with separate lines for the estimated and ideal burndown. In addition, the graph includes bars for the completed number of story points in each time period on the x-axis: The y-axis of the graph displays the total remaining number of story points that needs to be done (the actual burndown), with a blue line indicating the ideal burndown. In addition, there are bars displayed at each interval of the x-axis that shows the completed number of story points for that interval. The x-axis can be configured to display three different levels of granularity: All Releases -- This shows the total remaining number of story points that needs to be done for each of the releases in the product Specific Release -- This shows the total remaining number of story points that needs to be done for each of the sprints in the selected release Specific Sprint -- This shows the total remaining number of story points that needs to be done for each working day in the date-range covered by the selected sprint. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Requirements Burnup Graph The Requirements Burnup graph shows the cumulative number of story points outstanding for each release/sprint in the product with separate lines for the estimated and ideal burnup. In addition, the graph includes bars for the number of completed story points in each time period on the x-axis. The y-axis of the graph displays the cumulative increase in number of story points for the product (the actual burnup), with a blue line indicating the ideal burnup. In addition, there are bars displayed at each interval of the x-axis that shows the number of completed story points for that interval. The x-axis can be configured to display three different levels of granularity: All Releases -- This shows the increase in number of story points for each of the releases in the product Specific Release -- This shows the increase in number of story points for each of the sprints in the selected release Specific Sprint -- This shows the increase in number of story points for each working day in the date-range covered by the selected sprint. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Requirements Velocity Graph The Requirements Velocity graph shows the total number of story points that have been completed (or planned to be completed) in a particular release, sprint or time-period (called the velocity). The actual velocity is displayed along with the overall average velocity (in blue) and the rolling average velocity (in green): The y-axis of the graph displays the total number of story points, and the x-axis can be configured to display three different levels of granularity: All Releases -- This shows the total number of story points for each of the releases in the product Specific Release -- This shows the total number of story points for each of the sprints in the selected release Specific Sprint -- This shows the total number of story points for each working day in the date-range covered by the selected sprint. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Incident Aging Graph The incident aging chart displays the number of days incidents have been left open in the system. The chart is organized as a stacked histogram, with the count of incidents on the y-axis and different age intervals on the x-axis. Each bar-chart color represents a different incident priority, giving a product manager a snapshot view of the age of open product incidents by priority. This report can be filtered by the type of incident, so for example you can see the aging of just bugs, or just issues for the product in question. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Incident Turnaround Time Graph The incident turnaround time chart displays the number of days incidents have taken to be closed (from the time they were first raised) in the system. The chart is organized as a stacked histogram, with the count of incidents on the y-axis and different turnaround time intervals on the x-axis. Each bar-chart color represents a different incident priority, giving a product manager a snapshot view of the turnaround time of product incidents by priority. This report can be filtered by the type of incident, so for example you can see the turnaround time of just bugs, or just issues for the product in question. Clicking on \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Task Velocity Chart The Task Velocity graph shows the total estimated and actual effort (in number of hours) delivered in each product release and/or sprint: The y-axis of the graph displays the total estimated and actual effort delivered (in hours), and the x-axis can be configured to display three different levels of granularity: All Releases -- This shows the total estimated and actual effort for each of the releases in the product Specific Release -- This shows the total estimated and actual effort for each of the sprints in the selected release Specific Sprint -- This shows the total estimated actual effort for each working day in the date-range covered by the selected sprint. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Task Burnup Chart The Task Burnup graph shows the cumulative amount of work outstanding for each release/sprint in the product with separate lines for the estimated and ideal burnup. In addition, the graph includes bars for the remaining and completed effort in each time period on the x-axis. The y-axis of the graph displays the cumulative increase in work (in hours) for the product (the actual burnup), with a blue line indicating the ideal burnup. In addition, there are bars displayed at each interval of the x-axis that shows the remaining effort and completed effort for that interval. The x-axis can be configured to display three different levels of granularity: All Releases -- This shows the increase in work for each of the releases in the product Specific Release -- This shows the increase in work for each of the sprints in the selected release Specific Sprint -- This shows the increase in work for each working day in the date-range covered by the selected sprint. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Task Burndown Chart The Task Burndown graph shows the remaining work (in hours) that needs to be done for each release/sprint in the product with separate lines for the estimated and ideal burndown. In addition, the graph includes bars for the remaining and completed effort in each time period on the x-axis. The y-axis of the graph displays the total remaining work that needs to be done (the actual burndown), with a blue line indicating the ideal burndown. In addition, there are bars displayed at each interval of the x-axis that shows the remaining effort and completed effort for that interval. The x-axis can be configured to display three different levels of granularity: All Releases -- This shows the total remaining work that needs to be done for each of the releases in the product Specific Release -- This shows the total remaining work that needs to be done for each of the sprints in the selected release Specific Sprint -- This shows the total remaining work that needs to be done for each working day in the date-range covered by the selected sprint. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Date-Range Graphs Test Run Progress Rate Graph The test run progress rate graph shows how many tests have been executed during a period of time, and what execution status was recorded. The report can be displayed for a specific date-range and for the entire product or for a specific release/sprint: In this version of the report, the y-axis represents the number of test runs executed in each 24 hour period, and the x-axis represents a specific week in the time-span. Each data-bar can be viewed by positioning the mouse pointer over the point, and a \"tooltip\" will pop-up listing the actual data value. You can filter the report by the release/sprint that the test run was executed against, and also change the date range. If you choose a smaller date-range, the x-axis will switch from weekly to daily and if you choose a larger date-range, the x-axis will switch to monthly. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Test Case Progress Rate Graph This graph displays the number of test case executions for the specified date range for that specific date interval. That means it will display for each day, the total number of test cases executed ignoring the status from any previous days. Any test cases not executed that day will be considered \"not run\" and will appear in the \"not run\" category. For example, if you have 10 test cases created on day 1 you will see 10 test cases \"not run\" on day 1. On day 2, you execute 5 test cases and fail them all, you will now see 5 test cases failed and 5 not run. On day 3, you execute 3 of the previous 5 test cases and pass them. You will now see 3 test cases passed, 0 failed and 7 not run. Test Case Cumulative Progress Graph This graph displays the number of test case executions cumulatively over the specified date range. That means it will display for each day, the total number of test cases executed plus the status from any previous days that have not been changed. Any test cases not executed up to that point will be considered \"not run\" and will appear in the \"not run\" category. For example, if you have 10 test cases created on day 1 you will see 10 test cases \"not run\" on day 1. On day 2, you execute 5 test cases and fail them all, you will now see 5 test cases failed and 5 not run. On day 3, you execute 3 of the previous 5 test cases and pass them. You will now see 3 test cases passed, 2 failed and 5 not run. Incident Progress Rate Graph The incident progress rate chart displays the total number of incidents created and closed over a particular date-range, either for all incident types or for a specific incident type: In this version of the report, the y-axis represents the number of incidents (either created or closed in a 24 hour period), and the x-axis represents a specific day in the time-span. Each data-point can be viewed by positioning the mouse pointer over the point, and a \"tooltip\" will pop-up listing the actual data value. You can filter the report by the type of incident, and also change the date range (e.g. displaying only the bugs for the date range). If you choose a smaller date-range, the x-axis will switch from weekly to daily and if you choose a larger date-range, the x-axis will switch to monthly. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Cumulative Incident Count Graph The cumulative incident count chart displays the cumulative total number of incidents logged in the system for the current product over a particular date-range, either for all incident types or for a specific incident type. The report displays two data series, one illustrating the total count of all incidents, the other the total count of all open incidents (i.e. with status not set to fixed or closed): In this version of the report, the y-axis represents the number of incidents, and the x-axis represents a specific week in the time-span. Each data-point can be viewed by positioning the mouse pointer over the point, and a \"tooltip\" will pop-up listing the actual data value. You can also filter the type of incident being reported, as well as change the date interval. If you choose a smaller date-range, the x-axis will switch from weekly to daily and if you choose a larger date-range, the x-axis will switch to monthly. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Open Incident Count Graph The open incident count chart displays the net number of open incidents in the system for the current product over a particular date-range categorized by incident priority, either for all incident types or for a specific incident type. For this chart, \"open\" is defined as any incident with an empty \"Closed On\" date. The incident status is not used for this chart. In this version of the report, the y-axis represents the number of incidents, and the x-axis represents a specific week in the time-span. The exact count of each bar in the stacked histogram can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. You can also filter the type of incident being reported, as well as change the date interval. If you choose a smaller date-range, the x-axis will switch from weekly to daily and if you choose a larger date-range, the x-axis will switch to monthly. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Incident Count by Status Graph The incident status count chart displays the number of open incidents in the system for the current product over a particular date-range categorized by incident status, either for all incident types or for a specific incident type. For this chart, \"open\" is defined as any incident with an empty \"Closed On\" date. The incident status is not used for this chart. In this version of the report, the y-axis represents the number of incidents, and the x-axis represents a specific week in the time-span. The exact count of each bar in the stacked histogram can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. You can also filter the type of incident being reported, as well as change the date interval. If you choose a smaller date-range, the x-axis will switch from weekly to daily and if you choose a larger date-range, the x-axis will switch to monthly. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Custom Graphs These are the graphs that a SpiraPlan administrator has created in the Administration section of the system and published for use by end users. They rely on specific ESQL data queries, so the data represented will depend on the query created by the administrator. To add a custom graph to your reports dashboard, click on the Add Items icon and choose Custom Graphs: Once you add the Custom Graphs widget to your dashboard, you will see the following: You can change which custom graph will be used in this widget by simply changing the values in the dropdown list: You can also change the graph display between the three display types: donut, bar, and line. The donut style of graph is only available for reports with a single data series: Clicking on the \" Data Grid \" icon will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the data grid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats). Risk Reports Risk Summary Report This report displays all of the risks tracked for the current project. The risks are displayed, along with a tabular list of mitigations, tasks, comments, attached documents, and change history: Risk Detailed Report This report displays all of the risks tracked for the current project. The risks are displayed in a summary table form:","title":"Reports Center"},{"location":"Spira-User-Manual/Reports-Center/#reports-center","text":"This section describes the reporting features of SpiraPlan\u00ae, including an overview of each of the report types that are available. When you click on the \"Reports\" tab on the global navigation bar, you will initially be taken to the reports home page illustrated below: This page consists of three main areas: The top left-hand pane displays a list of any reports that have either been saved by the currently logged in user, or those reports created by other members of the product, that have been marked (by that user) as 'shareable'. The bottom left-hand main pane displays a list of the printable reports available in the system, categorized by the artifact they primarily relate to (requirements, test cases, incidents and releases). Clicking on any of the report hyperlinks will take you to the configuration page for the report in question below for details). The right-hand pane is a dashboard that contains the set of graph widgets configured by the current user. By default the dashboard will display: the Incident Progress Rate, Test Run Progress Rate, Requirement Summary, Test Case Summary, Incident Aging and Task Burndown. In addition to the graphs displayed by default, you can click on the \" Add Items \" buttons to add additional graphs to the reporting dashboard: Each of the graphs is described in more detail in Summary Graphs to Date-Range Graphs .","title":"Reports Center"},{"location":"Spira-User-Manual/Reports-Center/#reports-configuration","text":"The configuration page for each report differs slightly, but the general format is illustrated below (please note all sections are shown in orange text with a line beneath and are shown here in the collapsed state -- click the orange text to expand the section): You can configure the reports in the following ways: Report Format -- This allows you to specify the display format of the report. Depending on the specific report, they can be displayed as a web-page (HTML), downloaded as a Microsoft Word document, downloaded as a Microsoft Excel spreadsheet or downloaded as a Microsoft Product file. In addition there is a raw-XML format that allows you to export the underlying report data into any external reporting system that supports XML import. Report Elements -- This allows you to determine which types of information to include in the report. This varies by report type, but includes the dependent items related to the artifact being reported on (attachments, test steps, coverage, history, etc.) Standard Field Filters -- This allows you to constrain the range of data being reported on, based on the various fields associated with the artifact in question. These filters are typically selections from multi-valued-dropdown lists and date-ranges. Custom Property Filters -- This allows you to constrain the range of data being reported on, based on the custom fields associated with the artifact by your product administrator. These filters can be either freetext or drop-down lists. Sort Options - This option is only available for the non-hierarchical data reports (i.e. for test cases, test sets, test runs, incidents and tasks) and allows you to specify the sort order of the results returned in the report. For the hierarchical-data based reports the sort order is always the order of the hierarchy. Report Name -- If you would like to save the report configuration so that you can quickly re-run it at a later date, you just need to enter a name for the report and indicate (by selecting the checkbox or not) whether you want this report to be private or shared by all members of the product. Once you have selected the format, elements and filters, clicking the \" Create Report \" button launches the report in a new window. Each of the reports is described in Requirement Reports to Release Reports below:","title":"Reports Configuration"},{"location":"Spira-User-Manual/Reports-Center/#requirement-reports","text":"","title":"Requirement Reports"},{"location":"Spira-User-Manual/Reports-Center/#requirements-summary-report","text":"This report displays all of the requirements defined for the current product in the order they appear in the requirements list. The requirement's details and coverage status are displayed in a summary list form:","title":"Requirements Summary Report"},{"location":"Spira-User-Manual/Reports-Center/#requirements-detailed-report","text":"This printable report displays all of the requirements defined for the current product in the order they appear in the requirements list. For each individual requirement, the name, priority, author, status and coverage status are displayed, along with tables containing the list of covering test cases, linked incidents/requirements, associated tasks, attached documents, and the change history:","title":"Requirements Detailed Report"},{"location":"Spira-User-Manual/Reports-Center/#requirements-plan","text":"This report displays a complete work breakdown structure of the product from a requirements perspective, including all requirements and tasks organized by schedule:","title":"Requirements Plan"},{"location":"Spira-User-Manual/Reports-Center/#requirements-traceability-matrix","text":"This report displays a matrix of the requirements in the system with their list of covering test cases and a**ssociated, mapped requirements:**","title":"Requirements Traceability Matrix"},{"location":"Spira-User-Manual/Reports-Center/#test-case-reports","text":"","title":"Test Case Reports"},{"location":"Spira-User-Manual/Reports-Center/#test-case-summary-report","text":"This report displays all of the test cases defined for the current product in the order they appear in the test case list. The test case's details and execution status are displayed in a summary grid form with the test steps optionally displayed:","title":"Test Case Summary Report"},{"location":"Spira-User-Manual/Reports-Center/#test-case-detailed-report","text":"This report displays all of the test cases defined for the current product in the order they appear in the test case list. The test case's details and execution status are displayed, along with sub-tables containing the list of test steps, test runs, attached documents, the change history, and a list of any associated open incidents:","title":"Test Case Detailed Report"},{"location":"Spira-User-Manual/Reports-Center/#test-set-summary-report","text":"This report displays all of the test sets defined for the current product in the order they appear in the test set list. The test set's details and execution status are displayed in a summary list form:","title":"Test Set Summary Report"},{"location":"Spira-User-Manual/Reports-Center/#test-set-detailed-report","text":"This report displays all of the test sets defined for the current product in the order they appear in the test set list. The test set's details and execution status are displayed, along with sub-tables containing the list of test cases, test runs, attached documents, and the change history:","title":"Test Set Detailed Report"},{"location":"Spira-User-Manual/Reports-Center/#printable-test-scripts","text":"This printable report is useful when you want to be able to conduct the testing activities offline on paper, or when testers need paper copies of the test script in addition to using the online test execution wizard. In either case, this report simply displays all of the test cases defined for the current product in the order they appear in the test case list together with their detailed test steps and a list of any attached documents.","title":"Printable Test Scripts"},{"location":"Spira-User-Manual/Reports-Center/#test-run-summary-report","text":"This report displays all of the test runs defined for the current product. The test run's details and execution status are displayed in a summary grid form:","title":"Test Run Summary Report"},{"location":"Spira-User-Manual/Reports-Center/#test-run-detailed-report","text":"This report displays all of the test runs defined for the current product in date order (most recent first). The test run's details and execution status are displayed, along with sub-tables containing the list of test run steps, and a list of any associated open incidents:","title":"Test Run Detailed Report"},{"location":"Spira-User-Manual/Reports-Center/#test-case-traceability","text":"This report displays a matrix of the test cases in the system with the list of mapped releases, incidents and test sets:","title":"Test Case Traceability"},{"location":"Spira-User-Manual/Reports-Center/#incident-reports","text":"","title":"Incident Reports"},{"location":"Spira-User-Manual/Reports-Center/#incident-summary-report","text":"This report displays all of the incidents tracked for the current product. The incident's details are displayed in a summary list form:","title":"Incident Summary Report"},{"location":"Spira-User-Manual/Reports-Center/#incident-detailed-report","text":"This printable report displays all of the incidents tracked for the current product sorted by incident number. For each individual incident, the name, type, priority, status, opener, owner and close date are displayed, along with tables containing the detailed description and resolutions as well as a tabular list of attached documents, linked requirements/incidents and the change history:","title":"Incident Detailed Report"},{"location":"Spira-User-Manual/Reports-Center/#task-reports","text":"","title":"Task Reports"},{"location":"Spira-User-Manual/Reports-Center/#task-summary-report","text":"This report displays all of the tasks tracked for the current product. The task's details are displayed in a summary list form:","title":"Task Summary Report"},{"location":"Spira-User-Manual/Reports-Center/#task-detailed-report","text":"This report displays all of the tasks tracked for the current product. The task's details are displayed, along with a tabular list of attached documents and the change history:","title":"Task Detailed Report"},{"location":"Spira-User-Manual/Reports-Center/#release-reports","text":"","title":"Release Reports"},{"location":"Spira-User-Manual/Reports-Center/#release-summary-report","text":"This report displays all of the releases and sprints defined for the current product in the order they appear in the release/sprint hierarchy. The release's details are displayed in a summary list form:","title":"Release Summary Report"},{"location":"Spira-User-Manual/Reports-Center/#release-detailed-report","text":"This report displays all of the releases and sprints defined for the current product in the order they appear in the release/sprint hierarchy. The release's details are displayed, along with sub-tables containing the list of requirements added, mapped test cases, test runs executed, incidents resolved, attached documents, scheduled tasks and the change history:","title":"Release Detailed Report"},{"location":"Spira-User-Manual/Reports-Center/#release-plan-report","text":"This report displays a complete work breakdown structure of the product from a release perspective, including all releases, sprints, requirements, tasks and incidents organized by schedule:","title":"Release Plan Report"},{"location":"Spira-User-Manual/Reports-Center/#summary-graphs","text":"","title":"Summary Graphs"},{"location":"Spira-User-Manual/Reports-Center/#requirements-summary-graph","text":"The requirements summary graph shows how many requirements are currently in a product. The number of requirements is displayed according to the criteria that you specify. You can specify the type of data displayed along the x-axis, and the requirement information which is used to group the data. When you first open the graph you will be asked to pick the field that you would like to display on the x-axis and the field that you would like to group the data by. Once you have chosen the appropriate fields the graph will be displayed: In this version of the report, the x-axis represents the requirements' status, and the individual bars are grouped by requirement importance. Each data-value can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph: Clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Requirements Summary Graph"},{"location":"Spira-User-Manual/Reports-Center/#test-case-summary-graph","text":"The test case summary graph shows how many test cases are currently in a product. The number of test cases is displayed according to the criteria that you specify. You can specify the type of data displayed along the x-axis, and the test case information which is used to group the data. When you first open the graph you will be asked to pick the field that you would like to display on the x-axis and the field that you would like to group the data by. Once you have chosen the appropriate fields the graph will be displayed: In this version of the report, the x-axis represents the test case execution status, and the individual bars are grouped by test case priority. Each data-value can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Test Case Summary Graph"},{"location":"Spira-User-Manual/Reports-Center/#test-run-summary-graph","text":"The test run summary graph shows how many test runs are currently in a product. The number of test runs is displayed according to the criteria that you specify. You can specify the type of data displayed along the x-axis, and the test run information which is used to group the data. When you first open the graph you will be asked to pick the field that you would like to display on the x-axis and the field that you would like to group the data by. Once you have chosen the appropriate fields the graph will be displayed: In this version of the report, the x-axis represents the test run execution status, and the individual bars are grouped by test run type. Each data-value can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Test Run Summary Graph"},{"location":"Spira-User-Manual/Reports-Center/#incident-summary-graph","text":"The incident summary graph shows how many incidents are currently in a product. The number of incidents is displayed according to the criteria that you specify. You can specify the type of data displayed along the x-axis, and the incident information which is used to group the data. When you first open the graph you will be asked to pick the field that you would like to display on the x-axis and the field that you would like to group the data by. Once you have chosen the appropriate fields the graph will be displayed: In this version of the report, the x-axis represents the incidents' status, and the individual bars are grouped by the type of incident. Each data-value can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Incident Summary Graph"},{"location":"Spira-User-Manual/Reports-Center/#task-summary-chart","text":"The task summary graph shows how many tasks are currently in a product. The number of tasks is displayed according to the criteria that you specify. You can specify the type of data displayed along the x-axis, and the task information which is used to group the data. When you first open the graph you will be asked to pick the field that you would like to display on the x-axis and the field that you would like to group the data by. Once you have chosen the appropriate fields the graph will be displayed: In this version of the report, the x-axis represents the tasks' priority, and the individual bars are grouped by the status of task. Each data-value can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Task Summary Chart"},{"location":"Spira-User-Manual/Reports-Center/#test-set-summary-graph","text":"The test set summary graph shows how many test set are currently in a product. The number of test sets is displayed according to the criteria that you specify. You can specify the type of data displayed along the x-axis, and the test set information which is used to group the data. When you first open the graph you will be asked to pick the field that you would like to display on the x-axis and the field that you would like to group the data by. Once you have chosen the appropriate fields the graph will be displayed: In this version of the report, the x-axis represents the test set status, and the individual bars are grouped by the name of the tester (owner). Each data-value can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Test Set Summary Graph"},{"location":"Spira-User-Manual/Reports-Center/#snapshot-graphs","text":"","title":"Snapshot Graphs"},{"location":"Spira-User-Manual/Reports-Center/#requirements-coverage-graph","text":"The requirements coverage graph shows how many requirements are currently in a product, according to their test coverage status. The x-axis of the report represents the various test execution statuses that a requirement can have as its coverage status (plus the Not-Covered status), and the individual bars are grouped by the requirements importance. Each data-value can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. You can also filter the graph to just display data for a specific release/sprint as well as for the product as a whole. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Requirements Coverage Graph"},{"location":"Spira-User-Manual/Reports-Center/#requirements-burndown-graph","text":"The Requirements Burndown graph shows the remaining number of story points that needs to be completed for each release/sprint in the product with separate lines for the estimated and ideal burndown. In addition, the graph includes bars for the completed number of story points in each time period on the x-axis: The y-axis of the graph displays the total remaining number of story points that needs to be done (the actual burndown), with a blue line indicating the ideal burndown. In addition, there are bars displayed at each interval of the x-axis that shows the completed number of story points for that interval. The x-axis can be configured to display three different levels of granularity: All Releases -- This shows the total remaining number of story points that needs to be done for each of the releases in the product Specific Release -- This shows the total remaining number of story points that needs to be done for each of the sprints in the selected release Specific Sprint -- This shows the total remaining number of story points that needs to be done for each working day in the date-range covered by the selected sprint. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Requirements Burndown Graph"},{"location":"Spira-User-Manual/Reports-Center/#requirements-burnup-graph","text":"The Requirements Burnup graph shows the cumulative number of story points outstanding for each release/sprint in the product with separate lines for the estimated and ideal burnup. In addition, the graph includes bars for the number of completed story points in each time period on the x-axis. The y-axis of the graph displays the cumulative increase in number of story points for the product (the actual burnup), with a blue line indicating the ideal burnup. In addition, there are bars displayed at each interval of the x-axis that shows the number of completed story points for that interval. The x-axis can be configured to display three different levels of granularity: All Releases -- This shows the increase in number of story points for each of the releases in the product Specific Release -- This shows the increase in number of story points for each of the sprints in the selected release Specific Sprint -- This shows the increase in number of story points for each working day in the date-range covered by the selected sprint. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Requirements Burnup Graph"},{"location":"Spira-User-Manual/Reports-Center/#requirements-velocity-graph","text":"The Requirements Velocity graph shows the total number of story points that have been completed (or planned to be completed) in a particular release, sprint or time-period (called the velocity). The actual velocity is displayed along with the overall average velocity (in blue) and the rolling average velocity (in green): The y-axis of the graph displays the total number of story points, and the x-axis can be configured to display three different levels of granularity: All Releases -- This shows the total number of story points for each of the releases in the product Specific Release -- This shows the total number of story points for each of the sprints in the selected release Specific Sprint -- This shows the total number of story points for each working day in the date-range covered by the selected sprint. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Requirements Velocity Graph"},{"location":"Spira-User-Manual/Reports-Center/#incident-aging-graph","text":"The incident aging chart displays the number of days incidents have been left open in the system. The chart is organized as a stacked histogram, with the count of incidents on the y-axis and different age intervals on the x-axis. Each bar-chart color represents a different incident priority, giving a product manager a snapshot view of the age of open product incidents by priority. This report can be filtered by the type of incident, so for example you can see the aging of just bugs, or just issues for the product in question. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Incident Aging Graph"},{"location":"Spira-User-Manual/Reports-Center/#incident-turnaround-time-graph","text":"The incident turnaround time chart displays the number of days incidents have taken to be closed (from the time they were first raised) in the system. The chart is organized as a stacked histogram, with the count of incidents on the y-axis and different turnaround time intervals on the x-axis. Each bar-chart color represents a different incident priority, giving a product manager a snapshot view of the turnaround time of product incidents by priority. This report can be filtered by the type of incident, so for example you can see the turnaround time of just bugs, or just issues for the product in question. Clicking on \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Incident Turnaround Time Graph"},{"location":"Spira-User-Manual/Reports-Center/#task-velocity-chart","text":"The Task Velocity graph shows the total estimated and actual effort (in number of hours) delivered in each product release and/or sprint: The y-axis of the graph displays the total estimated and actual effort delivered (in hours), and the x-axis can be configured to display three different levels of granularity: All Releases -- This shows the total estimated and actual effort for each of the releases in the product Specific Release -- This shows the total estimated and actual effort for each of the sprints in the selected release Specific Sprint -- This shows the total estimated actual effort for each working day in the date-range covered by the selected sprint. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Task Velocity Chart"},{"location":"Spira-User-Manual/Reports-Center/#task-burnup-chart","text":"The Task Burnup graph shows the cumulative amount of work outstanding for each release/sprint in the product with separate lines for the estimated and ideal burnup. In addition, the graph includes bars for the remaining and completed effort in each time period on the x-axis. The y-axis of the graph displays the cumulative increase in work (in hours) for the product (the actual burnup), with a blue line indicating the ideal burnup. In addition, there are bars displayed at each interval of the x-axis that shows the remaining effort and completed effort for that interval. The x-axis can be configured to display three different levels of granularity: All Releases -- This shows the increase in work for each of the releases in the product Specific Release -- This shows the increase in work for each of the sprints in the selected release Specific Sprint -- This shows the increase in work for each working day in the date-range covered by the selected sprint. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Task Burnup Chart"},{"location":"Spira-User-Manual/Reports-Center/#task-burndown-chart","text":"The Task Burndown graph shows the remaining work (in hours) that needs to be done for each release/sprint in the product with separate lines for the estimated and ideal burndown. In addition, the graph includes bars for the remaining and completed effort in each time period on the x-axis. The y-axis of the graph displays the total remaining work that needs to be done (the actual burndown), with a blue line indicating the ideal burndown. In addition, there are bars displayed at each interval of the x-axis that shows the remaining effort and completed effort for that interval. The x-axis can be configured to display three different levels of granularity: All Releases -- This shows the total remaining work that needs to be done for each of the releases in the product Specific Release -- This shows the total remaining work that needs to be done for each of the sprints in the selected release Specific Sprint -- This shows the total remaining work that needs to be done for each working day in the date-range covered by the selected sprint. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Task Burndown Chart"},{"location":"Spira-User-Manual/Reports-Center/#date-range-graphs","text":"","title":"Date-Range Graphs"},{"location":"Spira-User-Manual/Reports-Center/#test-run-progress-rate-graph","text":"The test run progress rate graph shows how many tests have been executed during a period of time, and what execution status was recorded. The report can be displayed for a specific date-range and for the entire product or for a specific release/sprint: In this version of the report, the y-axis represents the number of test runs executed in each 24 hour period, and the x-axis represents a specific week in the time-span. Each data-bar can be viewed by positioning the mouse pointer over the point, and a \"tooltip\" will pop-up listing the actual data value. You can filter the report by the release/sprint that the test run was executed against, and also change the date range. If you choose a smaller date-range, the x-axis will switch from weekly to daily and if you choose a larger date-range, the x-axis will switch to monthly. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Test Run Progress Rate Graph"},{"location":"Spira-User-Manual/Reports-Center/#test-case-progress-rate-graph","text":"This graph displays the number of test case executions for the specified date range for that specific date interval. That means it will display for each day, the total number of test cases executed ignoring the status from any previous days. Any test cases not executed that day will be considered \"not run\" and will appear in the \"not run\" category. For example, if you have 10 test cases created on day 1 you will see 10 test cases \"not run\" on day 1. On day 2, you execute 5 test cases and fail them all, you will now see 5 test cases failed and 5 not run. On day 3, you execute 3 of the previous 5 test cases and pass them. You will now see 3 test cases passed, 0 failed and 7 not run.","title":"Test Case Progress Rate Graph"},{"location":"Spira-User-Manual/Reports-Center/#test-case-cumulative-progress-graph","text":"This graph displays the number of test case executions cumulatively over the specified date range. That means it will display for each day, the total number of test cases executed plus the status from any previous days that have not been changed. Any test cases not executed up to that point will be considered \"not run\" and will appear in the \"not run\" category. For example, if you have 10 test cases created on day 1 you will see 10 test cases \"not run\" on day 1. On day 2, you execute 5 test cases and fail them all, you will now see 5 test cases failed and 5 not run. On day 3, you execute 3 of the previous 5 test cases and pass them. You will now see 3 test cases passed, 2 failed and 5 not run.","title":"Test Case Cumulative Progress Graph"},{"location":"Spira-User-Manual/Reports-Center/#incident-progress-rate-graph","text":"The incident progress rate chart displays the total number of incidents created and closed over a particular date-range, either for all incident types or for a specific incident type: In this version of the report, the y-axis represents the number of incidents (either created or closed in a 24 hour period), and the x-axis represents a specific day in the time-span. Each data-point can be viewed by positioning the mouse pointer over the point, and a \"tooltip\" will pop-up listing the actual data value. You can filter the report by the type of incident, and also change the date range (e.g. displaying only the bugs for the date range). If you choose a smaller date-range, the x-axis will switch from weekly to daily and if you choose a larger date-range, the x-axis will switch to monthly. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Incident Progress Rate Graph"},{"location":"Spira-User-Manual/Reports-Center/#cumulative-incident-count-graph","text":"The cumulative incident count chart displays the cumulative total number of incidents logged in the system for the current product over a particular date-range, either for all incident types or for a specific incident type. The report displays two data series, one illustrating the total count of all incidents, the other the total count of all open incidents (i.e. with status not set to fixed or closed): In this version of the report, the y-axis represents the number of incidents, and the x-axis represents a specific week in the time-span. Each data-point can be viewed by positioning the mouse pointer over the point, and a \"tooltip\" will pop-up listing the actual data value. You can also filter the type of incident being reported, as well as change the date interval. If you choose a smaller date-range, the x-axis will switch from weekly to daily and if you choose a larger date-range, the x-axis will switch to monthly. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Cumulative Incident Count Graph"},{"location":"Spira-User-Manual/Reports-Center/#open-incident-count-graph","text":"The open incident count chart displays the net number of open incidents in the system for the current product over a particular date-range categorized by incident priority, either for all incident types or for a specific incident type. For this chart, \"open\" is defined as any incident with an empty \"Closed On\" date. The incident status is not used for this chart. In this version of the report, the y-axis represents the number of incidents, and the x-axis represents a specific week in the time-span. The exact count of each bar in the stacked histogram can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. You can also filter the type of incident being reported, as well as change the date interval. If you choose a smaller date-range, the x-axis will switch from weekly to daily and if you choose a larger date-range, the x-axis will switch to monthly. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Open Incident Count Graph"},{"location":"Spira-User-Manual/Reports-Center/#incident-count-by-status-graph","text":"The incident status count chart displays the number of open incidents in the system for the current product over a particular date-range categorized by incident status, either for all incident types or for a specific incident type. For this chart, \"open\" is defined as any incident with an empty \"Closed On\" date. The incident status is not used for this chart. In this version of the report, the y-axis represents the number of incidents, and the x-axis represents a specific week in the time-span. The exact count of each bar in the stacked histogram can be viewed by positioning the mouse pointer over the bar, and a \"tooltip\" will pop-up listing the actual data value. You can also filter the type of incident being reported, as well as change the date interval. If you choose a smaller date-range, the x-axis will switch from weekly to daily and if you choose a larger date-range, the x-axis will switch to monthly. Clicking on the \" Display Data Grid \" button will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the datagrid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Incident Count by Status Graph"},{"location":"Spira-User-Manual/Reports-Center/#custom-graphs","text":"These are the graphs that a SpiraPlan administrator has created in the Administration section of the system and published for use by end users. They rely on specific ESQL data queries, so the data represented will depend on the query created by the administrator. To add a custom graph to your reports dashboard, click on the Add Items icon and choose Custom Graphs: Once you add the Custom Graphs widget to your dashboard, you will see the following: You can change which custom graph will be used in this widget by simply changing the values in the dropdown list: You can also change the graph display between the three display types: donut, bar, and line. The donut style of graph is only available for reports with a single data series: Clicking on the \" Data Grid \" icon will display the underlying data that is being used to generate the graph. In addition, clicking on the \" Download Data as CSV \" button will export the data grid into Comma Separated Values (CSV) format that can be opened in MS-Excel. Some browsers also support the ability to save the graph as an image file (JPEG, PNG and GIF formats).","title":"Custom Graphs"},{"location":"Spira-User-Manual/Reports-Center/#risk-reports","text":"","title":"Risk Reports"},{"location":"Spira-User-Manual/Reports-Center/#risk-summary-report","text":"This report displays all of the risks tracked for the current project. The risks are displayed, along with a tabular list of mitigations, tasks, comments, attached documents, and change history:","title":"Risk Summary Report"},{"location":"Spira-User-Manual/Reports-Center/#risk-detailed-report","text":"This report displays all of the risks tracked for the current project. The risks are displayed in a summary table form:","title":"Risk Detailed Report"},{"location":"Spira-User-Manual/Requirements-Management/","text":"Requirements Management This section outlines how the requirements management features of SpiraPlan\u00ae can be used to develop a requirements / scope matrix for a product, and how you can map any existing test-cases to the requirements. Typically when starting a product, developing the requirements list is the first activity after the Administrator has set up the product in the system. Requirements List When you click on the Planning > Requirements link on the global navigation bar, you will initially be taken to the requirements list screen illustrated below: The requirements list consists of a hierarchical arrangement of the various requirements and functionalities that need to be provided by the system in question. The structure is very similar to the Work Breakdown Structure (WBS) developed in Microsoft Product\u00ae, and users of that software package will find this very familiar to use. When you create a new product, this list will initially be empty, and you will have to start using the \" Insert \" button to start adding requirements. Requirements come in two main flavors: summary items (Epics) shown in bold-type , and detail items shown in normal-type with a hyperlink. When you indent a requirement under an existing requirement, the parent is changed from a detail-item to an Epic / summary item, and when you outdent a child item, its parent will return to a detail-item (assuming it has no other children). This behavior is important to understand, as only detail items are assigned a status themselves; the Epics / summary items simply display an aggregate of the worst-case assessment of their children's status. Both summary and detail items can be mapped against test-cases for test-coverage, in addition the Epics / summary items display an aggregate coverage status. Each requirement is displayed along with its importance/priority (ranked from \"Critical\" to \"Low\"), its completion status (from \"Requested\" to \"Completed\"), the version of the software that the requirement is planned for, and graphical indicators that represents its test coverage status and its task progress. For those requirements that have no test-cases covering them (i.e. validating that the requirement works as expected) the indicator consists of a white solid bar, bearing the legend \"Not Covered\". For those requirements that have at least one test-case mapped against them, they will display a block graph that illustrates the last execution status of each of the mapped test-cases. Thus if the requirement is covered by two test cases, one of which passed, and one of which wasn't run, the graph will display a green bar (50% passed) and an equal length gray bar (50% not run). To determine the exact requirements coverage information, position the mouse pointer over the bar-chart, and the number of covering tests, along with the pass / fail / blocked / caution / not-run breakdown will be displayed as a \"tooltip\". For those requirements that have at least one task associated with them, they will display a block graph that illustrates the relative numbers of task that are on-schedule (green), late-starting (yellow), late-finishing (red) or just not-started (grey). These values are weighted by the effort of the task, so that larger, more complex tasks will be change the graph more than the smaller tasks. To determine the exact task progress information, position the mouse pointer over the bar-chart and the number of associated tasks, along with the details of how many are in each status will be displayed as a \"tooltip\". Insert Clicking on the <Insert> icon inserts a requirement above the currently selected requirement -- i.e. the one whose check-box has been selected, at the same level in the hierarchy. If you want to insert a requirement below an existing item, you can use the Insert > Child Requirement option instead. If you insert a requirement without first selecting an existing requirement from the list, the new requirement will simply be added at the end of the list. Note that if the full list of requirements are paginated, the new requirement will be at the bottom of the last page. Once the new requirement has been inserted, the item is switched to \"Edit\" mode so that you can rename the default name and choose a priority, status and/or author. Delete Clicking on the \" Delete \" button deletes all the requirements whose check-boxes have been selected. If any of the items are summary items, the child requirements are also deleted. If all the children are deleted from a summary item, it changes back into a non-summary item. Indent Clicking on the \" Indent \" button indents all the requirements whose check-boxes have been selected. If any of the items are made children of a requirement that had no previous children, it will be changed from a detail item into a summary item. Outdent Clicking on the \" Outdent \" button de-indents all the requirements whose check-boxes have been selected. If any of the items were the only children of a summary requirement item, then that item will be changed back from a summary item to a detail item. Refresh Clicking on the \" Refresh \" button simply reloads the requirements list (not the entire page). This is useful as other people may be modifying the list of requirements at the same time as you, and after stepping away from the computer for a short-time, you should click this button to make sure you are viewing the most current requirements list for the product. Edit Each requirement in the list has an \" Edit \" button display in its right-most column. When you click this button or just double-click on any of the cells in the row, you change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Update \" buttons are displayed in the last column: If you click \" Edit \" on more than one row, the \" Update \" buttons are only displayed on the first row selected. You can make changes to all the editable rows and then update the changes by clicking the one \" Update \" button. Also, if you want to make the same change to multiple rows (e.g. to change five requirements from \"In Progress\" status to \"Completed\"), you can click on the \"fill\" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the [Edit] button on the same row as the Filters and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Save \" to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes. Show Level Choosing an indent level from the 'Show Level' drop down box allows you to quickly and easily view the entire requirements list at a specific indent level. For example you may want to see all requirements drilled-down to the third level of detail. To do this you would simply choose 'Level 3' from the list, and the requirements will be expanded / collapsed accordingly. Filtering Read about how to create and manage filters . Show / Hide Columns This drop-down list allows you to change the fields that are displayed in the requirement list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner. Copying Requirements To copy a requirement or set of requirements, simply select the check-boxes of the requirements you want to copy and then select the Edit > Copy Items menu option. This will copy the current requirements selection to the clipboard. Then you should select the place where you want the requirements to be inserted and choose the Edit > Paste Items option. The requirements will now be copied into the destination location you specified. The name of the copied requirements will be prefixed with \"Copy of...\" to distinguish them from the originals. Note that copied requirements will also include the test coverage information from the originals. Moving Requirements To move a requirement in the requirements hierarchy, there are two options: Click on the requirement you want to move and then drag it to the location you want it moved. An empty space will appear to show you where it will be inserted: Once you have the requirement positioned at the correct place that you want it inserted, just release the mouse button. To move multiple items simply select their checkboxes and then drag-and-drop one of the selected items. Alternatively, you can select the check-boxes of the requirements you want to move and then select the Edit > Cut menu option. This will cut the current requirements selection to the clipboard. Then you should select the place where you want the requirements to be inserted and choose the Edit > Paste option. The requirements will now be moved into the destination location you specified. Exporting Requirements To export a requirement or set of requirements from the current product to another product in the system, all you need to do is select the check-boxes of the requirement(s) you want to export and then click the Tools > Export To Product button. This will then bring up a list of possible destination products: Once you have chosen the destination product and clicked the \" Export \" button, the requirements will be exported from the current product to the destination product. Any file attachments will also be copied to the destination product along with the requirements. Creating Test Cases from Requirements To quickly create test cases from a group of requirements, all you need to do is select the check-boxes of the appropriate requirements and then click Tools > Create Test Cases . This will then create new test cases based on the selected requirements. Creating a Test Set from Requirements To quickly create a new test set from a group of requirements, all you need to do is select the check-boxes of the appropriate requirements and then click Tools > Create Test Set . This will then create new test set containing the test cases that are already mapped to the selected requirement(s). Printing Items To quickly print a single requirement or list of requirements you can select the items' checkboxes and then click Tools > Print Items . This will open a new window containing a printable version of the selected items. Focus-On Branch Sometimes you will a list of filtered requirements displayed and you would like to view all of the items that in the same branch of the requirements tree, even those that don't match the current filter. To view the branch, select the checkbox of the branch and then click Tools > Focus on , and the system will clear the current filters and then expand just the selected branch. Right-Click Context Menu SpiraPlan\u00ae provides a shortcut -- called the context menu - for accessing some of the most commonly used functions, so that you don't need to move your mouse up to the toolbar each time. To access the context menu, right-click on any of the rows in the requirements list and the following menu will be displayed: You can now choose any of these options as an alternative to using the icons in the toolbar. Viewing Requirements from Shared Products If you are displaying the requirements list for a product has required shared from other products, you will see the option on the top-right to view the requirements from the shared product(s): If you choose the option to show the requirement from 'All Products' and not just the current product, the shared products are displayed, grouped under the name of the product they are being shared from: Note: Any requirements shared from other products will be read-only and won't display any of their custom properties. However you can expand/collapse these shared requirements and filter using the standard fields. Requirements Additional List Views In SpiraTeam and SpiraPlan, there are four additional requirement list views. They are designed to better serve the needs of the Business Analyst community who often need different views of requirements than the project teams and project managers. These views are: Sorted List Agile Board Documents View (beta) Mindmap (beta) You can pick between each of these views using the view selection button group at the top right of any requirement list page. Note: you can only view requirements from the current product in these four additional views, whether or not you are sharing requirements from other products with this product. Requirements Sorted List This view lets you view the requirements in a flat, sortable list that does not show the requirements hierarchy. You can still see the hierarchy of an item by hovering the mouse over its name to display the tooltip. This view lets you sort on any of the fields and also filter by the type of requirement, including whether it is an Epic (package) or not. One major benefit of this view is that when you filter by a field, you only get the items that are a direct match, unlike in the hierarchical grid view, where you also get its parents displayed. It can be useful when displaying a list of just the Epics and nothing else. Toolbar Add : Click this to add a new requirement. It will appear in this view based on the sorting used. In the main requirement hierarchy, it will be be added at the bottom of the requirement list, at the root level (ie fully outdented). Once the new requirement has been inserted, the item is switched to \"Edit\" mode so that you can rename the default name and choose a priority, status and/or author. Delete : Clicking this button deletes all the requirements selected. If any are summary items, their child requirements are also deleted. If all the children are deleted from a summary item, it changes back into a non-summary item. Refresh : Clicking this button reloads the requirements list (not the entire page). Edit : this works the same way as on the requirements hierarchy list - see above . Filter : Read about how to create and manage filters, and how to sort the artifact list . Show / Hide Columns : this works the same way as on the requirements hierarchy list - see above Clone : all selected requirements will be cloned and added to the requirement list. If a summary item is cloned, then it and all its children are cloned. Cloned items are added to the hierarchical list at the same indent level as the previous bottom most requirement in the hierarchy. Tools : this dropdown allows to export requirements , create test cases or create test sets from requirements, or to print items . Right-Click Context Menu To access the context menu, right-click on any of the rows in the requirements sorted list and the following menu will be displayed: You can now choose any of these options as an alternative to using the icons in the toolbar. Requirements Agile Board This view is similar to the existing Planning Board but only displays requirements, whereas the primary planning board will also include incidents / defects. This gives the requirements page consistency with the tasks and incidents pages that already have a Grid / Board view selector option. Requirements Document View This view also offers a hierarchical organization of the first 5000 requirements in a product. Instead of being displayed in a grid form, they are displayed in a document format that is designed to be readable from top to bottom, like a traditional requirements document. The new view has a sidebar that lets you quickly jump to a section in the requirements document as well as simply scroll through all of the items. The document is paginated, showing up to 250 requirements on each page. For each requirement, the following information is displayed: icon name ID status type importance owner description use case diagram (if the requirement has steps) Requirements Mindmap This mindmap displays the first 5,000 requirements in a product as a connected tree view / mindmap. The root node shows the name of the product on the left hand side. The top most level nodes are connected to the left of this, with their successive children shown from left to right. For each requirement the map displays the name and ID of the requirement, with a tooltip that shows the description and any comments. Each node is color coded by its priority / importance value. Clicking on the node will take you to the details page for that requirement. As well as showing the primary hierarchy, there is an option to turn on the display of requirement associations. This will let you see all of the associations as dotted lines. For associations that denote dependencies there is an arrow and dotted line that shows the direction of the dependency. For simple relationship (relates to) associations, there is a dotted line without an arrow. The system will display either the comment or type of association, depending what was entered when the association was created. There are several other display options: refresh : to redraw the mindmap levels dropdown : lets you select how deep into the mindmap you wish to view. To only show the topmost level requirements, select level 1; to select the top two levels, select level 2, or view everything by selecting \"all levels\" zoom : you can change the zoom between 25% and 100% using the plus and minus buttons. To reset the zoom, click the magnifying glass Note: this view is unfortunately not compatible with Internet Explorer 11. Requirement Details When you click on a requirement item in the requirements list described in Requirements Management > Requirements List , you are taken to the requirement details page illustrated below: This page is made up of three areas; the left pane displays the requirements list navigation; the right pane's header, which displays: the operations toolbar; the hierarchical structure the requirement is in ; the editable name of the selected requirement; and the info bar (with a shaded background), which also contains the workflow status transitions (see below); and the right pane's tabbed interface with rich information related to the requirement. Please note that on smaller screen sizes the navigation pane is not displayed. While the navigation pane has a link to take you back to the requirements list, on mobile devices a 'back' button is shown on the left of the operations toolbar. The navigation pane can be collapsed by clicking on the \"-\" button, or expanded by clicking anywhere on the gray title area. On desktops the user can also control the exact width of the navigation pane by dragging and dropping a red handle that appears on hovering at the rightmost edge of the navigation pane. The navigation pane shows a list of the peer requirements to the one selected. This list is useful as a navigation shortcut; you can quickly view the coverage information of all the peer requirements by clicking on the navigation links without having to first return to the requirements list page. The navigation list can be switched between three different modes: The list of requirements matching the current filter The list of all requirements, irrespective of the current filter The list of requirements assigned to the current user The bottom part of the right pane can be switched between six views: \"Overview\", \"Test Coverage\", \"Tasks\", \"Attachments\", \"History\" and \"Associations\", each of which will be described in more detail below. Emailing Read about emailing an artifact to colleagues using Spira . Followers Read about how to add and manage followers to an artifact . Workflows Read about using workflows to change the status of your artifact . Overview - Details The Overview tab is divided into a number of different sections. Each of these can be collapsed or expanded by clicking on the title of that section. It displays the description, fields and comments associated with the requirement. The top part of this tab displays the various standard fields and custom properties associated with the requirement. Fields (both standard and custom) are grouped under the collapsible headings (marked by orange text and underline) in the screenshot below. For instance, all fields regarding dates are grouped together in the \"Dates and Times\" area. Overview -- Detailed Information The Detailed Information section contains the long, formatted description of the requirement, as well as any rich text custom fields. You can enter rich text or paste in from a word processing program or web page into these fields. Clicking on the shaded areas of one of these detailed fields will display the rich text toolbar. Overview - Comments The Comments section allows you to add and view discussions relating to the requirement: Existing comments are displayed in order underneath the textbox in date order (either newest first or oldest first). To add a new comment, enter it into the textbox, and click the \" Add Comment \" button. Overview -- Scenario If you are editing a 'Use Case' type of requirement, there will be a special 'Scenario' section where you can enter in the scenario steps that define the use case: This section displays the various steps that a user would perform when carrying out the defined use case. The list of use case steps displays the position number, and the description. If a test case is created from this use-case, the steps will be used to create the test steps. Clicking on the \" Insert Step \" button inserts a new step before the currently selected (by means of the check-box) step. Clicking the \" Insert Step \" button without selecting an existing step will insert a new step at the end of the list. When a new step is inserted, the fields are displayed in \"Edit\" mode, so the description, field is editable, allowing you to enter the data: To move the steps in the list, click on the step you want to move and drag it to the location you want it moved. Test Coverage This tab shows the test coverage information for the requirement in question: The tab displays a grid containing the test cases already mapped to this requirement. You can filter that list by the test case type, name, status, execution status, execution date, priority, product name and ID. You can remove an existing test case by selecting its check box and clicking the 'Delete' button. This doesn't delete the test case, just removes it from the requirement. Hovering the mouse over the names of the test cases will display a \"tooltip\" consisting of the test case name, place in the folder structure and a detailed description. To add a new test case to the requirement, simply click on the 'Add' button: You can search for a test case by its ID if you know it (make sure to include the \"TC\" prefix): Otherwise, you can search for the test cases by choosing a folder from the dropdown and/or entering a partial name match: One you have found the desired test case(s), simply select their check boxes and click the 'Save' button to add them to the current requirement: Finally, as a shortcut you can click the \" Create Test Case from This Requirement \" button to create a new test case in the list of covered test cases that will be automatically linked to this requirement. This is useful when you have created a new requirement and want to generate an initial covering test to be fleshed-out later. Tasks This tab shows the list of product tasks that need to be completed for the requirement to be satisfied: Each of the tasks is displayed together with, by default, its name, description (by hovering the mouse over the name), progress, priority, start-date, current owner, estimated effort, producted effort and numeric task identifier. Clicking on the task name will bring up the Task Details page . This allows you to edit the details of an existing task. You can perform the following actions on a task from this screen: New Task -- inserts a new task in the task list with a default set of values. The task will be associated with the current requirement. Remove -- removes the task from this requirement without actually deleting the task Refresh -- updates the list of tasks from the server, useful if other people are adding tasks to this requirement at the same time. Filter / Apply Filter -- Applies the entries in the filter boxes to the list of tasks Clear Filters -- Clears the current filter, so that all tasks associated with the current requirement are shown. Edit -- Clicking the \" Edit \" button to the right of the task allows you to edit the task inline directly on this screen. Only columns visible will be editable. Show/Hide Columns -- Allows you to choose which Task columns are visible The system has a series of shortcuts that simplify the editing of requirements and tasks: If you create a new task on the requirements page, the priority, release/sprint and owner are automatically copied from the parent requirement. You can change these suggested values before clicking \" Save \" When you assign a release/sprint to a requirement, its status automatically changes to \"Planned\" When at least one task assigned to the requirement changes from \"Not Started\" to \"In Progress\", the parent requirement automatically switches from \"Planned\" to \"In Progress\" When all the tasks under the requirement are completed, the parent requirement will switch to the \"Completed\" status. If you manually move a requirement that has no associated tasks from \"Planned\" to \"In Progress\", the system will automatically generate one task under the requirement and use the requirement's planned effort field to generate the task's estimated effort. Attachments Read about how the attachments tab works History Read about how the history tab works Associations You can associate other requirements, source code commits, incidents, or risks to a requirement from this tab. The associated requirements and risks are those a user has decided are relevant to the current requirement and has created a direct link between them. In the case of incidents, the association can be either due to the creator of an incident directly linking the incident to the requirement, or it can be the result of a tester executing a test-run and creating an incident during the test run. In this latter case, the check-box to the left of the association will be unavailable as the link is not editable. Read more about how to manage and add associations to this artifact Use Case Diagrams Requirements with a list of defined steps displays an extra tab called \"Diagram\". This display the list of steps as a process flow diagram rather than as a simple list. You still write the scenario in the main Overview tab as a list of steps, however that list of steps will render as a diagram on this tab. Every step is displayed in the diagram. To make the diagram easier to read, only the first part of the step description is rendered in the diagram.","title":"Requirements Management"},{"location":"Spira-User-Manual/Requirements-Management/#requirements-management","text":"This section outlines how the requirements management features of SpiraPlan\u00ae can be used to develop a requirements / scope matrix for a product, and how you can map any existing test-cases to the requirements. Typically when starting a product, developing the requirements list is the first activity after the Administrator has set up the product in the system.","title":"Requirements Management"},{"location":"Spira-User-Manual/Requirements-Management/#requirements-list","text":"When you click on the Planning > Requirements link on the global navigation bar, you will initially be taken to the requirements list screen illustrated below: The requirements list consists of a hierarchical arrangement of the various requirements and functionalities that need to be provided by the system in question. The structure is very similar to the Work Breakdown Structure (WBS) developed in Microsoft Product\u00ae, and users of that software package will find this very familiar to use. When you create a new product, this list will initially be empty, and you will have to start using the \" Insert \" button to start adding requirements. Requirements come in two main flavors: summary items (Epics) shown in bold-type , and detail items shown in normal-type with a hyperlink. When you indent a requirement under an existing requirement, the parent is changed from a detail-item to an Epic / summary item, and when you outdent a child item, its parent will return to a detail-item (assuming it has no other children). This behavior is important to understand, as only detail items are assigned a status themselves; the Epics / summary items simply display an aggregate of the worst-case assessment of their children's status. Both summary and detail items can be mapped against test-cases for test-coverage, in addition the Epics / summary items display an aggregate coverage status. Each requirement is displayed along with its importance/priority (ranked from \"Critical\" to \"Low\"), its completion status (from \"Requested\" to \"Completed\"), the version of the software that the requirement is planned for, and graphical indicators that represents its test coverage status and its task progress. For those requirements that have no test-cases covering them (i.e. validating that the requirement works as expected) the indicator consists of a white solid bar, bearing the legend \"Not Covered\". For those requirements that have at least one test-case mapped against them, they will display a block graph that illustrates the last execution status of each of the mapped test-cases. Thus if the requirement is covered by two test cases, one of which passed, and one of which wasn't run, the graph will display a green bar (50% passed) and an equal length gray bar (50% not run). To determine the exact requirements coverage information, position the mouse pointer over the bar-chart, and the number of covering tests, along with the pass / fail / blocked / caution / not-run breakdown will be displayed as a \"tooltip\". For those requirements that have at least one task associated with them, they will display a block graph that illustrates the relative numbers of task that are on-schedule (green), late-starting (yellow), late-finishing (red) or just not-started (grey). These values are weighted by the effort of the task, so that larger, more complex tasks will be change the graph more than the smaller tasks. To determine the exact task progress information, position the mouse pointer over the bar-chart and the number of associated tasks, along with the details of how many are in each status will be displayed as a \"tooltip\".","title":"Requirements List"},{"location":"Spira-User-Manual/Requirements-Management/#insert","text":"Clicking on the <Insert> icon inserts a requirement above the currently selected requirement -- i.e. the one whose check-box has been selected, at the same level in the hierarchy. If you want to insert a requirement below an existing item, you can use the Insert > Child Requirement option instead. If you insert a requirement without first selecting an existing requirement from the list, the new requirement will simply be added at the end of the list. Note that if the full list of requirements are paginated, the new requirement will be at the bottom of the last page. Once the new requirement has been inserted, the item is switched to \"Edit\" mode so that you can rename the default name and choose a priority, status and/or author.","title":"Insert"},{"location":"Spira-User-Manual/Requirements-Management/#delete","text":"Clicking on the \" Delete \" button deletes all the requirements whose check-boxes have been selected. If any of the items are summary items, the child requirements are also deleted. If all the children are deleted from a summary item, it changes back into a non-summary item.","title":"Delete"},{"location":"Spira-User-Manual/Requirements-Management/#indent","text":"Clicking on the \" Indent \" button indents all the requirements whose check-boxes have been selected. If any of the items are made children of a requirement that had no previous children, it will be changed from a detail item into a summary item.","title":"Indent"},{"location":"Spira-User-Manual/Requirements-Management/#outdent","text":"Clicking on the \" Outdent \" button de-indents all the requirements whose check-boxes have been selected. If any of the items were the only children of a summary requirement item, then that item will be changed back from a summary item to a detail item.","title":"Outdent"},{"location":"Spira-User-Manual/Requirements-Management/#refresh","text":"Clicking on the \" Refresh \" button simply reloads the requirements list (not the entire page). This is useful as other people may be modifying the list of requirements at the same time as you, and after stepping away from the computer for a short-time, you should click this button to make sure you are viewing the most current requirements list for the product.","title":"Refresh"},{"location":"Spira-User-Manual/Requirements-Management/#edit","text":"Each requirement in the list has an \" Edit \" button display in its right-most column. When you click this button or just double-click on any of the cells in the row, you change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Update \" buttons are displayed in the last column: If you click \" Edit \" on more than one row, the \" Update \" buttons are only displayed on the first row selected. You can make changes to all the editable rows and then update the changes by clicking the one \" Update \" button. Also, if you want to make the same change to multiple rows (e.g. to change five requirements from \"In Progress\" status to \"Completed\"), you can click on the \"fill\" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the [Edit] button on the same row as the Filters and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Save \" to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes.","title":"Edit"},{"location":"Spira-User-Manual/Requirements-Management/#show-level","text":"Choosing an indent level from the 'Show Level' drop down box allows you to quickly and easily view the entire requirements list at a specific indent level. For example you may want to see all requirements drilled-down to the third level of detail. To do this you would simply choose 'Level 3' from the list, and the requirements will be expanded / collapsed accordingly.","title":"Show Level"},{"location":"Spira-User-Manual/Requirements-Management/#filtering","text":"Read about how to create and manage filters .","title":"Filtering"},{"location":"Spira-User-Manual/Requirements-Management/#show-hide-columns","text":"This drop-down list allows you to change the fields that are displayed in the requirement list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner.","title":"Show / Hide Columns"},{"location":"Spira-User-Manual/Requirements-Management/#copying-requirements","text":"To copy a requirement or set of requirements, simply select the check-boxes of the requirements you want to copy and then select the Edit > Copy Items menu option. This will copy the current requirements selection to the clipboard. Then you should select the place where you want the requirements to be inserted and choose the Edit > Paste Items option. The requirements will now be copied into the destination location you specified. The name of the copied requirements will be prefixed with \"Copy of...\" to distinguish them from the originals. Note that copied requirements will also include the test coverage information from the originals.","title":"Copying Requirements"},{"location":"Spira-User-Manual/Requirements-Management/#moving-requirements","text":"To move a requirement in the requirements hierarchy, there are two options: Click on the requirement you want to move and then drag it to the location you want it moved. An empty space will appear to show you where it will be inserted: Once you have the requirement positioned at the correct place that you want it inserted, just release the mouse button. To move multiple items simply select their checkboxes and then drag-and-drop one of the selected items. Alternatively, you can select the check-boxes of the requirements you want to move and then select the Edit > Cut menu option. This will cut the current requirements selection to the clipboard. Then you should select the place where you want the requirements to be inserted and choose the Edit > Paste option. The requirements will now be moved into the destination location you specified.","title":"Moving Requirements"},{"location":"Spira-User-Manual/Requirements-Management/#exporting-requirements","text":"To export a requirement or set of requirements from the current product to another product in the system, all you need to do is select the check-boxes of the requirement(s) you want to export and then click the Tools > Export To Product button. This will then bring up a list of possible destination products: Once you have chosen the destination product and clicked the \" Export \" button, the requirements will be exported from the current product to the destination product. Any file attachments will also be copied to the destination product along with the requirements.","title":"Exporting Requirements"},{"location":"Spira-User-Manual/Requirements-Management/#creating-test-cases-from-requirements","text":"To quickly create test cases from a group of requirements, all you need to do is select the check-boxes of the appropriate requirements and then click Tools > Create Test Cases . This will then create new test cases based on the selected requirements.","title":"Creating Test Cases from Requirements"},{"location":"Spira-User-Manual/Requirements-Management/#creating-a-test-set-from-requirements","text":"To quickly create a new test set from a group of requirements, all you need to do is select the check-boxes of the appropriate requirements and then click Tools > Create Test Set . This will then create new test set containing the test cases that are already mapped to the selected requirement(s).","title":"Creating a Test Set from Requirements"},{"location":"Spira-User-Manual/Requirements-Management/#printing-items","text":"To quickly print a single requirement or list of requirements you can select the items' checkboxes and then click Tools > Print Items . This will open a new window containing a printable version of the selected items.","title":"Printing Items"},{"location":"Spira-User-Manual/Requirements-Management/#focus-on-branch","text":"Sometimes you will a list of filtered requirements displayed and you would like to view all of the items that in the same branch of the requirements tree, even those that don't match the current filter. To view the branch, select the checkbox of the branch and then click Tools > Focus on , and the system will clear the current filters and then expand just the selected branch.","title":"Focus-On Branch"},{"location":"Spira-User-Manual/Requirements-Management/#right-click-context-menu","text":"SpiraPlan\u00ae provides a shortcut -- called the context menu - for accessing some of the most commonly used functions, so that you don't need to move your mouse up to the toolbar each time. To access the context menu, right-click on any of the rows in the requirements list and the following menu will be displayed: You can now choose any of these options as an alternative to using the icons in the toolbar.","title":"Right-Click Context Menu"},{"location":"Spira-User-Manual/Requirements-Management/#viewing-requirements-from-shared-products","text":"If you are displaying the requirements list for a product has required shared from other products, you will see the option on the top-right to view the requirements from the shared product(s): If you choose the option to show the requirement from 'All Products' and not just the current product, the shared products are displayed, grouped under the name of the product they are being shared from: Note: Any requirements shared from other products will be read-only and won't display any of their custom properties. However you can expand/collapse these shared requirements and filter using the standard fields.","title":"Viewing Requirements from Shared Products"},{"location":"Spira-User-Manual/Requirements-Management/#requirements-additional-list-views","text":"In SpiraTeam and SpiraPlan, there are four additional requirement list views. They are designed to better serve the needs of the Business Analyst community who often need different views of requirements than the project teams and project managers. These views are: Sorted List Agile Board Documents View (beta) Mindmap (beta) You can pick between each of these views using the view selection button group at the top right of any requirement list page. Note: you can only view requirements from the current product in these four additional views, whether or not you are sharing requirements from other products with this product.","title":"Requirements Additional List Views"},{"location":"Spira-User-Manual/Requirements-Management/#requirements-sorted-list","text":"This view lets you view the requirements in a flat, sortable list that does not show the requirements hierarchy. You can still see the hierarchy of an item by hovering the mouse over its name to display the tooltip. This view lets you sort on any of the fields and also filter by the type of requirement, including whether it is an Epic (package) or not. One major benefit of this view is that when you filter by a field, you only get the items that are a direct match, unlike in the hierarchical grid view, where you also get its parents displayed. It can be useful when displaying a list of just the Epics and nothing else.","title":"Requirements Sorted List"},{"location":"Spira-User-Manual/Requirements-Management/#toolbar","text":"Add : Click this to add a new requirement. It will appear in this view based on the sorting used. In the main requirement hierarchy, it will be be added at the bottom of the requirement list, at the root level (ie fully outdented). Once the new requirement has been inserted, the item is switched to \"Edit\" mode so that you can rename the default name and choose a priority, status and/or author. Delete : Clicking this button deletes all the requirements selected. If any are summary items, their child requirements are also deleted. If all the children are deleted from a summary item, it changes back into a non-summary item. Refresh : Clicking this button reloads the requirements list (not the entire page). Edit : this works the same way as on the requirements hierarchy list - see above . Filter : Read about how to create and manage filters, and how to sort the artifact list . Show / Hide Columns : this works the same way as on the requirements hierarchy list - see above Clone : all selected requirements will be cloned and added to the requirement list. If a summary item is cloned, then it and all its children are cloned. Cloned items are added to the hierarchical list at the same indent level as the previous bottom most requirement in the hierarchy. Tools : this dropdown allows to export requirements , create test cases or create test sets from requirements, or to print items .","title":"Toolbar"},{"location":"Spira-User-Manual/Requirements-Management/#right-click-context-menu_1","text":"To access the context menu, right-click on any of the rows in the requirements sorted list and the following menu will be displayed: You can now choose any of these options as an alternative to using the icons in the toolbar.","title":"Right-Click Context Menu"},{"location":"Spira-User-Manual/Requirements-Management/#requirements-agile-board","text":"This view is similar to the existing Planning Board but only displays requirements, whereas the primary planning board will also include incidents / defects. This gives the requirements page consistency with the tasks and incidents pages that already have a Grid / Board view selector option.","title":"Requirements Agile Board"},{"location":"Spira-User-Manual/Requirements-Management/#requirements-document-view","text":"This view also offers a hierarchical organization of the first 5000 requirements in a product. Instead of being displayed in a grid form, they are displayed in a document format that is designed to be readable from top to bottom, like a traditional requirements document. The new view has a sidebar that lets you quickly jump to a section in the requirements document as well as simply scroll through all of the items. The document is paginated, showing up to 250 requirements on each page. For each requirement, the following information is displayed: icon name ID status type importance owner description use case diagram (if the requirement has steps)","title":"Requirements Document View"},{"location":"Spira-User-Manual/Requirements-Management/#requirements-mindmap","text":"This mindmap displays the first 5,000 requirements in a product as a connected tree view / mindmap. The root node shows the name of the product on the left hand side. The top most level nodes are connected to the left of this, with their successive children shown from left to right. For each requirement the map displays the name and ID of the requirement, with a tooltip that shows the description and any comments. Each node is color coded by its priority / importance value. Clicking on the node will take you to the details page for that requirement. As well as showing the primary hierarchy, there is an option to turn on the display of requirement associations. This will let you see all of the associations as dotted lines. For associations that denote dependencies there is an arrow and dotted line that shows the direction of the dependency. For simple relationship (relates to) associations, there is a dotted line without an arrow. The system will display either the comment or type of association, depending what was entered when the association was created. There are several other display options: refresh : to redraw the mindmap levels dropdown : lets you select how deep into the mindmap you wish to view. To only show the topmost level requirements, select level 1; to select the top two levels, select level 2, or view everything by selecting \"all levels\" zoom : you can change the zoom between 25% and 100% using the plus and minus buttons. To reset the zoom, click the magnifying glass Note: this view is unfortunately not compatible with Internet Explorer 11.","title":"Requirements Mindmap"},{"location":"Spira-User-Manual/Requirements-Management/#requirement-details","text":"When you click on a requirement item in the requirements list described in Requirements Management > Requirements List , you are taken to the requirement details page illustrated below: This page is made up of three areas; the left pane displays the requirements list navigation; the right pane's header, which displays: the operations toolbar; the hierarchical structure the requirement is in ; the editable name of the selected requirement; and the info bar (with a shaded background), which also contains the workflow status transitions (see below); and the right pane's tabbed interface with rich information related to the requirement. Please note that on smaller screen sizes the navigation pane is not displayed. While the navigation pane has a link to take you back to the requirements list, on mobile devices a 'back' button is shown on the left of the operations toolbar. The navigation pane can be collapsed by clicking on the \"-\" button, or expanded by clicking anywhere on the gray title area. On desktops the user can also control the exact width of the navigation pane by dragging and dropping a red handle that appears on hovering at the rightmost edge of the navigation pane. The navigation pane shows a list of the peer requirements to the one selected. This list is useful as a navigation shortcut; you can quickly view the coverage information of all the peer requirements by clicking on the navigation links without having to first return to the requirements list page. The navigation list can be switched between three different modes: The list of requirements matching the current filter The list of all requirements, irrespective of the current filter The list of requirements assigned to the current user The bottom part of the right pane can be switched between six views: \"Overview\", \"Test Coverage\", \"Tasks\", \"Attachments\", \"History\" and \"Associations\", each of which will be described in more detail below.","title":"Requirement Details"},{"location":"Spira-User-Manual/Requirements-Management/#emailing","text":"Read about emailing an artifact to colleagues using Spira .","title":"Emailing"},{"location":"Spira-User-Manual/Requirements-Management/#followers","text":"Read about how to add and manage followers to an artifact .","title":"Followers"},{"location":"Spira-User-Manual/Requirements-Management/#workflows","text":"Read about using workflows to change the status of your artifact .","title":"Workflows"},{"location":"Spira-User-Manual/Requirements-Management/#overview-details","text":"The Overview tab is divided into a number of different sections. Each of these can be collapsed or expanded by clicking on the title of that section. It displays the description, fields and comments associated with the requirement. The top part of this tab displays the various standard fields and custom properties associated with the requirement. Fields (both standard and custom) are grouped under the collapsible headings (marked by orange text and underline) in the screenshot below. For instance, all fields regarding dates are grouped together in the \"Dates and Times\" area.","title":"Overview - Details"},{"location":"Spira-User-Manual/Requirements-Management/#overview-detailed-information","text":"The Detailed Information section contains the long, formatted description of the requirement, as well as any rich text custom fields. You can enter rich text or paste in from a word processing program or web page into these fields. Clicking on the shaded areas of one of these detailed fields will display the rich text toolbar.","title":"Overview -- Detailed Information"},{"location":"Spira-User-Manual/Requirements-Management/#overview-comments","text":"The Comments section allows you to add and view discussions relating to the requirement: Existing comments are displayed in order underneath the textbox in date order (either newest first or oldest first). To add a new comment, enter it into the textbox, and click the \" Add Comment \" button.","title":"Overview - Comments"},{"location":"Spira-User-Manual/Requirements-Management/#overview-scenario","text":"If you are editing a 'Use Case' type of requirement, there will be a special 'Scenario' section where you can enter in the scenario steps that define the use case: This section displays the various steps that a user would perform when carrying out the defined use case. The list of use case steps displays the position number, and the description. If a test case is created from this use-case, the steps will be used to create the test steps. Clicking on the \" Insert Step \" button inserts a new step before the currently selected (by means of the check-box) step. Clicking the \" Insert Step \" button without selecting an existing step will insert a new step at the end of the list. When a new step is inserted, the fields are displayed in \"Edit\" mode, so the description, field is editable, allowing you to enter the data: To move the steps in the list, click on the step you want to move and drag it to the location you want it moved.","title":"Overview -- Scenario"},{"location":"Spira-User-Manual/Requirements-Management/#test-coverage","text":"This tab shows the test coverage information for the requirement in question: The tab displays a grid containing the test cases already mapped to this requirement. You can filter that list by the test case type, name, status, execution status, execution date, priority, product name and ID. You can remove an existing test case by selecting its check box and clicking the 'Delete' button. This doesn't delete the test case, just removes it from the requirement. Hovering the mouse over the names of the test cases will display a \"tooltip\" consisting of the test case name, place in the folder structure and a detailed description. To add a new test case to the requirement, simply click on the 'Add' button: You can search for a test case by its ID if you know it (make sure to include the \"TC\" prefix): Otherwise, you can search for the test cases by choosing a folder from the dropdown and/or entering a partial name match: One you have found the desired test case(s), simply select their check boxes and click the 'Save' button to add them to the current requirement: Finally, as a shortcut you can click the \" Create Test Case from This Requirement \" button to create a new test case in the list of covered test cases that will be automatically linked to this requirement. This is useful when you have created a new requirement and want to generate an initial covering test to be fleshed-out later.","title":"Test Coverage"},{"location":"Spira-User-Manual/Requirements-Management/#tasks","text":"This tab shows the list of product tasks that need to be completed for the requirement to be satisfied: Each of the tasks is displayed together with, by default, its name, description (by hovering the mouse over the name), progress, priority, start-date, current owner, estimated effort, producted effort and numeric task identifier. Clicking on the task name will bring up the Task Details page . This allows you to edit the details of an existing task. You can perform the following actions on a task from this screen: New Task -- inserts a new task in the task list with a default set of values. The task will be associated with the current requirement. Remove -- removes the task from this requirement without actually deleting the task Refresh -- updates the list of tasks from the server, useful if other people are adding tasks to this requirement at the same time. Filter / Apply Filter -- Applies the entries in the filter boxes to the list of tasks Clear Filters -- Clears the current filter, so that all tasks associated with the current requirement are shown. Edit -- Clicking the \" Edit \" button to the right of the task allows you to edit the task inline directly on this screen. Only columns visible will be editable. Show/Hide Columns -- Allows you to choose which Task columns are visible The system has a series of shortcuts that simplify the editing of requirements and tasks: If you create a new task on the requirements page, the priority, release/sprint and owner are automatically copied from the parent requirement. You can change these suggested values before clicking \" Save \" When you assign a release/sprint to a requirement, its status automatically changes to \"Planned\" When at least one task assigned to the requirement changes from \"Not Started\" to \"In Progress\", the parent requirement automatically switches from \"Planned\" to \"In Progress\" When all the tasks under the requirement are completed, the parent requirement will switch to the \"Completed\" status. If you manually move a requirement that has no associated tasks from \"Planned\" to \"In Progress\", the system will automatically generate one task under the requirement and use the requirement's planned effort field to generate the task's estimated effort.","title":"Tasks"},{"location":"Spira-User-Manual/Requirements-Management/#attachments","text":"Read about how the attachments tab works","title":"Attachments"},{"location":"Spira-User-Manual/Requirements-Management/#history","text":"Read about how the history tab works","title":"History"},{"location":"Spira-User-Manual/Requirements-Management/#associations","text":"You can associate other requirements, source code commits, incidents, or risks to a requirement from this tab. The associated requirements and risks are those a user has decided are relevant to the current requirement and has created a direct link between them. In the case of incidents, the association can be either due to the creator of an incident directly linking the incident to the requirement, or it can be the result of a tester executing a test-run and creating an incident during the test run. In this latter case, the check-box to the left of the association will be unavailable as the link is not editable. Read more about how to manage and add associations to this artifact","title":"Associations"},{"location":"Spira-User-Manual/Requirements-Management/#use-case-diagrams","text":"Requirements with a list of defined steps displays an extra tab called \"Diagram\". This display the list of steps as a process flow diagram rather than as a simple list. You still write the scenario in the main Overview tab as a list of steps, however that list of steps will render as a diagram on this tab. Every step is displayed in the diagram. To make the diagram easier to read, only the first part of the step description is rendered in the diagram.","title":"Use Case Diagrams"},{"location":"Spira-User-Manual/Resource-Tracking/","text":"Resource Tracking This section outlines how you can use the Resource Tracking features of SpiraPlan\u00ae and SpiraTeam\u00ae to view the total workload for each of the product personnel resources assigned to a specific product. This allows you to verify that the work is evenly distributed amongst the product members and that no individual resource is overloaded. When you click Tracking > Resources on the global navigation bar, you will initially be taken to the product resources list screen illustrated below: This screen lists all the personnel (product resources) that belong to the current product together with the total value of the producted effort of all the work assigned to them, the available effort based on the length of the current release/sprint, and the remaining effort (the difference between the previous two values). The effort is shown for tasks and incidents as well as a total of the two together. Using the dropdown on the far right, you can display the workload: For the product as a whole (as above). For a specific release (including all child sprints) For a specific sprint You can also display the workload for the entire program by selecting the program from the product/program selector from the navigation bar There is a colored progress bar column called \"Allocation\" that graphically illustrates the % of the person's available effort that has been scheduled. If a person is over-scheduled, this bar will turn red. In addition, if any product resources have been assigned more work that they have time to complete during the length of the release/sprint, the background color of the remaining effort value will be also be colored in red, indicating that you need to offload some of the work to other product resources. Clicking on a resource name will take you to the Resource Details page. Resource Details The resource details page will show you what artifacts a resource has been assigned, and time values for the items. A small panel on the left will show current configured values for the product for # of hours per workday, # of days per week, and how many non-work hours per month there are. There are two options related to the instant messenger beneath the user's avatar. When you click the \" Send Message \" button it will open up a new instant message window to start a conversation with the selected resource. If the resource is not a contact of the current user, clicking the \" Add Contact \" button adds the selected resource to the user's 'My Contacts' list on the 'My Page' dashboard. Similarly if the resource is already a contact of the current user, clicking 'Remove Contact' will remove the resource as a contact. Tabs along the bottom will show assigned requirements and tasks, incidents, test cases, test sets and recent actions. The views for each item are a subset of available columns, to show progress and completion information for all items listed. Clicking on an artifact's name will take you to the artifact details page. The data in all of these tabs can be filtered by all releases, by a release and its children, or by a specific sprint. Reqs & Tasks This tab displays the list of requirements and child tasks that are assigned to the current resource: Incidents This tab displays the list of incidents that are assigned to the current resource: Test Cases This tab displays the list of test cases that are assigned to the current resource: Test Sets This tab displays the list of test sets that are assigned to the current resource: Actions This tab displays the list of recent actions make by the user in the product. It lets you quickly see all the changes they have made: This can be useful when auditing the changes made by a specific user.","title":"Resource Tracking"},{"location":"Spira-User-Manual/Resource-Tracking/#resource-tracking","text":"This section outlines how you can use the Resource Tracking features of SpiraPlan\u00ae and SpiraTeam\u00ae to view the total workload for each of the product personnel resources assigned to a specific product. This allows you to verify that the work is evenly distributed amongst the product members and that no individual resource is overloaded. When you click Tracking > Resources on the global navigation bar, you will initially be taken to the product resources list screen illustrated below: This screen lists all the personnel (product resources) that belong to the current product together with the total value of the producted effort of all the work assigned to them, the available effort based on the length of the current release/sprint, and the remaining effort (the difference between the previous two values). The effort is shown for tasks and incidents as well as a total of the two together. Using the dropdown on the far right, you can display the workload: For the product as a whole (as above). For a specific release (including all child sprints) For a specific sprint You can also display the workload for the entire program by selecting the program from the product/program selector from the navigation bar There is a colored progress bar column called \"Allocation\" that graphically illustrates the % of the person's available effort that has been scheduled. If a person is over-scheduled, this bar will turn red. In addition, if any product resources have been assigned more work that they have time to complete during the length of the release/sprint, the background color of the remaining effort value will be also be colored in red, indicating that you need to offload some of the work to other product resources. Clicking on a resource name will take you to the Resource Details page.","title":"Resource Tracking"},{"location":"Spira-User-Manual/Resource-Tracking/#resource-details","text":"The resource details page will show you what artifacts a resource has been assigned, and time values for the items. A small panel on the left will show current configured values for the product for # of hours per workday, # of days per week, and how many non-work hours per month there are. There are two options related to the instant messenger beneath the user's avatar. When you click the \" Send Message \" button it will open up a new instant message window to start a conversation with the selected resource. If the resource is not a contact of the current user, clicking the \" Add Contact \" button adds the selected resource to the user's 'My Contacts' list on the 'My Page' dashboard. Similarly if the resource is already a contact of the current user, clicking 'Remove Contact' will remove the resource as a contact. Tabs along the bottom will show assigned requirements and tasks, incidents, test cases, test sets and recent actions. The views for each item are a subset of available columns, to show progress and completion information for all items listed. Clicking on an artifact's name will take you to the artifact details page. The data in all of these tabs can be filtered by all releases, by a release and its children, or by a specific sprint.","title":"Resource Details"},{"location":"Spira-User-Manual/Resource-Tracking/#reqs-tasks","text":"This tab displays the list of requirements and child tasks that are assigned to the current resource:","title":"Reqs &amp; Tasks"},{"location":"Spira-User-Manual/Resource-Tracking/#incidents","text":"This tab displays the list of incidents that are assigned to the current resource:","title":"Incidents"},{"location":"Spira-User-Manual/Resource-Tracking/#test-cases","text":"This tab displays the list of test cases that are assigned to the current resource:","title":"Test Cases"},{"location":"Spira-User-Manual/Resource-Tracking/#test-sets","text":"This tab displays the list of test sets that are assigned to the current resource:","title":"Test Sets"},{"location":"Spira-User-Manual/Resource-Tracking/#actions","text":"This tab displays the list of recent actions make by the user in the product. It lets you quickly see all the changes they have made: This can be useful when auditing the changes made by a specific user.","title":"Actions"},{"location":"Spira-User-Manual/Risks-Management/","text":"Risks Management This section outlines the risk management features of SpiraPlan\u00ae (not available in SpiraTest or SpiraTeam) and how they can be used to help understand, track, and mitigate risks across your products. The expected principle ways of managing risks is through assigning values to each risk's probability and impact. These two fields, multiplied together, represent the potential (negative) exposure from the risk: a highly likely risk that would have a large impact has a higher exposure (and should be managed with a higher priority) than an unlikely risk which will not have much real world impact. Risks List When you click on the Tracking > Risks global navigation link, you will initially be taken to the risks list screen illustrated below: The risk list screen displays all the risks entered for the current product, in a filterable, sortable grid. The grid displays the risk number together with fields such as risk type (schedule, financial, etc.), status (open, evaluated, etc.), probability, impact, and exposure (calculated from the probability and impact). The choice of columns displayed is configurable per-user, per-product, giving extensive flexibility when it comes to viewing and searching risks. The sidebar on the left gives you quick access to saved filters, along with useful charts to get an at-a-glance view of risks for this product. In addition, you can view a more detailed description of the risk (along with any mitigations) by positioning the mouse pointer over the incident name hyperlink and waiting for the popup \"tooltip\" to appear. If you click on the risk name hyperlink, you will be taken to the risk details page. Clicking on any of the pagination links at the bottom of the page will advance you to the next set of risks in the list according to the applied filter and sort-order. There is also a drop-down-list at the bottom of the page which allows you to specify how many rows should be displayed in each page, helping accommodate different user preferences. Filtering & Sorting Read about how to create and manage filters, and how to sort the artifact list . New Risk Clicking on the \" New Risk \" button takes you to the new risk screen. This is essentially the same screen as the risk details screen except, depending on how the workflow has been configured for your product, certain fields may be disabled. For more details on setting and up configuring workflow for your product, please refer to the SpiraTest Administration Guide . Delete Clicking on the \" Delete \" button deletes the risk(s) whose check-boxes have been selected in the risk list. Refresh Clicking on the \" Refresh \" button simply reloads the list of risks; this is useful when new risks are being added by other users, and you want to make sure you have the most up-to-date list displayed. Show / Hide Columns This drop-down list allows you to change the fields that are displayed in the risk list as columns for the current product. To show a column that is not already displayed, select that column from the list of \"Show...\" column names and to hide an existing column, select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner. Edit Each risk in the list has an \" Edit \" button display in its right-most column. When you click this button or double-click on any of the cells in the row, you change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Save \" buttons are displayed in the last column: If you click \" Edit \" on more than one row, the \" Save \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then update the changes by clicking the one \" Save \" button. Also, if you want to make the same change to multiple rows (e.g. to change five risks from \"Resolved\" status to \"Closed\"), you can click on the \"fill\" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the \" Edit \" button on the same row as the Filters and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Save \" to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes. Cloning Risks To create a clone of an existing risk or set of risks, select the check-boxes of the risks you want to copy and then click Edit > \" Clone \". This will make a copy of the current risk with its name suffixed with '... - Copy' to distinguish itself from the original. Any file attachments and mitigations will also be copied along with the risk itself. Exporting Risks To export a risk or set of risks from the current product to another product in the system, select the check-boxes of the risk(s) you want to export and then click the Tools > \" Export to Product \". This will then bring up a list of possible destination products: Once you have chosen the destination product and clicked the \" Export \" button, the risks will be exported from the current product to the destination product. Any file attachments will also be copied to the destination product along with the risks. Printing Items To quickly print a single risk or list of risks you can select the items' checkboxes and then click Tools > Print Items. This will display a popup window containing a printable version of the selected items. You can also save the report in a variety of common formats from the same Tools menu. Risk Details When you click on a risk item in the risks list , you are taken to the risk details page illustrated below: This page is made up of three areas; the left pane displays the risks list navigation; the right pane's header, which displays: the operations toolbar; the editable name of the selected risk; and the info bar (with a shaded background), which also contains the workflow status transitions (see below); and the right pane's tabbed interface with rich information related to the risk. Please note that on smaller screen sizes the navigation pane is not displayed. While the navigation pane has a link to take you back to the risks list, on mobile devices a 'back' button is shown on the left of the operations toolbar. The navigation pane can be collapsed by clicking on the \"-\" button, or expanded by clicking anywhere on the gray title area. On desktops the user can also control the exact width of the navigation pane by dragging and dropping a red handle that appears on hovering at the rightmost edge of the navigation pane. The navigation pane shows a list of the peer risks to the one selected. This list is useful as a navigation shortcut; you can quickly view the coverage information of all the peer risks by clicking on the navigation links without having to first return to the risks list page. The navigation list can be switched between three different modes: The list of risks matching the current filter The list of all risks, irrespective of the current filter The list of risks assigned to the current user The bottom part of the right pane can be switched between four views: \"Overview\", \"Tasks\", \"Attachments\", \"History\", each of which will be described in more detail below. Emailing Read about emailing a document to colleagues using Spira . Followers Read about how to add and manage followers to an artifact . Workflows Read about using workflows to change the status of your artifact . Overview - Details The Overview tab is divided into a number of different sections. Each of these can be collapsed or expanded by clicking on the title of that section. It displays the description, fields and comments associated with the risk. The top part of this tab displays the various standard fields and custom properties associated with the risk. Fields (both standard and custom) are grouped under the collapsible headings (marked by orange text and underline) in the screenshot below. For instance, all fields regarding dates are grouped together in the \"Dates and Times\" area. Overview -- Detailed Information The Detailed Information section contains the long, formatted description of the risk, as well as any rich text custom fields. You can enter rich text or paste in from a word processing program or web page into these fields. Clicking on the shaded areas of one of these detailed fields will display the rich text toolbar. Overview -- Mitigations The mitigations section is where you can enter information about any plans or ideas about how the risk in question can be mitigated, in other words how its impact or probability can and/or will be lowered. The list of mitigations displays the position number, and the description, and date fields. Clicking on the \" Add \" button inserts a new mitigation before the currently selected (by means of the check-box) step. Clicking the \" Add \" button without selecting an existing step will insert a new mitigation at the end of the list. When a new mitigation is inserted, its fields are displayed in \"Edit\" mode, so the description and review date fields are editable, allowing you to enter the data: To move the mitigations around in the list, click and hold on the mitigation you want to move and drag it to the location desired. If at least one mitigation is selected (using the checkboxes on the left-hand side), then clicking \" Clone \" will clone those mitigations and add them to the bottom of the list. Overview - Comments The Comments section allows you to add and view discussions relating to the risk: Existing comments are displayed in order underneath the textbox in date order (either newest first or oldest first). To add a new comment, enter it into the textbox, and click the \" Add Comment \" button. Tasks This tab shows the list of product tasks that need to be completed for the risk to be properly managed/mitigated: Each of the tasks is displayed together with, by default, its name, description (by hovering the mouse over the name), progress, priority, start-date, current owner, estimated effort, producted effort and numeric task identifier. Clicking on the task name will bring up the Task Details page . This allows you to edit the details of an existing task. You can perform the following actions on a task from this screen: New Task -- inserts a new task in the task list with a default set of values. The task will be associated with the current risk. Remove -- removes the task from this risk without actually deleting the task Refresh -- updates the list of tasks from the server, useful if other people are adding tasks to this risk at the same time. Filter / Apply Filter -- Applies the entries in the filter boxes to the list of tasks Clear Filters -- Clears the current filter, so that all tasks associated with the current risk are shown. Edit -- Clicking the \" Edit \" button to the right of the task allows you to edit the task inline directly on this screen. Only columns visible will be editable. Show/Hide Columns -- Allows you to choose which Task columns are visible Note that if you create a new task on the risks page, the component, release/sprint, and owner are automatically copied from the parent risk. You can change these suggested values before clicking \" Save \" Attachments Read about how the attachments tab works Associations You can associate other risks, incidents, test cases, and requirements to a risk from this tab. Read more about how to manage and add associations to this artifact Risks associated with requirements : document and track all the risks associated with a specific feature or requirement in SpiraPlan. For example, a new authentication module might have security risks associated with it, or a new reporting feature might have technical risks associated with it. This is one of the most important associations you can create in SpiraPlan, since it lets you document the risks associated with changes you plan on making. Risks associated with test cases : this is useful when one of the outcomes of the risk analysis and treatment is the need to perform tests to determine the probability or impact. For example, a risk around system performance might be linked to series of performance, load and stress tests that you need to carry out to understand how serious the risk is. Risks associated with incidents : this is useful for two main purposes. First, you may have an identified risk that comes to pass and is now actually an issue rather than a risk. In this case you will close the risk and convert it to an issue, which will remain linked to the original risk. Second, whenever you make a change to the system, from a bug being fixed, enhancement being implement or change request being acted upon, you will have a risk of side effects. In this case, you will want to link the risk to the incident. Risks associated with other risks : this can be used for cases where one risk is dependent on another (if this happens, then that could also happen) or if they are just connected (this technical risk is similar to this other technical risk). History Read about how the history tab works","title":"Risk Management"},{"location":"Spira-User-Manual/Risks-Management/#risks-management","text":"This section outlines the risk management features of SpiraPlan\u00ae (not available in SpiraTest or SpiraTeam) and how they can be used to help understand, track, and mitigate risks across your products. The expected principle ways of managing risks is through assigning values to each risk's probability and impact. These two fields, multiplied together, represent the potential (negative) exposure from the risk: a highly likely risk that would have a large impact has a higher exposure (and should be managed with a higher priority) than an unlikely risk which will not have much real world impact.","title":"Risks Management"},{"location":"Spira-User-Manual/Risks-Management/#risks-list","text":"When you click on the Tracking > Risks global navigation link, you will initially be taken to the risks list screen illustrated below: The risk list screen displays all the risks entered for the current product, in a filterable, sortable grid. The grid displays the risk number together with fields such as risk type (schedule, financial, etc.), status (open, evaluated, etc.), probability, impact, and exposure (calculated from the probability and impact). The choice of columns displayed is configurable per-user, per-product, giving extensive flexibility when it comes to viewing and searching risks. The sidebar on the left gives you quick access to saved filters, along with useful charts to get an at-a-glance view of risks for this product. In addition, you can view a more detailed description of the risk (along with any mitigations) by positioning the mouse pointer over the incident name hyperlink and waiting for the popup \"tooltip\" to appear. If you click on the risk name hyperlink, you will be taken to the risk details page. Clicking on any of the pagination links at the bottom of the page will advance you to the next set of risks in the list according to the applied filter and sort-order. There is also a drop-down-list at the bottom of the page which allows you to specify how many rows should be displayed in each page, helping accommodate different user preferences.","title":"Risks List"},{"location":"Spira-User-Manual/Risks-Management/#filtering-sorting","text":"Read about how to create and manage filters, and how to sort the artifact list .","title":"Filtering &amp; Sorting"},{"location":"Spira-User-Manual/Risks-Management/#new-risk","text":"Clicking on the \" New Risk \" button takes you to the new risk screen. This is essentially the same screen as the risk details screen except, depending on how the workflow has been configured for your product, certain fields may be disabled. For more details on setting and up configuring workflow for your product, please refer to the SpiraTest Administration Guide .","title":"New Risk"},{"location":"Spira-User-Manual/Risks-Management/#delete","text":"Clicking on the \" Delete \" button deletes the risk(s) whose check-boxes have been selected in the risk list.","title":"Delete"},{"location":"Spira-User-Manual/Risks-Management/#refresh","text":"Clicking on the \" Refresh \" button simply reloads the list of risks; this is useful when new risks are being added by other users, and you want to make sure you have the most up-to-date list displayed.","title":"Refresh"},{"location":"Spira-User-Manual/Risks-Management/#show-hide-columns","text":"This drop-down list allows you to change the fields that are displayed in the risk list as columns for the current product. To show a column that is not already displayed, select that column from the list of \"Show...\" column names and to hide an existing column, select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner.","title":"Show / Hide Columns"},{"location":"Spira-User-Manual/Risks-Management/#edit","text":"Each risk in the list has an \" Edit \" button display in its right-most column. When you click this button or double-click on any of the cells in the row, you change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Save \" buttons are displayed in the last column: If you click \" Edit \" on more than one row, the \" Save \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then update the changes by clicking the one \" Save \" button. Also, if you want to make the same change to multiple rows (e.g. to change five risks from \"Resolved\" status to \"Closed\"), you can click on the \"fill\" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the \" Edit \" button on the same row as the Filters and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Save \" to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes.","title":"Edit"},{"location":"Spira-User-Manual/Risks-Management/#cloning-risks","text":"To create a clone of an existing risk or set of risks, select the check-boxes of the risks you want to copy and then click Edit > \" Clone \". This will make a copy of the current risk with its name suffixed with '... - Copy' to distinguish itself from the original. Any file attachments and mitigations will also be copied along with the risk itself.","title":"Cloning Risks"},{"location":"Spira-User-Manual/Risks-Management/#exporting-risks","text":"To export a risk or set of risks from the current product to another product in the system, select the check-boxes of the risk(s) you want to export and then click the Tools > \" Export to Product \". This will then bring up a list of possible destination products: Once you have chosen the destination product and clicked the \" Export \" button, the risks will be exported from the current product to the destination product. Any file attachments will also be copied to the destination product along with the risks.","title":"Exporting Risks"},{"location":"Spira-User-Manual/Risks-Management/#printing-items","text":"To quickly print a single risk or list of risks you can select the items' checkboxes and then click Tools > Print Items. This will display a popup window containing a printable version of the selected items. You can also save the report in a variety of common formats from the same Tools menu.","title":"Printing Items"},{"location":"Spira-User-Manual/Risks-Management/#risk-details","text":"When you click on a risk item in the risks list , you are taken to the risk details page illustrated below: This page is made up of three areas; the left pane displays the risks list navigation; the right pane's header, which displays: the operations toolbar; the editable name of the selected risk; and the info bar (with a shaded background), which also contains the workflow status transitions (see below); and the right pane's tabbed interface with rich information related to the risk. Please note that on smaller screen sizes the navigation pane is not displayed. While the navigation pane has a link to take you back to the risks list, on mobile devices a 'back' button is shown on the left of the operations toolbar. The navigation pane can be collapsed by clicking on the \"-\" button, or expanded by clicking anywhere on the gray title area. On desktops the user can also control the exact width of the navigation pane by dragging and dropping a red handle that appears on hovering at the rightmost edge of the navigation pane. The navigation pane shows a list of the peer risks to the one selected. This list is useful as a navigation shortcut; you can quickly view the coverage information of all the peer risks by clicking on the navigation links without having to first return to the risks list page. The navigation list can be switched between three different modes: The list of risks matching the current filter The list of all risks, irrespective of the current filter The list of risks assigned to the current user The bottom part of the right pane can be switched between four views: \"Overview\", \"Tasks\", \"Attachments\", \"History\", each of which will be described in more detail below.","title":"Risk Details"},{"location":"Spira-User-Manual/Risks-Management/#emailing","text":"Read about emailing a document to colleagues using Spira .","title":"Emailing"},{"location":"Spira-User-Manual/Risks-Management/#followers","text":"Read about how to add and manage followers to an artifact .","title":"Followers"},{"location":"Spira-User-Manual/Risks-Management/#workflows","text":"Read about using workflows to change the status of your artifact .","title":"Workflows"},{"location":"Spira-User-Manual/Risks-Management/#overview-details","text":"The Overview tab is divided into a number of different sections. Each of these can be collapsed or expanded by clicking on the title of that section. It displays the description, fields and comments associated with the risk. The top part of this tab displays the various standard fields and custom properties associated with the risk. Fields (both standard and custom) are grouped under the collapsible headings (marked by orange text and underline) in the screenshot below. For instance, all fields regarding dates are grouped together in the \"Dates and Times\" area.","title":"Overview - Details"},{"location":"Spira-User-Manual/Risks-Management/#overview-detailed-information","text":"The Detailed Information section contains the long, formatted description of the risk, as well as any rich text custom fields. You can enter rich text or paste in from a word processing program or web page into these fields. Clicking on the shaded areas of one of these detailed fields will display the rich text toolbar.","title":"Overview -- Detailed Information"},{"location":"Spira-User-Manual/Risks-Management/#overview-mitigations","text":"The mitigations section is where you can enter information about any plans or ideas about how the risk in question can be mitigated, in other words how its impact or probability can and/or will be lowered. The list of mitigations displays the position number, and the description, and date fields. Clicking on the \" Add \" button inserts a new mitigation before the currently selected (by means of the check-box) step. Clicking the \" Add \" button without selecting an existing step will insert a new mitigation at the end of the list. When a new mitigation is inserted, its fields are displayed in \"Edit\" mode, so the description and review date fields are editable, allowing you to enter the data: To move the mitigations around in the list, click and hold on the mitigation you want to move and drag it to the location desired. If at least one mitigation is selected (using the checkboxes on the left-hand side), then clicking \" Clone \" will clone those mitigations and add them to the bottom of the list.","title":"Overview -- Mitigations"},{"location":"Spira-User-Manual/Risks-Management/#overview-comments","text":"The Comments section allows you to add and view discussions relating to the risk: Existing comments are displayed in order underneath the textbox in date order (either newest first or oldest first). To add a new comment, enter it into the textbox, and click the \" Add Comment \" button.","title":"Overview - Comments"},{"location":"Spira-User-Manual/Risks-Management/#tasks","text":"This tab shows the list of product tasks that need to be completed for the risk to be properly managed/mitigated: Each of the tasks is displayed together with, by default, its name, description (by hovering the mouse over the name), progress, priority, start-date, current owner, estimated effort, producted effort and numeric task identifier. Clicking on the task name will bring up the Task Details page . This allows you to edit the details of an existing task. You can perform the following actions on a task from this screen: New Task -- inserts a new task in the task list with a default set of values. The task will be associated with the current risk. Remove -- removes the task from this risk without actually deleting the task Refresh -- updates the list of tasks from the server, useful if other people are adding tasks to this risk at the same time. Filter / Apply Filter -- Applies the entries in the filter boxes to the list of tasks Clear Filters -- Clears the current filter, so that all tasks associated with the current risk are shown. Edit -- Clicking the \" Edit \" button to the right of the task allows you to edit the task inline directly on this screen. Only columns visible will be editable. Show/Hide Columns -- Allows you to choose which Task columns are visible Note that if you create a new task on the risks page, the component, release/sprint, and owner are automatically copied from the parent risk. You can change these suggested values before clicking \" Save \"","title":"Tasks"},{"location":"Spira-User-Manual/Risks-Management/#attachments","text":"Read about how the attachments tab works","title":"Attachments"},{"location":"Spira-User-Manual/Risks-Management/#associations","text":"You can associate other risks, incidents, test cases, and requirements to a risk from this tab. Read more about how to manage and add associations to this artifact Risks associated with requirements : document and track all the risks associated with a specific feature or requirement in SpiraPlan. For example, a new authentication module might have security risks associated with it, or a new reporting feature might have technical risks associated with it. This is one of the most important associations you can create in SpiraPlan, since it lets you document the risks associated with changes you plan on making. Risks associated with test cases : this is useful when one of the outcomes of the risk analysis and treatment is the need to perform tests to determine the probability or impact. For example, a risk around system performance might be linked to series of performance, load and stress tests that you need to carry out to understand how serious the risk is. Risks associated with incidents : this is useful for two main purposes. First, you may have an identified risk that comes to pass and is now actually an issue rather than a risk. In this case you will close the risk and convert it to an issue, which will remain linked to the original risk. Second, whenever you make a change to the system, from a bug being fixed, enhancement being implement or change request being acted upon, you will have a risk of side effects. In this case, you will want to link the risk to the incident. Risks associated with other risks : this can be used for cases where one risk is dependent on another (if this happens, then that could also happen) or if they are just connected (this technical risk is similar to this other technical risk).","title":"Associations"},{"location":"Spira-User-Manual/Risks-Management/#history","text":"Read about how the history tab works","title":"History"},{"location":"Spira-User-Manual/Source-Code/","text":"Source Code This section outlines the source code integration features of SpiraPlan\u00ae and SpiraTeam\u00ae that can be used to browse the source code repository associated with a particular product and link artifacts in SpiraPlan to revisions / commits made in the source code repository. This functionality allows product members to quickly view files in the repository through a convenient web interface and also to see the end-to-end traceability from requirements, tasks and incidents to the code changes that addressed the requirement, fulfilled the task or resolved the incident The software can be integrated with a variety of different version control / Software Configuration Management (SCM) systems by means of different plug-ins. This section will outline the general features irrespective of the type of version control provider being used. For details on using a specific provider (e.g. Subversion) please refer to the separate SpiraPlan/Team Version Control Integration Guide . This section also assumes that an administrator has already configured the product to be integrated with the version control provider. The steps for using the administrative interface are described in the separate SpiraPlan Administration Guide . Source Code File List When you click on Tracking > Source Code on the global navigation bar, you will be taken to the source code repository file list screen illustrated below: This screen consists of three main sections: The top left-hand pane displays a hierarchical list of the various folders that exist in the source code repository. Clicking on the expand icon will expand the child folders and clicking on the name of the folder will display the list of files in the folder in the main pane to the right. The main right-hand pane displays a list of all the files contained within the currently selected folder. This list can be filtered and sorted, and you can choose how many rows of documents to display on the page at one time. The bottom left-hand pane contains a list of the most recent revisions, together with the option to view the overall revision log for the product, clicking on that will display the revision log page . Above the main right-hand pane, there is the branch selector . This lets you choose which branch in the source code repository is being viewed: Some older source code management systems (e.g. CVS, Visual SourceSafe) do not have the formal concept of branches, so the dropdown list will simply list the one main branch (usually called \"Trunk\"). Source Code File Details When you click on a file in the source code file list described above, you are taken to the file details page illustrated below: This page is made up of three areas; the left pane is for navigation, the upper part of the main pane contains information regarding the file, and the bottom part of the right pane contains three tabs that display a preview of the file (if textual), the list of file revisions stored in the version control system, and a list of associated artifacts. The navigation pane consists of a link that will take you back to the source code file list, as well as a list of other files in the current folder. This latter list is useful as a navigation shortcut; you can quickly view the detailed information of all the peer files by clicking on the navigation links without having to first return to the main file list page. The top part of the main pane allows you to view the details of the particular file in the version control system. Clicking on the \"Source Code File\" hyperlink will open the file in a separate window, and depending on the type of file, it may display in the page or prompt you to download it to your local computer. The \"Latest Revision\" hyperlink allows you to view details of the latest revision . The lower part of the main pane can be switched between the three different views by clicking the appropriate tab. Initially the pane will be in \"Preview\" mode, but it can be switched to \"Revisions\", or \"Associations\" as well. The functionality in each of these views is described below: Preview This view is only available for files that are textual and it will display the contents of the file inside the tab, with the text color-coded to match the syntax of the programming language it is written in: The syntax highlighting is based on the file type and file extension, so if you save a file with an incorrect extension (e.g. using .txt for a JavaScript file) it may not display the correct color-coding. For text files that are not for a specific programming language, it will simply display as plain text Revisions This view displays the list of revisions that have been committed for the current file: Each revision in the list is displayed with its name, the name of the person who made the revision, a description of what was changed, the date the change was made and two flags that denote whether the content was changed and/or if any of the properties of the file were changed. Clicking on the revision name will take you to the appropriate revision details page . Associations This view displays a list of the SpiraPlan artifacts in the current product that are associated with the current file. This allows you to see which requirements, test cases, incidents, tasks, etc. are linked to the file. Clicking on the hyperlink for the artifact will take you to the appropriate artifact page inside the product (assuming your user has permissions to access that information). In addition, you can use the \" Add New Association \" button to add a new association from the current source code file to an existing artifact in SpiraTeam: To add the association, you just need to select the type of artifact being associated (requirement, test case, incident, etc.) and the numeric ID of the artifact and then click the \" Add Association \" button. For example, to add an association to Requirement RQ00005 you would choose Artifact Type = Requirement and Artifact ID = 5. Source Code Revision List If you click on the \" View Revision Log \" button on the main Source Code page, it will take you to the Revision List page that displays all the revisions made to the product in a sortable, filterable list: Each revision in the list is displayed with its name, a description of what changed in the revision, the name of the person who committed the revision, and whether the revision was a change of the actual content, or just a change of the properties of the content. Clicking on the hyperlink for the revision name will take you to the Revision Details page for that revision. Above the main right-hand pane, there is the branch selector . This lets you choose which branch in the source code repository is being viewed. Source Code Revision Details When you click on a revision hyperlink in either the product revision log or the file revisions tab described above, you are taken to the revision details page illustrated below: This page is made up of three areas; the left pane is for navigation, the upper part of the main pane contains the details of the revision, and the bottom part of the right pane contains the list of files that were changed in this revision and the list of artifacts that the revision is associated with. The navigation pane consists of a link that will take you back to the source code revision list, as well as a list of other revisions associated with the current file. This latter list is useful as a navigation shortcut; you can quickly view the detailed information of all the peer revisions by clicking on the navigation links without having to first return to the main revision list page. The top part of the main pane allows you to view the details of this revision in the version control system, including the description of what was changed, the date that the change was made, and the name of the person who made the change. The lower part of the main pane can be switched between two different views by clicking the appropriate tab. Initially the pane will be in \"Files\" mode, but it can be switched to \"Associations\" as well. The functionality in each of these two views is described below: Files This view displays the list of files that were changed in the current revision: Each file in the list is displayed with its name, the file-size, who made changes to the file, what action was performed on the file (added, deleted, replaced, updated, etc.) and the most recent revision that exists for that file. Clicking on the filename will take you to the appropriate file details page , and clicking on the revision hyperlink will take you the appropriate revision. Associations This view displays a list of the SpiraPlan artifacts in the current product that are associated with the current revision. This allows you to see which requirements, incidents or tasks were affected by this specific change to the source code: Clicking on the hyperlink for the artifact will take you to the appropriate artifact page inside the product (assuming your user has permissions to access that information). In addition to the associations that are created from within the source code management system, you can add associations between source code revisions and SpiraPlan artifacts from within SpiraPlan interface itself. To do this, you simply need to click on the ' Add Association ' button: To add the association, you just need to select the type of artifact being associated (requirement, test case, incident, etc.) and the numeric ID of the artifact and then click the \" Add Association \" button. For example to add an association to Requirement RQ00005 you would choose Artifact Type = Requirement and Artifact ID = 5.","title":"Source Code"},{"location":"Spira-User-Manual/Source-Code/#source-code","text":"This section outlines the source code integration features of SpiraPlan\u00ae and SpiraTeam\u00ae that can be used to browse the source code repository associated with a particular product and link artifacts in SpiraPlan to revisions / commits made in the source code repository. This functionality allows product members to quickly view files in the repository through a convenient web interface and also to see the end-to-end traceability from requirements, tasks and incidents to the code changes that addressed the requirement, fulfilled the task or resolved the incident The software can be integrated with a variety of different version control / Software Configuration Management (SCM) systems by means of different plug-ins. This section will outline the general features irrespective of the type of version control provider being used. For details on using a specific provider (e.g. Subversion) please refer to the separate SpiraPlan/Team Version Control Integration Guide . This section also assumes that an administrator has already configured the product to be integrated with the version control provider. The steps for using the administrative interface are described in the separate SpiraPlan Administration Guide .","title":"Source Code"},{"location":"Spira-User-Manual/Source-Code/#source-code-file-list","text":"When you click on Tracking > Source Code on the global navigation bar, you will be taken to the source code repository file list screen illustrated below: This screen consists of three main sections: The top left-hand pane displays a hierarchical list of the various folders that exist in the source code repository. Clicking on the expand icon will expand the child folders and clicking on the name of the folder will display the list of files in the folder in the main pane to the right. The main right-hand pane displays a list of all the files contained within the currently selected folder. This list can be filtered and sorted, and you can choose how many rows of documents to display on the page at one time. The bottom left-hand pane contains a list of the most recent revisions, together with the option to view the overall revision log for the product, clicking on that will display the revision log page . Above the main right-hand pane, there is the branch selector . This lets you choose which branch in the source code repository is being viewed: Some older source code management systems (e.g. CVS, Visual SourceSafe) do not have the formal concept of branches, so the dropdown list will simply list the one main branch (usually called \"Trunk\").","title":"Source Code File List"},{"location":"Spira-User-Manual/Source-Code/#source-code-file-details","text":"When you click on a file in the source code file list described above, you are taken to the file details page illustrated below: This page is made up of three areas; the left pane is for navigation, the upper part of the main pane contains information regarding the file, and the bottom part of the right pane contains three tabs that display a preview of the file (if textual), the list of file revisions stored in the version control system, and a list of associated artifacts. The navigation pane consists of a link that will take you back to the source code file list, as well as a list of other files in the current folder. This latter list is useful as a navigation shortcut; you can quickly view the detailed information of all the peer files by clicking on the navigation links without having to first return to the main file list page. The top part of the main pane allows you to view the details of the particular file in the version control system. Clicking on the \"Source Code File\" hyperlink will open the file in a separate window, and depending on the type of file, it may display in the page or prompt you to download it to your local computer. The \"Latest Revision\" hyperlink allows you to view details of the latest revision . The lower part of the main pane can be switched between the three different views by clicking the appropriate tab. Initially the pane will be in \"Preview\" mode, but it can be switched to \"Revisions\", or \"Associations\" as well. The functionality in each of these views is described below:","title":"Source Code File Details"},{"location":"Spira-User-Manual/Source-Code/#preview","text":"This view is only available for files that are textual and it will display the contents of the file inside the tab, with the text color-coded to match the syntax of the programming language it is written in: The syntax highlighting is based on the file type and file extension, so if you save a file with an incorrect extension (e.g. using .txt for a JavaScript file) it may not display the correct color-coding. For text files that are not for a specific programming language, it will simply display as plain text","title":"Preview"},{"location":"Spira-User-Manual/Source-Code/#revisions","text":"This view displays the list of revisions that have been committed for the current file: Each revision in the list is displayed with its name, the name of the person who made the revision, a description of what was changed, the date the change was made and two flags that denote whether the content was changed and/or if any of the properties of the file were changed. Clicking on the revision name will take you to the appropriate revision details page .","title":"Revisions"},{"location":"Spira-User-Manual/Source-Code/#associations","text":"This view displays a list of the SpiraPlan artifacts in the current product that are associated with the current file. This allows you to see which requirements, test cases, incidents, tasks, etc. are linked to the file. Clicking on the hyperlink for the artifact will take you to the appropriate artifact page inside the product (assuming your user has permissions to access that information). In addition, you can use the \" Add New Association \" button to add a new association from the current source code file to an existing artifact in SpiraTeam: To add the association, you just need to select the type of artifact being associated (requirement, test case, incident, etc.) and the numeric ID of the artifact and then click the \" Add Association \" button. For example, to add an association to Requirement RQ00005 you would choose Artifact Type = Requirement and Artifact ID = 5.","title":"Associations"},{"location":"Spira-User-Manual/Source-Code/#source-code-revision-list","text":"If you click on the \" View Revision Log \" button on the main Source Code page, it will take you to the Revision List page that displays all the revisions made to the product in a sortable, filterable list: Each revision in the list is displayed with its name, a description of what changed in the revision, the name of the person who committed the revision, and whether the revision was a change of the actual content, or just a change of the properties of the content. Clicking on the hyperlink for the revision name will take you to the Revision Details page for that revision. Above the main right-hand pane, there is the branch selector . This lets you choose which branch in the source code repository is being viewed.","title":"Source Code Revision List"},{"location":"Spira-User-Manual/Source-Code/#source-code-revision-details","text":"When you click on a revision hyperlink in either the product revision log or the file revisions tab described above, you are taken to the revision details page illustrated below: This page is made up of three areas; the left pane is for navigation, the upper part of the main pane contains the details of the revision, and the bottom part of the right pane contains the list of files that were changed in this revision and the list of artifacts that the revision is associated with. The navigation pane consists of a link that will take you back to the source code revision list, as well as a list of other revisions associated with the current file. This latter list is useful as a navigation shortcut; you can quickly view the detailed information of all the peer revisions by clicking on the navigation links without having to first return to the main revision list page. The top part of the main pane allows you to view the details of this revision in the version control system, including the description of what was changed, the date that the change was made, and the name of the person who made the change. The lower part of the main pane can be switched between two different views by clicking the appropriate tab. Initially the pane will be in \"Files\" mode, but it can be switched to \"Associations\" as well. The functionality in each of these two views is described below:","title":"Source Code Revision Details"},{"location":"Spira-User-Manual/Source-Code/#files","text":"This view displays the list of files that were changed in the current revision: Each file in the list is displayed with its name, the file-size, who made changes to the file, what action was performed on the file (added, deleted, replaced, updated, etc.) and the most recent revision that exists for that file. Clicking on the filename will take you to the appropriate file details page , and clicking on the revision hyperlink will take you the appropriate revision.","title":"Files"},{"location":"Spira-User-Manual/Source-Code/#associations_1","text":"This view displays a list of the SpiraPlan artifacts in the current product that are associated with the current revision. This allows you to see which requirements, incidents or tasks were affected by this specific change to the source code: Clicking on the hyperlink for the artifact will take you to the appropriate artifact page inside the product (assuming your user has permissions to access that information). In addition to the associations that are created from within the source code management system, you can add associations between source code revisions and SpiraPlan artifacts from within SpiraPlan interface itself. To do this, you simply need to click on the ' Add Association ' button: To add the association, you just need to select the type of artifact being associated (requirement, test case, incident, etc.) and the numeric ID of the artifact and then click the \" Add Association \" button. For example to add an association to Requirement RQ00005 you would choose Artifact Type = Requirement and Artifact ID = 5.","title":"Associations"},{"location":"Spira-User-Manual/Task-Tracking/","text":"Task Tracking This section outlines how you can use the Task Tracking features of SpiraPlan\u00ae and SpiraPlan\u00ae to view and manage the discrete activities that each member of the development team would need to carry out for the requirement to be fulfilled. Each task can be assigned to an individual user as well as associated with a particular release or sprint. The system can then be used by the product manager to track the completion of the different tasks to determine if the product is on schedule. The tasks can be organized into different folders as well as categorized by different types (development, testing, infrastructure, etc.), each of which can have its own workflow which defines the process by which the task changes status during the product lifecycle. Task List When you click on the Tracking > Tasks global navigation link, you will initially be taken to the tasks list screen illustrated below: The task list screen displays all the tasks entered for the current product by folder, in a filterable, sortable grid. The grid displays the task number together with fields such as priority, name, assigned owner, start date, end date, scheduled release, etc. The choice of columns displayed is configurable per-user, per-product, giving extensive flexibility when it comes to viewing and searching tasks. In addition, you can view a more detailed description of the task by positioning the mouse pointer over the task name hyperlink and waiting for the popup \"tooltip\" to appear. If you click on the task name hyperlink, you will be taken to the task details page Clicking on any of the pagination links at the bottom of the page will advance you to the next set of tasks in the list according to the applied filter and sort-order. There is also a drop-down-list at the bottom of the page which allows you to specify how many rows should be displayed in each page, helping accommodate different user preferences. One special column that is unique to tasks is the 'progress indicator'. This illustrates graphically both the percentage completion of the task and also if the task is either starting late or finishing late. The following table illustrates the different type of status that can be conveyed by the indicator: Indicator Display Progress Description Task has not yet started, but the scheduled start date is still in the future. Task has not yet started, and the start date has elapsed. This is considered a 'Late Starting Task' Task has started, and is approximately 25% complete. The scheduled end date is still in the future. Task has started, and is approximately 50% complete. However the scheduled end date has elapsed already. This is a considered a 'Late Finishing Task'. Task has been 100% completed. Essentially, the gray section of the bar indicates the % of the task yet to be completed, and the green/red section of the bar indicates the % of the task that has already been completed. If the bar changes from green to red it means that the end date has been reached and the task is not yet complete, and if the background changes from gray to yellow it means that the task has not yet started, but the scheduled start date has passed. Task Folders SpiraPlan lets you group product tasks into different folders to make organization easier. In the left-hand Quick Filters panel, the system displays the various task folders defined in the product: If you are a product administrator, you will see the 'Edit' and 'Add' buttons beneath the folder tree, this lets you add, edit and delete task folders in the product. To add a new folder, click the 'Add' button: Choose the parent folder that you want to add the new folder under (or None if you are adding a new top-level folder) from the dropdown list and then enter the name of the new folder. Then click ' Add' to save the new folder. To edit or delete an existing folder, simply click the \" Edit \" button to switch the folder tree to edit mode. To edit or delete a specific folder, click on the \" Edit \" button next to the folder: You can change the parent folder and/or name of the folder and click \" Update \" to commit the change or click \" Delete \" to delete the folder entirely. To move a task / tasks between folders, click and drag the relevant task/tasks from the table on the right, and drag them over the desired folder in the tree view on the left. The destination folder will be highlighted to show where the task will be placed. 1 Filtering & Sorting Read about how to create and manage filters, and how to sort the artifact list . New Task Clicking on the \" New Task \" button creates a new task in the grid with an initial set of information. You can click on the name of the task to edit its information. Delete Clicking on the \" Delete \" button deletes the tasks whose check-boxes have been selected in the task list. Refresh Clicking on the \" Refresh \" button simply reloads the list of tasks; this is useful when new tasks are being added by other users, and you want to make sure you have the most up-to-date list displayed. Show / Hide Columns This drop-down list allows you to change the fields that are displayed in the task list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner. Edit Each task in the list has an \" Edit \" button display in its right-most column. When you click this button or just click on any of the cells in the row, you change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Save \" buttons are displayed in the last column: If you click \" Edit \" on more than one row, the \" Save \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then update the changes by clicking the one \" Save \" button. Also, if you want to make the same change to multiple rows (e.g. to change five tasks from \"Not Started\" status to \"In Progress\"), you can click on the \"fill\" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the \" Edit \" button on the same row as the Filters and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Save \" to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes. Duplicating Tasks To create a clone of a task or set of tasks, select the check-boxes of the tasks you want to clone and then click \" Clone \". This will make a clone of the current task in the current folder with its name prefixed 'Copy of ....' to distinguish itself from the original. Any file attachments will also be copied along with the task itself. Exporting Tasks to Another Product To export a task or set of tasks from the current product to another product in the system, select the check-boxes of the task(s) you want to export and then click Tools > Export to Product. This will bring up a list of possible destination products: Once you have chosen the destination product and clicked the \" Export \" button, the tasks will be exported from the current product to the destination product. Any file attachments will also be copied to the destination product along with the tasks. Printing and Saving Items To quickly print a single task or list of tasks you can select the items' checkboxes and then click Tools > Print Items. This will display a popup window containing a printable version of the selected items. You can also save the report in a variety of common formats from the same Tools menu. Task Details When you click on a task item in the lists displayed on either the main task list page or on the requirement / release details pages, you are taken to the task details page illustrated below: This page is made up of three areas; the left pane displays the tasks list navigation; the right pane's header, which displays: the operations toolbar; the folder the task is in ; the editable name of the selected task; and the info bar (with a shaded background), which also contains the workflow status transitions (see below); and the right pane's tabbed interface with rich information related to the task. Please note that on smaller screen sizes the navigation pane is not displayed. While the navigation pane has a link to take you back to the tasks list, on mobile devices a 'back' button is shown on the left of the operations toolbar. The navigation pane can be collapsed by clicking on the \"-\" button, or expanded by clicking anywhere on the gray title area. On desktops the user can also control the exact width of the navigation pane by dragging and dropping a red handle that appears on hovering at the rightmost edge of the navigation pane. The navigation pane consists of a link that will take you back to the task list, as well as a list of tasks, and another list of the other related tasks, nested under their parent task. This latter list is useful as a navigation shortcut; you can quickly view the peer tasks by clicking on the navigation links without having to first return to the tasks list pages. The navigation list can be switched between five different modes: Current Filter - The list of tasks matching the current filter organized by task folder All Items - The list of all tasks, irrespective of the current filter, organized by task folder Assigned - The list of tasks assigned to the current user grouped by their parent requirement For Release - The list of tasks assigned to the current release or sprint, grouped under that parent release/sprint. For Requirement -- The list of tasks associated to the same requirement as the current task as well as other tasks at the same level in the requirement hierarchy. The lower part of the right pane can be in one of four possible tabs that can be selected: \"Overview Properties\", \"Attachments\", \"History\" and \"Associations\". Each of the different views is described separately below. Emailing Read about emailing an artifact to colleagues using Spira . Followers Read about how to add and manage followers to an artifact . Workflows Read about using workflows to change the status of your artifact . Overview -- Details The Overview tab is divided into a number of different sections. Each of these can be collapsed or expanded by clicking on the title of that section. It displays the description, fields and comments associated with the task. The top part of this tab displays the various standard fields and custom properties associated with the task. Fields (both standard and custom) are grouped under the collapsible headings (marked by orange text and underline) in the screenshot below. For instance, all fields regarding dates are grouped together in the \"Dates and Times\" area. Effort Fields You can enter/edit the start-date, end-date (i.e. the due-date), estimated, actual and remaining effort. From this the system will calculate the progress, percentage complete and projected final effort. The different effort values mean the following: Estimated Effort -- This is the original estimate for how long the task would take to complete. Actual Effort -- This is the current amount of effort that has been expended in completing the task. This does not indicate the completion progress Remaining Effort -- This is the estimate for how it will take from the current state to complete the task. The % complete is calculated from this value in conjunction with the estimated effort: % Complete = 100% - (Remaining Effort / Estimated Effort) Projected Effort -- This is value that the system is projecting it will take to complete the task. This is calculated from the Actual Effort and Remaining Effort: Projected Effort = (Actual Effort + Remaining Effort) Note : If the actual effort is not specified, the projected effort will be the same as the estimated effort. Note: if the task is currently assigned to a release or sprint, the start-date and end-date of the task must lie within the date-range of the parent release/sprint. If your task looks like it will not be completed in the available timeframe, you will need to contact the product manager to get them to either extend the date-range of the task, or consider moving the task to the next sprint. Followers Using the \" Subscribe \" button on the toolbar, you can quickly follow the item, and receive updates on certain changes to it. Depending on your role, you may also see a dropdown to this button, which let's you add another product member as a follower to this item. You can also quickly see who is following an incident under the \"People\" section in the Overview tab. To view information about the follower, or to unfollow them from the item, hover over their avatar to display a user profile card. Overview -- Comments The comments tab will display the comments associated with the task: All existing comments are displayed in date entered underneath the textbox. To enter a new comment, enter the text into the textbox, and then click the \" Add Comment \" button. Attachments Read about how the attachments tab works Associations You can associate other tasks, incidents, and source code to a task from this tab. Read more about how to manage and add associations to this artifact History Read about how the history tab works Task Board The task board is an alternative to the task list page designed to let you view the tasks planned for the current product. You can access this feature by clicking on the Board icon in the top-right of the Tasks list page. You can switch back to the Task list page by clicking on the Table view. The task board has the following different display modes: All Releases By Release By Priority By Status By Person Release By Sprint By Priority By Status By Person Sprint By Priority By Status By Person Each of these views is described below: Tasks -- By Priority This view is designed to let you see the list of planned tasks organized by priority. Each of the possible priority values is displayed on the left-hand side and the tasks displayed in the same row on the right: The top section will contain the list of tasks that are not assigned a priority, with the other sections containing the tasks that have been assigned to the specific priority. Tasks -- By Status This view is designed to let you see the tasks in the current product / release / sprint organized by their status. Each task status (not started, in progress, completed, blocked, deferred) is displayed as a heading, with the tasks displayed in the same column underneath: You can click on the expand/collapse icons to hide any resources that are not relevant. Depending on the view (all releases, release, or sprint), there may be sections with the release and sprint name. You can drag and drop the tasks between statuses or to/from the release/sprint backlog. Any tasks not assigned to a release/sprint will be listed in the (Unassigned Items) section at the top. Tasks - By Person This view is designed to let you see the tasks in the current product / release / sprint organized by resource / person. Each of the users that is a member of the current product is displayed as a heading, with the tasks displayed in the same column underneath. This view is often called the Task Board : You can click on the expand/collapse icons to hide any resources that are not relevant. The system will display a progress bar for each resource to illustrate the allocation for that resource. Any resource that has a progress bar that is completely green has been fully scheduled and should not have any additional tasks assigned. If the progress bar for that resource turns red, it means that they have been over-scheduled and you need to reassign some of the tasks. Depending on the view (all releases, release, or sprint), there may be sections with the release and sprint name; they contain tasks that are scheduled for the current release or sprint but have not yet been assigned to a resource. You can drag and drop the tasks between resources or to/from the release/sprint backlog. Any tasks not assigned to a resource and release/sprint will be listed in the (Unassigned Items) section at the top. Tasks - By Release This view is only available when you are displaying the task board for 'all releases'. Each of the active releases defined for the current product is displayed as a heading, with the tasks displayed in the same column underneath You can drag and drop the tasks between the different releases. Once the task has been added to the release, the utilized effort for the release will increase, and the available effort will decrease by the same amount. Note: The system will allow you to assign more tasks to a release than it is possible to complete, however this will result in a negative value for 'available effort'. If this happens, the \"Available Effort\" value will be displayed in red, and you need to rebalance the items, extend the release length or add product personnel resources to the release. Clicking on the release hyperlinks in the headers will switch the task board into the release view. Tasks - By Sprint This view is only available when you are displaying the task board for a specific release. Each of the sprints defined for the current release is displayed as a heading, with the tasks displayed in the same column underneath. This view is commonly used in Scrum products: You can drag and drop the tasks between the different sprints. Once the task has been added to the sprint, the utilized effort for the sprint will increase, and the available effort will decrease by the same amount. Note: The system will allow you to assign more tasks to a sprint than it is possible to complete, however this will result in a negative value for 'available effort'. If this happens, the \"Available Effort\" value will be displayed in red, and you need to rebalance the items, extend the sprint length or add product personnel resources to the sprint. Clicking on the sprint hyperlinks in the headers will switch the task board into the sprint view. Tasks - By Requirement This option is only available when you are displaying the task board for a specific release or sprint. In this case, the left hand side displays the requirements currently assigned to the current release / sprint, and the right hand column contains the tasks (in a card format) that are associated with that specific requirement, complete with color-coded progress bars. This view lets you quickly see all of the current user stories being worked, and the progress of completing the related tasks, in a single unified view. when navigating to folders (for all artifacts that support them), the URL in your browser's address bar will change. Each folder has a unique, sharable URL that you can give to someone to display the list of artifacts with the appropriate folder selected. You can also open up multiple folders in different browser tabs and easily toggle between them from the same browser. \u21a9","title":"Task Tracking"},{"location":"Spira-User-Manual/Task-Tracking/#task-tracking","text":"This section outlines how you can use the Task Tracking features of SpiraPlan\u00ae and SpiraPlan\u00ae to view and manage the discrete activities that each member of the development team would need to carry out for the requirement to be fulfilled. Each task can be assigned to an individual user as well as associated with a particular release or sprint. The system can then be used by the product manager to track the completion of the different tasks to determine if the product is on schedule. The tasks can be organized into different folders as well as categorized by different types (development, testing, infrastructure, etc.), each of which can have its own workflow which defines the process by which the task changes status during the product lifecycle.","title":"Task Tracking"},{"location":"Spira-User-Manual/Task-Tracking/#task-list","text":"When you click on the Tracking > Tasks global navigation link, you will initially be taken to the tasks list screen illustrated below: The task list screen displays all the tasks entered for the current product by folder, in a filterable, sortable grid. The grid displays the task number together with fields such as priority, name, assigned owner, start date, end date, scheduled release, etc. The choice of columns displayed is configurable per-user, per-product, giving extensive flexibility when it comes to viewing and searching tasks. In addition, you can view a more detailed description of the task by positioning the mouse pointer over the task name hyperlink and waiting for the popup \"tooltip\" to appear. If you click on the task name hyperlink, you will be taken to the task details page Clicking on any of the pagination links at the bottom of the page will advance you to the next set of tasks in the list according to the applied filter and sort-order. There is also a drop-down-list at the bottom of the page which allows you to specify how many rows should be displayed in each page, helping accommodate different user preferences. One special column that is unique to tasks is the 'progress indicator'. This illustrates graphically both the percentage completion of the task and also if the task is either starting late or finishing late. The following table illustrates the different type of status that can be conveyed by the indicator: Indicator Display Progress Description Task has not yet started, but the scheduled start date is still in the future. Task has not yet started, and the start date has elapsed. This is considered a 'Late Starting Task' Task has started, and is approximately 25% complete. The scheduled end date is still in the future. Task has started, and is approximately 50% complete. However the scheduled end date has elapsed already. This is a considered a 'Late Finishing Task'. Task has been 100% completed. Essentially, the gray section of the bar indicates the % of the task yet to be completed, and the green/red section of the bar indicates the % of the task that has already been completed. If the bar changes from green to red it means that the end date has been reached and the task is not yet complete, and if the background changes from gray to yellow it means that the task has not yet started, but the scheduled start date has passed.","title":"Task List"},{"location":"Spira-User-Manual/Task-Tracking/#task-folders","text":"SpiraPlan lets you group product tasks into different folders to make organization easier. In the left-hand Quick Filters panel, the system displays the various task folders defined in the product: If you are a product administrator, you will see the 'Edit' and 'Add' buttons beneath the folder tree, this lets you add, edit and delete task folders in the product. To add a new folder, click the 'Add' button: Choose the parent folder that you want to add the new folder under (or None if you are adding a new top-level folder) from the dropdown list and then enter the name of the new folder. Then click ' Add' to save the new folder. To edit or delete an existing folder, simply click the \" Edit \" button to switch the folder tree to edit mode. To edit or delete a specific folder, click on the \" Edit \" button next to the folder: You can change the parent folder and/or name of the folder and click \" Update \" to commit the change or click \" Delete \" to delete the folder entirely. To move a task / tasks between folders, click and drag the relevant task/tasks from the table on the right, and drag them over the desired folder in the tree view on the left. The destination folder will be highlighted to show where the task will be placed. 1","title":"Task Folders"},{"location":"Spira-User-Manual/Task-Tracking/#filtering-sorting","text":"Read about how to create and manage filters, and how to sort the artifact list .","title":"Filtering &amp; Sorting"},{"location":"Spira-User-Manual/Task-Tracking/#new-task","text":"Clicking on the \" New Task \" button creates a new task in the grid with an initial set of information. You can click on the name of the task to edit its information.","title":"New Task"},{"location":"Spira-User-Manual/Task-Tracking/#delete","text":"Clicking on the \" Delete \" button deletes the tasks whose check-boxes have been selected in the task list.","title":"Delete"},{"location":"Spira-User-Manual/Task-Tracking/#refresh","text":"Clicking on the \" Refresh \" button simply reloads the list of tasks; this is useful when new tasks are being added by other users, and you want to make sure you have the most up-to-date list displayed.","title":"Refresh"},{"location":"Spira-User-Manual/Task-Tracking/#show-hide-columns","text":"This drop-down list allows you to change the fields that are displayed in the task list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner.","title":"Show / Hide Columns"},{"location":"Spira-User-Manual/Task-Tracking/#edit","text":"Each task in the list has an \" Edit \" button display in its right-most column. When you click this button or just click on any of the cells in the row, you change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Save \" buttons are displayed in the last column: If you click \" Edit \" on more than one row, the \" Save \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then update the changes by clicking the one \" Save \" button. Also, if you want to make the same change to multiple rows (e.g. to change five tasks from \"Not Started\" status to \"In Progress\"), you can click on the \"fill\" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the \" Edit \" button on the same row as the Filters and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Save \" to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes.","title":"Edit"},{"location":"Spira-User-Manual/Task-Tracking/#duplicating-tasks","text":"To create a clone of a task or set of tasks, select the check-boxes of the tasks you want to clone and then click \" Clone \". This will make a clone of the current task in the current folder with its name prefixed 'Copy of ....' to distinguish itself from the original. Any file attachments will also be copied along with the task itself.","title":"Duplicating Tasks"},{"location":"Spira-User-Manual/Task-Tracking/#exporting-tasks-to-another-product","text":"To export a task or set of tasks from the current product to another product in the system, select the check-boxes of the task(s) you want to export and then click Tools > Export to Product. This will bring up a list of possible destination products: Once you have chosen the destination product and clicked the \" Export \" button, the tasks will be exported from the current product to the destination product. Any file attachments will also be copied to the destination product along with the tasks.","title":"Exporting Tasks to Another Product"},{"location":"Spira-User-Manual/Task-Tracking/#printing-and-saving-items","text":"To quickly print a single task or list of tasks you can select the items' checkboxes and then click Tools > Print Items. This will display a popup window containing a printable version of the selected items. You can also save the report in a variety of common formats from the same Tools menu.","title":"Printing and Saving Items"},{"location":"Spira-User-Manual/Task-Tracking/#task-details","text":"When you click on a task item in the lists displayed on either the main task list page or on the requirement / release details pages, you are taken to the task details page illustrated below: This page is made up of three areas; the left pane displays the tasks list navigation; the right pane's header, which displays: the operations toolbar; the folder the task is in ; the editable name of the selected task; and the info bar (with a shaded background), which also contains the workflow status transitions (see below); and the right pane's tabbed interface with rich information related to the task. Please note that on smaller screen sizes the navigation pane is not displayed. While the navigation pane has a link to take you back to the tasks list, on mobile devices a 'back' button is shown on the left of the operations toolbar. The navigation pane can be collapsed by clicking on the \"-\" button, or expanded by clicking anywhere on the gray title area. On desktops the user can also control the exact width of the navigation pane by dragging and dropping a red handle that appears on hovering at the rightmost edge of the navigation pane. The navigation pane consists of a link that will take you back to the task list, as well as a list of tasks, and another list of the other related tasks, nested under their parent task. This latter list is useful as a navigation shortcut; you can quickly view the peer tasks by clicking on the navigation links without having to first return to the tasks list pages. The navigation list can be switched between five different modes: Current Filter - The list of tasks matching the current filter organized by task folder All Items - The list of all tasks, irrespective of the current filter, organized by task folder Assigned - The list of tasks assigned to the current user grouped by their parent requirement For Release - The list of tasks assigned to the current release or sprint, grouped under that parent release/sprint. For Requirement -- The list of tasks associated to the same requirement as the current task as well as other tasks at the same level in the requirement hierarchy. The lower part of the right pane can be in one of four possible tabs that can be selected: \"Overview Properties\", \"Attachments\", \"History\" and \"Associations\". Each of the different views is described separately below.","title":"Task Details"},{"location":"Spira-User-Manual/Task-Tracking/#emailing","text":"Read about emailing an artifact to colleagues using Spira .","title":"Emailing"},{"location":"Spira-User-Manual/Task-Tracking/#followers","text":"Read about how to add and manage followers to an artifact .","title":"Followers"},{"location":"Spira-User-Manual/Task-Tracking/#workflows","text":"Read about using workflows to change the status of your artifact .","title":"Workflows"},{"location":"Spira-User-Manual/Task-Tracking/#overview-details","text":"The Overview tab is divided into a number of different sections. Each of these can be collapsed or expanded by clicking on the title of that section. It displays the description, fields and comments associated with the task. The top part of this tab displays the various standard fields and custom properties associated with the task. Fields (both standard and custom) are grouped under the collapsible headings (marked by orange text and underline) in the screenshot below. For instance, all fields regarding dates are grouped together in the \"Dates and Times\" area.","title":"Overview -- Details"},{"location":"Spira-User-Manual/Task-Tracking/#effort-fields","text":"You can enter/edit the start-date, end-date (i.e. the due-date), estimated, actual and remaining effort. From this the system will calculate the progress, percentage complete and projected final effort. The different effort values mean the following: Estimated Effort -- This is the original estimate for how long the task would take to complete. Actual Effort -- This is the current amount of effort that has been expended in completing the task. This does not indicate the completion progress Remaining Effort -- This is the estimate for how it will take from the current state to complete the task. The % complete is calculated from this value in conjunction with the estimated effort: % Complete = 100% - (Remaining Effort / Estimated Effort) Projected Effort -- This is value that the system is projecting it will take to complete the task. This is calculated from the Actual Effort and Remaining Effort: Projected Effort = (Actual Effort + Remaining Effort) Note : If the actual effort is not specified, the projected effort will be the same as the estimated effort. Note: if the task is currently assigned to a release or sprint, the start-date and end-date of the task must lie within the date-range of the parent release/sprint. If your task looks like it will not be completed in the available timeframe, you will need to contact the product manager to get them to either extend the date-range of the task, or consider moving the task to the next sprint.","title":"Effort Fields"},{"location":"Spira-User-Manual/Task-Tracking/#followers_1","text":"Using the \" Subscribe \" button on the toolbar, you can quickly follow the item, and receive updates on certain changes to it. Depending on your role, you may also see a dropdown to this button, which let's you add another product member as a follower to this item. You can also quickly see who is following an incident under the \"People\" section in the Overview tab. To view information about the follower, or to unfollow them from the item, hover over their avatar to display a user profile card.","title":"Followers"},{"location":"Spira-User-Manual/Task-Tracking/#overview-comments","text":"The comments tab will display the comments associated with the task: All existing comments are displayed in date entered underneath the textbox. To enter a new comment, enter the text into the textbox, and then click the \" Add Comment \" button.","title":"Overview -- Comments"},{"location":"Spira-User-Manual/Task-Tracking/#attachments","text":"Read about how the attachments tab works","title":"Attachments"},{"location":"Spira-User-Manual/Task-Tracking/#associations","text":"You can associate other tasks, incidents, and source code to a task from this tab. Read more about how to manage and add associations to this artifact","title":"Associations"},{"location":"Spira-User-Manual/Task-Tracking/#history","text":"Read about how the history tab works","title":"History"},{"location":"Spira-User-Manual/Task-Tracking/#task-board","text":"The task board is an alternative to the task list page designed to let you view the tasks planned for the current product. You can access this feature by clicking on the Board icon in the top-right of the Tasks list page. You can switch back to the Task list page by clicking on the Table view. The task board has the following different display modes: All Releases By Release By Priority By Status By Person Release By Sprint By Priority By Status By Person Sprint By Priority By Status By Person Each of these views is described below:","title":"Task Board"},{"location":"Spira-User-Manual/Task-Tracking/#tasks-by-priority","text":"This view is designed to let you see the list of planned tasks organized by priority. Each of the possible priority values is displayed on the left-hand side and the tasks displayed in the same row on the right: The top section will contain the list of tasks that are not assigned a priority, with the other sections containing the tasks that have been assigned to the specific priority.","title":"Tasks -- By Priority"},{"location":"Spira-User-Manual/Task-Tracking/#tasks-by-status","text":"This view is designed to let you see the tasks in the current product / release / sprint organized by their status. Each task status (not started, in progress, completed, blocked, deferred) is displayed as a heading, with the tasks displayed in the same column underneath: You can click on the expand/collapse icons to hide any resources that are not relevant. Depending on the view (all releases, release, or sprint), there may be sections with the release and sprint name. You can drag and drop the tasks between statuses or to/from the release/sprint backlog. Any tasks not assigned to a release/sprint will be listed in the (Unassigned Items) section at the top.","title":"Tasks -- By Status"},{"location":"Spira-User-Manual/Task-Tracking/#tasks-by-person","text":"This view is designed to let you see the tasks in the current product / release / sprint organized by resource / person. Each of the users that is a member of the current product is displayed as a heading, with the tasks displayed in the same column underneath. This view is often called the Task Board : You can click on the expand/collapse icons to hide any resources that are not relevant. The system will display a progress bar for each resource to illustrate the allocation for that resource. Any resource that has a progress bar that is completely green has been fully scheduled and should not have any additional tasks assigned. If the progress bar for that resource turns red, it means that they have been over-scheduled and you need to reassign some of the tasks. Depending on the view (all releases, release, or sprint), there may be sections with the release and sprint name; they contain tasks that are scheduled for the current release or sprint but have not yet been assigned to a resource. You can drag and drop the tasks between resources or to/from the release/sprint backlog. Any tasks not assigned to a resource and release/sprint will be listed in the (Unassigned Items) section at the top.","title":"Tasks - By Person"},{"location":"Spira-User-Manual/Task-Tracking/#tasks-by-release","text":"This view is only available when you are displaying the task board for 'all releases'. Each of the active releases defined for the current product is displayed as a heading, with the tasks displayed in the same column underneath You can drag and drop the tasks between the different releases. Once the task has been added to the release, the utilized effort for the release will increase, and the available effort will decrease by the same amount. Note: The system will allow you to assign more tasks to a release than it is possible to complete, however this will result in a negative value for 'available effort'. If this happens, the \"Available Effort\" value will be displayed in red, and you need to rebalance the items, extend the release length or add product personnel resources to the release. Clicking on the release hyperlinks in the headers will switch the task board into the release view.","title":"Tasks - By Release"},{"location":"Spira-User-Manual/Task-Tracking/#tasks-by-sprint","text":"This view is only available when you are displaying the task board for a specific release. Each of the sprints defined for the current release is displayed as a heading, with the tasks displayed in the same column underneath. This view is commonly used in Scrum products: You can drag and drop the tasks between the different sprints. Once the task has been added to the sprint, the utilized effort for the sprint will increase, and the available effort will decrease by the same amount. Note: The system will allow you to assign more tasks to a sprint than it is possible to complete, however this will result in a negative value for 'available effort'. If this happens, the \"Available Effort\" value will be displayed in red, and you need to rebalance the items, extend the sprint length or add product personnel resources to the sprint. Clicking on the sprint hyperlinks in the headers will switch the task board into the sprint view.","title":"Tasks - By Sprint"},{"location":"Spira-User-Manual/Task-Tracking/#tasks-by-requirement","text":"This option is only available when you are displaying the task board for a specific release or sprint. In this case, the left hand side displays the requirements currently assigned to the current release / sprint, and the right hand column contains the tasks (in a card format) that are associated with that specific requirement, complete with color-coded progress bars. This view lets you quickly see all of the current user stories being worked, and the progress of completing the related tasks, in a single unified view. when navigating to folders (for all artifacts that support them), the URL in your browser's address bar will change. Each folder has a unique, sharable URL that you can give to someone to display the list of artifacts with the appropriate folder selected. You can also open up multiple folders in different browser tabs and easily toggle between them from the same browser. \u21a9","title":"Tasks - By Requirement"},{"location":"Spira-User-Manual/Test-Case-Management/","text":"Test Case Management This section outlines how the use-case / test-case management features of SpiraPlan\u00ae can be used to develop the business use-cases for the system, which specify how the different pieces of functionality are expected to work in practice. In addition, these use/test-cases form the basis of the business specification of the system when associated with the underlying requirements matrix. Typically when starting a new product: The requirements matrix is entered first Then the list of use-cases is developed to outline the key scenarios that need to supported to implement the requirement Then the use-cases are fleshed out into full test-cases by adding the detailed test-steps with the expected result and suggested sample-data Finally the tests are grouped into test-sets so that they can be assigned to users in batches for execution and tracking. However when migrating existing products into SpiraPlan\u00ae, you may need to migrate the test-case list first, and then add the supporting requirements matrix afterwards. Test Case List When you click on the Testing > Test Cases link on the global navigation bar, you will initially be taken to the test case list screen illustrated below: The test case list consists of a hierarchical arrangement of the various test folders and test cases. The structure is very similar to the folder structure in Microsoft Windows\u00ae Explorer, and users will find this very familiar and intuitive to use. A folder tree is on the left hand side---with triangle icons to expand / collapse each folder. Contents of the selected folder (the one marked in bold on the folder tree) are shown on the right hand side. When you create a new product, this list will initially be empty, and you will have to use the \" New Test Case \" button to start adding test cases to the system. A new product will also not have any test folders---only the base \"Root\" folder will be visible. To add a test folder, you click the \" Add ' button at the bottom of the folder tree on the left. The list shows all test folders (shown with a folder icon), and test cases (shown with a document icon) inside the currently selected folder. You can place test folders and test cases into test folders. 1 All of the items in the list have a name, together with the most recent execution status (passed, failed or not-run), and owner, author, execution date, active flag and test case number. Clicking on a test case's hyperlink will take you to the test case details page for the item in question. It is important to understand that only test cases are assigned a status themselves; the test folders instead display a test execution bar graph that illustrates the aggregate execution status of its child test-cases. Thus, if the test folder contains two test cases, one of which passed, and one of which wasn't run, the graph will display 50% green and 50% gray. To determine the exact aggregate test folder execution status information, position the mouse pointer over the bar-chart, and the number of tests in each of the execution statuses (passed, failed, not-run, blocked, caution) will be displayed as a \"tooltip\". Note that if you change the owner of a test folder, then all the child test cases will be assigned the same owner. This allows you to more easily associate entire folders to test cases to be executed by a specific user. Add a Test Case Click the \" New Test Case \" button will add a test case in the currently displayed folder (ie the one marked in bolder on the folder tree and also shown in the yellow information box). The new test case will be added at the bottom of the list. Once the new test case has been inserted, the item is switched to \"Edit\" mode so that you can rename the default name and choose an owner and/or author. Note that all new test cases are initially set with an execution status of \"Not Run\". Delete Clicking on the \" Delete \" button deletes all the test cases and/or test folders whose check-boxes have been selected. If any of the items are test folders, then the entire contents of that folder will also be deleted (as you would expect in Microsoft Windows\u00ae Explorer or OS X Finder). Execute Clicking on the \" Execute Tests \" button (accessed from the \"Tools\" menu or context menu) executes all the test cases selected, together with all the test cases contained with any selected test folders. The test execution functionality of SpiraPlan\u00ae is explained in more detail in Test Step Details . Refresh Clicking on the \" Refresh \" button simply reloads the test case list. This is useful as other people may be modifying the list of test cases at the same time as you, or executing specific test cases, and after stepping away from the computer for a short-time, you can click this button to make sure you are viewing the most current test case list for the product. Editing a Test Case Each test case in the list has an \" Edit \" button in its right-most column. When you click this button (or double-click on any of the cells in the row), you change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Update \" buttons are displayed in the last column: If you click \" Edit \" on more than one row, the \" Update \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then update the changes by clicking the one \" Update \" button. Also, if you want to make the same change to multiple rows (e.g. to change the owner of five test cases from \"Fred Bloggs\" to \"Joe Smith\"), you can click on the \"fill\" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the \" Edit \" button on the same row as the Filters (ie the topmost edit button) and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Update \" to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes. Editing a Test Folder Test folders shown on the right hand list pane do not have an \" Edit \" button. To edit a test folder, first click the \" Edit \" button at the bottom of the left hand folder tree. This will place the whole folder tree into edit mode---each folder will get a small \"Edit\" button of its own. Clicking on the \" Edit \" button of the folder you want to edit will display a pop up dialog. This allows you to: move the folder into a new or different parent folder; edit the name of the folder; or add a more detailed description. Click \" Update \" to commit the changes, \" Cancel \" to revert back to the original information, or \"Delete\" to delete the folder (and all of its contents). Note that on clicking \" Delete \" a warning box will appear to make sure you don't accidentally delete something. Show / Hide Columns This drop-down list allows you to change the fields that are displayed in the test case list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner. Note: If you hide the 'execution status' column, the test case folders will no longer show the count of test cases contained within the folder. Filtering & Sorting Read about how to create and manage filters, and how to sort the artifact list . Copying Test Cases To copy one or more test cases, simply select the check-boxes of the test cases you want to copy and then select the Edit > Copy Items menu option. This will copy the current test case selection to the clipboard. Then select the place where you want the test cases to be inserted and choose the Edit > Paste Items option. The test cases will now be copied to the destination you specified. The name of the copied test cases will be prefixed with \"Copy of...\" to distinguish them from the originals. Blocking and Unblocking Test Cases To designate one or more test cases as blocked, select the check-boxes of the test cases and then select the Edit > Block Test Cases menu option. This temporarily blocks test cases so that testers know they are not available for testing. Unlike actually executing the test cases and recording an execution status, no test run is recorded and summary metrics (such as requirements test coverage and test set status) are not updated. Likewise, to unblock test cases, select their check-boxes and then select the Edit > Unblock Test Cases menu option. This changes their Execution Status from Blocked to Not Run. The Edit menu will be enabled if the current user has Test Case > Bulk Edit permission. Moving Test Cases or Folders There are two options for moving test cases or folders: Click on the test case/folder you want to move in the right hand list and drag it to the folder in the left hand folder tree you want it moved to. The background of the new folder will change to show where it will be inserted: Once you have the test case/folder positioned at the correct place that you want it inserted, just release the mouse button. To move multiple items simply select their checkboxes and then drag-and-drop one of the selected items. Alternatively you can simply select the check-boxes of the test cases you want to move and then select the Edit > Cut Items menu option. This will cut the current test selection to the clipboard. Then select the place where you want the test cases to be inserted and choose the Edit > Paste Items option. The test cases will now be moved into the destination specified. Exporting Test Cases To export a test case or set of test cases from the current product to another product in the system, select the check-boxes of the test case(s) you want to export and then click Tools > \" Export to Product \". This will bring up a list of possible destination products: Once you have chosen the destination product and clicked the \" Export \" button, the test cases will be exported from the current product to the destination product. Any file attachments will also be copied to the destination product along with the test cases. Adding Test Cases to a Release, Test Set or Requirement To quickly add a series of test cases to a Release, Test Set or Requirement, select the check-boxes of the appropriate test cases and then click Tools > Add to Release / Test Set / Requirement. This will bring up a dialog box displaying either a list of available releases, test sets or requirements (depending on which option was chosen): Once you have chosen the destination release / test set / requirement, clicking \" Add \" will add the selected test cases to the destination release / test set / requirement. Viewing the Test Status for a Release By default, when you view the list of test case cases, it will display an aggregate status for all releases of the product. I.e. the test list will include all the test cases in the system (regardless of which release they apply to) and the execution status will reflect the most recent test run -- regardless of which release it was for. To change the test case list to just display test cases and execution status for a particular release, change the release selected in the drop-down list located in the yellow information panel (on the right-hand side) from \"All Releases\" to a specific release: As illustrated in the example above, when the drop-down list is changed to select a specific release, the list of test cases is filtered to just those mapped to the release in question. In addition, the execution status for the test releases will only reflect test runs for that specific release (and any child sprints if applicable). As can be seen in our example, many test cases that have been run for other releases now show the \"Not Run\" status since they've not been run for this specific release. As a shortcut, when you select a specific release for viewing, subsequent execution of any of the test cases via the Tools > Execute Tests menu option will default the test run to the selected release. Printing Items To quickly print a single test case, test folder or list of test cases you can select the items' checkboxes and then click Tools > Print Items. This will create a printable report of the selected items in a new window. Right-Click Context Menu SpiraPlan\u00ae provides a shortcut -- called the context menu - for accessing some of the most commonly used functions, so that you don't need to move your mouse up to the toolbar each time. To access the context menu, right-click on any of the rows in the test case list and the following menu will be displayed: You can now choose any of these options as an alternative to using the icons in the toolbar. Test Case Details When you click on a test case item in the test case list , you are taken to the test case details page illustrated below: This page is made up of three areas; the left pane displays the test case folders and list navigation; the right pane's header, which displays: the operations toolbar; the folder the test case is in ; the editable name of the selected test case; and the info bar (with a shaded background), which also contains the workflow status transitions (see below); and the right pane's tabbed interface with rich information related to the test case. The navigation pane consists of a link that will take you back to the test case list, as well as a list of the peer test cases to the one selected. This latter list is useful as a navigation shortcut: you can quickly view the detailed information of all the peer test cases by clicking on the navigation links without having to first return to the test cases list page. The navigation list can be switched between three different modes: The list of test cases matching the current filter The list of all test cases, irrespective of the current filter The list of test cases assigned to the current user The operations toolbar lets you, amongst standard operations like save and delete: create a replica of the current test case by clicking Clone discard any changes made by clicking Refresh export to a number of files formats or print it via one of the options in the Tools dropdown menu the Execute button will immediately prepare the current test case for execution and then take you to the test execution screen The lower part of the right pane can be switched between a number of different views by clicking the appropriate tab. Initially the pane will be in \"Overview\" mode, but it can be switched to \"Requirements Coverage\", \"Test Runs\", \"Releases\", \"Incidents\", \"Attachments\", \"History\", and \"Test Sets\" modes if so desired. Each of these views is described below. Emailing Read about emailing an artifact to colleagues using Spira . Followers Read about how to add and manage followers to an artifact . Workflows Read about using workflows to change the status of your artifact . Overview - Details The Overview tab is divided into a number of different sections. Each of these can be collapsed or expanded by clicking on the title of that section. This tab displays the fields, detailed information, and comments associated with the test case. The top part of this tab displays the various standard fields and custom properties associated with the test case. Fields (both standard and custom) are grouped under the collapsible headings (marked by orange text and underline) in the screenshot below. For instance, all fields regarding dates are grouped together in the \"Dates and Times\" area. The Detailed Information section contains the long, formatted description of the test case, as well as any rich text custom fields. You can enter rich text or paste in from a word processing program or web page. Clicking on the shaded areas of one of these detailed fields will display the rich text toolbar. The Suspect flag is automatically set on an approved test case, when one of the requirements linking to it changes. This lets you quickly find all the test cases impacted by a specific requirement change. For this to happen the requirement needs to be in an Accepted or later status (i.e. not Rejected, Rejected, Under Review, Obsolete) and the test case needs to be an approved status (i.e. not Draft, Obsolete, Rejected). Overview - Test Steps This view displays the name of the test case together with all the defined test steps that a tester would need to perform to verify that the functionality works as expected. The list of test steps displays the position number, the description, the expected result, some suggested sample data and the most recent execution status of the individual test step: Note: Test steps that are marked with a hyperlink and test case icon (e.g. \"Call Login to Application\" in the screen shot above) are in fact linked test cases. Linked test cases are a useful way of reusing existing test steps from other test cases. For example if you want to have a set of steps be in more than one test case (e.g. a login step) then you would create a separate test case just containing these steps, then have all the other test cases just link to it. This avoids the need to have duplicate test steps throughout the product. If you click on the step number hyperlink (e.g. Step 2) you will be taken to the test step details page which allows you to perform additional editing of a specific test step as well as attach documents, associate pre-existing incidents and view the change history. Insert Step Clicking on the \" Insert Step \" button inserts a new test step before the currently selected (by means of the check-box) test step. Clicking the \" Insert Step \" button without selecting a test step will insert a new step at the end of the list. When a new step is inserted, the fields are displayed in \"Edit\" mode, so the description, expected result and sample data fields are editable, allowing you to enter the data: Once you have entered the necessary information, you can click either \" Save and New \" to commit the changes. If you choose \" Save and New \" another new row will be inserted which is useful if you intend on entering lots of rows at once, whereas clicking \" Save \" will commit only the current row. Insert Link Clicking on the \" Insert Link \" button brings up the following dialog box that allows you to either choose an existing test case to be inserted or create a new test case and step with parameters: When linking an existing test case, first select its parent folder from the dropdown. Then select the name of the test case you want to insert as a link from the list. If the test case has declared parameters (see the section on Parameters below for more details) you will be given a list of parameters that needed to be filled out. You need to fill out the values of the parameters for the linked test case and then click the \" Add \" button to complete the operation. The system will then insert the test case as a link just before the currently selected test step. If no existing test step was selected, the link will be added at the end of the test step list. If you want to create a test step with specific parameters and parameter values, you can do so by clicking the \" Create New Test Case \". This will change the dialog to one where you can assign a folder, name, and parameters to a new test case. On clicking the \" Add \" button: the new test case is created; a test step is created within that new test case; the parameters specified in the dialog are assigned to that test step, with the values set as the defaults for the step; and the new test case is added as a linked test case in the list of test steps. Delete Clicking on the \" Delete \" button deletes the currently selected test steps, and reorders the test step position numbers to close any gaps in numbering. Clone Clicking on the \" Clone \" button makes a duplicate of the current test step or linked test case and inserts the copied version directly above the original one. Refresh Clicking on the \" Refresh \" button simply reloads the list of test steps. This is useful if other people are making changes to the test list and you want to make sure that you have the most current version. Show / Hide Columns By default the test step list screen will display the Description, Expected Result and Sample Data fields. However the Expected Result and Sample Data fields are optional and can be hidden if necessary to make more space. If you have configured custom properties for test steps, you can use the Show/Hide features to display one or more of your custom properties instead. These fields will then be editable in this grid-view. Editing Test Steps To modify an existing Test Step you simply need to click on the \" Edit \" button to the right of the step, or just double-click on the cells in the row. That will switch the selected row into Edit mode. The various columns are turned into editable text-boxes, and \" Save \" and \" Cancel \" buttons are displayed in the last column: If you click \" Edit \" on more than one row, the \" Save \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then save the changes by clicking the one \" Save \" button. Also, if you want to make the same change to multiple rows, you can click on the \" fill \" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. When you have made your changes, you can either click \" Save \" to commit the changes, or \" Cancel \" to revert back to the original information. Editing Test Links To modify an existing Test Link you simply need to click on the \" Edit \" button to the right of the step, or double click on the cells in the row. That will open up the special dialog box used for editing the parameter values associated with a specific linked test case: This allows you to edit the parameters being passed from the current test step to the linked test case without having to recreate the test link from scratch. To commit the change click \" Save \" to close the dialog box, or click \" Cancel \" to revert back to the original information. Moving Test Steps To move test steps in the list, click on the row you want to move and drag it where you want it moved to within the list of test steps. An empty space will appear to show you where it will be inserted. Parameters Test cases can have parameters associated with them. This enables one test case to be called several times by another test case (as a link) and have different parameters passed in each case, making the operation different. E.g. you could have a generic \"login to application\" test case that others call as an initial step, which could be provided with different login information depending on the calling test case. To view / change the parameters associated with the current test case, click on the \" Edit Parameters \" button in the toolbar and the list of current parameters will be displayed: The list of existing parameters is displayed in a list. Beneath this, is a form where you can add a new parameter and default value (used when the test case is run directly rather than being called by another test case). You can delete an existing parameter or copy the parameter token to your computer's clipboard. If you want to paste the parameter token onto the current page (say into a specific test step), position the cursor where you want and click \" Insert at Cursor \" This is a quick way to include the parameter and then have it converted into the parameter value during test execution. Overview - Automation The Automation section displays any automated test scripts associated with the current test case. There are three types of automated test: Attached -- this is when SpiraPlan physically stores the test script as an attachment in the system. This is only available for test automation tools that store their test scripts as plain text files. Examples of such tools are Selenium-RC and Squish. Linked -- this is when SpiraPlan stores the location of the test script stored on the automation host itself or on an external network drive. Repository -- This is a special option only available when using Rapise\u2122, the test automation system from Inflectra. This allows you to store an entire folder of automated test script files in SpiraPlan and have them linked to the test case. The screenshot below illustrates a sample Rapise automated test script attached to a test case: The automation screen includes the following fields that you should populate when using SpiraPlan\u00ae to store an automated test script: Automation Engine -- this should be the name of the test automation engine that the test script should be executed with. This list is populated by a system administrator using the administration section of the application (as described in the SpiraPlan Administration Guide ) Script Type -- This should be set to either \"attached\" or \"linked\". If you choose to attach the test script, the large text box at the bottom will be enabled, allowing you enter/edit the test script directly in SpiraPlan. If you choose linked, the test script is stored externally and SpiraPlan just stores a reference to it. The \"repository\" option is never selectable within SpiraPlan and will be automatically set by Rapise when it attaches a test script to the test case. Filename -- If you are attaching the test script to the test case then this field just needs to contain the filename of the test script (no folders or path needed), whereas if you are choosing to link the test script, you need to follow the exact format that will be expected by the test automation engine. For details, please refer to the specific test automation engine in the SpiraTest/Team Automated Test Integration Guide . Document Type - This should be set to the document type that you want the test script associated with. Document Folder - This should be set to the document folder that you want the test script to be stored in. Note that if the script type is repository then the folder is set automatically and cannot be edited by the user. Version -- This should contain the version number of the test script. Test Script -- If you are attaching a test script, this should contain the actual program code for executing the test script. The language and syntax will be dependent on the test automation engine being used. If you are linking the test script, this section will be disabled. Parameters -- You can enter the various test case parameters by clicking on this hyperlink. Most of the automation tools that SpiraPlan integrates with will support the passing of parameter values from SpiraPlan to the automation tool. Overview - Comments The Comments section allows users to add and view discussions related to the Test Case: Existing comments are displayed by date (either newest-first or oldest-first) above the text box. To add a comment to the Test Case, enter your text into the textbox, then click the \" Add Comment \" button. Requirements Coverage This tab displays the requirements coverage information for the test case in question: The table shows the requirements, if any, mapped to this test case. Clicking on the hyperlinked names will jump you to the details screen for the item in question. To map the test case to a new requirement, click the \" Add \" button to display the add association panel. You can search by the ID (if known) prefixed with the appropriate token (e.g. \"RQ:4\" to search for requirement 4). You can also browse by package, or search by name. Select the requirements you want and then click the \" Save \" button\". From the same add association panel there is a short to \" Create Requirement from This Test Case \". This button will create a new requirement in the list of covered requirements that will be automatically linked to this test case. This is useful when you have created a new test case and want to generate an initial placeholder requirement to be fleshed-out later. Finally, to remove coverage for this test case, select any of the added requirements (those in the bottom table) and click the \" Remove \" button. Test Runs This view displays the name of the test case together with a list of the previous execution runs that the test case has been put through. Each test run is listed together with the date of execution, the name of the test case, the name of the test set (if applicable), the name of the tester, the release/version of the system that the test was executed against, the overall execution status for the test case in that run and a link to the actual test run details . In addition, you can choose to display any of the custom properties associated with the test run. The \"show/hide columns\" drop-down list allows you to change the fields that are displayed in the test run list as columns. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. The displayed columns can be any standard field or custom property. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field. Releases This tab displays the name of the test case together with the release mapping information for the test case in question. It functions in a similar way to the Test Coverage tab described above: the table at the bottom of the panel shows the releases, if any, mapped to this test case. Clicking on the hyperlinked names will jump you to the details screen for the item in question. You can search for and add releases to this list using the \" Add \" button, or remove them using the \" Remove \" button. Incidents This tab displays the list of incidents associated with the current test case. The incidents have either been created during an execution of the test case (and are thereby linked to one of the test runs) or manually linked to one of the test steps in the test case. Each incident is listed together with the type, status, priority, name, owner, detector, detection date and a link to the actual incident details. You can customize the fields that are displayed using the \"Show/Hide Columns\" option. In addition, you can perform the following operations: Refresh -- updates the list of incidents from the server, useful if other people are adding incidents to this release at the same time. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field. Edit -- Clicking the \" Edit \" button to the right of the incident allows you to edit the incident inline. Attachments In this tab, the main pane displays the list of documents that have been \"attached\" to the test case. The documents can be in any format, though SpiraPlan\u00ae will only display an icon for certain known types. The attachment list includes the filename that was originally uploaded together with the file-size (in KB), name of the person who attached it and the date uploaded. In addition, if you position the pointer over the filename and hold it there for a few seconds, a detailed description is displayed as a tooltip. To actually view the document, simply click on the filename hyperlink and a new web browser window will open. Depending on the type of file, this window will either display the document or prompt you for a place to save it on your local computer. To delete an existing attachment from a test case, simply click the \" Remove \" button and the attachment will be removed from the list. To attach a new document to the test case, you need to first click the \" Add New \" link to display the new attachment dialog box: There are three different types of item that can be attached to a test case: To upload a file, choose \"File\" as the type and then click the Browse button and select the file from your local computer, optionally enter a detailed description then click the \" Upload \" button. The document will be copied from your computer and attached to the artifact. To attach a web-link (URL) to the artifact, you need to choose \"URL\" as the type and then enter the fully qualified URL (e.g. http://mywebsite.com?Document=1 ), an optional description and then click the \" Upload \" button to attach the web-link. To attach a screenshot to the artifact, you need to choose \"Screenshot\" as the type and then copy the image to your computer's clipboard (e.g. on Windows computers, the PRINT SCREEN button captures the current page and adds to the clipboard). Once the image is in the clipboard, paste it into the editor using CTRL+V (or the equivalent keystroke for your operating system) and the item will appear in the preview window. You can then fill in the other fields and click \" Upload \" to attach the image. Note: If you are using a non-Windows\u00ae computer (e.g. Macintosh\u00ae) that doesn't put file extensions on filenames (e.g. .xls for an Excel sheet) automatically, then you will need to manually add the file extension to the filename before uploading if you want it to be displayed with the correct icon in the attachment list. You can also associate an existing document (that's already stored in SpiraTeam) with the test case. To do that, click on the \" Add Existing \" button to bring up the add file association dialog box: You can then choose to either associate a document stored in the SpiraPlan Documents repository or (in the case of SpiraPlan/SpiraTeam but not SpiraTest) from the linked source code repository. In either case you first select the appropriate folder, and then pick the document(s) from the file list on the right. In the case of a source code file association you can also add a comment. History In this tab, the main pane displays the list of changes that have been performed on the test case artifact since its creation. An example test case change history is depicted below: The change history displays the date that each change was made, together with the fields that were changed, the old and new values and the person who made the change. This allows a complete audit trail to be maintained of all changes in the system. In addition, if you are logged in as a product administrator you can also click on the \" Admin View \" button to navigate to where you can revert any unwanted changes. Test Sets In this tab, the main pane displays the test sets that contain the current test case. Each test set is listed together with its name, release, the date of last execution, the owner, the status, the execution status, and a link to the actual test set details . In addition, you can choose to display any of the custom properties associated with the test set. The \"show/hide columns\" drop-down list allows you to change the fields that are displayed in the test set list as columns. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. The displayed columns can be any standard field or custom property. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field. Associations You can associate tasks and risks to a test case from this tab (which is only available to SpiraTeam and SpiraPlan users). Apart from creating links to an existing task from this tab, any tasks created during exploratory test execution will also be shown here. Read more about how to manage and add associations to this artifact Test Step Details When you click on one of the hyperlinks next to a test step in the test step list (see above), you will be taken to the test step details screen illustrated below: This page is made up of three areas; the left pane is the navigation window, the upper part of the right pane contains the test step detailed information itself, and the bottom part of the right pane contains related information about the test step. The navigation pane consists of a link that will take you back to the test step list, as well as a list of the peer test steps to the one selected. This latter list is useful as a navigation shortcut; you can quickly view the detailed information of all the peer test steps by clicking on the navigation links without having to first return to the test step list page. You can also switch between seeing the list of test steps with the current filter applier or simply unfiltered. The top part of the right pane allows you to view and/or edit the details of the particular test step. You can edit the various fields (description, expected result and sample data) and custom properties. Once you are satisfied with them, click any \" Save \" button on the page to commit the changes. If you want to add a new test step to the test case, you should click \" Save and New \" from the dropdown menu of the \"Save\" button at the top of the page instead. The lower part of the right pane can be switched between four different views by clicking the appropriate tab. Initially the pane will be on \"Incidents\" tab, but it can be switched to \"Attachments\", \"History\" or \"Requirements\" tabs if so desired. Each of the views is described separately below. Incidents In this mode, the main pane displays a list of any incidents that are associated with this test step. They can either be linked indirectly due to being logged during a test run, or directly linked after the fact: Each incident is listed together with the type, status, priority, name, owner, detector, detection date and a link to the actual incident details. You can customize the fields that are displayed using the \"Show/Hide Columns\" option. In addition, you can perform the following operations: Refresh -- updates the list of incidents from the server, useful if other people are adding incidents to this release at the same time. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field. Edit -- Clicking the \" Edit \" button to the right of the incident allows you to edit the incident inline directly on this screen. To create a new association between this test step and an existing incident, click the \" Link Incident \" button which will display the following panel: You need to choose the specific incident(s) you want to link to, either by choosing the item from the scrolling selection box, or searching for them by name or ID. Before adding the chosen incidents you can add a comment that explains the rationale for the association. Attachments Read about how the attachments tab works History Read about how the history tab works Requirements Normally within SpiraTest, you will link the test cases in a product with your requirements to describe which requirements are covered by each of the test cases. When all of the tests for a requirement pass, the requirement is considered fully tested. However, in some industries (for example when developing Defense systems) there is an additional requirement to report on the traceability between the individual test steps and the requirements. For customers that have such a requirement, this tab lets you associate the current test step with specific requirements. The tab displays a grid containing the requirements already mapped to this test step. You can filter that list by the requirement type, name, status, importance, product name and ID. You can remove an existing requirement by selecting its check box and clicking the 'Delete' button. This doesn't delete the requirement, just removes it from the test step. Hovering the mouse over the names of the requirements will display a \"tooltip\" consisting of the requirement name, place in the hierarchy and a detailed description. To add a new test case to the requirement, click the 'Add' button: You can search for a requirement by its ID if you know it (make sure to include the \"RQ\" prefix): Otherwise, you can search for the requirements by choosing a parent package from the dropdown and/or entering a partial name match: One you have found the desired requirement(s), simply select their check boxes and click the 'Save' button to add them to the current test step: Execute Test Case(s) Test Run List Test Run Details Test Set List Test Set Details Automation Host List Automation Host List Test Configuration List Test Configuration Details when navigating to folders (for all artifacts that support them), the URL in your browser's address bar will change. Each folder has a unique, sharable URL that you can give to someone to display the list of artifacts with the appropriate folder selected. You can also open up multiple folders in different browser tabs and easily toggle between them from the same browser. \u21a9","title":"Test Case Management"},{"location":"Spira-User-Manual/Test-Case-Management/#test-case-management","text":"This section outlines how the use-case / test-case management features of SpiraPlan\u00ae can be used to develop the business use-cases for the system, which specify how the different pieces of functionality are expected to work in practice. In addition, these use/test-cases form the basis of the business specification of the system when associated with the underlying requirements matrix. Typically when starting a new product: The requirements matrix is entered first Then the list of use-cases is developed to outline the key scenarios that need to supported to implement the requirement Then the use-cases are fleshed out into full test-cases by adding the detailed test-steps with the expected result and suggested sample-data Finally the tests are grouped into test-sets so that they can be assigned to users in batches for execution and tracking. However when migrating existing products into SpiraPlan\u00ae, you may need to migrate the test-case list first, and then add the supporting requirements matrix afterwards.","title":"Test Case Management"},{"location":"Spira-User-Manual/Test-Case-Management/#test-case-list","text":"When you click on the Testing > Test Cases link on the global navigation bar, you will initially be taken to the test case list screen illustrated below: The test case list consists of a hierarchical arrangement of the various test folders and test cases. The structure is very similar to the folder structure in Microsoft Windows\u00ae Explorer, and users will find this very familiar and intuitive to use. A folder tree is on the left hand side---with triangle icons to expand / collapse each folder. Contents of the selected folder (the one marked in bold on the folder tree) are shown on the right hand side. When you create a new product, this list will initially be empty, and you will have to use the \" New Test Case \" button to start adding test cases to the system. A new product will also not have any test folders---only the base \"Root\" folder will be visible. To add a test folder, you click the \" Add ' button at the bottom of the folder tree on the left. The list shows all test folders (shown with a folder icon), and test cases (shown with a document icon) inside the currently selected folder. You can place test folders and test cases into test folders. 1 All of the items in the list have a name, together with the most recent execution status (passed, failed or not-run), and owner, author, execution date, active flag and test case number. Clicking on a test case's hyperlink will take you to the test case details page for the item in question. It is important to understand that only test cases are assigned a status themselves; the test folders instead display a test execution bar graph that illustrates the aggregate execution status of its child test-cases. Thus, if the test folder contains two test cases, one of which passed, and one of which wasn't run, the graph will display 50% green and 50% gray. To determine the exact aggregate test folder execution status information, position the mouse pointer over the bar-chart, and the number of tests in each of the execution statuses (passed, failed, not-run, blocked, caution) will be displayed as a \"tooltip\". Note that if you change the owner of a test folder, then all the child test cases will be assigned the same owner. This allows you to more easily associate entire folders to test cases to be executed by a specific user.","title":"Test Case List"},{"location":"Spira-User-Manual/Test-Case-Management/#add-a-test-case","text":"Click the \" New Test Case \" button will add a test case in the currently displayed folder (ie the one marked in bolder on the folder tree and also shown in the yellow information box). The new test case will be added at the bottom of the list. Once the new test case has been inserted, the item is switched to \"Edit\" mode so that you can rename the default name and choose an owner and/or author. Note that all new test cases are initially set with an execution status of \"Not Run\".","title":"Add a Test Case"},{"location":"Spira-User-Manual/Test-Case-Management/#delete","text":"Clicking on the \" Delete \" button deletes all the test cases and/or test folders whose check-boxes have been selected. If any of the items are test folders, then the entire contents of that folder will also be deleted (as you would expect in Microsoft Windows\u00ae Explorer or OS X Finder).","title":"Delete"},{"location":"Spira-User-Manual/Test-Case-Management/#execute","text":"Clicking on the \" Execute Tests \" button (accessed from the \"Tools\" menu or context menu) executes all the test cases selected, together with all the test cases contained with any selected test folders. The test execution functionality of SpiraPlan\u00ae is explained in more detail in Test Step Details .","title":"Execute"},{"location":"Spira-User-Manual/Test-Case-Management/#refresh","text":"Clicking on the \" Refresh \" button simply reloads the test case list. This is useful as other people may be modifying the list of test cases at the same time as you, or executing specific test cases, and after stepping away from the computer for a short-time, you can click this button to make sure you are viewing the most current test case list for the product.","title":"Refresh"},{"location":"Spira-User-Manual/Test-Case-Management/#editing-a-test-case","text":"Each test case in the list has an \" Edit \" button in its right-most column. When you click this button (or double-click on any of the cells in the row), you change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Update \" buttons are displayed in the last column: If you click \" Edit \" on more than one row, the \" Update \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then update the changes by clicking the one \" Update \" button. Also, if you want to make the same change to multiple rows (e.g. to change the owner of five test cases from \"Fred Bloggs\" to \"Joe Smith\"), you can click on the \"fill\" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the \" Edit \" button on the same row as the Filters (ie the topmost edit button) and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Update \" to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes.","title":"Editing a Test Case"},{"location":"Spira-User-Manual/Test-Case-Management/#editing-a-test-folder","text":"Test folders shown on the right hand list pane do not have an \" Edit \" button. To edit a test folder, first click the \" Edit \" button at the bottom of the left hand folder tree. This will place the whole folder tree into edit mode---each folder will get a small \"Edit\" button of its own. Clicking on the \" Edit \" button of the folder you want to edit will display a pop up dialog. This allows you to: move the folder into a new or different parent folder; edit the name of the folder; or add a more detailed description. Click \" Update \" to commit the changes, \" Cancel \" to revert back to the original information, or \"Delete\" to delete the folder (and all of its contents). Note that on clicking \" Delete \" a warning box will appear to make sure you don't accidentally delete something.","title":"Editing a Test Folder"},{"location":"Spira-User-Manual/Test-Case-Management/#show-hide-columns","text":"This drop-down list allows you to change the fields that are displayed in the test case list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner. Note: If you hide the 'execution status' column, the test case folders will no longer show the count of test cases contained within the folder.","title":"Show / Hide Columns"},{"location":"Spira-User-Manual/Test-Case-Management/#filtering-sorting","text":"Read about how to create and manage filters, and how to sort the artifact list .","title":"Filtering &amp; Sorting"},{"location":"Spira-User-Manual/Test-Case-Management/#copying-test-cases","text":"To copy one or more test cases, simply select the check-boxes of the test cases you want to copy and then select the Edit > Copy Items menu option. This will copy the current test case selection to the clipboard. Then select the place where you want the test cases to be inserted and choose the Edit > Paste Items option. The test cases will now be copied to the destination you specified. The name of the copied test cases will be prefixed with \"Copy of...\" to distinguish them from the originals.","title":"Copying Test Cases"},{"location":"Spira-User-Manual/Test-Case-Management/#blocking-and-unblocking-test-cases","text":"To designate one or more test cases as blocked, select the check-boxes of the test cases and then select the Edit > Block Test Cases menu option. This temporarily blocks test cases so that testers know they are not available for testing. Unlike actually executing the test cases and recording an execution status, no test run is recorded and summary metrics (such as requirements test coverage and test set status) are not updated. Likewise, to unblock test cases, select their check-boxes and then select the Edit > Unblock Test Cases menu option. This changes their Execution Status from Blocked to Not Run. The Edit menu will be enabled if the current user has Test Case > Bulk Edit permission.","title":"Blocking and Unblocking Test Cases"},{"location":"Spira-User-Manual/Test-Case-Management/#moving-test-cases-or-folders","text":"There are two options for moving test cases or folders: Click on the test case/folder you want to move in the right hand list and drag it to the folder in the left hand folder tree you want it moved to. The background of the new folder will change to show where it will be inserted: Once you have the test case/folder positioned at the correct place that you want it inserted, just release the mouse button. To move multiple items simply select their checkboxes and then drag-and-drop one of the selected items. Alternatively you can simply select the check-boxes of the test cases you want to move and then select the Edit > Cut Items menu option. This will cut the current test selection to the clipboard. Then select the place where you want the test cases to be inserted and choose the Edit > Paste Items option. The test cases will now be moved into the destination specified.","title":"Moving Test Cases or Folders"},{"location":"Spira-User-Manual/Test-Case-Management/#exporting-test-cases","text":"To export a test case or set of test cases from the current product to another product in the system, select the check-boxes of the test case(s) you want to export and then click Tools > \" Export to Product \". This will bring up a list of possible destination products: Once you have chosen the destination product and clicked the \" Export \" button, the test cases will be exported from the current product to the destination product. Any file attachments will also be copied to the destination product along with the test cases.","title":"Exporting Test Cases"},{"location":"Spira-User-Manual/Test-Case-Management/#adding-test-cases-to-a-release-test-set-or-requirement","text":"To quickly add a series of test cases to a Release, Test Set or Requirement, select the check-boxes of the appropriate test cases and then click Tools > Add to Release / Test Set / Requirement. This will bring up a dialog box displaying either a list of available releases, test sets or requirements (depending on which option was chosen): Once you have chosen the destination release / test set / requirement, clicking \" Add \" will add the selected test cases to the destination release / test set / requirement.","title":"Adding Test Cases to a Release, Test Set or Requirement"},{"location":"Spira-User-Manual/Test-Case-Management/#viewing-the-test-status-for-a-release","text":"By default, when you view the list of test case cases, it will display an aggregate status for all releases of the product. I.e. the test list will include all the test cases in the system (regardless of which release they apply to) and the execution status will reflect the most recent test run -- regardless of which release it was for. To change the test case list to just display test cases and execution status for a particular release, change the release selected in the drop-down list located in the yellow information panel (on the right-hand side) from \"All Releases\" to a specific release: As illustrated in the example above, when the drop-down list is changed to select a specific release, the list of test cases is filtered to just those mapped to the release in question. In addition, the execution status for the test releases will only reflect test runs for that specific release (and any child sprints if applicable). As can be seen in our example, many test cases that have been run for other releases now show the \"Not Run\" status since they've not been run for this specific release. As a shortcut, when you select a specific release for viewing, subsequent execution of any of the test cases via the Tools > Execute Tests menu option will default the test run to the selected release.","title":"Viewing the Test Status for a Release"},{"location":"Spira-User-Manual/Test-Case-Management/#printing-items","text":"To quickly print a single test case, test folder or list of test cases you can select the items' checkboxes and then click Tools > Print Items. This will create a printable report of the selected items in a new window.","title":"Printing Items"},{"location":"Spira-User-Manual/Test-Case-Management/#right-click-context-menu","text":"SpiraPlan\u00ae provides a shortcut -- called the context menu - for accessing some of the most commonly used functions, so that you don't need to move your mouse up to the toolbar each time. To access the context menu, right-click on any of the rows in the test case list and the following menu will be displayed: You can now choose any of these options as an alternative to using the icons in the toolbar.","title":"Right-Click Context Menu"},{"location":"Spira-User-Manual/Test-Case-Management/#test-case-details","text":"When you click on a test case item in the test case list , you are taken to the test case details page illustrated below: This page is made up of three areas; the left pane displays the test case folders and list navigation; the right pane's header, which displays: the operations toolbar; the folder the test case is in ; the editable name of the selected test case; and the info bar (with a shaded background), which also contains the workflow status transitions (see below); and the right pane's tabbed interface with rich information related to the test case. The navigation pane consists of a link that will take you back to the test case list, as well as a list of the peer test cases to the one selected. This latter list is useful as a navigation shortcut: you can quickly view the detailed information of all the peer test cases by clicking on the navigation links without having to first return to the test cases list page. The navigation list can be switched between three different modes: The list of test cases matching the current filter The list of all test cases, irrespective of the current filter The list of test cases assigned to the current user The operations toolbar lets you, amongst standard operations like save and delete: create a replica of the current test case by clicking Clone discard any changes made by clicking Refresh export to a number of files formats or print it via one of the options in the Tools dropdown menu the Execute button will immediately prepare the current test case for execution and then take you to the test execution screen The lower part of the right pane can be switched between a number of different views by clicking the appropriate tab. Initially the pane will be in \"Overview\" mode, but it can be switched to \"Requirements Coverage\", \"Test Runs\", \"Releases\", \"Incidents\", \"Attachments\", \"History\", and \"Test Sets\" modes if so desired. Each of these views is described below.","title":"Test Case Details"},{"location":"Spira-User-Manual/Test-Case-Management/#emailing","text":"Read about emailing an artifact to colleagues using Spira .","title":"Emailing"},{"location":"Spira-User-Manual/Test-Case-Management/#followers","text":"Read about how to add and manage followers to an artifact .","title":"Followers"},{"location":"Spira-User-Manual/Test-Case-Management/#workflows","text":"Read about using workflows to change the status of your artifact .","title":"Workflows"},{"location":"Spira-User-Manual/Test-Case-Management/#overview-details","text":"The Overview tab is divided into a number of different sections. Each of these can be collapsed or expanded by clicking on the title of that section. This tab displays the fields, detailed information, and comments associated with the test case. The top part of this tab displays the various standard fields and custom properties associated with the test case. Fields (both standard and custom) are grouped under the collapsible headings (marked by orange text and underline) in the screenshot below. For instance, all fields regarding dates are grouped together in the \"Dates and Times\" area. The Detailed Information section contains the long, formatted description of the test case, as well as any rich text custom fields. You can enter rich text or paste in from a word processing program or web page. Clicking on the shaded areas of one of these detailed fields will display the rich text toolbar. The Suspect flag is automatically set on an approved test case, when one of the requirements linking to it changes. This lets you quickly find all the test cases impacted by a specific requirement change. For this to happen the requirement needs to be in an Accepted or later status (i.e. not Rejected, Rejected, Under Review, Obsolete) and the test case needs to be an approved status (i.e. not Draft, Obsolete, Rejected).","title":"Overview - Details"},{"location":"Spira-User-Manual/Test-Case-Management/#overview-test-steps","text":"This view displays the name of the test case together with all the defined test steps that a tester would need to perform to verify that the functionality works as expected. The list of test steps displays the position number, the description, the expected result, some suggested sample data and the most recent execution status of the individual test step: Note: Test steps that are marked with a hyperlink and test case icon (e.g. \"Call Login to Application\" in the screen shot above) are in fact linked test cases. Linked test cases are a useful way of reusing existing test steps from other test cases. For example if you want to have a set of steps be in more than one test case (e.g. a login step) then you would create a separate test case just containing these steps, then have all the other test cases just link to it. This avoids the need to have duplicate test steps throughout the product. If you click on the step number hyperlink (e.g. Step 2) you will be taken to the test step details page which allows you to perform additional editing of a specific test step as well as attach documents, associate pre-existing incidents and view the change history.","title":"Overview - Test Steps"},{"location":"Spira-User-Manual/Test-Case-Management/#insert-step","text":"Clicking on the \" Insert Step \" button inserts a new test step before the currently selected (by means of the check-box) test step. Clicking the \" Insert Step \" button without selecting a test step will insert a new step at the end of the list. When a new step is inserted, the fields are displayed in \"Edit\" mode, so the description, expected result and sample data fields are editable, allowing you to enter the data: Once you have entered the necessary information, you can click either \" Save and New \" to commit the changes. If you choose \" Save and New \" another new row will be inserted which is useful if you intend on entering lots of rows at once, whereas clicking \" Save \" will commit only the current row.","title":"Insert Step"},{"location":"Spira-User-Manual/Test-Case-Management/#insert-link","text":"Clicking on the \" Insert Link \" button brings up the following dialog box that allows you to either choose an existing test case to be inserted or create a new test case and step with parameters: When linking an existing test case, first select its parent folder from the dropdown. Then select the name of the test case you want to insert as a link from the list. If the test case has declared parameters (see the section on Parameters below for more details) you will be given a list of parameters that needed to be filled out. You need to fill out the values of the parameters for the linked test case and then click the \" Add \" button to complete the operation. The system will then insert the test case as a link just before the currently selected test step. If no existing test step was selected, the link will be added at the end of the test step list. If you want to create a test step with specific parameters and parameter values, you can do so by clicking the \" Create New Test Case \". This will change the dialog to one where you can assign a folder, name, and parameters to a new test case. On clicking the \" Add \" button: the new test case is created; a test step is created within that new test case; the parameters specified in the dialog are assigned to that test step, with the values set as the defaults for the step; and the new test case is added as a linked test case in the list of test steps.","title":"Insert Link"},{"location":"Spira-User-Manual/Test-Case-Management/#delete_1","text":"Clicking on the \" Delete \" button deletes the currently selected test steps, and reorders the test step position numbers to close any gaps in numbering.","title":"Delete"},{"location":"Spira-User-Manual/Test-Case-Management/#clone","text":"Clicking on the \" Clone \" button makes a duplicate of the current test step or linked test case and inserts the copied version directly above the original one.","title":"Clone"},{"location":"Spira-User-Manual/Test-Case-Management/#refresh_1","text":"Clicking on the \" Refresh \" button simply reloads the list of test steps. This is useful if other people are making changes to the test list and you want to make sure that you have the most current version.","title":"Refresh"},{"location":"Spira-User-Manual/Test-Case-Management/#show-hide-columns_1","text":"By default the test step list screen will display the Description, Expected Result and Sample Data fields. However the Expected Result and Sample Data fields are optional and can be hidden if necessary to make more space. If you have configured custom properties for test steps, you can use the Show/Hide features to display one or more of your custom properties instead. These fields will then be editable in this grid-view.","title":"Show / Hide Columns"},{"location":"Spira-User-Manual/Test-Case-Management/#editing-test-steps","text":"To modify an existing Test Step you simply need to click on the \" Edit \" button to the right of the step, or just double-click on the cells in the row. That will switch the selected row into Edit mode. The various columns are turned into editable text-boxes, and \" Save \" and \" Cancel \" buttons are displayed in the last column: If you click \" Edit \" on more than one row, the \" Save \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then save the changes by clicking the one \" Save \" button. Also, if you want to make the same change to multiple rows, you can click on the \" fill \" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. When you have made your changes, you can either click \" Save \" to commit the changes, or \" Cancel \" to revert back to the original information.","title":"Editing Test Steps"},{"location":"Spira-User-Manual/Test-Case-Management/#editing-test-links","text":"To modify an existing Test Link you simply need to click on the \" Edit \" button to the right of the step, or double click on the cells in the row. That will open up the special dialog box used for editing the parameter values associated with a specific linked test case: This allows you to edit the parameters being passed from the current test step to the linked test case without having to recreate the test link from scratch. To commit the change click \" Save \" to close the dialog box, or click \" Cancel \" to revert back to the original information.","title":"Editing Test Links"},{"location":"Spira-User-Manual/Test-Case-Management/#moving-test-steps","text":"To move test steps in the list, click on the row you want to move and drag it where you want it moved to within the list of test steps. An empty space will appear to show you where it will be inserted.","title":"Moving Test Steps"},{"location":"Spira-User-Manual/Test-Case-Management/#parameters","text":"Test cases can have parameters associated with them. This enables one test case to be called several times by another test case (as a link) and have different parameters passed in each case, making the operation different. E.g. you could have a generic \"login to application\" test case that others call as an initial step, which could be provided with different login information depending on the calling test case. To view / change the parameters associated with the current test case, click on the \" Edit Parameters \" button in the toolbar and the list of current parameters will be displayed: The list of existing parameters is displayed in a list. Beneath this, is a form where you can add a new parameter and default value (used when the test case is run directly rather than being called by another test case). You can delete an existing parameter or copy the parameter token to your computer's clipboard. If you want to paste the parameter token onto the current page (say into a specific test step), position the cursor where you want and click \" Insert at Cursor \" This is a quick way to include the parameter and then have it converted into the parameter value during test execution.","title":"Parameters"},{"location":"Spira-User-Manual/Test-Case-Management/#overview-automation","text":"The Automation section displays any automated test scripts associated with the current test case. There are three types of automated test: Attached -- this is when SpiraPlan physically stores the test script as an attachment in the system. This is only available for test automation tools that store their test scripts as plain text files. Examples of such tools are Selenium-RC and Squish. Linked -- this is when SpiraPlan stores the location of the test script stored on the automation host itself or on an external network drive. Repository -- This is a special option only available when using Rapise\u2122, the test automation system from Inflectra. This allows you to store an entire folder of automated test script files in SpiraPlan and have them linked to the test case. The screenshot below illustrates a sample Rapise automated test script attached to a test case: The automation screen includes the following fields that you should populate when using SpiraPlan\u00ae to store an automated test script: Automation Engine -- this should be the name of the test automation engine that the test script should be executed with. This list is populated by a system administrator using the administration section of the application (as described in the SpiraPlan Administration Guide ) Script Type -- This should be set to either \"attached\" or \"linked\". If you choose to attach the test script, the large text box at the bottom will be enabled, allowing you enter/edit the test script directly in SpiraPlan. If you choose linked, the test script is stored externally and SpiraPlan just stores a reference to it. The \"repository\" option is never selectable within SpiraPlan and will be automatically set by Rapise when it attaches a test script to the test case. Filename -- If you are attaching the test script to the test case then this field just needs to contain the filename of the test script (no folders or path needed), whereas if you are choosing to link the test script, you need to follow the exact format that will be expected by the test automation engine. For details, please refer to the specific test automation engine in the SpiraTest/Team Automated Test Integration Guide . Document Type - This should be set to the document type that you want the test script associated with. Document Folder - This should be set to the document folder that you want the test script to be stored in. Note that if the script type is repository then the folder is set automatically and cannot be edited by the user. Version -- This should contain the version number of the test script. Test Script -- If you are attaching a test script, this should contain the actual program code for executing the test script. The language and syntax will be dependent on the test automation engine being used. If you are linking the test script, this section will be disabled. Parameters -- You can enter the various test case parameters by clicking on this hyperlink. Most of the automation tools that SpiraPlan integrates with will support the passing of parameter values from SpiraPlan to the automation tool.","title":"Overview - Automation"},{"location":"Spira-User-Manual/Test-Case-Management/#overview-comments","text":"The Comments section allows users to add and view discussions related to the Test Case: Existing comments are displayed by date (either newest-first or oldest-first) above the text box. To add a comment to the Test Case, enter your text into the textbox, then click the \" Add Comment \" button.","title":"Overview - Comments"},{"location":"Spira-User-Manual/Test-Case-Management/#requirements-coverage","text":"This tab displays the requirements coverage information for the test case in question: The table shows the requirements, if any, mapped to this test case. Clicking on the hyperlinked names will jump you to the details screen for the item in question. To map the test case to a new requirement, click the \" Add \" button to display the add association panel. You can search by the ID (if known) prefixed with the appropriate token (e.g. \"RQ:4\" to search for requirement 4). You can also browse by package, or search by name. Select the requirements you want and then click the \" Save \" button\". From the same add association panel there is a short to \" Create Requirement from This Test Case \". This button will create a new requirement in the list of covered requirements that will be automatically linked to this test case. This is useful when you have created a new test case and want to generate an initial placeholder requirement to be fleshed-out later. Finally, to remove coverage for this test case, select any of the added requirements (those in the bottom table) and click the \" Remove \" button.","title":"Requirements Coverage"},{"location":"Spira-User-Manual/Test-Case-Management/#test-runs","text":"This view displays the name of the test case together with a list of the previous execution runs that the test case has been put through. Each test run is listed together with the date of execution, the name of the test case, the name of the test set (if applicable), the name of the tester, the release/version of the system that the test was executed against, the overall execution status for the test case in that run and a link to the actual test run details . In addition, you can choose to display any of the custom properties associated with the test run. The \"show/hide columns\" drop-down list allows you to change the fields that are displayed in the test run list as columns. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. The displayed columns can be any standard field or custom property. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field.","title":"Test Runs"},{"location":"Spira-User-Manual/Test-Case-Management/#releases","text":"This tab displays the name of the test case together with the release mapping information for the test case in question. It functions in a similar way to the Test Coverage tab described above: the table at the bottom of the panel shows the releases, if any, mapped to this test case. Clicking on the hyperlinked names will jump you to the details screen for the item in question. You can search for and add releases to this list using the \" Add \" button, or remove them using the \" Remove \" button.","title":"Releases"},{"location":"Spira-User-Manual/Test-Case-Management/#incidents","text":"This tab displays the list of incidents associated with the current test case. The incidents have either been created during an execution of the test case (and are thereby linked to one of the test runs) or manually linked to one of the test steps in the test case. Each incident is listed together with the type, status, priority, name, owner, detector, detection date and a link to the actual incident details. You can customize the fields that are displayed using the \"Show/Hide Columns\" option. In addition, you can perform the following operations: Refresh -- updates the list of incidents from the server, useful if other people are adding incidents to this release at the same time. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field. Edit -- Clicking the \" Edit \" button to the right of the incident allows you to edit the incident inline.","title":"Incidents"},{"location":"Spira-User-Manual/Test-Case-Management/#attachments","text":"In this tab, the main pane displays the list of documents that have been \"attached\" to the test case. The documents can be in any format, though SpiraPlan\u00ae will only display an icon for certain known types. The attachment list includes the filename that was originally uploaded together with the file-size (in KB), name of the person who attached it and the date uploaded. In addition, if you position the pointer over the filename and hold it there for a few seconds, a detailed description is displayed as a tooltip. To actually view the document, simply click on the filename hyperlink and a new web browser window will open. Depending on the type of file, this window will either display the document or prompt you for a place to save it on your local computer. To delete an existing attachment from a test case, simply click the \" Remove \" button and the attachment will be removed from the list. To attach a new document to the test case, you need to first click the \" Add New \" link to display the new attachment dialog box: There are three different types of item that can be attached to a test case: To upload a file, choose \"File\" as the type and then click the Browse button and select the file from your local computer, optionally enter a detailed description then click the \" Upload \" button. The document will be copied from your computer and attached to the artifact. To attach a web-link (URL) to the artifact, you need to choose \"URL\" as the type and then enter the fully qualified URL (e.g. http://mywebsite.com?Document=1 ), an optional description and then click the \" Upload \" button to attach the web-link. To attach a screenshot to the artifact, you need to choose \"Screenshot\" as the type and then copy the image to your computer's clipboard (e.g. on Windows computers, the PRINT SCREEN button captures the current page and adds to the clipboard). Once the image is in the clipboard, paste it into the editor using CTRL+V (or the equivalent keystroke for your operating system) and the item will appear in the preview window. You can then fill in the other fields and click \" Upload \" to attach the image. Note: If you are using a non-Windows\u00ae computer (e.g. Macintosh\u00ae) that doesn't put file extensions on filenames (e.g. .xls for an Excel sheet) automatically, then you will need to manually add the file extension to the filename before uploading if you want it to be displayed with the correct icon in the attachment list. You can also associate an existing document (that's already stored in SpiraTeam) with the test case. To do that, click on the \" Add Existing \" button to bring up the add file association dialog box: You can then choose to either associate a document stored in the SpiraPlan Documents repository or (in the case of SpiraPlan/SpiraTeam but not SpiraTest) from the linked source code repository. In either case you first select the appropriate folder, and then pick the document(s) from the file list on the right. In the case of a source code file association you can also add a comment.","title":"Attachments"},{"location":"Spira-User-Manual/Test-Case-Management/#history","text":"In this tab, the main pane displays the list of changes that have been performed on the test case artifact since its creation. An example test case change history is depicted below: The change history displays the date that each change was made, together with the fields that were changed, the old and new values and the person who made the change. This allows a complete audit trail to be maintained of all changes in the system. In addition, if you are logged in as a product administrator you can also click on the \" Admin View \" button to navigate to where you can revert any unwanted changes.","title":"History"},{"location":"Spira-User-Manual/Test-Case-Management/#test-sets","text":"In this tab, the main pane displays the test sets that contain the current test case. Each test set is listed together with its name, release, the date of last execution, the owner, the status, the execution status, and a link to the actual test set details . In addition, you can choose to display any of the custom properties associated with the test set. The \"show/hide columns\" drop-down list allows you to change the fields that are displayed in the test set list as columns. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. The displayed columns can be any standard field or custom property. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field.","title":"Test Sets"},{"location":"Spira-User-Manual/Test-Case-Management/#associations","text":"You can associate tasks and risks to a test case from this tab (which is only available to SpiraTeam and SpiraPlan users). Apart from creating links to an existing task from this tab, any tasks created during exploratory test execution will also be shown here. Read more about how to manage and add associations to this artifact","title":"Associations"},{"location":"Spira-User-Manual/Test-Case-Management/#test-step-details","text":"When you click on one of the hyperlinks next to a test step in the test step list (see above), you will be taken to the test step details screen illustrated below: This page is made up of three areas; the left pane is the navigation window, the upper part of the right pane contains the test step detailed information itself, and the bottom part of the right pane contains related information about the test step. The navigation pane consists of a link that will take you back to the test step list, as well as a list of the peer test steps to the one selected. This latter list is useful as a navigation shortcut; you can quickly view the detailed information of all the peer test steps by clicking on the navigation links without having to first return to the test step list page. You can also switch between seeing the list of test steps with the current filter applier or simply unfiltered. The top part of the right pane allows you to view and/or edit the details of the particular test step. You can edit the various fields (description, expected result and sample data) and custom properties. Once you are satisfied with them, click any \" Save \" button on the page to commit the changes. If you want to add a new test step to the test case, you should click \" Save and New \" from the dropdown menu of the \"Save\" button at the top of the page instead. The lower part of the right pane can be switched between four different views by clicking the appropriate tab. Initially the pane will be on \"Incidents\" tab, but it can be switched to \"Attachments\", \"History\" or \"Requirements\" tabs if so desired. Each of the views is described separately below.","title":"Test Step Details"},{"location":"Spira-User-Manual/Test-Case-Management/#incidents_1","text":"In this mode, the main pane displays a list of any incidents that are associated with this test step. They can either be linked indirectly due to being logged during a test run, or directly linked after the fact: Each incident is listed together with the type, status, priority, name, owner, detector, detection date and a link to the actual incident details. You can customize the fields that are displayed using the \"Show/Hide Columns\" option. In addition, you can perform the following operations: Refresh -- updates the list of incidents from the server, useful if other people are adding incidents to this release at the same time. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field. Edit -- Clicking the \" Edit \" button to the right of the incident allows you to edit the incident inline directly on this screen. To create a new association between this test step and an existing incident, click the \" Link Incident \" button which will display the following panel: You need to choose the specific incident(s) you want to link to, either by choosing the item from the scrolling selection box, or searching for them by name or ID. Before adding the chosen incidents you can add a comment that explains the rationale for the association.","title":"Incidents"},{"location":"Spira-User-Manual/Test-Case-Management/#attachments_1","text":"Read about how the attachments tab works","title":"Attachments"},{"location":"Spira-User-Manual/Test-Case-Management/#history_1","text":"Read about how the history tab works","title":"History"},{"location":"Spira-User-Manual/Test-Case-Management/#requirements","text":"Normally within SpiraTest, you will link the test cases in a product with your requirements to describe which requirements are covered by each of the test cases. When all of the tests for a requirement pass, the requirement is considered fully tested. However, in some industries (for example when developing Defense systems) there is an additional requirement to report on the traceability between the individual test steps and the requirements. For customers that have such a requirement, this tab lets you associate the current test step with specific requirements. The tab displays a grid containing the requirements already mapped to this test step. You can filter that list by the requirement type, name, status, importance, product name and ID. You can remove an existing requirement by selecting its check box and clicking the 'Delete' button. This doesn't delete the requirement, just removes it from the test step. Hovering the mouse over the names of the requirements will display a \"tooltip\" consisting of the requirement name, place in the hierarchy and a detailed description. To add a new test case to the requirement, click the 'Add' button: You can search for a requirement by its ID if you know it (make sure to include the \"RQ\" prefix): Otherwise, you can search for the requirements by choosing a parent package from the dropdown and/or entering a partial name match: One you have found the desired requirement(s), simply select their check boxes and click the 'Save' button to add them to the current test step:","title":"Requirements"},{"location":"Spira-User-Manual/Test-Case-Management/#execute-test-cases","text":"","title":"Execute Test Case(s)"},{"location":"Spira-User-Manual/Test-Case-Management/#test-run-list","text":"","title":"Test Run List"},{"location":"Spira-User-Manual/Test-Case-Management/#test-run-details","text":"","title":"Test Run Details"},{"location":"Spira-User-Manual/Test-Case-Management/#test-set-list","text":"","title":"Test Set List"},{"location":"Spira-User-Manual/Test-Case-Management/#test-set-details","text":"","title":"Test Set Details"},{"location":"Spira-User-Manual/Test-Case-Management/#automation-host-list","text":"","title":"Automation Host List"},{"location":"Spira-User-Manual/Test-Case-Management/#automation-host-list_1","text":"","title":"Automation Host List"},{"location":"Spira-User-Manual/Test-Case-Management/#test-configuration-list","text":"","title":"Test Configuration List"},{"location":"Spira-User-Manual/Test-Case-Management/#test-configuration-details","text":"when navigating to folders (for all artifacts that support them), the URL in your browser's address bar will change. Each folder has a unique, sharable URL that you can give to someone to display the list of artifacts with the appropriate folder selected. You can also open up multiple folders in different browser tabs and easily toggle between them from the same browser. \u21a9","title":"Test Configuration Details"},{"location":"Spira-User-Manual/Test-Configuration-Management/","text":"Test Configuration Management Test Configurations List This section outlines how to use the Test Configuration features of SpiraPlan\u00ae to create and manage different configurations of parameters that tests (both manual and automated) can be run against. This offers tools to quickly create every combination of different parameters. When you click on the Testing > Test Configuration global navigation link, you will initially be taken to the test configuration list screen illustrated below: The test configuration list screen displays all the test configurations for the current product, in a filterable, sortable grid. The grid displays the name, creation date, last updated date, ID, and whether the test configuration is active. In addition, you can view a more detailed description of the test configuration by positioning the mouse pointer over the host name hyperlink and waiting for the popup \"tooltip\" to appear. If you click on the host name hyperlink, you will be taken to the test configuration details page . Clicking on any of the pagination links at the bottom of the page will advance you to the next set of hosts in the list according to the applied filter and sort-order. There is also a drop-down-list at the bottom of the page which allows you to specify how many rows should be displayed in each page, helping accommodate different user preferences. Filtering & Sorting Read about how to create and manage filters, and how to sort the artifact list . New Test Configuration Clicking on the \" New Configuration \" button adds a new test configuration to the bottom of the list with a default name. Delete Clicking on the \" Delete \" button deletes the test configurations whose check-boxes have been selected in the host list. Refresh Clicking on the \" Refresh \" button reloads the list of test configurations; this is useful when new configurations are being added by other users, and you want to make sure you have the most up-to-date list displayed. Edit Each test configuration in the list has an \" Edit \" button in its right-most column. When you click this button or just double-click on any of the cells in the row, you change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Save \" buttons are displayed in the last column. If you click \" Edit \" on more than one row, the \" Save \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then update the changes by clicking the one \" Save \" button. Also, if you want to make the same change to multiple rows (e.g. to change five test configurations from Active = No to Active = Yes), you can click on the \"fill\" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the \" Edit \" button on the same row as the Filters and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Save \"to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes. Test Configuration Details When you click on a test configuration entry in the list, you are taken to the test configuration details page illustrated below: This page is made up of three areas; the left pane is the navigation window, the upper part of the right pane contains the test configuration name and ID, and the bottom part of the right pane displays different information associated with the test configuration. The navigation pane consists of a link that will take you back to the test configuration list, as well as a list of the peer test configurations to the one selected. This latter list is useful as a navigation shortcut; you can quickly view the peer configurations by clicking on the navigation links without having to first return to the list page. The navigation list can be switched between two different modes: The list of configurations matching the current filter The list of all configurations, irrespective of the current filter The right pane allows you to view and/or edit the details of the particular test configuration. You can edit the various fields (name, description, etc.) and custom properties. Once you are satisfied with the changes, click either the \" Save \" button or the alternative options from the \" Save \" dropdown list. In addition you can delete the current automation host by clicking \" Delete \", or discard any changes made by clicking \" Refresh \". Overview This tab shows the fields and description associated with the test configuration. Standard and custom fields are grouped by type (eg all date and time fields are grouped together). Overview -- Test Configuration Entries This section shows the list of all entries from this test configuration, and that would be used by a test set to populate parameters. Each row represents a single unique combination of the parameters (shown on the header row of the table). Entries can be reordered by dragging and drop one row or more. Individual entries can also be removed by checking the checkbox for that entry and then clicking \" Remove \" button. To create new entries, first click the \" Populate \" button. This will display the following panel: You must select a parameter from the left dropdown (which contains a list of all parameters defined in test cases in the current product), and a custom list with which to populate the parameter. Then click the \" Add \" button. For instance, the screenshot below would create a configuration using every operating system defined by the custom list \"Operating System\" and assigning these to the parameter called \"operatingSystem.\" Note: Custom lists are usually used in SpiraPlan for custom fields on various artifacts. However, you can create custom lists that are solely for the purpose of test configurations, should you so wish -- for instance, to contain a list of usernames. Once you are happy with the lists and parameters selected, click the \" Populate \" button. This will overwrite all existing entries in this test configuration. It will create every combination based on the lists specified. So if you select two parameters, each with a list that has ten items, one hundred entries will be created in the test configuration. Test Sets This tab displays the list of all the test sets that are using the test configuration. Each test set is listed together with its name, release, the date of last execution, the owner, the status, the execution status, and a link to the actual test set details. In addition, you can choose to display any of the custom properties associated with the test set. The \"Show/hide columns\" drop-down list allows you to change the fields that are displayed in the test set list as columns. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. The displayed columns can be any standard field or custom property. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field.","title":"Test Configuration Management"},{"location":"Spira-User-Manual/Test-Configuration-Management/#test-configuration-management","text":"","title":"Test Configuration Management"},{"location":"Spira-User-Manual/Test-Configuration-Management/#test-configurations-list","text":"This section outlines how to use the Test Configuration features of SpiraPlan\u00ae to create and manage different configurations of parameters that tests (both manual and automated) can be run against. This offers tools to quickly create every combination of different parameters. When you click on the Testing > Test Configuration global navigation link, you will initially be taken to the test configuration list screen illustrated below: The test configuration list screen displays all the test configurations for the current product, in a filterable, sortable grid. The grid displays the name, creation date, last updated date, ID, and whether the test configuration is active. In addition, you can view a more detailed description of the test configuration by positioning the mouse pointer over the host name hyperlink and waiting for the popup \"tooltip\" to appear. If you click on the host name hyperlink, you will be taken to the test configuration details page . Clicking on any of the pagination links at the bottom of the page will advance you to the next set of hosts in the list according to the applied filter and sort-order. There is also a drop-down-list at the bottom of the page which allows you to specify how many rows should be displayed in each page, helping accommodate different user preferences.","title":"Test Configurations List"},{"location":"Spira-User-Manual/Test-Configuration-Management/#filtering-sorting","text":"Read about how to create and manage filters, and how to sort the artifact list .","title":"Filtering &amp; Sorting"},{"location":"Spira-User-Manual/Test-Configuration-Management/#new-test-configuration","text":"Clicking on the \" New Configuration \" button adds a new test configuration to the bottom of the list with a default name.","title":"New Test Configuration"},{"location":"Spira-User-Manual/Test-Configuration-Management/#delete","text":"Clicking on the \" Delete \" button deletes the test configurations whose check-boxes have been selected in the host list.","title":"Delete"},{"location":"Spira-User-Manual/Test-Configuration-Management/#refresh","text":"Clicking on the \" Refresh \" button reloads the list of test configurations; this is useful when new configurations are being added by other users, and you want to make sure you have the most up-to-date list displayed.","title":"Refresh"},{"location":"Spira-User-Manual/Test-Configuration-Management/#edit","text":"Each test configuration in the list has an \" Edit \" button in its right-most column. When you click this button or just double-click on any of the cells in the row, you change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Save \" buttons are displayed in the last column. If you click \" Edit \" on more than one row, the \" Save \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then update the changes by clicking the one \" Save \" button. Also, if you want to make the same change to multiple rows (e.g. to change five test configurations from Active = No to Active = Yes), you can click on the \"fill\" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the \" Edit \" button on the same row as the Filters and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Save \"to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes.","title":"Edit"},{"location":"Spira-User-Manual/Test-Configuration-Management/#test-configuration-details","text":"When you click on a test configuration entry in the list, you are taken to the test configuration details page illustrated below: This page is made up of three areas; the left pane is the navigation window, the upper part of the right pane contains the test configuration name and ID, and the bottom part of the right pane displays different information associated with the test configuration. The navigation pane consists of a link that will take you back to the test configuration list, as well as a list of the peer test configurations to the one selected. This latter list is useful as a navigation shortcut; you can quickly view the peer configurations by clicking on the navigation links without having to first return to the list page. The navigation list can be switched between two different modes: The list of configurations matching the current filter The list of all configurations, irrespective of the current filter The right pane allows you to view and/or edit the details of the particular test configuration. You can edit the various fields (name, description, etc.) and custom properties. Once you are satisfied with the changes, click either the \" Save \" button or the alternative options from the \" Save \" dropdown list. In addition you can delete the current automation host by clicking \" Delete \", or discard any changes made by clicking \" Refresh \".","title":"Test Configuration Details"},{"location":"Spira-User-Manual/Test-Configuration-Management/#overview","text":"This tab shows the fields and description associated with the test configuration. Standard and custom fields are grouped by type (eg all date and time fields are grouped together).","title":"Overview"},{"location":"Spira-User-Manual/Test-Configuration-Management/#overview-test-configuration-entries","text":"This section shows the list of all entries from this test configuration, and that would be used by a test set to populate parameters. Each row represents a single unique combination of the parameters (shown on the header row of the table). Entries can be reordered by dragging and drop one row or more. Individual entries can also be removed by checking the checkbox for that entry and then clicking \" Remove \" button. To create new entries, first click the \" Populate \" button. This will display the following panel: You must select a parameter from the left dropdown (which contains a list of all parameters defined in test cases in the current product), and a custom list with which to populate the parameter. Then click the \" Add \" button. For instance, the screenshot below would create a configuration using every operating system defined by the custom list \"Operating System\" and assigning these to the parameter called \"operatingSystem.\" Note: Custom lists are usually used in SpiraPlan for custom fields on various artifacts. However, you can create custom lists that are solely for the purpose of test configurations, should you so wish -- for instance, to contain a list of usernames. Once you are happy with the lists and parameters selected, click the \" Populate \" button. This will overwrite all existing entries in this test configuration. It will create every combination based on the lists specified. So if you select two parameters, each with a list that has ten items, one hundred entries will be created in the test configuration.","title":"Overview -- Test Configuration Entries"},{"location":"Spira-User-Manual/Test-Configuration-Management/#test-sets","text":"This tab displays the list of all the test sets that are using the test configuration. Each test set is listed together with its name, release, the date of last execution, the owner, the status, the execution status, and a link to the actual test set details. In addition, you can choose to display any of the custom properties associated with the test set. The \"Show/hide columns\" drop-down list allows you to change the fields that are displayed in the test set list as columns. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. The displayed columns can be any standard field or custom property. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field.","title":"Test Sets"},{"location":"Spira-User-Manual/Test-Execution/","text":"Execution of Test Case(s) Introduction This section describes how a tester can follow the steps defined for a series of test cases and record what actually happened in the process. In addition, recorded failures of test cases can be used to automatically generate new incidents that will be added to the incident tracking module . You start test case execution in SpiraPlan by either: selecting test cases or test sets on their respective page(s) and clicking the \" Execute \" button; clicking the \" Execute \" button on the test cases / test sets listed on your personalized home page under \"My Test Cases\" or \"My Test Sets\". If you execute a test set then the values of the selected release and custom list properties for the test run are automatically populated from the test set, whereas if you directly execute a test case itself, those values can be chosen by the tester. Regardless of the route taken to launch the test execution module, the first screen that will be displayed will look like the following: Before actually executing the test scripts, you need to select the release (if not already set) and optionally the specific build of the system that you will be testing against. You can also specify any test run custom properties that have been defined by the product owner. This ensures that the resulting test runs and incidents are associated with the correct release of the system, and that the test runs are mapped to the appropriate custom properties (e.g. operating system, platform, browser, etc.). If you have not configured any releases for the product, then the release drop-down list will be disabled and the test runs/incidents will not be associated with any particular release. If the test run was launched from a test set, the release and any list custom properties will be pre-populated from the test set itself and will not be changeable on this screen (unless they weren't set by the test set). Once you have chosen the appropriate release name and/or custom properties, click the \" Next \" button to begin executing test steps. By default you will see the default test execution module, shown below. There is a second test execution view: the exploratory test execution module . This has much in common with standard test execution but differs in a number of important ways. You will automatically see this module if the following three conditions are met; you are executing a single test case (not a test set or a test case as part of a test set); that test case type has its \"Is Exploratory\" flag set to true / yes (in the template administration that the product uses); and you have the necessary permissions (you can create test cases) The screen is divided up into three main areas (each is explained in more detail in the sections below): The header area at the top of the page, which displays the name (if any) of the test run, along with the selected release. This section also contains buttons to control how the \"test execution area\" looks and functions for the tester. The Progress Bar , which shows a summary graphical view of the whole test run. The progress bar also has a number of navigation buttons to help you move around the test run, or to leave the test execution page. Between the buttons are indicator blocks. For test runs with relatively few test steps, each indicator block represents a single test step. A tall dotted line is used to indicate the end of one test case and the start of another. When there are many test steps to a test run, each indicator block represents a test case. Hovering over an indicator block will display a tooltip with information about the test step or case represented. The color of the indicator block matches the color of any assigned execution status for the test step or test case (see below). The rest of the page contains the \" test execution area \". This has details about all of the steps in the test run. It can be used to both navigate between test cases and test steps, as well as to actions on any test case or test step (for instance assigning an execution status or logging an incident). This area can look markedly different depending on which display mode a user has selected. However, in every mode, a tester will be able to readily view the name and description of the test step (and at times the parent test case), along with the description of the test step, instructions for carrying out it, and any expected results. The test can then compare the results with those listed as expected. As described below, depending on how the actual system responds, you will use the buttons and fields on the page to record what actually happened. Note: on first accessing this screen, the user will be given a guided tour of many of the features of this page. This can be accessed at any time via the options menu (discussed below) Display Modes The display mode toolbar is at the top right of the test execution screen. There are three different display modes. Each display mode has two sub-modes, using simple graphical images to indicate what they do (each pair of buttons to change sub-mode becomes visible on activating a particular display mode). All of these modes affect how the test cases and test steps are displayed in the \"test execution area\". The different views have been designed to suit different ways of testing, depending on how your organization works; or the needs of a tester for a particular test. There are three parts in the \"test execution area\", which are visible or hidden depending on the view. Table : this shows a list of every test case and step in the test run. The level of information it displays depends on the display mode. Inspector : this is a detailed form containing full information about a single test step (and its associated test case as needed). It also always shows the full set of actions that can be taken on that step Iframe : if you are testing an internal website (or external site that allows access via iframes) you can access it directly from this iframe browser. This allows you to have the test execution page and what you are testing open in the same web browser tab. There are three main display modes: Split mode : shows a simplified list of test steps on the left (in the table) and full details about the currently selected test step on the right (in the inspector). The sub modes in the split view either show a narrow table and wide inspector, or a wide table and narrow inspector. Table mode : in this mode the table takes up the full width of the \"test execution area\", with both the inspector and iframe completely hidden. The list of test cases and steps displays all the information about each---the same information as is shown in the inspector. This view makes it easy to quickly scan through a number of test steps and take quick actions on many steps in sequence. The sub-modes in this view either expand or collapse any fields with more than one line or text in them. This is helpful to give either a very detailed or summary view to the table. Note too that every field that takes up more than one line will have a little expand or collapse button to its left, allowing for control of individual fields as needed. Mini mode : this mode fills the entire \"test execution area\" with the inspector, or a combination of the inspector and iframe. The table is completely hidden in this mode. The mini mode is designed to help you maximize space for the inspector or to allow you to test a website in the embedded mini browser (in the iframe) right next to a narrow inspector. Navigating Around a Test Run There are several ways to move through the different cases and steps of a particular test run. In the default \"split\" mode you are guided through a test run in order, however at any time, in any display mode, you can easily and quickly move steps. Note that if you click on a test case, the first test step in that test case will be selected as well. Using the progress bar buttons : the left-hand side of the progress bar has three buttons: backward, forward, and play/pause (the last of these is discussed in more detail below). Clicking on the backward or forward buttons will move to the previous or next progress bar indicator block (and the associated test step or test case). Using the progress bar indicator blocks: clicking on any indicator block will immediately focus the test execution area on that test step or test case. Using the table : when the table view is visible (in either split mode or table mode) clicking on any item will immediately focus the test execution area on that test step or test case. Progressing through steps using the inspector : when the inspector is visible (in split or mini display mode), on properly setting a status for a test step (see Viewing and Recording Execution Details for further details), the next test step is automatically loaded into the inspector. If you were on step 3 of 5, you would be moved to step 4. If you were on the last step of a test case, you will be moved to the next test case, if one is available. Pause/Play button : the time spent on every test step is recorded, by default, during test execution. This allows an accurate assessment of exactly how long a test run took to complete and these timing details are saved with the test run and its results. If you wish to pause the behind-the-scenes timer (for instance if taking a break) click the pause/play button. To resume the time click it again. The currently selected progress bar indicator block will be outlined with a peach border. The currently selected test case and test step on the table view will be indicated with a peach bar along their left edge, and will also be highlighted in a light peach. Viewing and Recording Execution Details There is a small icon to the left of each test step title and test case title. For test steps this is a circle, for test cases a square note. Once a status has been recorded for a test step (or once a test case has been assigned a status based on the statuses of its test steps) these icons will be filled with a visual indicator of its current status. The icons both become colored and are given a small symbol, based on the status. In the inspector view the associated button to that status has a gray bar beneath it. The same colors and symbols used to show a status are used on the buttons to record a status. The colors and symbols used are: green / tick = \"Passed\"; yellow / stop sign = \"Blocked\"; orange / warning triangle = \"Caution\", red / cross = \"Failed\", gray / dash = \"Not Run\". Depending on the display mode and device, the buttons may show the text name of the status along with the symbol (see examples below---the top button set is that on the inspector, the bottom from the table (when the display mode is set to table). The various statuses when recorded against test steps will appear as below, respectively: You will notice that softer shades are used above compared to the buttons. Similarly soft shades are also used on the progress bar indicator blocks, as shown below. The status of a test case is determined by its test steps. If any of the steps are marked as \"Caution\", \"Blocked\", or \"Fail\" then the overall test case is marked with the most severe status of those statuses applied to any of the test steps from \"Caution\", to \"Blocked\", to \"Fail\" (e.g. if one is marked as \"Caution, the test case will be marked \"Caution\"; but if one is marked as \"Caution\", and another \"Blocked\", the case will be marked \"Blocked). If all the test steps passed, or if steps are marked either passed or \"N/A\", then the overall test case is marked as \"Passed\"; any other case results in the test case being marked as \"Not Run\". If the expected results are indeed observed, then you simply need to click the \" Pass \" button to mark the test step as passed, and advance to the next test step, or if all the steps have passed, you can click \" Pass All \" to pass all the steps at once. On the inspector, the \" Pass All \" button is visible via a dropdown to the right of the \" Pass \" button whenever the parent test case information is also displayed with the test step (typically only for the first step in a test case). This is illustrated in the screen shot below: When in the table display mode, the \" Pass All \" button is shown on the right-hand side of the test case row, as illustrated below: Below the main pane there are two optional sections. The first one allows you to log an incident in the system associated with the test step. For failures this will typically be used to log a bug relating to the failure. However even if you pass a step you can still log an incident, which may be useful for logging non-critical cosmetic items that are not serious enough for a failure to be recorded. This tab also displays any pre-existing incidents that were associated with the test step being viewed. The second tab displays a list of attachments that are related to the current test case and/or test step. This list initially contains any documents that have been attached to either the test case in general or the test step in particular. However as you perform the testing, you can attach additional documents to this list that are relevant to the test results (e.g. screenshots of an error page); these attached documents will be associated with both the test run itself and any incidents that are created. Once all the test steps have passed, you will be automatically be taken to the first step in the next test; if it is the last test case being executed, the <Finish> button will be displayed instead. If the actual results differ from those expected, you need to enter a description of the actual result observed and click one of the \" Fail \", \" Caution \" buttons. Unlike the \" Pass \" button, if you don't enter a description for the actual result, the system will display an error message and re-prompt you again for input. In the inspector, the actual results text box is shown in the first tab below the information provided to the tester for a test step, as illustrated below: In the table display mode, previously entered actual results are always visible (below the information provided to the tester for a test step). On attempting to mark a step as anything other than \"Pass\" the actual results text box will automatically be displayed. You can also choose to manually show the actual results text box by selecting \"Actual Result\" option from the \"+\" dropdown menu. Saving Screenshots to a Test Step Often, testers will want to provide visual documentation of what they have found during the testing process. A screenshot of what they are testing is a great way to do this. To add a screenshot to the results of a test step, first copy your screenshot to the clipboard. Next, paste the screenshot into the actual results text box. Recording Extra Information In addition to logging the result of a test step, you can optionally choose to generate a new incident at the point of logging the execution status of a test step. When the incident form is visible (see below) enter a name, type, priority, severity (and any custom properties) for the new incident before clicking an execution status button. The other information needed for the new incident is automatically populated from the test step details. The newly created incident will also be linked to the test step, allowing traceability from within the incidents module. The functionality for managing incidents is described in more detail in Incident Tracking . If the inspector is visible, go to the \"Incidents\" tab. This will show any already linked incidents, show a detailed form for creating a new incident. You can instead link the test step to an existing incident (by clicking the \" Link Existing Incident \" button). The following popup will be displayed, where you can either enter an incident ID (if known), or choose one from the list. When in the table display mode, open the \"+\" dropdown menu to show options to either add a new incident or link an existing incident. Click on the option required to display the appropriate popup. Note that on clicking \" Add \" the incident will be immediately linked to the selected test step. If you need to attach documents to the test run (in addition to any screenshots), you can either attach a new or link an existing document. From the inspector, go to the \"Attachments\" tab to see any documents already linked, or to add a document as needed. In the table display mode, select either \"Add New Attachment\" or \"Link Existing Attachment\" from the \"+\" dropdown menu. See Attachments for additional information about how to the different available options (e.g. either upload a document, url link, or screenshot, or to link a document or from source code). Leaving the Test Execution Page If you are not able complete the whole test run in a single session, click the \"Leave\" button on the right of the progress bar---shown with an eject symbol (see below). This will return you to the page where you began the execution from. You can resume testing at a later date by locating the test run on your 'My Page' under 'My Pending Test Runs' and choosing to resume testing. Note that the system will remember every result you have logged, along with the last test step you were working so you can pick up right where you left off. Once either all steps in a test have an execution status recorded, or at least one step in each test case has been recorded with any status other than \"Pass\" the test run can be finished. An orange button at the far right of the progress bar with a stop symbol will appear (see below). Clicking this button will save and archive the entire test run (so it can no longer be amended) and the page will automatically exit the test execution page. Extra Test Execution Options There are a number of ways that some users may wish to alter the test execution page, depending on how they work. Options to change this are available from the menu button to the right of the display buttons. The following actions are available from this dropdown menu: Refresh : this simply reloads the test run data. This is useful if other people are working on different test cases within the same test run and you want to make sure that you have the most current information about the statuses they have recorded. Always show test case : by default, the inspector only shows the test case details when the first test step of a test case is displayed. Checking this item will mean that the test case details will be shown on every test step. Show custom properties : by default, only a handful of system fields are shown for the test case and test step. If your organization places important and relevant information into custom fields as well, you can check this item to make them visible in the inspector for every case and step. Note that these fields will not be visible in the table display mode. Show guided tour : if you missed or want to revisit the visual guided tour of the test execution page, click this button to run the tour again. Exploratory Test Execution As mentioned above, there are a number of conditions that must be satisfied for a test to run in exploratory mode. Exploratory testing is designed for relatively experienced testers and rather than to record the results of a pre-determined set of steps, to instead adjust and create the testing sequence during the act of testing itself. During exploratory testing test steps can be added, removed, edited, moved freely, at any time. Care must therefore be taken that this form of testing and of recording the results of a test are used appropriately. The conditions set by the system are one means of limiting its use. When starting exploratory testing the main screen will resemble the one below. Note that it looks broadly similar to that for standard test execution and is made up of three different areas: a list of test steps on the left; details about the currently selected step on the right; and information at the top of the page about the test run itself (it's name and description, release, and how many steps it contains), along with a mini toolbar. In exploratory testing there is no progress bar, or options to layout the page in different views. All fields in the right hand details area, or the top part of the page can often be edited. Their contents and associated label will be grayed out if they are read only fields (for instance if they are information from a custom property). To edit a field, click on it, change the text as required, then click out of the field. The information will be automatically saved. Note that any test steps that come from a link test case will be read only and as such their contents cannot be edited, nor can they be deleted. Just like with normal test execution, you can navigate between steps using the list of steps on the left; and steps can be passed, or failed using the execution status toolbar on the right hand section of the page. The unique actions you can take on test steps (besides editing their fields) are below: add a step : click on the plus button beneath the list of test steps on the left clone an existing step : when you hover a test step in the list, you will see a button appear on its right. Click on this to show a mini menu with an option to clone the step. This will create a clone, at the bottom of the list of test steps, with a blank actual result delete an existing step : if you have more than one test step, any editable test step can be deleted. Click on the button for that step (as explained above) and click delete from the mini menu. move an existing step : to move an editable step click and drag it to the desired location in the test step list. Below the main detailed section there are two or three tabs. SpiraTest users will only see two tabs -- incidents and attachements. SpiraPlan users will additionally see a tasks tab. The incident and attachment tabs function identically to normal test execution. The task tab allows the tester to quickly create tasks based on their exploratory testing, and optionally assign them to a user involved in the product. These tasks are attached to the test run as a whole, so any previously entered tasks will be visible even when changing steps. Creating a task is a light touch way of communicating with others about your findings and alerting them that some work is likely required to fix or clarify a feature. It is quicker to enter and manage than an incident. Tasks are shown as a list of cards with their left edge showing their priority by color. On creation a task's status will be gray -- showing that no priority has yet been set. The title of the task can be clicked to open the details page for that task. The toolbar at the top right of the page has a number of buttons: Pause/Play button : the time spent on every test step is recorded, by default, during test execution. This allows an accurate assessment of exactly how long a test run took to complete and these timing details are saved with the test run and its results. If you wish to pause the behind-the-scenes timer (for instance if taking a break) click the pause/play button. To resume the time click it again. Leave button : as with normal test execution, if you are not able complete the exploratory test in a single session, click the \"Leave\" button---shown with an eject symbol. You can resume testing at a later date by locating the test run on your 'My Page' under 'My Pending Test Runs' and choosing to resume testing. Note that the system will remember every result you have logged, along with the last test step you were working so you can pick up right where you left off. Finish button : once either all steps in a test have an execution status recorded, or at least one step has been recorded with any status other than \"Pass\" the test run can be finished. An orange with a stop symbol will appear (see below). Clicking this button will give you two options. \"Update Test Case\" will update the test case execution status, and also change its name, description, and test steps to reflect those on this page (adding, deleting, moving, editing as necessary). \"Just Finish\" will only change the execution status of the test case only---leaving all details of the test case unchanged. Either option will archive the entire test run (so it can no longer be amended) and the page will automatically exit the test execution page. Options : the right most button on the toolbar gives additional options for customizing the page. Specifically a user can decide what fields they wish to show or hide based on how they prefer to work in exploratory testing mode. Additionally this menu let's you revisit the introductory tour shown the first time the page is visited.","title":"Test Execution"},{"location":"Spira-User-Manual/Test-Execution/#execution-of-test-cases","text":"","title":"Execution of Test Case(s)"},{"location":"Spira-User-Manual/Test-Execution/#introduction","text":"This section describes how a tester can follow the steps defined for a series of test cases and record what actually happened in the process. In addition, recorded failures of test cases can be used to automatically generate new incidents that will be added to the incident tracking module . You start test case execution in SpiraPlan by either: selecting test cases or test sets on their respective page(s) and clicking the \" Execute \" button; clicking the \" Execute \" button on the test cases / test sets listed on your personalized home page under \"My Test Cases\" or \"My Test Sets\". If you execute a test set then the values of the selected release and custom list properties for the test run are automatically populated from the test set, whereas if you directly execute a test case itself, those values can be chosen by the tester. Regardless of the route taken to launch the test execution module, the first screen that will be displayed will look like the following: Before actually executing the test scripts, you need to select the release (if not already set) and optionally the specific build of the system that you will be testing against. You can also specify any test run custom properties that have been defined by the product owner. This ensures that the resulting test runs and incidents are associated with the correct release of the system, and that the test runs are mapped to the appropriate custom properties (e.g. operating system, platform, browser, etc.). If you have not configured any releases for the product, then the release drop-down list will be disabled and the test runs/incidents will not be associated with any particular release. If the test run was launched from a test set, the release and any list custom properties will be pre-populated from the test set itself and will not be changeable on this screen (unless they weren't set by the test set). Once you have chosen the appropriate release name and/or custom properties, click the \" Next \" button to begin executing test steps. By default you will see the default test execution module, shown below. There is a second test execution view: the exploratory test execution module . This has much in common with standard test execution but differs in a number of important ways. You will automatically see this module if the following three conditions are met; you are executing a single test case (not a test set or a test case as part of a test set); that test case type has its \"Is Exploratory\" flag set to true / yes (in the template administration that the product uses); and you have the necessary permissions (you can create test cases) The screen is divided up into three main areas (each is explained in more detail in the sections below): The header area at the top of the page, which displays the name (if any) of the test run, along with the selected release. This section also contains buttons to control how the \"test execution area\" looks and functions for the tester. The Progress Bar , which shows a summary graphical view of the whole test run. The progress bar also has a number of navigation buttons to help you move around the test run, or to leave the test execution page. Between the buttons are indicator blocks. For test runs with relatively few test steps, each indicator block represents a single test step. A tall dotted line is used to indicate the end of one test case and the start of another. When there are many test steps to a test run, each indicator block represents a test case. Hovering over an indicator block will display a tooltip with information about the test step or case represented. The color of the indicator block matches the color of any assigned execution status for the test step or test case (see below). The rest of the page contains the \" test execution area \". This has details about all of the steps in the test run. It can be used to both navigate between test cases and test steps, as well as to actions on any test case or test step (for instance assigning an execution status or logging an incident). This area can look markedly different depending on which display mode a user has selected. However, in every mode, a tester will be able to readily view the name and description of the test step (and at times the parent test case), along with the description of the test step, instructions for carrying out it, and any expected results. The test can then compare the results with those listed as expected. As described below, depending on how the actual system responds, you will use the buttons and fields on the page to record what actually happened. Note: on first accessing this screen, the user will be given a guided tour of many of the features of this page. This can be accessed at any time via the options menu (discussed below)","title":"Introduction"},{"location":"Spira-User-Manual/Test-Execution/#display-modes","text":"The display mode toolbar is at the top right of the test execution screen. There are three different display modes. Each display mode has two sub-modes, using simple graphical images to indicate what they do (each pair of buttons to change sub-mode becomes visible on activating a particular display mode). All of these modes affect how the test cases and test steps are displayed in the \"test execution area\". The different views have been designed to suit different ways of testing, depending on how your organization works; or the needs of a tester for a particular test. There are three parts in the \"test execution area\", which are visible or hidden depending on the view. Table : this shows a list of every test case and step in the test run. The level of information it displays depends on the display mode. Inspector : this is a detailed form containing full information about a single test step (and its associated test case as needed). It also always shows the full set of actions that can be taken on that step Iframe : if you are testing an internal website (or external site that allows access via iframes) you can access it directly from this iframe browser. This allows you to have the test execution page and what you are testing open in the same web browser tab. There are three main display modes: Split mode : shows a simplified list of test steps on the left (in the table) and full details about the currently selected test step on the right (in the inspector). The sub modes in the split view either show a narrow table and wide inspector, or a wide table and narrow inspector. Table mode : in this mode the table takes up the full width of the \"test execution area\", with both the inspector and iframe completely hidden. The list of test cases and steps displays all the information about each---the same information as is shown in the inspector. This view makes it easy to quickly scan through a number of test steps and take quick actions on many steps in sequence. The sub-modes in this view either expand or collapse any fields with more than one line or text in them. This is helpful to give either a very detailed or summary view to the table. Note too that every field that takes up more than one line will have a little expand or collapse button to its left, allowing for control of individual fields as needed. Mini mode : this mode fills the entire \"test execution area\" with the inspector, or a combination of the inspector and iframe. The table is completely hidden in this mode. The mini mode is designed to help you maximize space for the inspector or to allow you to test a website in the embedded mini browser (in the iframe) right next to a narrow inspector.","title":"Display Modes"},{"location":"Spira-User-Manual/Test-Execution/#navigating-around-a-test-run","text":"There are several ways to move through the different cases and steps of a particular test run. In the default \"split\" mode you are guided through a test run in order, however at any time, in any display mode, you can easily and quickly move steps. Note that if you click on a test case, the first test step in that test case will be selected as well. Using the progress bar buttons : the left-hand side of the progress bar has three buttons: backward, forward, and play/pause (the last of these is discussed in more detail below). Clicking on the backward or forward buttons will move to the previous or next progress bar indicator block (and the associated test step or test case). Using the progress bar indicator blocks: clicking on any indicator block will immediately focus the test execution area on that test step or test case. Using the table : when the table view is visible (in either split mode or table mode) clicking on any item will immediately focus the test execution area on that test step or test case. Progressing through steps using the inspector : when the inspector is visible (in split or mini display mode), on properly setting a status for a test step (see Viewing and Recording Execution Details for further details), the next test step is automatically loaded into the inspector. If you were on step 3 of 5, you would be moved to step 4. If you were on the last step of a test case, you will be moved to the next test case, if one is available. Pause/Play button : the time spent on every test step is recorded, by default, during test execution. This allows an accurate assessment of exactly how long a test run took to complete and these timing details are saved with the test run and its results. If you wish to pause the behind-the-scenes timer (for instance if taking a break) click the pause/play button. To resume the time click it again. The currently selected progress bar indicator block will be outlined with a peach border. The currently selected test case and test step on the table view will be indicated with a peach bar along their left edge, and will also be highlighted in a light peach.","title":"Navigating Around a Test Run"},{"location":"Spira-User-Manual/Test-Execution/#viewing-and-recording-execution-details","text":"There is a small icon to the left of each test step title and test case title. For test steps this is a circle, for test cases a square note. Once a status has been recorded for a test step (or once a test case has been assigned a status based on the statuses of its test steps) these icons will be filled with a visual indicator of its current status. The icons both become colored and are given a small symbol, based on the status. In the inspector view the associated button to that status has a gray bar beneath it. The same colors and symbols used to show a status are used on the buttons to record a status. The colors and symbols used are: green / tick = \"Passed\"; yellow / stop sign = \"Blocked\"; orange / warning triangle = \"Caution\", red / cross = \"Failed\", gray / dash = \"Not Run\". Depending on the display mode and device, the buttons may show the text name of the status along with the symbol (see examples below---the top button set is that on the inspector, the bottom from the table (when the display mode is set to table). The various statuses when recorded against test steps will appear as below, respectively: You will notice that softer shades are used above compared to the buttons. Similarly soft shades are also used on the progress bar indicator blocks, as shown below. The status of a test case is determined by its test steps. If any of the steps are marked as \"Caution\", \"Blocked\", or \"Fail\" then the overall test case is marked with the most severe status of those statuses applied to any of the test steps from \"Caution\", to \"Blocked\", to \"Fail\" (e.g. if one is marked as \"Caution, the test case will be marked \"Caution\"; but if one is marked as \"Caution\", and another \"Blocked\", the case will be marked \"Blocked). If all the test steps passed, or if steps are marked either passed or \"N/A\", then the overall test case is marked as \"Passed\"; any other case results in the test case being marked as \"Not Run\". If the expected results are indeed observed, then you simply need to click the \" Pass \" button to mark the test step as passed, and advance to the next test step, or if all the steps have passed, you can click \" Pass All \" to pass all the steps at once. On the inspector, the \" Pass All \" button is visible via a dropdown to the right of the \" Pass \" button whenever the parent test case information is also displayed with the test step (typically only for the first step in a test case). This is illustrated in the screen shot below: When in the table display mode, the \" Pass All \" button is shown on the right-hand side of the test case row, as illustrated below: Below the main pane there are two optional sections. The first one allows you to log an incident in the system associated with the test step. For failures this will typically be used to log a bug relating to the failure. However even if you pass a step you can still log an incident, which may be useful for logging non-critical cosmetic items that are not serious enough for a failure to be recorded. This tab also displays any pre-existing incidents that were associated with the test step being viewed. The second tab displays a list of attachments that are related to the current test case and/or test step. This list initially contains any documents that have been attached to either the test case in general or the test step in particular. However as you perform the testing, you can attach additional documents to this list that are relevant to the test results (e.g. screenshots of an error page); these attached documents will be associated with both the test run itself and any incidents that are created. Once all the test steps have passed, you will be automatically be taken to the first step in the next test; if it is the last test case being executed, the <Finish> button will be displayed instead. If the actual results differ from those expected, you need to enter a description of the actual result observed and click one of the \" Fail \", \" Caution \" buttons. Unlike the \" Pass \" button, if you don't enter a description for the actual result, the system will display an error message and re-prompt you again for input. In the inspector, the actual results text box is shown in the first tab below the information provided to the tester for a test step, as illustrated below: In the table display mode, previously entered actual results are always visible (below the information provided to the tester for a test step). On attempting to mark a step as anything other than \"Pass\" the actual results text box will automatically be displayed. You can also choose to manually show the actual results text box by selecting \"Actual Result\" option from the \"+\" dropdown menu.","title":"Viewing and Recording Execution Details"},{"location":"Spira-User-Manual/Test-Execution/#saving-screenshots-to-a-test-step","text":"Often, testers will want to provide visual documentation of what they have found during the testing process. A screenshot of what they are testing is a great way to do this. To add a screenshot to the results of a test step, first copy your screenshot to the clipboard. Next, paste the screenshot into the actual results text box.","title":"Saving Screenshots to a Test Step"},{"location":"Spira-User-Manual/Test-Execution/#recording-extra-information","text":"In addition to logging the result of a test step, you can optionally choose to generate a new incident at the point of logging the execution status of a test step. When the incident form is visible (see below) enter a name, type, priority, severity (and any custom properties) for the new incident before clicking an execution status button. The other information needed for the new incident is automatically populated from the test step details. The newly created incident will also be linked to the test step, allowing traceability from within the incidents module. The functionality for managing incidents is described in more detail in Incident Tracking . If the inspector is visible, go to the \"Incidents\" tab. This will show any already linked incidents, show a detailed form for creating a new incident. You can instead link the test step to an existing incident (by clicking the \" Link Existing Incident \" button). The following popup will be displayed, where you can either enter an incident ID (if known), or choose one from the list. When in the table display mode, open the \"+\" dropdown menu to show options to either add a new incident or link an existing incident. Click on the option required to display the appropriate popup. Note that on clicking \" Add \" the incident will be immediately linked to the selected test step. If you need to attach documents to the test run (in addition to any screenshots), you can either attach a new or link an existing document. From the inspector, go to the \"Attachments\" tab to see any documents already linked, or to add a document as needed. In the table display mode, select either \"Add New Attachment\" or \"Link Existing Attachment\" from the \"+\" dropdown menu. See Attachments for additional information about how to the different available options (e.g. either upload a document, url link, or screenshot, or to link a document or from source code).","title":"Recording Extra Information"},{"location":"Spira-User-Manual/Test-Execution/#leaving-the-test-execution-page","text":"If you are not able complete the whole test run in a single session, click the \"Leave\" button on the right of the progress bar---shown with an eject symbol (see below). This will return you to the page where you began the execution from. You can resume testing at a later date by locating the test run on your 'My Page' under 'My Pending Test Runs' and choosing to resume testing. Note that the system will remember every result you have logged, along with the last test step you were working so you can pick up right where you left off. Once either all steps in a test have an execution status recorded, or at least one step in each test case has been recorded with any status other than \"Pass\" the test run can be finished. An orange button at the far right of the progress bar with a stop symbol will appear (see below). Clicking this button will save and archive the entire test run (so it can no longer be amended) and the page will automatically exit the test execution page.","title":"Leaving the Test Execution Page"},{"location":"Spira-User-Manual/Test-Execution/#extra-test-execution-options","text":"There are a number of ways that some users may wish to alter the test execution page, depending on how they work. Options to change this are available from the menu button to the right of the display buttons. The following actions are available from this dropdown menu: Refresh : this simply reloads the test run data. This is useful if other people are working on different test cases within the same test run and you want to make sure that you have the most current information about the statuses they have recorded. Always show test case : by default, the inspector only shows the test case details when the first test step of a test case is displayed. Checking this item will mean that the test case details will be shown on every test step. Show custom properties : by default, only a handful of system fields are shown for the test case and test step. If your organization places important and relevant information into custom fields as well, you can check this item to make them visible in the inspector for every case and step. Note that these fields will not be visible in the table display mode. Show guided tour : if you missed or want to revisit the visual guided tour of the test execution page, click this button to run the tour again.","title":"Extra Test Execution Options"},{"location":"Spira-User-Manual/Test-Execution/#exploratory-test-execution","text":"As mentioned above, there are a number of conditions that must be satisfied for a test to run in exploratory mode. Exploratory testing is designed for relatively experienced testers and rather than to record the results of a pre-determined set of steps, to instead adjust and create the testing sequence during the act of testing itself. During exploratory testing test steps can be added, removed, edited, moved freely, at any time. Care must therefore be taken that this form of testing and of recording the results of a test are used appropriately. The conditions set by the system are one means of limiting its use. When starting exploratory testing the main screen will resemble the one below. Note that it looks broadly similar to that for standard test execution and is made up of three different areas: a list of test steps on the left; details about the currently selected step on the right; and information at the top of the page about the test run itself (it's name and description, release, and how many steps it contains), along with a mini toolbar. In exploratory testing there is no progress bar, or options to layout the page in different views. All fields in the right hand details area, or the top part of the page can often be edited. Their contents and associated label will be grayed out if they are read only fields (for instance if they are information from a custom property). To edit a field, click on it, change the text as required, then click out of the field. The information will be automatically saved. Note that any test steps that come from a link test case will be read only and as such their contents cannot be edited, nor can they be deleted. Just like with normal test execution, you can navigate between steps using the list of steps on the left; and steps can be passed, or failed using the execution status toolbar on the right hand section of the page. The unique actions you can take on test steps (besides editing their fields) are below: add a step : click on the plus button beneath the list of test steps on the left clone an existing step : when you hover a test step in the list, you will see a button appear on its right. Click on this to show a mini menu with an option to clone the step. This will create a clone, at the bottom of the list of test steps, with a blank actual result delete an existing step : if you have more than one test step, any editable test step can be deleted. Click on the button for that step (as explained above) and click delete from the mini menu. move an existing step : to move an editable step click and drag it to the desired location in the test step list. Below the main detailed section there are two or three tabs. SpiraTest users will only see two tabs -- incidents and attachements. SpiraPlan users will additionally see a tasks tab. The incident and attachment tabs function identically to normal test execution. The task tab allows the tester to quickly create tasks based on their exploratory testing, and optionally assign them to a user involved in the product. These tasks are attached to the test run as a whole, so any previously entered tasks will be visible even when changing steps. Creating a task is a light touch way of communicating with others about your findings and alerting them that some work is likely required to fix or clarify a feature. It is quicker to enter and manage than an incident. Tasks are shown as a list of cards with their left edge showing their priority by color. On creation a task's status will be gray -- showing that no priority has yet been set. The title of the task can be clicked to open the details page for that task. The toolbar at the top right of the page has a number of buttons: Pause/Play button : the time spent on every test step is recorded, by default, during test execution. This allows an accurate assessment of exactly how long a test run took to complete and these timing details are saved with the test run and its results. If you wish to pause the behind-the-scenes timer (for instance if taking a break) click the pause/play button. To resume the time click it again. Leave button : as with normal test execution, if you are not able complete the exploratory test in a single session, click the \"Leave\" button---shown with an eject symbol. You can resume testing at a later date by locating the test run on your 'My Page' under 'My Pending Test Runs' and choosing to resume testing. Note that the system will remember every result you have logged, along with the last test step you were working so you can pick up right where you left off. Finish button : once either all steps in a test have an execution status recorded, or at least one step has been recorded with any status other than \"Pass\" the test run can be finished. An orange with a stop symbol will appear (see below). Clicking this button will give you two options. \"Update Test Case\" will update the test case execution status, and also change its name, description, and test steps to reflect those on this page (adding, deleting, moving, editing as necessary). \"Just Finish\" will only change the execution status of the test case only---leaving all details of the test case unchanged. Either option will archive the entire test run (so it can no longer be amended) and the page will automatically exit the test execution page. Options : the right most button on the toolbar gives additional options for customizing the page. Specifically a user can decide what fields they wish to show or hide based on how they prefer to work in exploratory testing mode. Additionally this menu let's you revisit the introductory tour shown the first time the page is visited.","title":"Exploratory Test Execution"},{"location":"Spira-User-Manual/Test-Run-Management/","text":"Test Run Management Test Run List When you click on the Testing > Test Runs global navigation link, you will be taken to the test run list screen illustrated below: The test run list screen displays all the individual test executions performed in the current product, in a filterable, sortable grid. The grid displays the test run number together with fields such as execution status, name, assigned tester, execution date, test set, specified release, etc. The choice of columns displayed is configurable per-user, per-product, giving extensive flexibility when it comes to viewing and searching test runs. In addition, you can view a more detailed description of the test run by hovering over the test run name hyperlink to display a \"tooltip\". If you click on this test run hyperlink, you will be taken to the test run details page described in the next section. Clicking on any of the pagination links at the bottom of the page will advance you to the next set of test runs in the list according to the applied filter and sort-order. There is also a drop-down-list at the bottom of the page which allows you to specify how many rows should be displayed in each page, helping accommodate different user preferences. Refresh Clicking on the \" Refresh \" button simply reloads the test run list. This is useful as other people may be completing test runs, and after stepping away from the computer for a short-time, you can click this button to make sure you are viewing the most current test run list for the product. Show / Hide Columns This drop-down list allows you to change the fields that are displayed in the test run list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner. Filtering & Sorting Read about how to create and manage filters, and how to sort the artifact list . Printing Items To quickly print a single test run or list of test runs you can select the items' checkboxes and then click the Print icon. This will display a popup window containing a printable version of the selected items. Test Run Details When you click on any of the individual test runs in the test run list, you are taken to the Test Run details page (not to be confused with the Test Case details page) shown below: This page consists of three panes: The left hand navigation pane displays a list of related test runs with a color indicator for their current execution status. The display dropdown will let you choose whether the list contains test runs that are for the same release, test case or test set, or are just a filtered/unfiltered list based on your last search in the main test run list page. The top right area shows headline information about the test run details of the test run itself The main pane on the right displays tabs for detailed information about the test run, and its associations. The overview tab is initially loaded and shows the name, description, release, test set, estimated and actual duration, tester name, test run type, automation host fields, along with others, including custom fields. Underneath this is shown the list of test run steps, and any console output from a test automation engine such as Rapise, NUnit, JUnit, QTP, or Selenium. Re-running a Test There is a button on the main test run toolbar called ' Re-Test \". If you click this button, SpiraPlan will launch the test execution wizard for this specific test case, with current release and/or test set already selected for you. This is a handy way of quickly re-running a failed test that has been addressed by the developers. Editing a Test Run When reviewing the test run, you may find that you need to change the results of the test run (e.g. the user selected the wrong release or custom property value). Many of the fields are editable at a later date, and to make changes, just modify the appropriate fields and click any \" Save \" button. Deleting the Test Run If you need to delete a test run that was erroneously captured, all you need to do is click on the link to access the invalid test run and then click the \" Delete \" button to remove it from the system. This will then force the system to update the status of the test case itself from the other logged test runs. Test Run Steps In the case of a manual test run, this section displays all the steps of the test case as they appeared during the test run in question. This means that if the test steps were changed after running the test, the list here will reflect the original information. Each test run step is displayed along with the description, expected result, suggested sample data, a link back to the current version of the test step in question, the actual result and the execution status for this step in this particular test run . Where an actual result was recorded, an additional \" View Incidents \" button will be displayed. This allows you to view any incidents that are associated with this particular test run step: Clicking on the link will open up a popup dialog box that displays a list of all the incidents associated with the selected test run step. Each of the incidents listed will reflect the most up-to-date information regarding that incident, including its type, status, priority, name, assigned owner, detection date and who first detected it. Clicking on the incident name will take you to the details page for that incident, which is described in Incident Tracking > Incident Details . Console Output In the case of an automated test run, this tab will display the details of the test run as reported from the test runner application. These details will vary depending on the type of automated tool being used, but typically they include the name of the automated test runner, the number of assertions raised, the name of the corresponding test case in the tool, the status of the test run and a detailed error message, and the stack-trace in the case of a failure. An example test run as reported from the NUnit automated test runner is illustrated below: Details on how to use SpiraPlan\u00ae in conjunction with an automated testing tool are provided in the SpiraPlan\u00ae Automated Testing Integration Guide, which can be downloaded from the Inflectra \u00ae website. Attachments Read about how the attachments tab works History Read about how the history tab works Incidents This tab displays the list of incidents associated with the current test run. The incidents will have been logged during the creation of the test run and will be linked to one of the steps in the test run: Each incident is listed together with the type, status, priority, name, owner, detector, detection date and a link to the actual incident details. You can customize the fields that are displayed using the \"Show/Hide Columns\" option. In addition, you can perform the following operations: Refresh -- updates the list of incidents from the server, useful if other people are adding incidents to this release at the same time. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field. Edit -- Clicking the \" Edit \" button to the right of the incident allows you to edit the incident inline directly on this screen. Tasks This tab is only visible to users of SpiraPlan. It shows the list of tasks associated with the current test run. Tasks can only be added to a test run created from an exploratory test case. These tasks will have been logged during the execution of the test.","title":"Test Run Management"},{"location":"Spira-User-Manual/Test-Run-Management/#test-run-management","text":"","title":"Test Run Management"},{"location":"Spira-User-Manual/Test-Run-Management/#test-run-list","text":"When you click on the Testing > Test Runs global navigation link, you will be taken to the test run list screen illustrated below: The test run list screen displays all the individual test executions performed in the current product, in a filterable, sortable grid. The grid displays the test run number together with fields such as execution status, name, assigned tester, execution date, test set, specified release, etc. The choice of columns displayed is configurable per-user, per-product, giving extensive flexibility when it comes to viewing and searching test runs. In addition, you can view a more detailed description of the test run by hovering over the test run name hyperlink to display a \"tooltip\". If you click on this test run hyperlink, you will be taken to the test run details page described in the next section. Clicking on any of the pagination links at the bottom of the page will advance you to the next set of test runs in the list according to the applied filter and sort-order. There is also a drop-down-list at the bottom of the page which allows you to specify how many rows should be displayed in each page, helping accommodate different user preferences.","title":"Test Run List"},{"location":"Spira-User-Manual/Test-Run-Management/#refresh","text":"Clicking on the \" Refresh \" button simply reloads the test run list. This is useful as other people may be completing test runs, and after stepping away from the computer for a short-time, you can click this button to make sure you are viewing the most current test run list for the product.","title":"Refresh"},{"location":"Spira-User-Manual/Test-Run-Management/#show-hide-columns","text":"This drop-down list allows you to change the fields that are displayed in the test run list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner.","title":"Show / Hide Columns"},{"location":"Spira-User-Manual/Test-Run-Management/#filtering-sorting","text":"Read about how to create and manage filters, and how to sort the artifact list .","title":"Filtering &amp; Sorting"},{"location":"Spira-User-Manual/Test-Run-Management/#printing-items","text":"To quickly print a single test run or list of test runs you can select the items' checkboxes and then click the Print icon. This will display a popup window containing a printable version of the selected items.","title":"Printing Items"},{"location":"Spira-User-Manual/Test-Run-Management/#test-run-details","text":"When you click on any of the individual test runs in the test run list, you are taken to the Test Run details page (not to be confused with the Test Case details page) shown below: This page consists of three panes: The left hand navigation pane displays a list of related test runs with a color indicator for their current execution status. The display dropdown will let you choose whether the list contains test runs that are for the same release, test case or test set, or are just a filtered/unfiltered list based on your last search in the main test run list page. The top right area shows headline information about the test run details of the test run itself The main pane on the right displays tabs for detailed information about the test run, and its associations. The overview tab is initially loaded and shows the name, description, release, test set, estimated and actual duration, tester name, test run type, automation host fields, along with others, including custom fields. Underneath this is shown the list of test run steps, and any console output from a test automation engine such as Rapise, NUnit, JUnit, QTP, or Selenium.","title":"Test Run Details"},{"location":"Spira-User-Manual/Test-Run-Management/#re-running-a-test","text":"There is a button on the main test run toolbar called ' Re-Test \". If you click this button, SpiraPlan will launch the test execution wizard for this specific test case, with current release and/or test set already selected for you. This is a handy way of quickly re-running a failed test that has been addressed by the developers.","title":"Re-running a Test"},{"location":"Spira-User-Manual/Test-Run-Management/#editing-a-test-run","text":"When reviewing the test run, you may find that you need to change the results of the test run (e.g. the user selected the wrong release or custom property value). Many of the fields are editable at a later date, and to make changes, just modify the appropriate fields and click any \" Save \" button.","title":"Editing a Test Run"},{"location":"Spira-User-Manual/Test-Run-Management/#deleting-the-test-run","text":"If you need to delete a test run that was erroneously captured, all you need to do is click on the link to access the invalid test run and then click the \" Delete \" button to remove it from the system. This will then force the system to update the status of the test case itself from the other logged test runs.","title":"Deleting the Test Run"},{"location":"Spira-User-Manual/Test-Run-Management/#test-run-steps","text":"In the case of a manual test run, this section displays all the steps of the test case as they appeared during the test run in question. This means that if the test steps were changed after running the test, the list here will reflect the original information. Each test run step is displayed along with the description, expected result, suggested sample data, a link back to the current version of the test step in question, the actual result and the execution status for this step in this particular test run . Where an actual result was recorded, an additional \" View Incidents \" button will be displayed. This allows you to view any incidents that are associated with this particular test run step: Clicking on the link will open up a popup dialog box that displays a list of all the incidents associated with the selected test run step. Each of the incidents listed will reflect the most up-to-date information regarding that incident, including its type, status, priority, name, assigned owner, detection date and who first detected it. Clicking on the incident name will take you to the details page for that incident, which is described in Incident Tracking > Incident Details .","title":"Test Run Steps"},{"location":"Spira-User-Manual/Test-Run-Management/#console-output","text":"In the case of an automated test run, this tab will display the details of the test run as reported from the test runner application. These details will vary depending on the type of automated tool being used, but typically they include the name of the automated test runner, the number of assertions raised, the name of the corresponding test case in the tool, the status of the test run and a detailed error message, and the stack-trace in the case of a failure. An example test run as reported from the NUnit automated test runner is illustrated below: Details on how to use SpiraPlan\u00ae in conjunction with an automated testing tool are provided in the SpiraPlan\u00ae Automated Testing Integration Guide, which can be downloaded from the Inflectra \u00ae website.","title":"Console Output"},{"location":"Spira-User-Manual/Test-Run-Management/#attachments","text":"Read about how the attachments tab works","title":"Attachments"},{"location":"Spira-User-Manual/Test-Run-Management/#history","text":"Read about how the history tab works","title":"History"},{"location":"Spira-User-Manual/Test-Run-Management/#incidents","text":"This tab displays the list of incidents associated with the current test run. The incidents will have been logged during the creation of the test run and will be linked to one of the steps in the test run: Each incident is listed together with the type, status, priority, name, owner, detector, detection date and a link to the actual incident details. You can customize the fields that are displayed using the \"Show/Hide Columns\" option. In addition, you can perform the following operations: Refresh -- updates the list of incidents from the server, useful if other people are adding incidents to this release at the same time. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field. Edit -- Clicking the \" Edit \" button to the right of the incident allows you to edit the incident inline directly on this screen.","title":"Incidents"},{"location":"Spira-User-Manual/Test-Run-Management/#tasks","text":"This tab is only visible to users of SpiraPlan. It shows the list of tasks associated with the current test run. Tasks can only be added to a test run created from an exploratory test case. These tasks will have been logged during the execution of the test.","title":"Tasks"},{"location":"Spira-User-Manual/Test-Set-Management/","text":"Test Set List As well as being able to organize test cases into folders, you can also create separate groupings of test cases called test sets which can then be assigned to testers as a package. To view the list of test sets for a product, click on Testing > Test Sets in the global navigation: The test set list consists of hierarchical list of all the test sets in the current product organized into folders. The structure is very similar to the folder structure in Microsoft Windows\u00ae Explorer, and users will find this very familiar and intuitive to use. A folder tree is on the left hand side---with triangle icons to expand / collapse each folder. Contents of the selected folder (the one marked in bold on the folder tree) are shown on the right hand side. 1 When you create a new product, this list will initially be empty, and you will have to use the \" New Test Set \" button to start adding test sets to the system. Each test set is listed along with the number of test cases contained (in parenthesis), the aggregate execution status of the contained test cases (using a graphical bar-chart), the date that the test set has been scheduled to be executed (planned date), the date that it was last executed, the person currently assigned to execute the test set, the status and the test set id. Clicking on a test set's hyperlink will take you to the test set details page for the item in question. Note: the test set status is separate from the execution status of the individual test cases and represents where the test set is in its lifecycle: Not Started -- The test set has been assigned to a tester or automation host and no testing has been performed. In Progress -- The test set has been assigned to a tester or automation host and the testing is in progress. Completed -- The test set was previously assigned, but has now been completed, with all test cases having an execution status recorded and the tester having clicked the Finish button in the test execution wizard. Blocked -- The tester or automation host was unable to execute the assigned test set because of a failure external to the actual test case. Deferred -- The test set was previously assigned, but: execution had not been completed (at least one test case does not have a recorded execution status); and the Tester deleted the Pending Test Run entry from their My Page. Delete Clicking on the \" Delete \" button deletes the currently selected test sets. It will delete the association between the test set and its contained test cases, but it will not delete the test cases themselves. Refresh Clicking on the \" Refresh \" button simply reloads the list of test sets. This is useful if other people are making changes to the test set list and you want to make sure that you have the most current version. Focus On The \" Focus On \" button is a useful when you have performed a filter on the list of test sets and then wish to quickly navigate to the folder of a particular test set shown in the list. After selecting a test set, clicking the button will move the left hand folder tree to the folder that contains the selected test set. It will also change the list view on the right to show all of the test sets within that folder (i.e. the selected test set and its siblings). Edit Each test set in the list has an \" Edit \" button in its right-most column. When you click this button, double-click on any of the cells in the row, or select a row and click the \" Edit \" button in the toolbar at the top of the page. This will change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Save \" and \" Cancel \" buttons are displayed in the last column: If you click \" Edit \" on more than one row, the \" Save \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then update the changes by clicking the one \" Save \" button. Also, if you want to make the same change to multiple rows (e.g. to change the owner of five test sets from \"Fred Bloggs\" to \"Joe Smith\"), you can click on the \" fill \" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the \" Edit \" button on the same row as the Filters and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Save \" to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes. Show / Hide Columns This drop-down list allows you to change the fields that are displayed in the test set list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner. Filtering & Sorting Read about how to create and manage filters, and how to sort the artifact list . Copying Test Sets To copy one or more test sets, simply select the check-boxes of the test sets you want to copy and then select the Edit > Copy Items menu option. This will copy the current test set selection to the clipboard. Then select the place where you want the test sets to be inserted and choose the Edit > Paste Items option. The test sets will now be copied into the destination you specified. The name of the copied test sets will be prefixed with \"Copy of...\" to distinguish them from the originals. Moving Test Sets There are two options for moving test sets or folders: Click on the test set/folder you want to move in the right hand list and drag it to the folder in the left hand folder tree you want it moved to. The background of the new folder will change to show where it will be inserted: Once you have the test set/folder positioned at the correct place that you want it inserted, just release the mouse button. To move multiple items simply select their checkboxes and then drag-and-drop one of the selected items. Alternatively you can simply select the check-boxes of the test sets you want to move and then select the Edit > Cut Items menu option. This will cut the current test set selection to the clipboard. Then select the place where you want the test cases to be inserted and choose the Edit > Paste Items option. The test sets will now be moved into the destination specified. Printing or Exporting Items To quickly print a single test set, test set folder or list of test sets you can select the items' checkboxes and then click Tools > Print Items. This will display a popup window containing a printable version of the selected items. Alternatively you can save the selected items into a number of formats, available via the Tools dropdown. Right-Click Context Menu SpiraPlan\u00ae provides a shortcut -- called the context menu - for accessing some of the most commonly used functions, so that you don't need to move your mouse up to the toolbar each time. To access the context menu, right-click on any of the rows in the test set list and the following menu will be displayed: You can now choose any of these options as an alternative to using the icons in the toolbar. Test Set Details When you click on a test set item in the test set list described in the previous section, you are taken to the test set details page illustrated below: This page is made up of three areas; the left pane displays the test set folders and list navigation; the right pane's header, which displays: the operations toolbar; the folder the test set is in ; the editable name of the selected test set; and the info bar (with a shaded background), which also contains the workflow status transitions (see below); and the right pane's tabbed interface with rich information related to the test set. The navigation pane consists of a link that will take you back to the test set list, as well as a list of the peer test sets to the one selected. This latter list is useful as a navigation shortcut; you can quickly view the detailed information of all the peer test sets by clicking on the navigation links without having to first return to the test sets list page. The navigation list can be switched between three different modes: The list of test sets matching the current filter The list of all test sets, irrespective of the current filter The list of test sets assigned to the current user The operations toolbar lets you, amongst standard operations like save and delete: create a duplicate of the current artifact by clicking Clone export to a number of files formats or print it via one of the options in the Tools dropdown menu the Execute button will execute all the test cases in the set against the release specified in the test set and then take you to the test execution screen Initially the pane will be in \"Overview\" mode, but it can be switched to \"Test Runs\", \"Attachments\", \"Incidents\" and \"History\" modes if so desired. Each of the views is described separately below. Emailing Read about emailing an artifact to colleagues using Spira . Followers Read about how to add and manage followers to an artifact . Workflows Read about using workflows to change the status of your artifact . Overview -- Details The top part of this tab displays the various standard fields and custom properties associated with the test set. Fields (both standard and custom) are grouped under the collapsible headings (marked by orange text and underline) in the screenshot below. For instance, all fields regarding dates are grouped together in the \"Dates and Times\" area. The Detailed Information section contains the long, formatted description of the test case, as well as any rich text custom fields. You can enter rich text or paste in from a word processing program or web page. Clicking on the shaded areas of one of these detailed fields will display the rich text toolbar. Test Sets can be specified as being either for \"Manual\" or \"Automated\" test runs (via the \"Type\" field. If you choose Manual, then the test set can be executed by a tester from their \"My Page.\" However if you choose \"Automated\", the test set will be executed by the automation host you specified. In this case, the planned date and time will be used by the automated test engine to know when to execute the automated test scripts. For manual test sets, only the date component is used. In addition, you can specify a recurrence schedule for the test set by changing the recurrence dropdown from \"One Time\" to \"Hourly\", \"Daily\", etc. so that SpiraPlan executes the same test set according to the specified frequency. The \"Planned Date\" field lets you specify the date and time to execute the test using the popup time picker. The Schedule on Build field will tell SpiraTest to automatically set the Planned Date to the current date/time plus the Post Build Wait Time offset (in seconds) whenever a new build is performed against the release or sprint that the test set is scheduled for. This allows you to automatically run a set of regression tests immediately after a build is completed. If you have test configuration sets defined in your product, you can assign them to a specific Test Set and use them for both manual and automated testing by setting the Configuration dropdown value. If you have a test configuration associated with the test set, when you execute the test set, SpiraPlan will generate a test run entry for each of the test configuration entries multiplied by each of the test cases in the set. The Description section contains the long, formatted description of the test set. You can enter rich text or paste in from a word processing program or web page. Overview - Comments The Comments section allows users to add and view discussions relating to the test set: Existing comments are displayed by date (either newest-first or oldest-first) above the text box. To add a comment to the Test Set, enter your text into the textbox, then click the \" Add Comment \" button. Overview - Parameters As discussed in Parameters . test cases can have parameters associated with them. This enables one test case to be called several times and have different parameters passed in each case, making the operation different. E.g. you could have a generic \"login to application\" test case that others call as an initial step, which could be provided with different login information depending on the calling test case. In addition these parameters may be used by certain test automation engines. The Parameters section on the test set page lets you set a shared value for all of the parameters contained within the different test cases of the test set. The screenshot below shows that there are three parameters contained in the test cases that have been set at the test set level. In this example, every case that has a Parameter called 'browserName' will have its value set to 'Safari'. This is a quick way of setting values for many test cases at once. Test Set Values will override any default values of a Parameter (defined for each specific test case). You can add any additional Parameters not already set by clicking on the \" Add Parameter Value \" button. In this example, you can see that one of the parameters not yet set is called 'url'. You can also delete an existing Parameter specified for the whole test set by clicking the \" Delete \" button in the Operations column of the Parameter in question. Clicking the \" Edit \" button will let you alter the Test Set Value. Note that the Default Value is derived from the test cases that use a specific Parameter. It is shown in this table for information only---to help testers know what value will be run in the absence of specifying a Test Set Value. Overview - Test Cases This section displays the list of test cases contained within the test set. You can add, remove, reposition and remove test cases from the list. The execution status displayed next to each test case is the most recent execution status of the test case when run in the context of the current test set . To move the test cases, click the test case icon and drag it to the appropriate position in the list. To modify an existing Test Case click the \" Edit \" button in the right-most column, or double-click on the cells in the row. That will switch the selected row into Edit mode. The owner field can then be set at the test case level. This is useful in situations where you want the different test cases in the set to be executed by different testers (e.g. in integrated, scenario tests) To add a new test case to the Test Set, click on the \" Add \" button to display the panel: First, select the folder containing the test cases desired. You can then select the checkboxes of the individual test cases that you want to add to the test set (note: clicking the checkbox in the header row of the table will select ever test case in the currently selected folder). Once you have selected the desired items, click the \" Save \" button to add them to the test set. As discussed above in Overview - Parameters , test cases can have parameters defined with specific values. These are created on the Test Case details page (see Parameters ). If you need to specify different values for a parameter for different test cases in the test set, you can override both any default parameter values and any test set parameter values. To do so, click \"Edit Parameters\" for the required test case in this view. You can do this by either select the checkbox of a test set and click \"Edit Parameters\" at the top of the section, or right-click on the test case and choose \"Edit Parameters\": You can then specify the values of the parameters that the test set will pass to this specific test case. Once you have entered / modified the values, click \" Save \" to commit the changes. Overview - Comments The Comments section allows users to add and view discussions related to the Test Set: Existing comments are displayed by date (either newest-first or oldest-first) above the text box. To add a comment to the Test Set, enter your text into the textbox, then click the \" Add Comment \" button. Test Runs This tab displays the list of all the test runs executed against the test set. Each test run is listed together with the date of execution, the name of the test case, the name of the tester, the release/version of the system that the test was executed against, the overall execution status for the test case in that run and a link to the actual test run details . In addition, you can choose to display any of the custom properties associated with the test run. The \"Show/hide columns\" drop-down list allows you to change the fields that are displayed in the test run list as columns. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. The displayed columns can be any standard field or custom property. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field. Attachments Read about how the attachments tab works History Read about how the history tab works Incidents This tab displays the list of incidents associated with the current test set. Each incident will either have been: created during the execution of a test case in the test set (and are thereby linked to one of the test runs); or manually linked to one of the test steps in a test case of the set. when navigating to folders (for all artifacts that support them), the URL in your browser's address bar will change. Each folder has a unique, sharable URL that you can give to someone to display the list of artifacts with the appropriate folder selected. You can also open up multiple folders in different browser tabs and easily toggle between them from the same browser. \u21a9","title":"Test Set Management"},{"location":"Spira-User-Manual/Test-Set-Management/#test-set-list","text":"As well as being able to organize test cases into folders, you can also create separate groupings of test cases called test sets which can then be assigned to testers as a package. To view the list of test sets for a product, click on Testing > Test Sets in the global navigation: The test set list consists of hierarchical list of all the test sets in the current product organized into folders. The structure is very similar to the folder structure in Microsoft Windows\u00ae Explorer, and users will find this very familiar and intuitive to use. A folder tree is on the left hand side---with triangle icons to expand / collapse each folder. Contents of the selected folder (the one marked in bold on the folder tree) are shown on the right hand side. 1 When you create a new product, this list will initially be empty, and you will have to use the \" New Test Set \" button to start adding test sets to the system. Each test set is listed along with the number of test cases contained (in parenthesis), the aggregate execution status of the contained test cases (using a graphical bar-chart), the date that the test set has been scheduled to be executed (planned date), the date that it was last executed, the person currently assigned to execute the test set, the status and the test set id. Clicking on a test set's hyperlink will take you to the test set details page for the item in question. Note: the test set status is separate from the execution status of the individual test cases and represents where the test set is in its lifecycle: Not Started -- The test set has been assigned to a tester or automation host and no testing has been performed. In Progress -- The test set has been assigned to a tester or automation host and the testing is in progress. Completed -- The test set was previously assigned, but has now been completed, with all test cases having an execution status recorded and the tester having clicked the Finish button in the test execution wizard. Blocked -- The tester or automation host was unable to execute the assigned test set because of a failure external to the actual test case. Deferred -- The test set was previously assigned, but: execution had not been completed (at least one test case does not have a recorded execution status); and the Tester deleted the Pending Test Run entry from their My Page.","title":"Test Set List"},{"location":"Spira-User-Manual/Test-Set-Management/#delete","text":"Clicking on the \" Delete \" button deletes the currently selected test sets. It will delete the association between the test set and its contained test cases, but it will not delete the test cases themselves.","title":"Delete"},{"location":"Spira-User-Manual/Test-Set-Management/#refresh","text":"Clicking on the \" Refresh \" button simply reloads the list of test sets. This is useful if other people are making changes to the test set list and you want to make sure that you have the most current version.","title":"Refresh"},{"location":"Spira-User-Manual/Test-Set-Management/#focus-on","text":"The \" Focus On \" button is a useful when you have performed a filter on the list of test sets and then wish to quickly navigate to the folder of a particular test set shown in the list. After selecting a test set, clicking the button will move the left hand folder tree to the folder that contains the selected test set. It will also change the list view on the right to show all of the test sets within that folder (i.e. the selected test set and its siblings).","title":"Focus On"},{"location":"Spira-User-Manual/Test-Set-Management/#edit","text":"Each test set in the list has an \" Edit \" button in its right-most column. When you click this button, double-click on any of the cells in the row, or select a row and click the \" Edit \" button in the toolbar at the top of the page. This will change the item from \"View\" mode to \"Edit\" mode. The various columns are made editable, and \" Save \" and \" Cancel \" buttons are displayed in the last column: If you click \" Edit \" on more than one row, the \" Save \" buttons are only displayed on the first row, and you can make changes to all the editable rows and then update the changes by clicking the one \" Save \" button. Also, if you want to make the same change to multiple rows (e.g. to change the owner of five test sets from \"Fred Bloggs\" to \"Joe Smith\"), you can click on the \" fill \" icon to the right of the editable item, which will propagate the new value to all editable items in the same column. If you want to edit lots of items, first select their checkboxes and then click the \" Edit \" button on the same row as the Filters and it will switch all the selected items into edit mode. When you have made your updates, you can either click \" Save \" to commit the changes, or \" Cancel \" to revert back to the original information. Alternatively, pressing the <ENTER> key will commit the changes and pressing the <ESCAPE> key will cancel the changes.","title":"Edit"},{"location":"Spira-User-Manual/Test-Set-Management/#show-hide-columns","text":"This drop-down list allows you to change the fields that are displayed in the test set list as columns for the current product. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. This is stored on a per-product basis, so you can have different display settings for each product that you are a member of. The fields can be any of the built-in fields or any of the custom properties set up by the product owner.","title":"Show / Hide Columns"},{"location":"Spira-User-Manual/Test-Set-Management/#filtering-sorting","text":"Read about how to create and manage filters, and how to sort the artifact list .","title":"Filtering &amp; Sorting"},{"location":"Spira-User-Manual/Test-Set-Management/#copying-test-sets","text":"To copy one or more test sets, simply select the check-boxes of the test sets you want to copy and then select the Edit > Copy Items menu option. This will copy the current test set selection to the clipboard. Then select the place where you want the test sets to be inserted and choose the Edit > Paste Items option. The test sets will now be copied into the destination you specified. The name of the copied test sets will be prefixed with \"Copy of...\" to distinguish them from the originals.","title":"Copying Test Sets"},{"location":"Spira-User-Manual/Test-Set-Management/#moving-test-sets","text":"There are two options for moving test sets or folders: Click on the test set/folder you want to move in the right hand list and drag it to the folder in the left hand folder tree you want it moved to. The background of the new folder will change to show where it will be inserted: Once you have the test set/folder positioned at the correct place that you want it inserted, just release the mouse button. To move multiple items simply select their checkboxes and then drag-and-drop one of the selected items. Alternatively you can simply select the check-boxes of the test sets you want to move and then select the Edit > Cut Items menu option. This will cut the current test set selection to the clipboard. Then select the place where you want the test cases to be inserted and choose the Edit > Paste Items option. The test sets will now be moved into the destination specified.","title":"Moving Test Sets"},{"location":"Spira-User-Manual/Test-Set-Management/#printing-or-exporting-items","text":"To quickly print a single test set, test set folder or list of test sets you can select the items' checkboxes and then click Tools > Print Items. This will display a popup window containing a printable version of the selected items. Alternatively you can save the selected items into a number of formats, available via the Tools dropdown.","title":"Printing or Exporting Items"},{"location":"Spira-User-Manual/Test-Set-Management/#right-click-context-menu","text":"SpiraPlan\u00ae provides a shortcut -- called the context menu - for accessing some of the most commonly used functions, so that you don't need to move your mouse up to the toolbar each time. To access the context menu, right-click on any of the rows in the test set list and the following menu will be displayed: You can now choose any of these options as an alternative to using the icons in the toolbar.","title":"Right-Click Context Menu"},{"location":"Spira-User-Manual/Test-Set-Management/#test-set-details","text":"When you click on a test set item in the test set list described in the previous section, you are taken to the test set details page illustrated below: This page is made up of three areas; the left pane displays the test set folders and list navigation; the right pane's header, which displays: the operations toolbar; the folder the test set is in ; the editable name of the selected test set; and the info bar (with a shaded background), which also contains the workflow status transitions (see below); and the right pane's tabbed interface with rich information related to the test set. The navigation pane consists of a link that will take you back to the test set list, as well as a list of the peer test sets to the one selected. This latter list is useful as a navigation shortcut; you can quickly view the detailed information of all the peer test sets by clicking on the navigation links without having to first return to the test sets list page. The navigation list can be switched between three different modes: The list of test sets matching the current filter The list of all test sets, irrespective of the current filter The list of test sets assigned to the current user The operations toolbar lets you, amongst standard operations like save and delete: create a duplicate of the current artifact by clicking Clone export to a number of files formats or print it via one of the options in the Tools dropdown menu the Execute button will execute all the test cases in the set against the release specified in the test set and then take you to the test execution screen Initially the pane will be in \"Overview\" mode, but it can be switched to \"Test Runs\", \"Attachments\", \"Incidents\" and \"History\" modes if so desired. Each of the views is described separately below.","title":"Test Set Details"},{"location":"Spira-User-Manual/Test-Set-Management/#emailing","text":"Read about emailing an artifact to colleagues using Spira .","title":"Emailing"},{"location":"Spira-User-Manual/Test-Set-Management/#followers","text":"Read about how to add and manage followers to an artifact .","title":"Followers"},{"location":"Spira-User-Manual/Test-Set-Management/#workflows","text":"Read about using workflows to change the status of your artifact .","title":"Workflows"},{"location":"Spira-User-Manual/Test-Set-Management/#overview-details","text":"The top part of this tab displays the various standard fields and custom properties associated with the test set. Fields (both standard and custom) are grouped under the collapsible headings (marked by orange text and underline) in the screenshot below. For instance, all fields regarding dates are grouped together in the \"Dates and Times\" area. The Detailed Information section contains the long, formatted description of the test case, as well as any rich text custom fields. You can enter rich text or paste in from a word processing program or web page. Clicking on the shaded areas of one of these detailed fields will display the rich text toolbar. Test Sets can be specified as being either for \"Manual\" or \"Automated\" test runs (via the \"Type\" field. If you choose Manual, then the test set can be executed by a tester from their \"My Page.\" However if you choose \"Automated\", the test set will be executed by the automation host you specified. In this case, the planned date and time will be used by the automated test engine to know when to execute the automated test scripts. For manual test sets, only the date component is used. In addition, you can specify a recurrence schedule for the test set by changing the recurrence dropdown from \"One Time\" to \"Hourly\", \"Daily\", etc. so that SpiraPlan executes the same test set according to the specified frequency. The \"Planned Date\" field lets you specify the date and time to execute the test using the popup time picker. The Schedule on Build field will tell SpiraTest to automatically set the Planned Date to the current date/time plus the Post Build Wait Time offset (in seconds) whenever a new build is performed against the release or sprint that the test set is scheduled for. This allows you to automatically run a set of regression tests immediately after a build is completed. If you have test configuration sets defined in your product, you can assign them to a specific Test Set and use them for both manual and automated testing by setting the Configuration dropdown value. If you have a test configuration associated with the test set, when you execute the test set, SpiraPlan will generate a test run entry for each of the test configuration entries multiplied by each of the test cases in the set. The Description section contains the long, formatted description of the test set. You can enter rich text or paste in from a word processing program or web page.","title":"Overview -- Details"},{"location":"Spira-User-Manual/Test-Set-Management/#overview-comments","text":"The Comments section allows users to add and view discussions relating to the test set: Existing comments are displayed by date (either newest-first or oldest-first) above the text box. To add a comment to the Test Set, enter your text into the textbox, then click the \" Add Comment \" button.","title":"Overview - Comments"},{"location":"Spira-User-Manual/Test-Set-Management/#overview-parameters","text":"As discussed in Parameters . test cases can have parameters associated with them. This enables one test case to be called several times and have different parameters passed in each case, making the operation different. E.g. you could have a generic \"login to application\" test case that others call as an initial step, which could be provided with different login information depending on the calling test case. In addition these parameters may be used by certain test automation engines. The Parameters section on the test set page lets you set a shared value for all of the parameters contained within the different test cases of the test set. The screenshot below shows that there are three parameters contained in the test cases that have been set at the test set level. In this example, every case that has a Parameter called 'browserName' will have its value set to 'Safari'. This is a quick way of setting values for many test cases at once. Test Set Values will override any default values of a Parameter (defined for each specific test case). You can add any additional Parameters not already set by clicking on the \" Add Parameter Value \" button. In this example, you can see that one of the parameters not yet set is called 'url'. You can also delete an existing Parameter specified for the whole test set by clicking the \" Delete \" button in the Operations column of the Parameter in question. Clicking the \" Edit \" button will let you alter the Test Set Value. Note that the Default Value is derived from the test cases that use a specific Parameter. It is shown in this table for information only---to help testers know what value will be run in the absence of specifying a Test Set Value.","title":"Overview - Parameters"},{"location":"Spira-User-Manual/Test-Set-Management/#overview-test-cases","text":"This section displays the list of test cases contained within the test set. You can add, remove, reposition and remove test cases from the list. The execution status displayed next to each test case is the most recent execution status of the test case when run in the context of the current test set . To move the test cases, click the test case icon and drag it to the appropriate position in the list. To modify an existing Test Case click the \" Edit \" button in the right-most column, or double-click on the cells in the row. That will switch the selected row into Edit mode. The owner field can then be set at the test case level. This is useful in situations where you want the different test cases in the set to be executed by different testers (e.g. in integrated, scenario tests) To add a new test case to the Test Set, click on the \" Add \" button to display the panel: First, select the folder containing the test cases desired. You can then select the checkboxes of the individual test cases that you want to add to the test set (note: clicking the checkbox in the header row of the table will select ever test case in the currently selected folder). Once you have selected the desired items, click the \" Save \" button to add them to the test set. As discussed above in Overview - Parameters , test cases can have parameters defined with specific values. These are created on the Test Case details page (see Parameters ). If you need to specify different values for a parameter for different test cases in the test set, you can override both any default parameter values and any test set parameter values. To do so, click \"Edit Parameters\" for the required test case in this view. You can do this by either select the checkbox of a test set and click \"Edit Parameters\" at the top of the section, or right-click on the test case and choose \"Edit Parameters\": You can then specify the values of the parameters that the test set will pass to this specific test case. Once you have entered / modified the values, click \" Save \" to commit the changes.","title":"Overview - Test Cases"},{"location":"Spira-User-Manual/Test-Set-Management/#overview-comments_1","text":"The Comments section allows users to add and view discussions related to the Test Set: Existing comments are displayed by date (either newest-first or oldest-first) above the text box. To add a comment to the Test Set, enter your text into the textbox, then click the \" Add Comment \" button.","title":"Overview - Comments"},{"location":"Spira-User-Manual/Test-Set-Management/#test-runs","text":"This tab displays the list of all the test runs executed against the test set. Each test run is listed together with the date of execution, the name of the test case, the name of the tester, the release/version of the system that the test was executed against, the overall execution status for the test case in that run and a link to the actual test run details . In addition, you can choose to display any of the custom properties associated with the test run. The \"Show/hide columns\" drop-down list allows you to change the fields that are displayed in the test run list as columns. To show a column that is not already displayed, simply select that column from the list of \"Show...\" column names and to hide an existing column, simply select that column from the list of \"Hide...\" column names. The displayed columns can be any standard field or custom property. You can also filter the results by choosing items from the filter options displayed in the sub-header row of each field and clicking the \" Filter \" button. In addition, you can quickly sort the list by clicking on one of the directional arrow icons displayed in the header row of the appropriate field.","title":"Test Runs"},{"location":"Spira-User-Manual/Test-Set-Management/#attachments","text":"Read about how the attachments tab works","title":"Attachments"},{"location":"Spira-User-Manual/Test-Set-Management/#history","text":"Read about how the history tab works","title":"History"},{"location":"Spira-User-Manual/Test-Set-Management/#incidents","text":"This tab displays the list of incidents associated with the current test set. Each incident will either have been: created during the execution of a test case in the test set (and are thereby linked to one of the test runs); or manually linked to one of the test steps in a test case of the set. when navigating to folders (for all artifacts that support them), the URL in your browser's address bar will change. Each folder has a unique, sharable URL that you can give to someone to display the list of artifacts with the appropriate folder selected. You can also open up multiple folders in different browser tabs and easily toggle between them from the same browser. \u21a9","title":"Incidents"},{"location":"Spira-User-Manual/User-Product-Management/","text":"User/Product Management This section outlines how you can log into SpiraPlan\u00ae, view your personalized home-page that lists the key tasks that you need to focus on, and drill-down into each of your assigned products in a single dashboard view. In addition to your personal homepage, each of your products has its own dashboard that depicts the overall product health and status in a single comprehensive view. Login Screen Upon entering the SpiraPlan\u00ae URL provided by your system administrator into your browser, you will see the following login screen: You need to enter your given user-name and password into the system in the appropriate boxes then click the Log In button to gain access to the application. Normally you only remain logged in to the application whilst in active use, and you will be asked to log-in again after either closing the browser or 20 minutes of inactivity. To prevent this, and to stay logged-in to SpiraPlan\u00ae regardless of browser window closing or inactivity, select the \"Keep me logged in\" check-box before clicking the Log In button. Note that this setting is specific to each individual computer you are logging-in from, and that it will be reset when you explicitly log-out with the log-out link . If for any reason you are unable to login with the provided username/password combination, and error message will be displayed. If you cannot remember the correct log-in information, click on the \"Forgot your password\" link and your password will be emailed to the email address currently on file. The reset password screen is illustrated below: If you don't have a SpiraPlan\u00ae account setup, clicking on the \"Register for an account?\" link will take you to a form that you need to fill-in, which will be forwarded to the system administrator, who will need to approve your account before it is active in the system. This screen is illustrated below: In addition, the system will prevent you logging on to the system with the same username at the same time on multiple computers. This is to avoid the system getting confused by a user trying to make contradictory actions at the same time. If for any reason you do try and log in to the system when you already have an active session in progress, you will see the following screen: You have two choices: you can either click the \"Log Out\" link and try logging in as a different user, or if you want to log-off any other active sessions (e.g. you closed the browser and the session is still listed as active), simply click the \"Sign Off The Other Locations\" link, and you will be logged in to the application. Since SpiraPlan\u00ae is licensed to organizations for a specific number of concurrent users -- unless they have purchased an unlimited Enterprise license -- only a fixed number of users may be active at the same time. So, for example if an organization has a five (5) concurrent user license and a sixth user tries to log-in, they will be presented with the following screen: This means that one of the other users who is already logged-in, needs to click the \"Log Out\" button so that one of the concurrent licenses is freed for your use. If the user has logged out by closing the browser, the system may not have detected the logout. In this case, the other user needs to log back in, and then click the \"Log Out\" link. My Page Once you have successfully logged in, you will initially be taken to your personalized home page called \"My Page\". Please note, that the very first time you log in you will be asked if you want to take a quick orientation tour of the application (which will look similar to the screenshot below). Note that once you have successfully logged-in and chosen a product, SpiraPlan\u00ae remembers this selection, and on subsequent log-ins will automatically select that product, and highlight it for you in the \"My Products\" list . Your homepage contains all the information relevant to you---consolidated onto a single page for you to take immediate action. By default the page lists the information for all products that you are a member of. However, you can choose to filter by the current product, to get a more focused list. Next to some of the widgets is an RSS icon ( ), this allows you to subscribe to the information as a Really Simple Syndication (RSS) newsfeed. This can be useful if you want to be notified about recently assigned items without having to setup email notifications or being logged into SpiraPlan continuously. If you don't see an RSS icon next to the widgets on your My Page it means that you have not enabled RSS newsfeeds in your profile. For more details on configuring your RSS preferences, please refer to My Profile . Initially the page is loaded in 'view mode' which means that the various 'widgets' on the page are displayed with minimum visual clutter (no toolbars or control icons) that makes it easy to scan the items on the page and see what work has been assigned. To switch the page to 'edit mode', click on the button with the cog icon ( ) on the right: In this mode, each of the 'widgets' displayed on the page can be minimized by clicking on the arrow icon ( ) in the top-left of the window, or closed by clicking-on the cross icon ( ) in the top-right of the window. This allows you to customize your page to reflect the types of information that are relevant. If you have closed a widget that you subsequently decide you want to reopen, you can add them back to the page display by clicking the \"Add Items\" button at the top of the page. In addition, the various widgets have a \"settings\" icon ( ) that allows you to customize how that widget appears. The settings are specific to each widget and in general allow you to specify how many rows of data are displayed and what columns are displayed. You can move and reposition the various widgets on the dashboard by clicking the mouse on the title bar of the widget you want to move and dragging it to the desired location. This change will be remembered when you next login to the system. Once you have the dashboard configured the way you like it, you can click \"Return to Normal View\" to switch back to 'view mode'. When you load your 'My Page' for the first time it will consists of the following main elements: My Products My Saved Searches My Assigned Requirements My Assigned Test Cases My Assigned Test Sets My Pending Test Runs My Assigned Incidents My Detected Incidents My Assigned Tasks Quick Launch My Contacts However these are not the only widgets available. If you click on the \"Add/Remove\" items hyperlink it will display the list of any additional widgets that are available: You can add the additional widgets by selecting the appropriate checkbox, choosing the destination location (left side vs. right side) and then click the [Add] button. The additional widgets available in the My Page are: My Saved Reports My Subscribed Artifacts My News Feeds My Products This section lists all the products you have been given access to, together with the name, description, program and date of creation. To view the description of the product, simply position the mouse pointer over the link, and a tooltip window will popup containing the description. When you initially view the page, all of the products will be shown as links. When you click on a product to view, you will be taken to that product's home-page, and that product will be set as the current product. That product will now appear highlighted in your home-page (see above screen-shot). To change the currently selected product, simply click on the link of another product name. You can always change your current product by clicking on the drop-down-list of products displayed on the global navigation bar to the right of the \"Search\" box. If you are a program member, the name of the program will also be displayed as a hyperlink. In which case, clicking on the program hyperlink will take you to the Program dashboard . My Saved Searches This section lists any filters/searches you have saved from the various artifact list screens throughout the application. This allows you to store specific combinations of searches that you need to perform on a regular basis (e.g. display all newly logged incidents, display all requirements that are completed but have no test coverage). The name of the saved search is displayed along with an icon that depicts which artifact it's for and the product it refers to. Clicking on the name of the saved search will take you to the appropriate screen in the product and set the search parameters accordingly. Clicking the \"Delete\" button next to the saved search will delete it. Clicking on the RSS icon will allow you to subscribe to the specific search so that it will be displayed in your RSS newsreader. This allows you to setup customized lists of information that can be displayed outside of SpiraPlan. My Assigned Requirements This section lists all the requirements you have been made owner of, across all the different products you are a member of. This typically means that the product manager has assigned you to be responsible for either developing the supporting test cases or decomposing the requirement into its detailed work breakdown structure of product tasks. The requirement name is displayed, along with its status (requested, accepted, in-progress, etc.) and its importance. My Assigned Test Cases This section lists all the test cases you have been made owner of, across all the different products you are a member of. This typically means that the product manager has assigned you to be responsible for executing the assigned test scripts. To aid in this process, the script name is displayed, along with its last execution status (failed, passed or not-run) and date of last execution. This enables you to see how recently the tests have been run, and whether they need to be re-run. If you click on the test-name hyperlink, you will be taken to the details page for this test-case and the product that the test-case belongs to will be made your current product. If you click on the play button to its right you will launch the test-case in the test-case execution module so that you can easily retest failed cases. My Assigned Test Sets This section lists all the test sets (groups of test cases) you have been made owner of, across all the different products you are a member of. This typically means that the product manager has assigned you to be responsible for executing the test cases contained within the test set against a specified release of the system under test. To aid in this process, the test set name is displayed, along with its status, the product it belongs to, the number of remaining test cases to be executed, and the date by which all the tests need to have been run. If you click on the test-set name hyperlink, you will be taken to the details page for this test-set and the product that the test-set belongs to will be made your current product. If you click on the play button to its right you will launch the test-cases contained within the test-set in the test-case execution module so that you can easily carry out your assigned testing task. My Pending Test Runs This section lists any test runs that you started executing in the test case module but haven't yet completed. Until a test case or test set is fully executed, a pending test run entry is stored in the system so that you can continue execution at a later date. Any pending test run can be either deleted or resumed by clicking on the appropriate button. In addition, there is the option to reassign the test run to another user that is a member of the product. My Assigned Tasks This section lists all the product tasks that you have been made the owner of across all the different products you are a member of. This typically means that the manager of the product in question has assigned development tasks to you that need to be completed so that a release can be completed and/or a requirement can be fulfilled. The tasks are listed in ascending date order so that the items with the oldest due-dates are displayed first. In addition, each task is displayed with a progress indicator that graphically illustrates its completion against schedule. See Task Tracking -- task management for details of the different progress indicators. Clicking on the task name hyperlink will take you to the task details page. This page will describe the task in more detail, illustrate which requirement and release it is associated with, and also allow you to view the change log of actions that have been performed on it. My Assigned Incidents This section lists all the open incidents you are the owner of, across all the different products you are a member of. This typically means that the product manager has assigned you to be responsible for resolving the incident. In the case of a bug, this can mean actually fixing the problem, whereas for other incident types (e.g. training item) it may mean simply documenting a workaround. In either event, this section highlights the open incidents you need to manage, ranked by importance/priority and categorized by type, with the open date displayed to give you a sense of the age of the incident. Clicking on the incident name hyperlink takes you to the incident details page ) that describes the incident in more detail, and allows you to add new information or change its status to indicate actions taken. In addition, if you position the mouse pointer over the name of the incident, a more detailed description is displayed as a \"tooltip\". My Detected Incidents This section lists all the open incidents that you have detected, across all the different products you are a member of. These incidents are not necessarily ones that you need to take an active role in resolving, but since you were the originator -- either by executing a test case or just logging a standalone incident -- you can watch them to make sure that they are resolved in a timely manner. Clicking on the incident name hyperlink takes you to the incident details page ) that describes the incident in more detail, and allows you to add new information or change its status to indicate actions taken. In addition, if you position the mouse pointer over the name of the incident, a more detailed description is displayed as a \"tooltip\". Quick Launch This widget allows users to quickly record a new incident in any of the products that they belong to. It's a shortcut that avoids having to first select a product, go to Tracking > Incidents and then click \"New Incident\". Instead you simply choose the product from the dropdown list and click the arrow icon to bring up the new incident creation screen. My Contacts This widget displays a list of any other users in the system that you have listed as a personal contact: Each user is displayed along with their graphical avatar, department and a colored indicator that lets you know if they are online or not. If they are online you can then send them an instant message (which will be described later in Global Navigation . To remove an existing contact, just click on the 'Remove' button. To add a new user, simply locate them in the Tracking > Resources page and then use the <Add As Contact> button. My Saved Reports This section lists any reports you have saved from the reports center. This allows you to store specific combinations of report elements, format, filters and sorts (see the section on Reporting for more details on how to configure a report) for reports that you need to run on a regular basis: My Subscribed Artifacts This widget displays a list of all the artifacts in the system that you have subscribed to (by clicking on the Subscribe icon on the item). You can display the item by simply clicking on the hyperlink. In addition, if changes are made to any of the artifacts an email notification will be sent to you. You can click on the \"Unsubscribe\" button to remove the item from this list. My News Feeds This widget allows you to subscribe to an external newsfeed and have the results be displayed inside SpiraPlan. By default it will be set to the newsfeed from the Inflectra website that displays a list of recent company and product announcements. You can add multiple instances of the widget to the dashboard, allowing you to read multiple news sources at once. Typical uses for this widget are to add news from product management and testing news sites/blogs or to add information from other tools in your organization that can display their data in RSS format. My Assigned Risks (SpiraPlan only) This section lists all the risks you are the owner of across all the different products you are a member of. Clicking on the risk name hyperlink will take you to the risk details page. This page will describe the risk in more detail. My Assigned Documents This section lists all the documents you are the owner of across all the different products you are a member of. Clicking on the risk name hyperlink will take you to the documents details page. This page will describe the documents in more detail. Global Navigation Regardless of the page you are on, SpiraPlan\u00ae will always display the global navigation bar, consisting of a number of different sections, depending on the user and where they are in the system. Under some of the icons and headings are secondary menu options that display when you click on the section in question. The sections and menus available in the global navigation are show below: Product Icon (shown as SpiraPlan above): this will always take you to \"My Page\" as discussed above Workspace Icon : this shows you the type of workspace you are on, for example a program or a product . Clicking it will take you to that workspace's homepage Workspace Selector : this shows the name of the current workspace. Clicking it will show all your available workspaces and clicking any of these will change you to that workspace Artifacts Selector : when visible, this shows the name of the current artifact for the current workspace. Clicking it will show all your available artifacts and clicking any of these will change you to that artifacts main page. For product workspaces these artifacts are grouped as follows: Planning Requirements Planning Board Releases Documents Testing Test Cases Test Sets Test Runs Automation Hosts Tracking Incidents Tasks Risks Resources Source Code Reporting User Profile Icon My Profile My Timecard Documentation Show on boarding tours Keyboard shortcuts Log Out Administration Icon : This is visible if you are a system administrator, or if you are an owner/administrator of the current workspace or its template. Clicking the icon will display the relevant administration menu. This is described in the separate SpiraPlan Administration Guide . Global Search SpiraPlan includes a global search that can be used to search across product and artifact type for items that include the entered keywords in either the name or description field: You can search for individual keywords by simply entering them in the search box and clicking the arrow button on the right. You can search for phrases by enclosing the words in double quotes. You can also search for a specific artifact by its unique two-letter prefix and ID number . For example, searching on book name will find any artifacts that include either of the two words book and name in the name or description. Searching on \"book name\" will only return items that have that exact phrase in either the name or description. Searching on TC2 will display just the Test Case with ID=2: When you get a list of search results, you can choose to order by relevance (the default) or by most recent. Searching by relevance finds the artifacts that have the greatest match with the keywords: The search by date is useful when you want to find recent items that match the search keywords: In addition, you can filter the results by artifact type and/or product to narrow down the search: For example, if you filter by requirement, the list of results will be narrowed accordingy: Log Out Clicking on the \"Log Out\" link will immediately log you out of your current session and return you to the login page . If you had set the \"Keep Me Logged In\" option during your previous login, that setting will be reset; so if you want to avoid having to keep logging-in, you'll need to re-check that box during your next log-in. Documentation Clicking on this link on any page will bring up the online version of this manual shown below: Clicking on any of the triangles expand links in the left hand table of contents will open up the detailed list of topics for each of the main areas of the system. In each area, clicking on one of the individual links will open the appropriate section in the help manual. By default, the reading-pane will open to the help item that is most closely related to the screen you happened to be on when you clicked the \"Help\" link. You can search the index by using the \"Index\" tab. If you want to share a specific help page with a colleague in your organization, send them the url from the address bar. Choosing a Workspace Workspaces in SpiraPlan set out the scope for the data you want to view and interact with. The most common workspace type is a product: A product contains all the requirements, sprints, defects, and tests associated to it. Programs are groups of products, where you can look across all the products in that program at once Choosing, for example, a Product or Program from the list of your assigned workspaces in the drop-down-menu allows you to quickly and easily jump between workspace regardless of the page you happen to be on. When you choose a new workspace, you will be taken to the same page in the selected workspace (assuming that you have permissions to view that page). Any workspace with a little cog at the end is a workspace that you are an owner/admin of. You can use CTRL+click to open the new product in a separate browser tab: Show Onboarding Tours When you first login to SpiraTeam, the system will show you a welcome page, together with a tour that walks you through the key features of the application. If you would like to see that again, you need to click on the \"Show Onboarding Tours\" option, under the user profile menu. SpiraPlan will then display the onboarding tour main dialog again: You can click 'No Thanks to dismiss it, or 'Yes Please' to start the tour. Instant Messenger The Spira instant messenger is available in both SpiraTeam\u00ae and SpiraPlan\u00ae and allows you to send short messages instantaneously to other users in the system. You can see the status of other users by looking for the small green circle next to the list of users in the 'My Contacts' widget as well as the various user fields in the system: When a user is online and available to communicate with, the small circle will be filled-in green. If you click on the green circle, it will open up the instant messenger window for that user: You can then enter in a message to the other user, which will then cause a conversation window to open inside their web browser with your message displayed. The other user can then enter in their responses, allowing the two users to have a real-time conversation: To make it easier to see what's new, all unread messages are displayed in a message box with a darker shade. In addition, the user's avatar image is displayed at the start of each message group. If the message window appears on a SpiraPlan\u00ae window that contains a specific artifact (e.g. a requirement, test case, task, etc.) there will be the option to 'Post as Comments'. If you click this option, any messages selected with a checkbox will be automatically posted to the current artifact as comments. This is useful if you have a conversation related to a specific item and you want to have the outcome permanently recorded as part of the audit trail. Otherwise, instant messages will be automatically purged from the system after 90 days. Product Home When you click on either the \"Product Home\" tab or the name of the product in the \"My Page\" product list, you will be taken to the homepage of the specific product in question: This page summarizes all of the information regarding the product into a comprehensive, easily digestible form that provides a \"one-stop-shop\" for people interested in understanding the overall status of the product at a glance. It contains summary-level information for all types of artifact (requirements, test cases, incidents, etc.) that you can use to drill-down into the appropriate section of the application. You will see a small \"i\" in a circle at the top right of every chart. Hovering or clicking on this will show you information about that chart. In addition to viewing the product home page, you can choose to filter by a specific release, to get the homepage for just that release (and any child sprints). Just like the 'My Page', the Product Home dashboard is initially loaded in 'view mode' with pre-configured set of widgets. The Product Home also offers 3 versions you can quickly switch between. While each of these can be customized as you want, by default they are designed to help different types of product member -- be they managers, testers, or developers. To download an image of the entire dashboard click the 'picture' button beneath the currently selected view. To switch the page to 'edit mode', you should click on the button with the cog icon ( ) below the currently selected Product Home view. Once in 'edit mode', each of the 'widgets' displayed on the product homepage can be minimized by clicking on the arrow icon ( ) in the top-left of the window, or closed by clicking-on the cross icon ( ) in the top-right of the window. In addition, the widgets allow you change their settings by clicking on the settings icon ( ).This allows you to customize your view of the product to reflect the types of information that are relevant to you. If you have closed a widget that you subsequently decide you want to reopen, you can rectify by clicking the \" Add Items \" button at the top of the page, and locating the closed item from the list of 'Closed Widgets'. When you load your 'Product Home' for the first time it will default to the \"General\" view. The following table shows which widgets are displayed on the different views of the 'Product Home': Widget Name General Development Testing Product Overview Y Y Y Activity Stream Y Y Y Shared Searches Y Requirements Summary Y Y Y Requirements Coverage Y Y Release Task Progress Y Y Requirements Graphs Y Y Late Finishing Tasks Y Y Task Graphs Y Y Top Open Issues Y Y Risk Summary Y Top Open Risks Y Test Execution Status Y Y Release Test Summary Y Y Incident Summary Y Y Y Incident Open Count Y Y Y Requirement Incident Count Y Y Y Requirements Regression Coverage Y Test Set Status Y Incident Aging Y Incident Test Coverage Tag Cloud Recent Builds Y Late Starting Tasks Y All Pending Test Runs Y Source Code Commits Y Test Run Progress Y Test Case Progress By Day Y Please note that different widgets are shown by default for the \"Developer\" and for the \"Tester\" views. If you click on the \" + Add \" items button it will display the list of any additional widgets that are available for that view. Below is what this looks like for the 'General' view: You can add the additional widgets by selecting the appropriate checkbox, choosing the destination location (left side vs. right side) and then click the \" Add \" button. Each of the different widgets listed is described in more detail below: Product Overview This section displays the name of the product, together with a brief description, the web-site that points to any additional information about the product, and the names of the owners of the product. Shared Searches This section lists any filters/searches have been saved from the various artifact list screens throughout the application and marked as shared filters . This allows users to store specific combinations of searches that the product team needs to perform on a regular basis (e.g. display all newly logged incidents, display all requirements that are completed but have no test coverage). The name of the saved search is displayed along with an icon that depicts which artifact it's for and the person who created it. Clicking on the name of the saved search will take you to the appropriate screen in the product and set the search parameters accordingly. If you are the creator of the saved search, clicking the \" Delete \" button next to the saved search will delete it. Clicking on the RSS icon will allow you to subscribe to the specific search so that it will be displayed in your RSS newsreader. This allows you to setup customized lists of information that can be displayed outside of SpiraPlan. Requirements Summary This section consists of a summary table that displays the aggregate count of requirements in the system broken-down by importance (on the x-axis) and status (on the y-axis). This allows the product manager to determine how many critical vs. low priority enhancements are waiting to be implemented, vs. actually being implemented. In addition, it makes a distinction between those requirements simply requested and those actually planned for implementation, so the product manager can see what the backlog is between the customer's demands, and the plan in place. Clicking on the \" View Details \" button at the top of the table simply brings up a detail graph that you can customize by selecting the axes. Clicking on the individual values in the cells will display the requirements list with the filter set to match the importance and status of the value. Requirements Coverage This section consists of a bar graph that displays the aggregated count of requirements test coverage for the product. The Passed, Failed, Blocked, Caution and Not-Run bars indicate the total count of requirements that have tests covering them, allocated across the execution status of the covering tests. For example, if a requirement is covered by four tests , two that have passed, one that has failed and one that has not yet been run, the counts would be passed = 0.5, failed = 0.25 and not-run 0.25. These fractional quantities are then summed across all the requirements to give the execution status breakdown of the covered requirements. In addition to the five statuses for the covered requirements, the sixth (\"Not Covered\") bar depicts the total number of requirements that have no tests covering them, putting the five other bars into perspective. Typically a product is in good health if the \"Not Covered\" bar is zero, and the count of \"Passed\" requirements is greater than \"Failed\", \"Caution\" or \"Not Run\". The greatest risk lies with the \"Blocked\", \"Not Covered\" and \"Not Run\" status codes, since the severity/quantity of any bugs lurking within is not yet fully known. If you position the mouse pointer over any of the four bars, the color of the bar changes slightly and the underlying raw data is displayed as a tooltip, together with the percentage equivalent. Clicking on the any of the bars in the chart will take you to the requirements list page with the corresponding filters set. When you filter the product home by release/sprint, this widget will filter the requirements coverage graph to only include requirements that are specifically mapped to the selected release/sprint . This is useful when you want to determine the test coverage of new requirements that are being added to the specific release/sprint. If instead you want to determine the regression test coverage for a release, you should add the separate \"Requirements Regression Coverage\" widget to the page instead. Requirement Incident Count This section displays a count of the total number of incidents, and the number of open incidents mapped against requirements in the system, sorted by the requirements that have the most open incidents first. This section is useful for determining the parts of the application that have the most instability, as you can look at the requirements that have yielded the greatest number of incidents. Clicking on any of the requirements hyperlinks will take you to the detail page for the requirement in question. You can configure in the settings whether to include requirements with no open incidents, and also how many rows of data to display. Top Open Issues This section displays a breakdown of the top issues logged against the product, in order of decreasing priority. Note that items not given a priority are listed at the top, since critical issues could be lurking in that list, and the product manager will want to immediately review these to assign priorities. Clicking on the issue item hyperlink will take you to the incident details page for the issue in question (see Incident Tracking > Incident Details ). You can configure in the settings whether to use Priority or Severity for the display, and also how many rows of data to display. Risk Summary This section displays a two dimensional matrix of the open risks logged against the product of impact against probability. Combined these two dimensions are reflected in the risks exposure and each differently colored rectangle in the matrix represents one possible exposure. The number of risks that have a particular exposure are shown inside each rectangle as appropriate. Clicking on that number will take you to the risk list page filtered by the relevant exposure*.* Top Open Risks This section displays a breakdown of the top risks logged against the product, in order of decreasing priority. Note that items not given a priority are listed at the top, since critical risks could be lurking in that list, and the product manager will want to immediately review these to assign priorities. Clicking on the risk item hyperlink will take you to the incident details page for the risk in question. You can configure in the settings whether to use Priority or Severity for the display, and also how many rows of data to display. Release Test Summary This widget allows you to quickly ascertain the test execution status of each of the active releases that make up the current product in one snapshot. Each release is displayed together with a graphical display that illustrates the execution status with different colored bars. In addition, if you hover the mouse over the graphical display it will display a tooltip that provides a more detailed description of the number of tests in each status. Each release will display the aggregate status of any test cases directly assigned to itself, together with the test status of any child sprints that are contained within the Release. Clicking on one of the releases will drill you down one level further and display the test execution status for the parent release as well as each of the child sprints separately: Incident Summary This section consists of a summary table that displays the aggregate count of incidents in the system broken-down by priority (on the x-axis) and status (on the y-axis). This allow the product manager to determine how many critical vs. low priority incidents are waiting to be addressed, and how many new items need to be categorized and assigned. Clicking on the \"View Details\" link at the top of the table simply brings up a detail graph that you can customize by selecting the axes. Clicking on the individual values in the cells will display the incident list with the filter set to match the priority and status of the value. By default this summary table displays the total count of all incidents -- regardless of type, however my changing the drop-down list to a specific incident type (e.g. bug, enhancement, issue, etc.), the product manager can filter the summary table to just items of that type. You can also configure in the settings whether to use Priority or Severity for the x-axis Test Execution Status This section consists of a bar graph that displays the aggregated count of test cases in each execution status for the product. Note that this graph does not consider past test-runs when calculating the totals in each status (Passed, Failed, Not Run, etc.), it simply looks at each test-case and uses the last-run status as the best health indicator. Thus if a test case that previously passed, has subsequently failed upon re-execution, it will be considered a failure only. If you position the mouse pointer over any of the five bars, the color of the bar changes slightly and the underlying raw data is displayed as a tooltip, together with the percentage equivalent. Clicking on any of the bars will bring up the product test case list with the appropriate filter applied. In addition to the bar-chart, there is also a display of the total number of test runs recorded for the product, and a list of the five most recent days of recorded test-runs, together with the daily count. Release Task Progress This widget allows you to quickly ascertain the task progress of each of the active releases that make up the current product in one snapshot. Each release is displayed together with a graphical display that illustrates the completion percentage and status with different colored bars. In addition, if you hover the mouse over the graphical display it will display a tooltip that provides a more detailed description of the number of tasks in each status. Each release will display the aggregate progress of any tasks directly assigned to itself, together with the task progress of any child sprints that are contained within the Release. Clicking on one of the releases will drill you down one level further and display the task progress for the parent release as well as each of the child sprints separately: Late Finishing Tasks This section displays the list of any product tasks that have not yet been completed, but whose scheduled end date has already elapsed. A graphical progress bar is included with each task in the grid, so that you can easily see which tasks are nearest completion. Late Starting Tasks This section displays the list of any product tasks that have not yet started, but whose scheduled start date has already elapsed: Each task is listed along with its owner, priority and due-date so that you quickly ascertain how many days late it will be starting, how important it is to the product, and who needs to be contacted to get more information. Requirements Regression Coverage This section consists of a bar graph that displays the aggregated count of requirements test coverage for the product in a similar fashion to the 'Requirements Coverage' widget: However, unlike the 'Requirements Coverage' widget, when you filter the product home by release/sprint, this widget will filter the requirements coverage graph to include all requirements (regardless of release/sprint), but only considering covering test cases that are associated with the selected release/sprint. This is useful when you want to determine the regression requirements test coverage of a specific release (i.e. does running all the tests relevant to this release cover all the necessary requirements, not just new requirements). Test Set Status This section consists of a bar graph that displays the aggregated count of test cases in each execution status for each test set in the product: Therefore if you have the same test cases stored in multiple test sets, then this widget will display the total test case count for all combinations of test set. This is useful if you have the same test cases being executed in different environments -- represented by different test sets -- and you need to make sure that the tests passed successfully in all environments. If you position the mouse pointer over any of the five bars, the color of the bar changes slightly and the underlying raw data is displayed as a tooltip, together with the percentage equivalent. Clicking on any of the bars brings up the product test set list page with the appropriate filter applied. In addition to the bar-chart, there is also a display of (up to) the five most overdue test sets in the product . Incident Aging This section displays the number of days incidents have been left open in the system. The chart is organized as a histogram, with the count of incidents on the y-axis and different age intervals on the x-axis. Incident Test Coverage This section displays a bar-graph that illustrates the execution status of any test cases that previously failed and resulted in the generation of an incident that has subsequently been resolved. This is very useful when a test case was executed in Release 1.0 and an incident was logged. That incident has now been resolved in Release 1.1 (and is in a closed status) but we need to know that the test case that caused the failure has been successfully re-run. Any test cases listed as Blocked, Caution, Not-Run, Not Applicable, or Failed in this graph need to be executed to verify that all resolved bugs in the release have truly been fixed. Task Graphs This widget lets you quickly view the three main graphs used when measuring the progress of tasks in an agile methodology: Task Velocity -- this graph shows the total estimated and actual effort delivered in each product release and/or sprint Task Burnup -- this graph shows the cumulative amount of work outstanding for each release/sprint in the product with separate lines for the estimated, remaining and completed effort. Task Burndown -- this graph shows the remaining work that needs to be done for each release/sprint in the product with separate lines for the estimated, remaining and completed effort. For each of the three graphs you can click on the \"Display Data Grid\" link to display a grid of the underlying data that is represented in the graph and also there are options to save the graph in a variety of different image formats. Tag Cloud This widget lets you see the list of document tags being used in the product: The size of the tag name indicates the relative frequency of its usage in the product. Clicking on a document tag will open up the Document List page with the filter set to the tag you clicked on. This will display a list of related documents that have been tagged with the same tag name. Recent Builds This widget displays a list of the most recent builds that have been performed as part of the current release or sprint: For each build it will display whether the build succeeded or failed, the date the build occurred and the name of the build together with a hyperlink to the build details . Note: If no release or sprint is selected then the widget will not display any data. Requirements Graphs This widget lets you quickly view four different graphs used when measuring the progress of requirements in an agile methodology. They are described in more detail in Reports . Requirement Velocity -- this graph shows the actual velocity delivered in each product release and/or sprint compared to the product average and the rolling average. Requirement Burnup -- this graph shows the cumulative number of story points outstanding for each release/sprint in the product with separate lines for the actual and ideal burnup overlaid on top of a bar-graph that shows the completed story points per release/sprint. Requirement Burndown -- this graph shows the remaining number of story points that needs to be done for each release/sprint in the product with separate lines for the actual and ideal burndown overlaid on top of a bar-graph that shows the completed story points per release/sprint. Requirements Coverage -- this graph shows the number of requirements that have test cases that are passed, failed, blocked, cautioned, not run as well those requirements that do not have any test cases (not covered). Unlike the main Requirements Coverage graph on the home page, this one is segmented by requirement importance. For each of the three graphs you can click on the \"Display Data Grid\" link to display a grid of the underlying data that is represented in the graph and also there are options to save the graph in a variety of different image formats. Test Run Progress This section consists of a chart that displays the last 30 days of test run activity, broken down, for each day, by the test run status. This is a useful chart to quickly track the testing activity of the product -- this is not the same as overall product status. Test Case Cumulative Progress This section consists of a chart that displays the last 30 days of test case executions cumulatively. That means it will display for each day, the total number of test cases executed plus the status from any previous days that have not been changed. Any test cases not executed up to that point will be considered \"not run\" and will appear in the \"not run\" category. For example, if you have 10 test cases created on day 1 you will see 10 test cases \"not run\" on day 1. On day 2, you execute 5 test cases and fail them all, you will now see 5 test cases failed and 5 not run. On day 3, you execute 3 of the previous 5 test cases and pass them. You will now see 3 test cases passed, 2 failed and 5 not run. Source Code Commits This section consists of a chart that displays the last 3 months of code commits to the product (if you are using the source code functionality of the application). Commits are aggregated by week. The chart is color coded by bottom quartile, the middle 50%, and the top quartile of activity. Incident Open Count This section show a bar chart to visualize the breakdown of all open incidents in the product by priority. The chart's bar match the color assigned to that priority. Clicking on the \"View Details\" link at the top of the widget loads a chart builder where you can further refine and filter the chart to meet your needs. All Pending Test Runs This section lists all the test runs that are currently being executed by testers in the product. Until a test case or test set is fully executed, a pending test run entry is stored in the system so that you can continue execution at a later date. Any pending test run can be either deleted or reassigned to another user that is a member of the product by the product manager or test manager. Program Home When you click on either the Program name in the global navigation or the name of the program in the \"My Page\" product list, you will be taken to the homepage of the specific program in question: This page summarizes all of the information regarding the program into a comprehensive, easily digestible form that provides a \"one-stop-shop\" for people interested in understanding the overall status of the group as a whole as well as the relative performance of the different products that make up the group. It contains summary-level metrics for all types of artifact (requirements, test cases, tasks, incidents, etc.) that you can use to drill-down into the appropriate product for more details. You will see a small \"i\" in a circle at the top right of every chart. Hovering or clicking on this will show you information about that chart. In a similar manner to the 'My Page', the Program Home dashboard is initially loaded in 'view mode' which means that the various 'widgets' on the page are displayed with minimum visual clutter (no toolbars or control icons) that makes it easy to scan the items on the page and see the health of the status of the product at a glance. To switch the page to 'edit mode', you should click the button with the cog icon ( ) on the right. Once in 'edit mode', each of the 'widgets' displayed on the program homepage can be minimized by clicking on the arrow icon ( ) in the top-left of the window, or closed by clicking-on the cross icon ( ) in the top-right of the window. In addition, the widgets allow you change their settings by clicking on the settings icon ( ).This allows you to customize your view of the program to reflect the types of information that are relevant to you. If you have closed a widget that you subsequently decide you want to reopen, you can rectify by clicking the \" + Add \" button at the top of the page, and locating the closed item from the list of 'Closed Widgets'. When you load the 'Program Home' for the first time it will consists of the following main elements: Group Overview Requirements Coverage Task Progress Product List Test Execution Status Incident Aging Recent Builds However these are not the only widgets available. If you click on the \"Add/Remove\" items hyperlink it will display the list of any additional widgets that are available: You can add the additional widgets by selecting the appropriate checkbox, choosing the destination location (left side vs. right side) and then click the \" Add \" button. The additional widgets available in the Program Home dashboard are: Top Open Issues Top Open Risks Each of the different widgets listed is described in more detail below: Program Overview This section displays the name of the program, together with a brief description, the web-site that points to any additional information about the program, and the names of the owners of the program. Product List This section lists all the active products that make up the group, together with the name, description, program and date of creation. To view the description of the product, simply position the mouse pointer over the link, and a tooltip window will popup containing the description. Requirements Coverage This section consists of a bar graph that displays the aggregated count of requirements test coverage for the entire program. The Passed, Failed, Blocked, Caution and Not-Run bars indicate the total count of requirements that have tests covering them, allocated across the execution status of the covering tests Under the main bar graph is displayed a table containing each product in the group and a colored bar illustrating the specific requirements coverage distribution for that product. That way you can see both the aggregate coverage and also the relative coverage for the products. You can configure in the widget settings whether you want to see the aggregate bar graph, and/or the product-specific requirements coverage. Task Progress This section consists of a bar graph that displays the aggregated count of tasks by progress category for the entire program. The 'On Schedule', 'Late Finish', 'Late Start' and 'Not Started' bars indicate the total count of tasks that are in that category for all the products in the group. Under the main bar graph is displayed a table containing each product in the group and a colored bar illustrating the specific task progress for that product (using the same coloring convention as the main graph). That way you can see both the aggregate task progress and also the relative progress for each product. You can configure in the widget settings whether you want to see the aggregate bar graph, and/or the product-specific task progress. Test Execution Status This section consists of a bar graph that displays the aggregated count of test cases by execution status for the entire program. The Passed, Failed, Blocked, Caution and Not-Run bars indicate the total count of test cases that are in that category for all the products in the group. Under the main bar graph is displayed a table containing each product in the group and a colored bar illustrating the specific test case execution status for that product (using the same coloring convention as the main graph). That way you can see both the aggregate test status and also the relative status for each product. You can configure in the widget settings whether you want to see the aggregate bar graph, and/or the product-specific test status. Incident Aging This section displays the number of days incidents have been left open in the system. The chart is organized as a histogram, with the count of incidents on the y-axis (for all products in the group) and different age intervals on the x-axis. Under the main bar graph is displayed a table containing each product in the group and a colored bar illustrating the distribution of open incidents by priority for that product. That way you can see both the aggregate aging for the group and also the relative priority of open incidents for each product. You can configure in the widget settings whether you want to see the aggregate aging histogram, and/or the product-specific incident count by priority. Top Open Issues This section displays a breakdown of the top issues logged against any of the products in the group, in order of decreasing priority. Note that items not given a priority are listed at the top, since critical issues could be lurking in that list, and the product manager will want to immediately review these to assign priorities. Clicking on the issue item hyperlink will take you to the incident details page for the issue in question (see Incident Tracking > Incident Details ). You can configure in the settings whether to use Priority or Severity for the display, and also how many rows of data to display. Top Open Risks This section displays a breakdown of the top risks logged against any of the products in the group, in order of decreasing priority. Note that items not given a priority are listed at the top, since critical risks could be lurking in that list, and the product manager will want to immediately review these to assign priorities. Clicking on the risk item hyperlink will take you to the incident details page for the risk in question . You can configure in the settings whether to use Priority or Severity for the display, and also how many rows of data to display. Recent Builds This widget displays a list of the most recent build and its status for each product in the program/program. For each product it will display whether the build succeeded or failed, the date the build occurred and the name of the build together with a hyperlink to the build details . My Profile When you click on the \" My Profile \" button (the top item in the user dropdown) in the global navigation, you will be taken to the page in the system that allows you to view and edit your personal profile: You can change your user information including your first-name, last-name, middle-initial, avatar icon, department and your choice of start-page. Clicking the \" Save \" button will commit the changes, whereas clicking <Cancel> returns you back to either \"Product Home\" or \"My Page\" depending on whether you have a product currently selected or not. If you want to be able to subscribe to RSS feeds of the information assigned to you in the \"My Page\", make sure that the \"Enable RSS Feeds\" switch is set to \"Yes\" and an RSS token has been generated underneath. You can change your start page to be any of the following: My Page -- When you first log-in, you will be taken to your \"My Page\" dashboard Last Opened Product -- When you first login-in, you will be taken to the home page for the product you last had open Last Opened Program - When you first login-in, you will be taken to the home page for the program you last had open Change Password In addition to being able to update your user information, you can optionally change your password at the same time. To change your password, on the Change Password tab fill in the three boxes with your current password, and your new password repeated for verification. Then when the \" Save \" button is clicked, the system will update your password, otherwise you will simply get a warning message indicating what needs to be corrected. You can also change the current password retrieval question and answer by entering in your current password (for security reasons) as well as the new password question and answer. Note: If your SpiraTest user profile is linked to an account stored in an external LDAP server, you may find the change password option is disabled. This is because the system uses the password held in the external server. To change the password in this case, please contact your system administrator who will be able to help you change the password in your LDAP environment. Email Preferences Here you can configure the email address that the application will send notifications to, and whether or not you want to receive email notifications. If the Enable Notifications cannot be changed, it means that the system is either not configured to send out notifications, or the administrator has disabled user's ability to opt out of notifications being sent. LDAP Settings This tab will show configured LDAP options for your account. At this time, no configurable options are on this tab, it is for reference only. Regional Settings This tab will display the current culture and timezone associated with your profile: By default all profiles will be set to use the application's default culture and timezone. This means that the language, number formats and timezone used in the application will be the ones decided by the person who installed the system. However there are cases where you want to use a different language, timezone or number format (for example, a German employee working in the German office of a French company might want to use the German culture instead of French). You can change the culture and/or timezone to any of the options listed in the dropdown list. Note: The system will only be installed with a certain number of language packs, so in some cases a selected culture will only change the number formats and not the languages displayed. Actions This tab displays the list of recent actions that you have performed in the system (across all products): You can search and filter the grid to find changes by product, change date range, artifact type and type of change (added, deleted, or modified). My Timecard When you click on My Page > My Timecard the system will display a timecard that allows you to enter the effort worked on incidents and tasks currently assigned to you (across all your products): The system will only include products that have time-tracking enabled for incidents and tasks, so if some of your assigned incidents or tasks are missing, please check with the product owner of the products affected to have them enable time-tracking. Each task or incident will be displayed along with its priority, severity, start-date, end-date, product name effort remaining and effort expended to date. For each item you can then indicate the additional actual effort performed (which will be added to the \"actual effort\") and modify the amount of hours remaining. Once you are satisfied, click [Submit Timecard] to commit the changes.","title":"User/Product Management"},{"location":"Spira-User-Manual/User-Product-Management/#userproduct-management","text":"This section outlines how you can log into SpiraPlan\u00ae, view your personalized home-page that lists the key tasks that you need to focus on, and drill-down into each of your assigned products in a single dashboard view. In addition to your personal homepage, each of your products has its own dashboard that depicts the overall product health and status in a single comprehensive view.","title":"User/Product Management"},{"location":"Spira-User-Manual/User-Product-Management/#login-screen","text":"Upon entering the SpiraPlan\u00ae URL provided by your system administrator into your browser, you will see the following login screen: You need to enter your given user-name and password into the system in the appropriate boxes then click the Log In button to gain access to the application. Normally you only remain logged in to the application whilst in active use, and you will be asked to log-in again after either closing the browser or 20 minutes of inactivity. To prevent this, and to stay logged-in to SpiraPlan\u00ae regardless of browser window closing or inactivity, select the \"Keep me logged in\" check-box before clicking the Log In button. Note that this setting is specific to each individual computer you are logging-in from, and that it will be reset when you explicitly log-out with the log-out link . If for any reason you are unable to login with the provided username/password combination, and error message will be displayed. If you cannot remember the correct log-in information, click on the \"Forgot your password\" link and your password will be emailed to the email address currently on file. The reset password screen is illustrated below: If you don't have a SpiraPlan\u00ae account setup, clicking on the \"Register for an account?\" link will take you to a form that you need to fill-in, which will be forwarded to the system administrator, who will need to approve your account before it is active in the system. This screen is illustrated below: In addition, the system will prevent you logging on to the system with the same username at the same time on multiple computers. This is to avoid the system getting confused by a user trying to make contradictory actions at the same time. If for any reason you do try and log in to the system when you already have an active session in progress, you will see the following screen: You have two choices: you can either click the \"Log Out\" link and try logging in as a different user, or if you want to log-off any other active sessions (e.g. you closed the browser and the session is still listed as active), simply click the \"Sign Off The Other Locations\" link, and you will be logged in to the application. Since SpiraPlan\u00ae is licensed to organizations for a specific number of concurrent users -- unless they have purchased an unlimited Enterprise license -- only a fixed number of users may be active at the same time. So, for example if an organization has a five (5) concurrent user license and a sixth user tries to log-in, they will be presented with the following screen: This means that one of the other users who is already logged-in, needs to click the \"Log Out\" button so that one of the concurrent licenses is freed for your use. If the user has logged out by closing the browser, the system may not have detected the logout. In this case, the other user needs to log back in, and then click the \"Log Out\" link.","title":"Login Screen"},{"location":"Spira-User-Manual/User-Product-Management/#my-page","text":"Once you have successfully logged in, you will initially be taken to your personalized home page called \"My Page\". Please note, that the very first time you log in you will be asked if you want to take a quick orientation tour of the application (which will look similar to the screenshot below). Note that once you have successfully logged-in and chosen a product, SpiraPlan\u00ae remembers this selection, and on subsequent log-ins will automatically select that product, and highlight it for you in the \"My Products\" list . Your homepage contains all the information relevant to you---consolidated onto a single page for you to take immediate action. By default the page lists the information for all products that you are a member of. However, you can choose to filter by the current product, to get a more focused list. Next to some of the widgets is an RSS icon ( ), this allows you to subscribe to the information as a Really Simple Syndication (RSS) newsfeed. This can be useful if you want to be notified about recently assigned items without having to setup email notifications or being logged into SpiraPlan continuously. If you don't see an RSS icon next to the widgets on your My Page it means that you have not enabled RSS newsfeeds in your profile. For more details on configuring your RSS preferences, please refer to My Profile . Initially the page is loaded in 'view mode' which means that the various 'widgets' on the page are displayed with minimum visual clutter (no toolbars or control icons) that makes it easy to scan the items on the page and see what work has been assigned. To switch the page to 'edit mode', click on the button with the cog icon ( ) on the right: In this mode, each of the 'widgets' displayed on the page can be minimized by clicking on the arrow icon ( ) in the top-left of the window, or closed by clicking-on the cross icon ( ) in the top-right of the window. This allows you to customize your page to reflect the types of information that are relevant. If you have closed a widget that you subsequently decide you want to reopen, you can add them back to the page display by clicking the \"Add Items\" button at the top of the page. In addition, the various widgets have a \"settings\" icon ( ) that allows you to customize how that widget appears. The settings are specific to each widget and in general allow you to specify how many rows of data are displayed and what columns are displayed. You can move and reposition the various widgets on the dashboard by clicking the mouse on the title bar of the widget you want to move and dragging it to the desired location. This change will be remembered when you next login to the system. Once you have the dashboard configured the way you like it, you can click \"Return to Normal View\" to switch back to 'view mode'. When you load your 'My Page' for the first time it will consists of the following main elements: My Products My Saved Searches My Assigned Requirements My Assigned Test Cases My Assigned Test Sets My Pending Test Runs My Assigned Incidents My Detected Incidents My Assigned Tasks Quick Launch My Contacts However these are not the only widgets available. If you click on the \"Add/Remove\" items hyperlink it will display the list of any additional widgets that are available: You can add the additional widgets by selecting the appropriate checkbox, choosing the destination location (left side vs. right side) and then click the [Add] button. The additional widgets available in the My Page are: My Saved Reports My Subscribed Artifacts My News Feeds","title":"My Page"},{"location":"Spira-User-Manual/User-Product-Management/#my-products","text":"This section lists all the products you have been given access to, together with the name, description, program and date of creation. To view the description of the product, simply position the mouse pointer over the link, and a tooltip window will popup containing the description. When you initially view the page, all of the products will be shown as links. When you click on a product to view, you will be taken to that product's home-page, and that product will be set as the current product. That product will now appear highlighted in your home-page (see above screen-shot). To change the currently selected product, simply click on the link of another product name. You can always change your current product by clicking on the drop-down-list of products displayed on the global navigation bar to the right of the \"Search\" box. If you are a program member, the name of the program will also be displayed as a hyperlink. In which case, clicking on the program hyperlink will take you to the Program dashboard .","title":"My Products"},{"location":"Spira-User-Manual/User-Product-Management/#my-saved-searches","text":"This section lists any filters/searches you have saved from the various artifact list screens throughout the application. This allows you to store specific combinations of searches that you need to perform on a regular basis (e.g. display all newly logged incidents, display all requirements that are completed but have no test coverage). The name of the saved search is displayed along with an icon that depicts which artifact it's for and the product it refers to. Clicking on the name of the saved search will take you to the appropriate screen in the product and set the search parameters accordingly. Clicking the \"Delete\" button next to the saved search will delete it. Clicking on the RSS icon will allow you to subscribe to the specific search so that it will be displayed in your RSS newsreader. This allows you to setup customized lists of information that can be displayed outside of SpiraPlan.","title":"My Saved Searches"},{"location":"Spira-User-Manual/User-Product-Management/#my-assigned-requirements","text":"This section lists all the requirements you have been made owner of, across all the different products you are a member of. This typically means that the product manager has assigned you to be responsible for either developing the supporting test cases or decomposing the requirement into its detailed work breakdown structure of product tasks. The requirement name is displayed, along with its status (requested, accepted, in-progress, etc.) and its importance.","title":"My Assigned Requirements"},{"location":"Spira-User-Manual/User-Product-Management/#my-assigned-test-cases","text":"This section lists all the test cases you have been made owner of, across all the different products you are a member of. This typically means that the product manager has assigned you to be responsible for executing the assigned test scripts. To aid in this process, the script name is displayed, along with its last execution status (failed, passed or not-run) and date of last execution. This enables you to see how recently the tests have been run, and whether they need to be re-run. If you click on the test-name hyperlink, you will be taken to the details page for this test-case and the product that the test-case belongs to will be made your current product. If you click on the play button to its right you will launch the test-case in the test-case execution module so that you can easily retest failed cases.","title":"My Assigned Test Cases"},{"location":"Spira-User-Manual/User-Product-Management/#my-assigned-test-sets","text":"This section lists all the test sets (groups of test cases) you have been made owner of, across all the different products you are a member of. This typically means that the product manager has assigned you to be responsible for executing the test cases contained within the test set against a specified release of the system under test. To aid in this process, the test set name is displayed, along with its status, the product it belongs to, the number of remaining test cases to be executed, and the date by which all the tests need to have been run. If you click on the test-set name hyperlink, you will be taken to the details page for this test-set and the product that the test-set belongs to will be made your current product. If you click on the play button to its right you will launch the test-cases contained within the test-set in the test-case execution module so that you can easily carry out your assigned testing task.","title":"My Assigned Test Sets"},{"location":"Spira-User-Manual/User-Product-Management/#my-pending-test-runs","text":"This section lists any test runs that you started executing in the test case module but haven't yet completed. Until a test case or test set is fully executed, a pending test run entry is stored in the system so that you can continue execution at a later date. Any pending test run can be either deleted or resumed by clicking on the appropriate button. In addition, there is the option to reassign the test run to another user that is a member of the product.","title":"My Pending Test Runs"},{"location":"Spira-User-Manual/User-Product-Management/#my-assigned-tasks","text":"This section lists all the product tasks that you have been made the owner of across all the different products you are a member of. This typically means that the manager of the product in question has assigned development tasks to you that need to be completed so that a release can be completed and/or a requirement can be fulfilled. The tasks are listed in ascending date order so that the items with the oldest due-dates are displayed first. In addition, each task is displayed with a progress indicator that graphically illustrates its completion against schedule. See Task Tracking -- task management for details of the different progress indicators. Clicking on the task name hyperlink will take you to the task details page. This page will describe the task in more detail, illustrate which requirement and release it is associated with, and also allow you to view the change log of actions that have been performed on it.","title":"My Assigned Tasks"},{"location":"Spira-User-Manual/User-Product-Management/#my-assigned-incidents","text":"This section lists all the open incidents you are the owner of, across all the different products you are a member of. This typically means that the product manager has assigned you to be responsible for resolving the incident. In the case of a bug, this can mean actually fixing the problem, whereas for other incident types (e.g. training item) it may mean simply documenting a workaround. In either event, this section highlights the open incidents you need to manage, ranked by importance/priority and categorized by type, with the open date displayed to give you a sense of the age of the incident. Clicking on the incident name hyperlink takes you to the incident details page ) that describes the incident in more detail, and allows you to add new information or change its status to indicate actions taken. In addition, if you position the mouse pointer over the name of the incident, a more detailed description is displayed as a \"tooltip\".","title":"My Assigned Incidents"},{"location":"Spira-User-Manual/User-Product-Management/#my-detected-incidents","text":"This section lists all the open incidents that you have detected, across all the different products you are a member of. These incidents are not necessarily ones that you need to take an active role in resolving, but since you were the originator -- either by executing a test case or just logging a standalone incident -- you can watch them to make sure that they are resolved in a timely manner. Clicking on the incident name hyperlink takes you to the incident details page ) that describes the incident in more detail, and allows you to add new information or change its status to indicate actions taken. In addition, if you position the mouse pointer over the name of the incident, a more detailed description is displayed as a \"tooltip\".","title":"My Detected Incidents"},{"location":"Spira-User-Manual/User-Product-Management/#quick-launch","text":"This widget allows users to quickly record a new incident in any of the products that they belong to. It's a shortcut that avoids having to first select a product, go to Tracking > Incidents and then click \"New Incident\". Instead you simply choose the product from the dropdown list and click the arrow icon to bring up the new incident creation screen.","title":"Quick Launch"},{"location":"Spira-User-Manual/User-Product-Management/#my-contacts","text":"This widget displays a list of any other users in the system that you have listed as a personal contact: Each user is displayed along with their graphical avatar, department and a colored indicator that lets you know if they are online or not. If they are online you can then send them an instant message (which will be described later in Global Navigation . To remove an existing contact, just click on the 'Remove' button. To add a new user, simply locate them in the Tracking > Resources page and then use the <Add As Contact> button.","title":"My Contacts"},{"location":"Spira-User-Manual/User-Product-Management/#my-saved-reports","text":"This section lists any reports you have saved from the reports center. This allows you to store specific combinations of report elements, format, filters and sorts (see the section on Reporting for more details on how to configure a report) for reports that you need to run on a regular basis:","title":"My Saved Reports"},{"location":"Spira-User-Manual/User-Product-Management/#my-subscribed-artifacts","text":"This widget displays a list of all the artifacts in the system that you have subscribed to (by clicking on the Subscribe icon on the item). You can display the item by simply clicking on the hyperlink. In addition, if changes are made to any of the artifacts an email notification will be sent to you. You can click on the \"Unsubscribe\" button to remove the item from this list.","title":"My Subscribed Artifacts"},{"location":"Spira-User-Manual/User-Product-Management/#my-news-feeds","text":"This widget allows you to subscribe to an external newsfeed and have the results be displayed inside SpiraPlan. By default it will be set to the newsfeed from the Inflectra website that displays a list of recent company and product announcements. You can add multiple instances of the widget to the dashboard, allowing you to read multiple news sources at once. Typical uses for this widget are to add news from product management and testing news sites/blogs or to add information from other tools in your organization that can display their data in RSS format.","title":"My News Feeds"},{"location":"Spira-User-Manual/User-Product-Management/#my-assigned-risks-spiraplan-only","text":"This section lists all the risks you are the owner of across all the different products you are a member of. Clicking on the risk name hyperlink will take you to the risk details page. This page will describe the risk in more detail.","title":"My Assigned Risks (SpiraPlan only)"},{"location":"Spira-User-Manual/User-Product-Management/#my-assigned-documents","text":"This section lists all the documents you are the owner of across all the different products you are a member of. Clicking on the risk name hyperlink will take you to the documents details page. This page will describe the documents in more detail.","title":"My Assigned Documents"},{"location":"Spira-User-Manual/User-Product-Management/#global-navigation","text":"Regardless of the page you are on, SpiraPlan\u00ae will always display the global navigation bar, consisting of a number of different sections, depending on the user and where they are in the system. Under some of the icons and headings are secondary menu options that display when you click on the section in question. The sections and menus available in the global navigation are show below: Product Icon (shown as SpiraPlan above): this will always take you to \"My Page\" as discussed above Workspace Icon : this shows you the type of workspace you are on, for example a program or a product . Clicking it will take you to that workspace's homepage Workspace Selector : this shows the name of the current workspace. Clicking it will show all your available workspaces and clicking any of these will change you to that workspace Artifacts Selector : when visible, this shows the name of the current artifact for the current workspace. Clicking it will show all your available artifacts and clicking any of these will change you to that artifacts main page. For product workspaces these artifacts are grouped as follows: Planning Requirements Planning Board Releases Documents Testing Test Cases Test Sets Test Runs Automation Hosts Tracking Incidents Tasks Risks Resources Source Code Reporting User Profile Icon My Profile My Timecard Documentation Show on boarding tours Keyboard shortcuts Log Out Administration Icon : This is visible if you are a system administrator, or if you are an owner/administrator of the current workspace or its template. Clicking the icon will display the relevant administration menu. This is described in the separate SpiraPlan Administration Guide .","title":"Global Navigation"},{"location":"Spira-User-Manual/User-Product-Management/#global-search","text":"SpiraPlan includes a global search that can be used to search across product and artifact type for items that include the entered keywords in either the name or description field: You can search for individual keywords by simply entering them in the search box and clicking the arrow button on the right. You can search for phrases by enclosing the words in double quotes. You can also search for a specific artifact by its unique two-letter prefix and ID number . For example, searching on book name will find any artifacts that include either of the two words book and name in the name or description. Searching on \"book name\" will only return items that have that exact phrase in either the name or description. Searching on TC2 will display just the Test Case with ID=2: When you get a list of search results, you can choose to order by relevance (the default) or by most recent. Searching by relevance finds the artifacts that have the greatest match with the keywords: The search by date is useful when you want to find recent items that match the search keywords: In addition, you can filter the results by artifact type and/or product to narrow down the search: For example, if you filter by requirement, the list of results will be narrowed accordingy:","title":"Global Search"},{"location":"Spira-User-Manual/User-Product-Management/#log-out","text":"Clicking on the \"Log Out\" link will immediately log you out of your current session and return you to the login page . If you had set the \"Keep Me Logged In\" option during your previous login, that setting will be reset; so if you want to avoid having to keep logging-in, you'll need to re-check that box during your next log-in.","title":"Log Out"},{"location":"Spira-User-Manual/User-Product-Management/#documentation","text":"Clicking on this link on any page will bring up the online version of this manual shown below: Clicking on any of the triangles expand links in the left hand table of contents will open up the detailed list of topics for each of the main areas of the system. In each area, clicking on one of the individual links will open the appropriate section in the help manual. By default, the reading-pane will open to the help item that is most closely related to the screen you happened to be on when you clicked the \"Help\" link. You can search the index by using the \"Index\" tab. If you want to share a specific help page with a colleague in your organization, send them the url from the address bar.","title":"Documentation"},{"location":"Spira-User-Manual/User-Product-Management/#choosing-a-workspace","text":"Workspaces in SpiraPlan set out the scope for the data you want to view and interact with. The most common workspace type is a product: A product contains all the requirements, sprints, defects, and tests associated to it. Programs are groups of products, where you can look across all the products in that program at once Choosing, for example, a Product or Program from the list of your assigned workspaces in the drop-down-menu allows you to quickly and easily jump between workspace regardless of the page you happen to be on. When you choose a new workspace, you will be taken to the same page in the selected workspace (assuming that you have permissions to view that page). Any workspace with a little cog at the end is a workspace that you are an owner/admin of. You can use CTRL+click to open the new product in a separate browser tab:","title":"Choosing a Workspace"},{"location":"Spira-User-Manual/User-Product-Management/#show-onboarding-tours","text":"When you first login to SpiraTeam, the system will show you a welcome page, together with a tour that walks you through the key features of the application. If you would like to see that again, you need to click on the \"Show Onboarding Tours\" option, under the user profile menu. SpiraPlan will then display the onboarding tour main dialog again: You can click 'No Thanks to dismiss it, or 'Yes Please' to start the tour.","title":"Show Onboarding Tours"},{"location":"Spira-User-Manual/User-Product-Management/#instant-messenger","text":"The Spira instant messenger is available in both SpiraTeam\u00ae and SpiraPlan\u00ae and allows you to send short messages instantaneously to other users in the system. You can see the status of other users by looking for the small green circle next to the list of users in the 'My Contacts' widget as well as the various user fields in the system: When a user is online and available to communicate with, the small circle will be filled-in green. If you click on the green circle, it will open up the instant messenger window for that user: You can then enter in a message to the other user, which will then cause a conversation window to open inside their web browser with your message displayed. The other user can then enter in their responses, allowing the two users to have a real-time conversation: To make it easier to see what's new, all unread messages are displayed in a message box with a darker shade. In addition, the user's avatar image is displayed at the start of each message group. If the message window appears on a SpiraPlan\u00ae window that contains a specific artifact (e.g. a requirement, test case, task, etc.) there will be the option to 'Post as Comments'. If you click this option, any messages selected with a checkbox will be automatically posted to the current artifact as comments. This is useful if you have a conversation related to a specific item and you want to have the outcome permanently recorded as part of the audit trail. Otherwise, instant messages will be automatically purged from the system after 90 days.","title":"Instant Messenger"},{"location":"Spira-User-Manual/User-Product-Management/#product-home","text":"When you click on either the \"Product Home\" tab or the name of the product in the \"My Page\" product list, you will be taken to the homepage of the specific product in question: This page summarizes all of the information regarding the product into a comprehensive, easily digestible form that provides a \"one-stop-shop\" for people interested in understanding the overall status of the product at a glance. It contains summary-level information for all types of artifact (requirements, test cases, incidents, etc.) that you can use to drill-down into the appropriate section of the application. You will see a small \"i\" in a circle at the top right of every chart. Hovering or clicking on this will show you information about that chart. In addition to viewing the product home page, you can choose to filter by a specific release, to get the homepage for just that release (and any child sprints). Just like the 'My Page', the Product Home dashboard is initially loaded in 'view mode' with pre-configured set of widgets. The Product Home also offers 3 versions you can quickly switch between. While each of these can be customized as you want, by default they are designed to help different types of product member -- be they managers, testers, or developers. To download an image of the entire dashboard click the 'picture' button beneath the currently selected view. To switch the page to 'edit mode', you should click on the button with the cog icon ( ) below the currently selected Product Home view. Once in 'edit mode', each of the 'widgets' displayed on the product homepage can be minimized by clicking on the arrow icon ( ) in the top-left of the window, or closed by clicking-on the cross icon ( ) in the top-right of the window. In addition, the widgets allow you change their settings by clicking on the settings icon ( ).This allows you to customize your view of the product to reflect the types of information that are relevant to you. If you have closed a widget that you subsequently decide you want to reopen, you can rectify by clicking the \" Add Items \" button at the top of the page, and locating the closed item from the list of 'Closed Widgets'. When you load your 'Product Home' for the first time it will default to the \"General\" view. The following table shows which widgets are displayed on the different views of the 'Product Home': Widget Name General Development Testing Product Overview Y Y Y Activity Stream Y Y Y Shared Searches Y Requirements Summary Y Y Y Requirements Coverage Y Y Release Task Progress Y Y Requirements Graphs Y Y Late Finishing Tasks Y Y Task Graphs Y Y Top Open Issues Y Y Risk Summary Y Top Open Risks Y Test Execution Status Y Y Release Test Summary Y Y Incident Summary Y Y Y Incident Open Count Y Y Y Requirement Incident Count Y Y Y Requirements Regression Coverage Y Test Set Status Y Incident Aging Y Incident Test Coverage Tag Cloud Recent Builds Y Late Starting Tasks Y All Pending Test Runs Y Source Code Commits Y Test Run Progress Y Test Case Progress By Day Y Please note that different widgets are shown by default for the \"Developer\" and for the \"Tester\" views. If you click on the \" + Add \" items button it will display the list of any additional widgets that are available for that view. Below is what this looks like for the 'General' view: You can add the additional widgets by selecting the appropriate checkbox, choosing the destination location (left side vs. right side) and then click the \" Add \" button. Each of the different widgets listed is described in more detail below:","title":"Product Home"},{"location":"Spira-User-Manual/User-Product-Management/#product-overview","text":"This section displays the name of the product, together with a brief description, the web-site that points to any additional information about the product, and the names of the owners of the product.","title":"Product Overview"},{"location":"Spira-User-Manual/User-Product-Management/#shared-searches","text":"This section lists any filters/searches have been saved from the various artifact list screens throughout the application and marked as shared filters . This allows users to store specific combinations of searches that the product team needs to perform on a regular basis (e.g. display all newly logged incidents, display all requirements that are completed but have no test coverage). The name of the saved search is displayed along with an icon that depicts which artifact it's for and the person who created it. Clicking on the name of the saved search will take you to the appropriate screen in the product and set the search parameters accordingly. If you are the creator of the saved search, clicking the \" Delete \" button next to the saved search will delete it. Clicking on the RSS icon will allow you to subscribe to the specific search so that it will be displayed in your RSS newsreader. This allows you to setup customized lists of information that can be displayed outside of SpiraPlan.","title":"Shared Searches"},{"location":"Spira-User-Manual/User-Product-Management/#requirements-summary","text":"This section consists of a summary table that displays the aggregate count of requirements in the system broken-down by importance (on the x-axis) and status (on the y-axis). This allows the product manager to determine how many critical vs. low priority enhancements are waiting to be implemented, vs. actually being implemented. In addition, it makes a distinction between those requirements simply requested and those actually planned for implementation, so the product manager can see what the backlog is between the customer's demands, and the plan in place. Clicking on the \" View Details \" button at the top of the table simply brings up a detail graph that you can customize by selecting the axes. Clicking on the individual values in the cells will display the requirements list with the filter set to match the importance and status of the value.","title":"Requirements Summary"},{"location":"Spira-User-Manual/User-Product-Management/#requirements-coverage","text":"This section consists of a bar graph that displays the aggregated count of requirements test coverage for the product. The Passed, Failed, Blocked, Caution and Not-Run bars indicate the total count of requirements that have tests covering them, allocated across the execution status of the covering tests. For example, if a requirement is covered by four tests , two that have passed, one that has failed and one that has not yet been run, the counts would be passed = 0.5, failed = 0.25 and not-run 0.25. These fractional quantities are then summed across all the requirements to give the execution status breakdown of the covered requirements. In addition to the five statuses for the covered requirements, the sixth (\"Not Covered\") bar depicts the total number of requirements that have no tests covering them, putting the five other bars into perspective. Typically a product is in good health if the \"Not Covered\" bar is zero, and the count of \"Passed\" requirements is greater than \"Failed\", \"Caution\" or \"Not Run\". The greatest risk lies with the \"Blocked\", \"Not Covered\" and \"Not Run\" status codes, since the severity/quantity of any bugs lurking within is not yet fully known. If you position the mouse pointer over any of the four bars, the color of the bar changes slightly and the underlying raw data is displayed as a tooltip, together with the percentage equivalent. Clicking on the any of the bars in the chart will take you to the requirements list page with the corresponding filters set. When you filter the product home by release/sprint, this widget will filter the requirements coverage graph to only include requirements that are specifically mapped to the selected release/sprint . This is useful when you want to determine the test coverage of new requirements that are being added to the specific release/sprint. If instead you want to determine the regression test coverage for a release, you should add the separate \"Requirements Regression Coverage\" widget to the page instead.","title":"Requirements Coverage"},{"location":"Spira-User-Manual/User-Product-Management/#requirement-incident-count","text":"This section displays a count of the total number of incidents, and the number of open incidents mapped against requirements in the system, sorted by the requirements that have the most open incidents first. This section is useful for determining the parts of the application that have the most instability, as you can look at the requirements that have yielded the greatest number of incidents. Clicking on any of the requirements hyperlinks will take you to the detail page for the requirement in question. You can configure in the settings whether to include requirements with no open incidents, and also how many rows of data to display.","title":"Requirement Incident Count"},{"location":"Spira-User-Manual/User-Product-Management/#top-open-issues","text":"This section displays a breakdown of the top issues logged against the product, in order of decreasing priority. Note that items not given a priority are listed at the top, since critical issues could be lurking in that list, and the product manager will want to immediately review these to assign priorities. Clicking on the issue item hyperlink will take you to the incident details page for the issue in question (see Incident Tracking > Incident Details ). You can configure in the settings whether to use Priority or Severity for the display, and also how many rows of data to display.","title":"Top Open Issues"},{"location":"Spira-User-Manual/User-Product-Management/#risk-summary","text":"This section displays a two dimensional matrix of the open risks logged against the product of impact against probability. Combined these two dimensions are reflected in the risks exposure and each differently colored rectangle in the matrix represents one possible exposure. The number of risks that have a particular exposure are shown inside each rectangle as appropriate. Clicking on that number will take you to the risk list page filtered by the relevant exposure*.*","title":"Risk Summary"},{"location":"Spira-User-Manual/User-Product-Management/#top-open-risks","text":"This section displays a breakdown of the top risks logged against the product, in order of decreasing priority. Note that items not given a priority are listed at the top, since critical risks could be lurking in that list, and the product manager will want to immediately review these to assign priorities. Clicking on the risk item hyperlink will take you to the incident details page for the risk in question. You can configure in the settings whether to use Priority or Severity for the display, and also how many rows of data to display.","title":"Top Open Risks"},{"location":"Spira-User-Manual/User-Product-Management/#release-test-summary","text":"This widget allows you to quickly ascertain the test execution status of each of the active releases that make up the current product in one snapshot. Each release is displayed together with a graphical display that illustrates the execution status with different colored bars. In addition, if you hover the mouse over the graphical display it will display a tooltip that provides a more detailed description of the number of tests in each status. Each release will display the aggregate status of any test cases directly assigned to itself, together with the test status of any child sprints that are contained within the Release. Clicking on one of the releases will drill you down one level further and display the test execution status for the parent release as well as each of the child sprints separately:","title":"Release Test Summary"},{"location":"Spira-User-Manual/User-Product-Management/#incident-summary","text":"This section consists of a summary table that displays the aggregate count of incidents in the system broken-down by priority (on the x-axis) and status (on the y-axis). This allow the product manager to determine how many critical vs. low priority incidents are waiting to be addressed, and how many new items need to be categorized and assigned. Clicking on the \"View Details\" link at the top of the table simply brings up a detail graph that you can customize by selecting the axes. Clicking on the individual values in the cells will display the incident list with the filter set to match the priority and status of the value. By default this summary table displays the total count of all incidents -- regardless of type, however my changing the drop-down list to a specific incident type (e.g. bug, enhancement, issue, etc.), the product manager can filter the summary table to just items of that type. You can also configure in the settings whether to use Priority or Severity for the x-axis","title":"Incident Summary"},{"location":"Spira-User-Manual/User-Product-Management/#test-execution-status","text":"This section consists of a bar graph that displays the aggregated count of test cases in each execution status for the product. Note that this graph does not consider past test-runs when calculating the totals in each status (Passed, Failed, Not Run, etc.), it simply looks at each test-case and uses the last-run status as the best health indicator. Thus if a test case that previously passed, has subsequently failed upon re-execution, it will be considered a failure only. If you position the mouse pointer over any of the five bars, the color of the bar changes slightly and the underlying raw data is displayed as a tooltip, together with the percentage equivalent. Clicking on any of the bars will bring up the product test case list with the appropriate filter applied. In addition to the bar-chart, there is also a display of the total number of test runs recorded for the product, and a list of the five most recent days of recorded test-runs, together with the daily count.","title":"Test Execution Status"},{"location":"Spira-User-Manual/User-Product-Management/#release-task-progress","text":"This widget allows you to quickly ascertain the task progress of each of the active releases that make up the current product in one snapshot. Each release is displayed together with a graphical display that illustrates the completion percentage and status with different colored bars. In addition, if you hover the mouse over the graphical display it will display a tooltip that provides a more detailed description of the number of tasks in each status. Each release will display the aggregate progress of any tasks directly assigned to itself, together with the task progress of any child sprints that are contained within the Release. Clicking on one of the releases will drill you down one level further and display the task progress for the parent release as well as each of the child sprints separately:","title":"Release Task Progress"},{"location":"Spira-User-Manual/User-Product-Management/#late-finishing-tasks","text":"This section displays the list of any product tasks that have not yet been completed, but whose scheduled end date has already elapsed. A graphical progress bar is included with each task in the grid, so that you can easily see which tasks are nearest completion.","title":"Late Finishing Tasks"},{"location":"Spira-User-Manual/User-Product-Management/#late-starting-tasks","text":"This section displays the list of any product tasks that have not yet started, but whose scheduled start date has already elapsed: Each task is listed along with its owner, priority and due-date so that you quickly ascertain how many days late it will be starting, how important it is to the product, and who needs to be contacted to get more information.","title":"Late Starting Tasks"},{"location":"Spira-User-Manual/User-Product-Management/#requirements-regression-coverage","text":"This section consists of a bar graph that displays the aggregated count of requirements test coverage for the product in a similar fashion to the 'Requirements Coverage' widget: However, unlike the 'Requirements Coverage' widget, when you filter the product home by release/sprint, this widget will filter the requirements coverage graph to include all requirements (regardless of release/sprint), but only considering covering test cases that are associated with the selected release/sprint. This is useful when you want to determine the regression requirements test coverage of a specific release (i.e. does running all the tests relevant to this release cover all the necessary requirements, not just new requirements).","title":"Requirements Regression Coverage"},{"location":"Spira-User-Manual/User-Product-Management/#test-set-status","text":"This section consists of a bar graph that displays the aggregated count of test cases in each execution status for each test set in the product: Therefore if you have the same test cases stored in multiple test sets, then this widget will display the total test case count for all combinations of test set. This is useful if you have the same test cases being executed in different environments -- represented by different test sets -- and you need to make sure that the tests passed successfully in all environments. If you position the mouse pointer over any of the five bars, the color of the bar changes slightly and the underlying raw data is displayed as a tooltip, together with the percentage equivalent. Clicking on any of the bars brings up the product test set list page with the appropriate filter applied. In addition to the bar-chart, there is also a display of (up to) the five most overdue test sets in the product .","title":"Test Set Status"},{"location":"Spira-User-Manual/User-Product-Management/#incident-aging","text":"This section displays the number of days incidents have been left open in the system. The chart is organized as a histogram, with the count of incidents on the y-axis and different age intervals on the x-axis.","title":"Incident Aging"},{"location":"Spira-User-Manual/User-Product-Management/#incident-test-coverage","text":"This section displays a bar-graph that illustrates the execution status of any test cases that previously failed and resulted in the generation of an incident that has subsequently been resolved. This is very useful when a test case was executed in Release 1.0 and an incident was logged. That incident has now been resolved in Release 1.1 (and is in a closed status) but we need to know that the test case that caused the failure has been successfully re-run. Any test cases listed as Blocked, Caution, Not-Run, Not Applicable, or Failed in this graph need to be executed to verify that all resolved bugs in the release have truly been fixed.","title":"Incident Test Coverage"},{"location":"Spira-User-Manual/User-Product-Management/#task-graphs","text":"This widget lets you quickly view the three main graphs used when measuring the progress of tasks in an agile methodology: Task Velocity -- this graph shows the total estimated and actual effort delivered in each product release and/or sprint Task Burnup -- this graph shows the cumulative amount of work outstanding for each release/sprint in the product with separate lines for the estimated, remaining and completed effort. Task Burndown -- this graph shows the remaining work that needs to be done for each release/sprint in the product with separate lines for the estimated, remaining and completed effort. For each of the three graphs you can click on the \"Display Data Grid\" link to display a grid of the underlying data that is represented in the graph and also there are options to save the graph in a variety of different image formats.","title":"Task Graphs"},{"location":"Spira-User-Manual/User-Product-Management/#tag-cloud","text":"This widget lets you see the list of document tags being used in the product: The size of the tag name indicates the relative frequency of its usage in the product. Clicking on a document tag will open up the Document List page with the filter set to the tag you clicked on. This will display a list of related documents that have been tagged with the same tag name.","title":"Tag Cloud"},{"location":"Spira-User-Manual/User-Product-Management/#recent-builds","text":"This widget displays a list of the most recent builds that have been performed as part of the current release or sprint: For each build it will display whether the build succeeded or failed, the date the build occurred and the name of the build together with a hyperlink to the build details . Note: If no release or sprint is selected then the widget will not display any data.","title":"Recent Builds"},{"location":"Spira-User-Manual/User-Product-Management/#requirements-graphs","text":"This widget lets you quickly view four different graphs used when measuring the progress of requirements in an agile methodology. They are described in more detail in Reports . Requirement Velocity -- this graph shows the actual velocity delivered in each product release and/or sprint compared to the product average and the rolling average. Requirement Burnup -- this graph shows the cumulative number of story points outstanding for each release/sprint in the product with separate lines for the actual and ideal burnup overlaid on top of a bar-graph that shows the completed story points per release/sprint. Requirement Burndown -- this graph shows the remaining number of story points that needs to be done for each release/sprint in the product with separate lines for the actual and ideal burndown overlaid on top of a bar-graph that shows the completed story points per release/sprint. Requirements Coverage -- this graph shows the number of requirements that have test cases that are passed, failed, blocked, cautioned, not run as well those requirements that do not have any test cases (not covered). Unlike the main Requirements Coverage graph on the home page, this one is segmented by requirement importance. For each of the three graphs you can click on the \"Display Data Grid\" link to display a grid of the underlying data that is represented in the graph and also there are options to save the graph in a variety of different image formats.","title":"Requirements Graphs"},{"location":"Spira-User-Manual/User-Product-Management/#test-run-progress","text":"This section consists of a chart that displays the last 30 days of test run activity, broken down, for each day, by the test run status. This is a useful chart to quickly track the testing activity of the product -- this is not the same as overall product status.","title":"Test Run Progress"},{"location":"Spira-User-Manual/User-Product-Management/#test-case-cumulative-progress","text":"This section consists of a chart that displays the last 30 days of test case executions cumulatively. That means it will display for each day, the total number of test cases executed plus the status from any previous days that have not been changed. Any test cases not executed up to that point will be considered \"not run\" and will appear in the \"not run\" category. For example, if you have 10 test cases created on day 1 you will see 10 test cases \"not run\" on day 1. On day 2, you execute 5 test cases and fail them all, you will now see 5 test cases failed and 5 not run. On day 3, you execute 3 of the previous 5 test cases and pass them. You will now see 3 test cases passed, 2 failed and 5 not run.","title":"Test Case Cumulative Progress"},{"location":"Spira-User-Manual/User-Product-Management/#source-code-commits","text":"This section consists of a chart that displays the last 3 months of code commits to the product (if you are using the source code functionality of the application). Commits are aggregated by week. The chart is color coded by bottom quartile, the middle 50%, and the top quartile of activity.","title":"Source Code Commits"},{"location":"Spira-User-Manual/User-Product-Management/#incident-open-count","text":"This section show a bar chart to visualize the breakdown of all open incidents in the product by priority. The chart's bar match the color assigned to that priority. Clicking on the \"View Details\" link at the top of the widget loads a chart builder where you can further refine and filter the chart to meet your needs.","title":"Incident Open Count"},{"location":"Spira-User-Manual/User-Product-Management/#all-pending-test-runs","text":"This section lists all the test runs that are currently being executed by testers in the product. Until a test case or test set is fully executed, a pending test run entry is stored in the system so that you can continue execution at a later date. Any pending test run can be either deleted or reassigned to another user that is a member of the product by the product manager or test manager.","title":"All Pending Test Runs"},{"location":"Spira-User-Manual/User-Product-Management/#program-home","text":"When you click on either the Program name in the global navigation or the name of the program in the \"My Page\" product list, you will be taken to the homepage of the specific program in question: This page summarizes all of the information regarding the program into a comprehensive, easily digestible form that provides a \"one-stop-shop\" for people interested in understanding the overall status of the group as a whole as well as the relative performance of the different products that make up the group. It contains summary-level metrics for all types of artifact (requirements, test cases, tasks, incidents, etc.) that you can use to drill-down into the appropriate product for more details. You will see a small \"i\" in a circle at the top right of every chart. Hovering or clicking on this will show you information about that chart. In a similar manner to the 'My Page', the Program Home dashboard is initially loaded in 'view mode' which means that the various 'widgets' on the page are displayed with minimum visual clutter (no toolbars or control icons) that makes it easy to scan the items on the page and see the health of the status of the product at a glance. To switch the page to 'edit mode', you should click the button with the cog icon ( ) on the right. Once in 'edit mode', each of the 'widgets' displayed on the program homepage can be minimized by clicking on the arrow icon ( ) in the top-left of the window, or closed by clicking-on the cross icon ( ) in the top-right of the window. In addition, the widgets allow you change their settings by clicking on the settings icon ( ).This allows you to customize your view of the program to reflect the types of information that are relevant to you. If you have closed a widget that you subsequently decide you want to reopen, you can rectify by clicking the \" + Add \" button at the top of the page, and locating the closed item from the list of 'Closed Widgets'. When you load the 'Program Home' for the first time it will consists of the following main elements: Group Overview Requirements Coverage Task Progress Product List Test Execution Status Incident Aging Recent Builds However these are not the only widgets available. If you click on the \"Add/Remove\" items hyperlink it will display the list of any additional widgets that are available: You can add the additional widgets by selecting the appropriate checkbox, choosing the destination location (left side vs. right side) and then click the \" Add \" button. The additional widgets available in the Program Home dashboard are: Top Open Issues Top Open Risks Each of the different widgets listed is described in more detail below:","title":"Program Home"},{"location":"Spira-User-Manual/User-Product-Management/#program-overview","text":"This section displays the name of the program, together with a brief description, the web-site that points to any additional information about the program, and the names of the owners of the program.","title":"Program Overview"},{"location":"Spira-User-Manual/User-Product-Management/#product-list","text":"This section lists all the active products that make up the group, together with the name, description, program and date of creation. To view the description of the product, simply position the mouse pointer over the link, and a tooltip window will popup containing the description.","title":"Product List"},{"location":"Spira-User-Manual/User-Product-Management/#requirements-coverage_1","text":"This section consists of a bar graph that displays the aggregated count of requirements test coverage for the entire program. The Passed, Failed, Blocked, Caution and Not-Run bars indicate the total count of requirements that have tests covering them, allocated across the execution status of the covering tests Under the main bar graph is displayed a table containing each product in the group and a colored bar illustrating the specific requirements coverage distribution for that product. That way you can see both the aggregate coverage and also the relative coverage for the products. You can configure in the widget settings whether you want to see the aggregate bar graph, and/or the product-specific requirements coverage.","title":"Requirements Coverage"},{"location":"Spira-User-Manual/User-Product-Management/#task-progress","text":"This section consists of a bar graph that displays the aggregated count of tasks by progress category for the entire program. The 'On Schedule', 'Late Finish', 'Late Start' and 'Not Started' bars indicate the total count of tasks that are in that category for all the products in the group. Under the main bar graph is displayed a table containing each product in the group and a colored bar illustrating the specific task progress for that product (using the same coloring convention as the main graph). That way you can see both the aggregate task progress and also the relative progress for each product. You can configure in the widget settings whether you want to see the aggregate bar graph, and/or the product-specific task progress.","title":"Task Progress"},{"location":"Spira-User-Manual/User-Product-Management/#test-execution-status_1","text":"This section consists of a bar graph that displays the aggregated count of test cases by execution status for the entire program. The Passed, Failed, Blocked, Caution and Not-Run bars indicate the total count of test cases that are in that category for all the products in the group. Under the main bar graph is displayed a table containing each product in the group and a colored bar illustrating the specific test case execution status for that product (using the same coloring convention as the main graph). That way you can see both the aggregate test status and also the relative status for each product. You can configure in the widget settings whether you want to see the aggregate bar graph, and/or the product-specific test status.","title":"Test Execution Status"},{"location":"Spira-User-Manual/User-Product-Management/#incident-aging_1","text":"This section displays the number of days incidents have been left open in the system. The chart is organized as a histogram, with the count of incidents on the y-axis (for all products in the group) and different age intervals on the x-axis. Under the main bar graph is displayed a table containing each product in the group and a colored bar illustrating the distribution of open incidents by priority for that product. That way you can see both the aggregate aging for the group and also the relative priority of open incidents for each product. You can configure in the widget settings whether you want to see the aggregate aging histogram, and/or the product-specific incident count by priority.","title":"Incident Aging"},{"location":"Spira-User-Manual/User-Product-Management/#top-open-issues_1","text":"This section displays a breakdown of the top issues logged against any of the products in the group, in order of decreasing priority. Note that items not given a priority are listed at the top, since critical issues could be lurking in that list, and the product manager will want to immediately review these to assign priorities. Clicking on the issue item hyperlink will take you to the incident details page for the issue in question (see Incident Tracking > Incident Details ). You can configure in the settings whether to use Priority or Severity for the display, and also how many rows of data to display.","title":"Top Open Issues"},{"location":"Spira-User-Manual/User-Product-Management/#top-open-risks_1","text":"This section displays a breakdown of the top risks logged against any of the products in the group, in order of decreasing priority. Note that items not given a priority are listed at the top, since critical risks could be lurking in that list, and the product manager will want to immediately review these to assign priorities. Clicking on the risk item hyperlink will take you to the incident details page for the risk in question . You can configure in the settings whether to use Priority or Severity for the display, and also how many rows of data to display.","title":"Top Open Risks"},{"location":"Spira-User-Manual/User-Product-Management/#recent-builds_1","text":"This widget displays a list of the most recent build and its status for each product in the program/program. For each product it will display whether the build succeeded or failed, the date the build occurred and the name of the build together with a hyperlink to the build details .","title":"Recent Builds"},{"location":"Spira-User-Manual/User-Product-Management/#my-profile","text":"When you click on the \" My Profile \" button (the top item in the user dropdown) in the global navigation, you will be taken to the page in the system that allows you to view and edit your personal profile: You can change your user information including your first-name, last-name, middle-initial, avatar icon, department and your choice of start-page. Clicking the \" Save \" button will commit the changes, whereas clicking <Cancel> returns you back to either \"Product Home\" or \"My Page\" depending on whether you have a product currently selected or not. If you want to be able to subscribe to RSS feeds of the information assigned to you in the \"My Page\", make sure that the \"Enable RSS Feeds\" switch is set to \"Yes\" and an RSS token has been generated underneath. You can change your start page to be any of the following: My Page -- When you first log-in, you will be taken to your \"My Page\" dashboard Last Opened Product -- When you first login-in, you will be taken to the home page for the product you last had open Last Opened Program - When you first login-in, you will be taken to the home page for the program you last had open","title":"My Profile"},{"location":"Spira-User-Manual/User-Product-Management/#change-password","text":"In addition to being able to update your user information, you can optionally change your password at the same time. To change your password, on the Change Password tab fill in the three boxes with your current password, and your new password repeated for verification. Then when the \" Save \" button is clicked, the system will update your password, otherwise you will simply get a warning message indicating what needs to be corrected. You can also change the current password retrieval question and answer by entering in your current password (for security reasons) as well as the new password question and answer. Note: If your SpiraTest user profile is linked to an account stored in an external LDAP server, you may find the change password option is disabled. This is because the system uses the password held in the external server. To change the password in this case, please contact your system administrator who will be able to help you change the password in your LDAP environment.","title":"Change Password"},{"location":"Spira-User-Manual/User-Product-Management/#email-preferences","text":"Here you can configure the email address that the application will send notifications to, and whether or not you want to receive email notifications. If the Enable Notifications cannot be changed, it means that the system is either not configured to send out notifications, or the administrator has disabled user's ability to opt out of notifications being sent.","title":"Email Preferences"},{"location":"Spira-User-Manual/User-Product-Management/#ldap-settings","text":"This tab will show configured LDAP options for your account. At this time, no configurable options are on this tab, it is for reference only.","title":"LDAP Settings"},{"location":"Spira-User-Manual/User-Product-Management/#regional-settings","text":"This tab will display the current culture and timezone associated with your profile: By default all profiles will be set to use the application's default culture and timezone. This means that the language, number formats and timezone used in the application will be the ones decided by the person who installed the system. However there are cases where you want to use a different language, timezone or number format (for example, a German employee working in the German office of a French company might want to use the German culture instead of French). You can change the culture and/or timezone to any of the options listed in the dropdown list. Note: The system will only be installed with a certain number of language packs, so in some cases a selected culture will only change the number formats and not the languages displayed.","title":"Regional Settings"},{"location":"Spira-User-Manual/User-Product-Management/#actions","text":"This tab displays the list of recent actions that you have performed in the system (across all products): You can search and filter the grid to find changes by product, change date range, artifact type and type of change (added, deleted, or modified).","title":"Actions"},{"location":"Spira-User-Manual/User-Product-Management/#my-timecard","text":"When you click on My Page > My Timecard the system will display a timecard that allows you to enter the effort worked on incidents and tasks currently assigned to you (across all your products): The system will only include products that have time-tracking enabled for incidents and tasks, so if some of your assigned incidents or tasks are missing, please check with the product owner of the products affected to have them enable time-tracking. Each task or incident will be displayed along with its priority, severity, start-date, end-date, product name effort remaining and effort expended to date. For each item you can then indicate the additional actual effort performed (which will be added to the \"actual effort\") and modify the amount of hours remaining. Once you are satisfied, click [Submit Timecard] to commit the changes.","title":"My Timecard"},{"location":"SpiraCapture/User-Guide/","text":"Getting Started Turning on the Extension If the SpiraCapture icon doesn't appear at the top right of your screen, go to chrome://extensions to make sure the extension is enabled (check that the toggle in the bottom right of the extension card is lit up blue, if not click it to turn on the extension). How to start capturing To start capturing click the SpiraCapture icon in the toolbar, which should bring the SpiraCapture menu. You should see a \"Start capturing\" button to capture the current tab. **Note: ** this will only capture the current tab you are on! If you would like to capture other tabs repeat this step . **Warning: ** if you have just enabled the extension, you need to refresh the tab before capturing will work. You can tell if SpiraCapture is capturing the current tab, because the SpiraCapture icon in the toolbar will show in color. When it is not capturing a tab, the icon is shown in grayscale. What event triggers data to be captured? A number of events trigger SpiraCapture to capture how the user is interacting with the current browser tab: Clicks : each click is captured with a screenshot and a description of where you clicked. Note Currently there is no distinction between single and double clicks KeyStrokes : collections of keystrokes are captured together (for instance when filling in a form, SpiraCapture will capture a whole username as one string). The string is cut off if: nothing is typed for 3 seconds; the field being typed in changes; or when the enter key is hit. The Enter key is clicked : when the enter/return key is hit a log is captured along with a screenshot Url-Changes : each change in URL is captured. Note *any link or user action that opens a url in a new tab will not be captured (because only changes to the current tab are captured) Network Errors : Network Errors are captured in the background and are taken from any tab being captured not just the current tab. Additionally, there are a few ways that data can be captured manually by the tester, by interacting with the SpiraCapture menu. These give users flexibility in organizing the captured data to reflect their test. Steps : Steps break up the captured data into discrete sections, just like you break up a test case into test steps. This makes navigating the captured data much easier. Steps can be created manually by the user, or otherwise are incremented over time (roughly every 10 minutes). For instance if a step is called \"Login\", after 10 minutes, a new step will be created called \"Login 1\", and then \"Login 2\" after another 10 minutes. Notes : Notes are used to remind yourself after the session when you go back through the data. They can be very useful to \"stick a pin\" in something that just happened so that you can review it later, but not have to break your testing flow by analysing it in detail now. Screenshots : Screenshots can be captured manually, as well as automatically by some of the events listed above. SpiraCapture Menu Clicking the SpiraCapture icon from the browser toolbar will show the SpiraCapture menu. This gives you access to the main functionality of the extension. View data : This links opens a new tab showing all of the data that SpiraCapture has... captured. Note: You will only see this link in the menu if you have any captured data . Start capturing : If you are on a tab that is not yet being capture, as explained above, clicking this links will start capturing this tab only. * Stop capturing : If you are on a tab that IS being capturing, click this link to stop capturing. The remainder of the menu is only visible while capturing the current tab. Take ScreenShot : This captures the full page screenshot of the current tab. This is useful when you need to manually capture the screen.* Current Step : This is a label that shows you the name of the current step. Note this label, if the menu is left open for a long time, may not always reflect the most recent step number - as mentioned above this will increment automatically over time. Step Description : This field is how you break up your testing session when you are viewing the data. Note If you choose to not use this feature the application it will automatically break your session up every 10 minutes for your convenience when viewing the data Create Step field : enter text in this field and click the button on the left to create a new step using that name. Create Note Field : enter text in this field and click the button on the left to create a new note using that name View captured data When you click the \"View data\" link from the SpiraCapture menu the tab that opens shows all data collected. This page is divided into three parts: The event list on the left hand side, which shows every event captured by SpiraCapture The preview window on the right hand side, which is used for showing more information about a particular event from the data list The action bar at the top of the page is where you can manage your captured data, or send selected events to Spira Additionally, there are popups to connect to Spira, view the events selected, and send select events to Spira as a new incident. Each of these areas is explained in more detail below. The event list The event list is shown on the left hand side of the page. Every event is shown in chronological order, broken down into testing steps (which can be manually created by the user and incremented automatically over time). Each step has a heading which shows the name of the step and the time that particular step started. If the step contains any notes, a pin icon is shown in the step heading. This is designed to help you see which steps have notes in as these are likely the steps that you want to examine more closely. Clicking on the step heading will collapse or expand the events inside the step. Each event shows certain standard information to make it easy to navigate and browse the data. Where relevant, a thumbnail of the screenshot taken with the event The time that the event occurred An icon showing the type of event Where relevant, information recording along with the event (for instance, the url moved to, the keys typed, or the place in the DOM where you clicked) Each event also has a checkbox on its left. Checking the checkbox will mark that event as selected. Only selected events are sent through to Spira when logging new incidents. The preview window Clicking on an event with a screenshot will display in the large preview window on the right hand side of the page. This is helpful if you want to see a screenshot in more detail. The action bar The action bar has four buttons: Preview selected events : this is enabled if one or more events has been selected from the event list (see above). Clicking the button will show a popup with a filtered list of just those selected events. To export this data to a document or another application, highlight the preview and copy it to the clipboard Send selected events to Spira : this is enabled if one or more events has been selected from the event list (see above). Clicking this button will show the Spira popup (discussed in more detail below) Refresh : Clicking this button updates the event list with any new data Clear all events and stop capturing : This button closes the current data table page, clears all data in chrome storage, and stops capturing all tabs Sending selected events to Spira You can send all selected events to Spira as a single new incident. Once connected to Spira, as explained below, you choose a product and then create your incident. The selected events, including their screenshots, will be saved into the description field of the new incident. Connect to Spira First, make sure you have enabled API access to Spira. You do this from your Profile Page from within the Spira application. Make sure you enable rss and generate an RSS Token . This RSS token is the same token you use for API access, which is what SpiraCaptures uses. Note This can be disabled be you or your administrator make sure you have it enabled if you would like to use this feature see warnings section below Clicking the Send selected events to Spira button will show a popup. The first time you see this popup you will need to enter your connection credentials: Url : this is the root address of your Spira application Username : this is the username you use to log in to Spira API key/RSS Token : as described above. Make sure to include it in full - including the { }. TIP: you can click on the RSS Token from your profile page in Spira to save it to the clipboard Create the incident Once you are logged in to your Spira (and have your events selected) the popup will require 3 fields to be selected/filled in. Selecting a product : choose a product from the list of all the ones you have access to in Spira Select an Incident type : pick the most relevant type available for the product you select Incident Name : Type in the name to be given to the incident Once these have been filled in, click the \"Send data to Spira\" button to connect to your Spira application and upload the incident. Once the incident has been created you will see a link next to the send button that will open the incident in Spira for you. Potential Gotchas SpiraCapture will capture keystrokes on any native HTML element that you can enter text into. This means form elements, and also elements that have contentEditable set to true SpiraCapture will not interact with iframes. You must manually take screenshots if you want information from them. When capturing multiple tabs at once the data across the tabs will shown on the data page 100% chronologically If a link opens in a new tab or window it will not be recorded. You will need to click the capture button on that new tab to start capturing data On newly installing or reinstalling the extension refresh any pages you would like to capture before starting to capture To create incidents in Spira you must have version 6.1+ You may not be able to create an incident in Spira if your product is set up where a custom field cannot be left blank (as specified in the custom property definition)","title":"SpiraCapture"},{"location":"SpiraCapture/User-Guide/#getting-started","text":"","title":"Getting Started"},{"location":"SpiraCapture/User-Guide/#turning-on-the-extension","text":"If the SpiraCapture icon doesn't appear at the top right of your screen, go to chrome://extensions to make sure the extension is enabled (check that the toggle in the bottom right of the extension card is lit up blue, if not click it to turn on the extension).","title":"Turning on the Extension"},{"location":"SpiraCapture/User-Guide/#how-to-start-capturing","text":"To start capturing click the SpiraCapture icon in the toolbar, which should bring the SpiraCapture menu. You should see a \"Start capturing\" button to capture the current tab. **Note: ** this will only capture the current tab you are on! If you would like to capture other tabs repeat this step . **Warning: ** if you have just enabled the extension, you need to refresh the tab before capturing will work. You can tell if SpiraCapture is capturing the current tab, because the SpiraCapture icon in the toolbar will show in color. When it is not capturing a tab, the icon is shown in grayscale.","title":"How to start capturing"},{"location":"SpiraCapture/User-Guide/#what-event-triggers-data-to-be-captured","text":"A number of events trigger SpiraCapture to capture how the user is interacting with the current browser tab: Clicks : each click is captured with a screenshot and a description of where you clicked. Note Currently there is no distinction between single and double clicks KeyStrokes : collections of keystrokes are captured together (for instance when filling in a form, SpiraCapture will capture a whole username as one string). The string is cut off if: nothing is typed for 3 seconds; the field being typed in changes; or when the enter key is hit. The Enter key is clicked : when the enter/return key is hit a log is captured along with a screenshot Url-Changes : each change in URL is captured. Note *any link or user action that opens a url in a new tab will not be captured (because only changes to the current tab are captured) Network Errors : Network Errors are captured in the background and are taken from any tab being captured not just the current tab. Additionally, there are a few ways that data can be captured manually by the tester, by interacting with the SpiraCapture menu. These give users flexibility in organizing the captured data to reflect their test. Steps : Steps break up the captured data into discrete sections, just like you break up a test case into test steps. This makes navigating the captured data much easier. Steps can be created manually by the user, or otherwise are incremented over time (roughly every 10 minutes). For instance if a step is called \"Login\", after 10 minutes, a new step will be created called \"Login 1\", and then \"Login 2\" after another 10 minutes. Notes : Notes are used to remind yourself after the session when you go back through the data. They can be very useful to \"stick a pin\" in something that just happened so that you can review it later, but not have to break your testing flow by analysing it in detail now. Screenshots : Screenshots can be captured manually, as well as automatically by some of the events listed above.","title":"What event triggers data to be captured?"},{"location":"SpiraCapture/User-Guide/#spiracapture-menu","text":"Clicking the SpiraCapture icon from the browser toolbar will show the SpiraCapture menu. This gives you access to the main functionality of the extension. View data : This links opens a new tab showing all of the data that SpiraCapture has... captured. Note: You will only see this link in the menu if you have any captured data . Start capturing : If you are on a tab that is not yet being capture, as explained above, clicking this links will start capturing this tab only. * Stop capturing : If you are on a tab that IS being capturing, click this link to stop capturing. The remainder of the menu is only visible while capturing the current tab. Take ScreenShot : This captures the full page screenshot of the current tab. This is useful when you need to manually capture the screen.* Current Step : This is a label that shows you the name of the current step. Note this label, if the menu is left open for a long time, may not always reflect the most recent step number - as mentioned above this will increment automatically over time. Step Description : This field is how you break up your testing session when you are viewing the data. Note If you choose to not use this feature the application it will automatically break your session up every 10 minutes for your convenience when viewing the data Create Step field : enter text in this field and click the button on the left to create a new step using that name. Create Note Field : enter text in this field and click the button on the left to create a new note using that name","title":"SpiraCapture Menu"},{"location":"SpiraCapture/User-Guide/#view-captured-data","text":"When you click the \"View data\" link from the SpiraCapture menu the tab that opens shows all data collected. This page is divided into three parts: The event list on the left hand side, which shows every event captured by SpiraCapture The preview window on the right hand side, which is used for showing more information about a particular event from the data list The action bar at the top of the page is where you can manage your captured data, or send selected events to Spira Additionally, there are popups to connect to Spira, view the events selected, and send select events to Spira as a new incident. Each of these areas is explained in more detail below.","title":"View captured data"},{"location":"SpiraCapture/User-Guide/#the-event-list","text":"The event list is shown on the left hand side of the page. Every event is shown in chronological order, broken down into testing steps (which can be manually created by the user and incremented automatically over time). Each step has a heading which shows the name of the step and the time that particular step started. If the step contains any notes, a pin icon is shown in the step heading. This is designed to help you see which steps have notes in as these are likely the steps that you want to examine more closely. Clicking on the step heading will collapse or expand the events inside the step. Each event shows certain standard information to make it easy to navigate and browse the data. Where relevant, a thumbnail of the screenshot taken with the event The time that the event occurred An icon showing the type of event Where relevant, information recording along with the event (for instance, the url moved to, the keys typed, or the place in the DOM where you clicked) Each event also has a checkbox on its left. Checking the checkbox will mark that event as selected. Only selected events are sent through to Spira when logging new incidents.","title":"The event list"},{"location":"SpiraCapture/User-Guide/#the-preview-window","text":"Clicking on an event with a screenshot will display in the large preview window on the right hand side of the page. This is helpful if you want to see a screenshot in more detail.","title":"The preview window"},{"location":"SpiraCapture/User-Guide/#the-action-bar","text":"The action bar has four buttons: Preview selected events : this is enabled if one or more events has been selected from the event list (see above). Clicking the button will show a popup with a filtered list of just those selected events. To export this data to a document or another application, highlight the preview and copy it to the clipboard Send selected events to Spira : this is enabled if one or more events has been selected from the event list (see above). Clicking this button will show the Spira popup (discussed in more detail below) Refresh : Clicking this button updates the event list with any new data Clear all events and stop capturing : This button closes the current data table page, clears all data in chrome storage, and stops capturing all tabs","title":"The action bar"},{"location":"SpiraCapture/User-Guide/#sending-selected-events-to-spira","text":"You can send all selected events to Spira as a single new incident. Once connected to Spira, as explained below, you choose a product and then create your incident. The selected events, including their screenshots, will be saved into the description field of the new incident.","title":"Sending selected events to Spira"},{"location":"SpiraCapture/User-Guide/#connect-to-spira","text":"First, make sure you have enabled API access to Spira. You do this from your Profile Page from within the Spira application. Make sure you enable rss and generate an RSS Token . This RSS token is the same token you use for API access, which is what SpiraCaptures uses. Note This can be disabled be you or your administrator make sure you have it enabled if you would like to use this feature see warnings section below Clicking the Send selected events to Spira button will show a popup. The first time you see this popup you will need to enter your connection credentials: Url : this is the root address of your Spira application Username : this is the username you use to log in to Spira API key/RSS Token : as described above. Make sure to include it in full - including the { }. TIP: you can click on the RSS Token from your profile page in Spira to save it to the clipboard","title":"Connect to Spira"},{"location":"SpiraCapture/User-Guide/#create-the-incident","text":"Once you are logged in to your Spira (and have your events selected) the popup will require 3 fields to be selected/filled in. Selecting a product : choose a product from the list of all the ones you have access to in Spira Select an Incident type : pick the most relevant type available for the product you select Incident Name : Type in the name to be given to the incident Once these have been filled in, click the \"Send data to Spira\" button to connect to your Spira application and upload the incident. Once the incident has been created you will see a link next to the send button that will open the incident in Spira for you.","title":"Create the incident"},{"location":"SpiraCapture/User-Guide/#potential-gotchas","text":"SpiraCapture will capture keystrokes on any native HTML element that you can enter text into. This means form elements, and also elements that have contentEditable set to true SpiraCapture will not interact with iframes. You must manually take screenshots if you want information from them. When capturing multiple tabs at once the data across the tabs will shown on the data page 100% chronologically If a link opens in a new tab or window it will not be recorded. You will need to click the capture button on that new tab to start capturing data On newly installing or reinstalling the extension refresh any pages you would like to capture before starting to capture To create incidents in Spira you must have version 6.1+ You may not be able to create an incident in Spira if your product is set up where a custom field cannot be left blank (as specified in the custom property definition)","title":"Potential Gotchas"},{"location":"SpiraPlan-Quick-Start-Guide/","text":"SpiraPlan Quick Start Guide Logging In and Selecting a Product Once you have installed a self-hosted trial or signed up for a hosted trial of SpiraPlan, you should see the following login screen in your web browser: Enter the following default details to start using the system: Login: administrator Password: PleaseChange Once logged-in, you are shown your \"My Page\". The very first time you log in you will be able to take a quick orientation tour of the application (as shown in the screenshot below). The My Page looks pretty empty right now. This is normal. For this tutorial we want to start with an empty product that has no data in it, so click the hyperlink under 'My Products' for 'Sample Empty Product' / 'Sample Program Two'. That will select the empty product. Now to see the homepage for the product you just selected, click on the hexagon in the top left: The product home page shows various widgets containing key product metrics. These are empty now, because the product has no data in it. In the rest of this guide we are going to fix that. Define the Requirements On the main Navigation bar, click Artifacts > Requirements to display the product's requirements list page: The terminology in SpiraPlan is designed to be methodology agnostic. The table below shows how the terms used in SpiraPlan relate to some common methodologies: SpiraPlan Extreme Programming Scrum AgileUP / DSDM Summary Requirement Epic Epic Feature Group Requirement User Story Backlog Item Requirement Task Task Task Task Release Release Release Release Sprint Iteration Sprint Iteration At first, the requirements list will be empty. Click the 'Insert' button in the toolbar to create your first requirement. Hit 'Save and New' (shown as buttons on the right of the new requirement in the list table) to add each new requirement after that. Below is the list of requirement names to add: Functional Requirements Module 1 System must allow entry of users System must allow the modification of users System must allow the deletion of users Module 2 System should allow administrators to setup notifications You should now have a simple, flat requirements list, like the one below: Next, we are going to indent the requirements. This will give us a hierarchy, with some requirements being children of others. To indent, select the checkboxes of all the requirements below 'Functional Requirements' and click 'Indent'. This makes 'Functional Requirements' the parent and all the other requirements its children. Now, select the three requirements immediately below 'Module 1' and click 'Indent' again. This makes these three requirements children of 'Module 1' (and grandchildren of 'Functional Requirements'). Repeat for the requirement below 'Module 2' by right-clicking on this last requirement and choosing 'Indent' from the popup context menu. You should now have a list that looks like: We now have a nicely grouped set of requirements. Let's enter more information about them, starting with setting their types and priorities. Click the ''select all' checkbox at the top of the list (the checkbox just above the checkbox for 'Functional Requirements') Click on the top 'Edit' button in the right-hand column of that same row. That will make all the requirement rows editable: Set the 'Type' of the four requirements you can edit this for to User Story'. Choose whatever values you like for the 'Importance' field. Click the Save button. You now have a prioritized list of user story requirements: The next thing we can do is assign estimates to each requirement. This is something that the developers or business analysts may do based on the complexity and scope of each. The 'Estimates' column is not visible yet, so first we need to show it. To do that, click on the 'Show/Hide Columns' dropdown list and select 'Show Estimate (points)': By default, all the requirements will have been assigned a default estimate of 1.0 point. A point is not a defined number of hours, but an indication of the size of the requirement. The estimates should reflect how big each of the requirements are relative to each other. To change the estimates: Click the \"select all\" checkbox at the top of the list Click on the top 'Edit' button in the right-hand column. The requirements should be in editable mode again. Enter the following estimates for the requirements Click Save Requirement Estimate System must allow entry of users 1.5 points System must allow the modification of users 2.0 points System must allow the deletion of users 1.0 points System should allow administrators to setup notifications 2.0 points Your requirements should now look like this (with each parent's estimates automatically summing up the estimates of their children): We have created a list of prioritized, estimated requirements, which is a great way to start our product. In the next section we are going to enter releases and sprints. Create the Release and Iteration Plan On the main navigation bar, click out of 'Requirements' and select 'Releases' menu option to display the product's release list page: The release list will be empty. Click the 'Insert' button in the toolbar to create your first release. Hit 'Save and New' (shown as buttons on the right of the new release in the list table) to add each new release after that. Below is the list of release names to add: Release 1.0 Version Number: 1.0.0.0 Start Date: Today's Date End Date: Today's Date + 2 months Release 1.1 Version Number: 1.1.0.0 Start Date: Today's Date + 2 months End Date: Today's Date + 4 months You should have a list of releases like this: We need to add one additional level of detail to each release -- the list of sprints that will take place in each release. Let's add some sample sprints for the first release: Select the checkbox for Release 1.0 and, from the toolbar, click Insert > Child Release Choose a name for the new sprint Make sure its 'Type' is set to 'sprint' Specify its date range. We recommend making each sprint last 2 weeks and have each one scheduled in series Click Save And New Repeat steps 2-5 above, then steps 2-4 and then finally click Save on the final sprint's row. You should have three sprints added to the list, all children of Release 1.0. Finally, let's specify the number of resources assigned to each sprint and release. Click on the 'Show/Hide Columns' dropdown list and select 'Show # Resources' column Select the three checkboxes for the sprints of \"Release 1.0\" Click the Edit button on the toolbar Adjust the # Resources for the sprints to 2 Click Save Adding Requirement Tasks We have defined the high-level schedule for Release 1.0. The next stage is to have the developers take each of the requirements defined so far and define the various tasks needed to deliver them. Each task will have its own estimate associated with it. In addition, you can optionally specify date ranges and priorities to each of the individual tasks. To start adding tasks, go to the main navigation bar and click out of Releases and hit Requirements to display the requirements list. Click on the hyperlink for the first requirement (\"System must allow entry of users\") and the requirement's details page will be displayed: Notice that under 'Dates and Times' column on the right, the system displays an initial resource estimate of 1.5 points and 12 hours. This is based on an initial product setting of 8 hours per story point. Once you start adding tasks and getting metrics based on the actual team velocity (how many story points they can accomplish in a given time frame), the system can update that conversion metric. Click on the 'Tasks' tab to display the list of tasks defined for this requirement. The list is empty, so let's change that: Because we want to enter the estimated effort for each task, before entering the tasks, first click on the 'Show/Hide Columns' dropdown list and hit the 'Show Est. Effort' column Click the New Task button (this adds a new task and associates it with this requirement) Set the task's name to \"Create user data tables\" Choose a 'Priority' level Set the 'Est. effort' to 10.0h. Click Save . The new task has now been added: We have more tasks to add. The table below shows 12 tasks in total to add to 4 different requirements. This includes the one we just created for completeness. Requirement / Task Est. Estimate System must allow entry of users Create user data tables 10.0h Develop user business object 10.0h Build user creation screens 20.0h System must allow the modification of users Extend user business object to handle updates 5.0h Add user list page 15.0h Add user details page 20.0h Add user permissions page 15.0h System must allow the deletion of users Extend user business object to handle deletes 5.0h Update user list page to add delete functionality 10.0h System should allow administrators to setup notifications Create user administration home 15.0h Add user settings for notifications to database 10.0h Create user notifications administration page 20.0h On the main Navigation bar, click again on 'Requirements'. You should now have the following requirements list page. In this screenshot we have hidden the 'Author' field and shown the 'Task Effort' field to show the detailed task effort aggregated up to the requirements. The total number of hours for these tasks divided by the total number of story points gives a number a lot more than the 8 hours that the system assumes. We can update the system to better estimate the number of hours to deliver each story point. To update the metric, go to the three cogs dropdown menu on the rightmost corner of the main Navigation Bar, locate Planning and click Planning Options: As you can see, the system lists 8.0 hours as the current number of hours required to deliver a single story point of functionality. Now that we have some actual tasks in the product, click on the 'Suggest 'button to have the system provide its suggestion of the new metric: Click the 'Apply' button to update the planning metric, and then click the main Save button at the very bottom of the page to confirm the change. Adding the Test Cases Click on the Artifacts > Test Cases menu option to display the product's test case list page: The test case list is empty and the only folder visible in the 'Folders' tree on the left-hand side is 'Root'. Click on the Add button underneath the folder tree Enter the new folder name 'Functional Tests' Click Add You now have a new folder in the 'Folders' tree view. To show it, click 'Refresh'. Click on this folder from the 'Folders' tree on the left Click 'New Test Case' from the toolbar Enter \"Test ability to add new users\" for the name of this new test case Click Save And New Repeat the above steps to create 3 more test cases: \"Test ability to edit existing users\" \"Test ability to delete existing users\" \"Test ability to edit notifications\" You should now have the following test case list: Next, we need to enter detailed test steps to each test case, and link each test to the appropriate requirements. Click on the hyperlink for the first test case 'Test ability to add new users'. This will bring up the test case details page: In the 'Description' box under 'Detailed Information' section, enter a brief overview of the test case (something like \"this test case verifies that you can add new users to the system and that all of the fields get saved correctly.\"). Scrolling down to the 'Test Steps' section, you will see a single test step has been automatically created for you with some suggested text: This test case needs 3 test steps. Click 'Edit' on 'Step 1' and enter the first set of parameters below. Click Save and then 'Insert Step' to add the second test step and enter its information from below Click 'Save and New' to make the third step Once you've entered its information click Save Test Step Description Expected Result Sample Data Click on the link to add new user New user screen displayed Enter the name, email address and password of the new user. Data accepted Fred Bloggs fredblogs@example.com Click the 'Submit' button to create the user. The user is created You should now have the following test steps in the test case: Next, we need to link this test case to the requirement(s) that it validates. Click the 'Req. Coverage' tab above: Click the '+ Add' button to display the association adding panel: Choose the 'System must allow the entry of users' requirement Click the Save button beneath the list of requirements to add the test case to this requirement Let's repeat the process for the other test cases, adding a couple of test steps to each. Then link the test cases to the requirements according to this table just like you did above: Test Case Requirement Test ability to add new users System must allow entry of users Test ability to edit existing users System must allow the modification of users Test ability to delete existing users System must allow the deletion of users Test ability to edit notifications System should allow administrators to setup notifications We have created test cases and set up their test coverage. Next, we need to specify which releases and sprints they can be tested in. First navigate to the product's test case list page again by clicking on 'Test Cases' on the main navigation bar Select the checkbox of each test case in the 'Functional Tests' folder. Click on 'Tools' drop-down menu on the toolbar Click 'Add to Release' Select 'Release 1.0 Click Add . You have added all the tests to the overarching Release. Finally, we want to add the tests to the different sprints, based off the data in the table below. Select the checkbox of each relevant test case in the 'Functional Tests' folder. Click on 'Tools' drop-down menu on the toolbar Click 'Add to Release' Select the appropriate sprint Click Add Test Case Sprint(s) Test ability to add new users Release 1.0 - Iteration 1 Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to edit existing users Release 1.0 - Iteration 1 Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to delete existing users Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to edit notifications Release 1.0 - Iteration 3 You typically want to include previous functionality in each of the successive iterations to ensure regression coverage. That is what we have done here. This means that each sprint includes new test cases for the new requirements, as well as existing test cases for pre-existing functionality. Planning the Sprint We have requirements that have tasks, and tests connected to them. What we haven't done yet is scope out which requirements go in which sprint. From the artifact dropdown in the global navigation bar, click \"Planning Board\" to display the product backlog planning board On the planning board page set the 'Group By' dropdown on the left to \"By Priority\" To show all requirements check that in the left-most column all the priority levels are shown in an expanded view (downward facing triangle signs) To view the iteration plan for a specific release, select 'Release 1.0' on the 'Planning:' drop down menu on the top left. Choose 'By Sprint' from the drop-down 'Group By' menu. That will display the sprint plan for the selected release (currently empty) Expand the '(Unassigned Items)' entry to display the requirements that are in the product backlog Each backlog item (requirement or incident) is represented by a virtual \"story card\" in the iteration. The left-hand side of each item displays the priority color. The progress bar near the bottom of each item depicts the progress of the item. You can flip through each iteration to see the work planned by clicking the left/right arrow buttons at the sides of the screen. Now drag the two highest priority requirements (the ones with Importance = 1 - Critical) to the first iteration: In the screenshots above the cards are showing more information then you may see by default. Extra information can be shown by toggling the buttons at the top right of the planning board To see more information about each requirement, enable the 'Detailed View' option To see the individual tasks associated with each requirement, select the 'Tasks' option To see the individual tests associated with each requirement, select the 'Test Cases' option You can determine how much time has been scheduled in the first sprint and how much time is remaining. Although we have spare time available in Iteration 1, we will leave room left for fixing incidents, so next, drag and drop the remaining two requirements to Iteration 2: Assigning the Requirements & Tasks Now that we have planned which requirements (user stories) and tasks are planned for each sprint, we can assign tasks to the appropriate developer(s). The process you follow will depend on your methodology (e.g. in Scrum the developers pick the tasks, but in Extreme Programming the product manager usually assigns tasks). To assign the tasks, go to the main Navigation Bar and click on Artifact > Tasks to display the main tasks list page: Click on the 'Board' option on the top-right of the screen to change to the Kanban board view: You can see at a glance which tasks are in each status (in this case, they are all marked as 'Not Started'). To see the distribution of tasks by person for a specific sprint, change the release selection to 'Release 1.0 Iteration 1', and the 'Group By' dropdown to 'By Person': For our sample product, we have two product members listed (included ourselves). As an example, select the first four tasks (which are all priority = 1 - Critical) and drag them to your user's section: Now you can clearly see the four tasks that have been assigned to your user. To simulate how this would appear to a developer, click on the main SpiraPlan icon (in the top-left) to display your user's \"My Page\" dashboard: This page lists all the development tasks that have been assigned to your user. Click on the task \"Create user data tables\" to display the task details page: This task has been estimated at 10.0 hours and is currently not started. The next step is to start working on the assigned task and report back progress. As an example: Click the workflow Operations button and choose 'Start Task' Then under 'Dates and Times' enter an 'Actual Effort' of 3.0 hours, and a 'Remaining Effort' of 5.0 hours In the 'Comments' section below, add a comment: \"Added initial set of data tables\" Click Save at the top of the page The progress indicator will reflect the changes and the new comment will have been added. Now click on the other three assigned tasks, start them, and specify the following: Requirement / Task Est. Estimate Actual Effort Remaining Effort Create user data tables 10.0h 3.0h 5.0h Develop user business object 10.0h 2.0h 7.5h Build user creation screens 20.0h 3.0h 18.0h Extend user business object to handle updates 5.0h 0.5h 4.0h After updating the assigned tasks, the 'My Page' dashboard will show all these changes: Similarly, for the product manager, click on Requirements from the artifact dropdown in the global Navigation Bar to display the requirements list. This will show the task progress as it impacts the various requirements: Scheduling the Testing Activities Now that we have created our test plan for each release and sprint, we need to schedule the test cases for execution by our testers. As an example, we'll create a single test set (also known as a test suite) that contains a list of test cases to be executed by a specific tester. On the main Navigation Bar, click on Artifacts >Test Sets menu option to display the product's test set list page: At first, the test set list will be empty and the 'Folders' tree on the left will only show 'Root'. Click the Add button beneath the folder tree Enter the new folder name 'Test Cycle #1' Click the Add button. Click on the folder you just made Click 'New Test Set' from the toolbar Enter the name of the new test set 'Testing new functionality' Click Save You should now have the following test set list: Click on the hyperlink for the test set to bring up the test set details page: Let's add the appropriate test cases to this set. Click the Add button in the 'Test Cases' section halfway down the page to bring up the following panel: Locate 'Root' drop down menu under 'Test Cases' section Choose the 'Functional Tests' folder and the test cases in that folder will be displayed: Select the following test cases and click the Save button: Test ability to add new users Test ability to edit existing users You should now have the following displayed: Next, let's assign this test set to a specific release and to a particular tester. To do that, choose the following values for the following fields and click Save : Owner = System Administrator (your user) Scheduled = Release 1.0 - Iteration 1 Planned Date = (Today's Date) You have now scheduled this test set to be executed by your user by the end of today against the first iteration of release 1.0: Running Tests and Logging Incidents Now that you have scheduled the test set, if you go to the 'My Page' by clicking on the SpiraPlan logo in the top-left, you'll see your newly assigned test set down on the left: Click the 'Execute' button (with the play icon) to the right of this new test set. That will start the test execution wizard: On the first screen, the release dropdown list will have been automatically pre-selected to the release specified in the test set. Click 'Next' to move to the first test step in the first test case: Note that when you first visit this page, you will be shown a quick guided tour of how the page works. As a tester, you can progress through each of the test steps in each test case in the test set in turn. For each test step you can enter Pass , Fail , Blocked, Caution, or Not Applicable . If you enter any status other than Pass you need to enter a value for the 'Actual Result'. For a pass status, the Actual Result is optional. Click the 'Pass' button to pass the first test step. As soon as you do, the test will automatically progress to the second test step: Now for the second test step, enter in the actual result field \"Unable to enter the sample data as the fields were disabled\". Before clicking the Fail button, we also want to enter in the following fields in the Incident form (accessed by clicking the \"Incidents\" tab): Name: Error displaying user fields Type: Bug Priority: 2 - High Now click the 'Fail' button and you will have recorded a test failure and a new incident/defect: Now that we have logged the test failure and the new incident/defect, click on a hexagon on the main navigation bar on the left of \"Sample Empty Product\" option. You'll be taken to the product homepage with the requirements and test case metrics now visible in individual widgets (like the Test Execution Status widget shown below): If you go to the Artifacts > Test Sets page, you also see the status of our test set: If you go to the Artifacts > Requirements page, you'll see the different requirements' test coverage and the status of the tests associated with each requirement: The next step in the process is to triage the logged defect and assign it to a developer to be fixed. Triaging Issues and Defects Now that a new incident has been logged, the next step in the process is to review the incident and assign it to a developer to be fixed. First, click on the Artifacts > Incidents menu item. This will display the incident list page for the product. You can also view the same list of incidents in a Kanban board view. In either view, click on the hyperlink for the new incident \"Error displaying user fields\". This will display the incident details page: In the 'Operations' dropdown menu underneath the incident name on the top of the page, select 'Assign Incident' option. This will switch the status of the incident from New > Assigned Locate the 'People' section and set the 'Owner' field to System Administrator (your user) Add a new comment in the 'Comments' section at the bottom of the page. Type \"Assigning this to you to fix. Issue was found during testing.\" Click the Save button in the top toolbar. The incident will be assigned to your user for fixing. To see what a developer would see in real life, go back to the \"My Page\" by clicking on the orange SpiraPlan icon in the top-left of the main Navigation Bar on the top of the screen: You can see that you've been assigned an incident under the \"My Assigned Incidents\" widget (on the right-hand side). Now click on the hyperlink for the incident to bring up the incident details page: The status is 'Assigned' and the comment from the product manager is clearly visible. To help you reproduce the issue, you can click on the \"Associations\" tab to display the test run and requirements associated with this incident: If you click on the test run hyperlink \"Test ability to add new users\", you will see the detailed information about the test execution that resulted in the bug being logged: This allows the developer to retrace the steps taken by the tester and attempt to reproduce the issue. We are going to assume we can reproduce and fix the issue so we can go right ahead and resolve the incident. Make your way back to the incident details screen: Artifacts > Incidents > Error displaying user fields' link. Click on the workflow Operations drop-down menu and select 'Resolve Incident'. Fill in the following fields: Resolved Release: \"Release 1.0 - Iteration 2\" In 'Comments' section enter a new comment: \"Fixed the incident.\" Click Save on the main toolbar. The incident will now change from Assigned > Resolved and an email will be sent to the tester letting them know that they need to retest the test case and close the incident. Reviewing Your Product You can check on the overall status of the product by clicking the hexagon on the main navigation bar. This will take you to the product home page. Below is what this home page looks like for a more complete product than we have been working through in this quick start guide. Note how you can change between several views (the buttons on the right) to show different information based on your role or current needs, or only show data for a particular release (see the dropdown beneath the product name on the left). Reviewing a Program In addition to having dashboards that let you monitor the performance of your product, SpiraPlan has several views available at the program level. These let you group products together into a common program and report on them as a whole. To see this in action, click on the \"Sample Program One\" link in the main navigation bar. You can click on the Artifacts > Planning Board tab to display the Program Planning Board (which is similar to the one we used previously for products, except that it is works across multiple products): There are additional program views that let you see the Releases and Incidents at a program level. Click Artifacts > Releases: Congratulations Congratulations! You have now completed the software development and testing lifecycle using SpiraPlan. For more information about any of the features, please refer to the SpiraPlan User Manual.","title":"SpiraPlan"},{"location":"SpiraPlan-Quick-Start-Guide/#spiraplan-quick-start-guide","text":"","title":"SpiraPlan Quick Start Guide"},{"location":"SpiraPlan-Quick-Start-Guide/#logging-in-and-selecting-a-product","text":"Once you have installed a self-hosted trial or signed up for a hosted trial of SpiraPlan, you should see the following login screen in your web browser: Enter the following default details to start using the system: Login: administrator Password: PleaseChange Once logged-in, you are shown your \"My Page\". The very first time you log in you will be able to take a quick orientation tour of the application (as shown in the screenshot below). The My Page looks pretty empty right now. This is normal. For this tutorial we want to start with an empty product that has no data in it, so click the hyperlink under 'My Products' for 'Sample Empty Product' / 'Sample Program Two'. That will select the empty product. Now to see the homepage for the product you just selected, click on the hexagon in the top left: The product home page shows various widgets containing key product metrics. These are empty now, because the product has no data in it. In the rest of this guide we are going to fix that.","title":"Logging In and Selecting a Product"},{"location":"SpiraPlan-Quick-Start-Guide/#define-the-requirements","text":"On the main Navigation bar, click Artifacts > Requirements to display the product's requirements list page: The terminology in SpiraPlan is designed to be methodology agnostic. The table below shows how the terms used in SpiraPlan relate to some common methodologies: SpiraPlan Extreme Programming Scrum AgileUP / DSDM Summary Requirement Epic Epic Feature Group Requirement User Story Backlog Item Requirement Task Task Task Task Release Release Release Release Sprint Iteration Sprint Iteration At first, the requirements list will be empty. Click the 'Insert' button in the toolbar to create your first requirement. Hit 'Save and New' (shown as buttons on the right of the new requirement in the list table) to add each new requirement after that. Below is the list of requirement names to add: Functional Requirements Module 1 System must allow entry of users System must allow the modification of users System must allow the deletion of users Module 2 System should allow administrators to setup notifications You should now have a simple, flat requirements list, like the one below: Next, we are going to indent the requirements. This will give us a hierarchy, with some requirements being children of others. To indent, select the checkboxes of all the requirements below 'Functional Requirements' and click 'Indent'. This makes 'Functional Requirements' the parent and all the other requirements its children. Now, select the three requirements immediately below 'Module 1' and click 'Indent' again. This makes these three requirements children of 'Module 1' (and grandchildren of 'Functional Requirements'). Repeat for the requirement below 'Module 2' by right-clicking on this last requirement and choosing 'Indent' from the popup context menu. You should now have a list that looks like: We now have a nicely grouped set of requirements. Let's enter more information about them, starting with setting their types and priorities. Click the ''select all' checkbox at the top of the list (the checkbox just above the checkbox for 'Functional Requirements') Click on the top 'Edit' button in the right-hand column of that same row. That will make all the requirement rows editable: Set the 'Type' of the four requirements you can edit this for to User Story'. Choose whatever values you like for the 'Importance' field. Click the Save button. You now have a prioritized list of user story requirements: The next thing we can do is assign estimates to each requirement. This is something that the developers or business analysts may do based on the complexity and scope of each. The 'Estimates' column is not visible yet, so first we need to show it. To do that, click on the 'Show/Hide Columns' dropdown list and select 'Show Estimate (points)': By default, all the requirements will have been assigned a default estimate of 1.0 point. A point is not a defined number of hours, but an indication of the size of the requirement. The estimates should reflect how big each of the requirements are relative to each other. To change the estimates: Click the \"select all\" checkbox at the top of the list Click on the top 'Edit' button in the right-hand column. The requirements should be in editable mode again. Enter the following estimates for the requirements Click Save Requirement Estimate System must allow entry of users 1.5 points System must allow the modification of users 2.0 points System must allow the deletion of users 1.0 points System should allow administrators to setup notifications 2.0 points Your requirements should now look like this (with each parent's estimates automatically summing up the estimates of their children): We have created a list of prioritized, estimated requirements, which is a great way to start our product. In the next section we are going to enter releases and sprints.","title":"Define the Requirements"},{"location":"SpiraPlan-Quick-Start-Guide/#create-the-release-and-iteration-plan","text":"On the main navigation bar, click out of 'Requirements' and select 'Releases' menu option to display the product's release list page: The release list will be empty. Click the 'Insert' button in the toolbar to create your first release. Hit 'Save and New' (shown as buttons on the right of the new release in the list table) to add each new release after that. Below is the list of release names to add: Release 1.0 Version Number: 1.0.0.0 Start Date: Today's Date End Date: Today's Date + 2 months Release 1.1 Version Number: 1.1.0.0 Start Date: Today's Date + 2 months End Date: Today's Date + 4 months You should have a list of releases like this: We need to add one additional level of detail to each release -- the list of sprints that will take place in each release. Let's add some sample sprints for the first release: Select the checkbox for Release 1.0 and, from the toolbar, click Insert > Child Release Choose a name for the new sprint Make sure its 'Type' is set to 'sprint' Specify its date range. We recommend making each sprint last 2 weeks and have each one scheduled in series Click Save And New Repeat steps 2-5 above, then steps 2-4 and then finally click Save on the final sprint's row. You should have three sprints added to the list, all children of Release 1.0. Finally, let's specify the number of resources assigned to each sprint and release. Click on the 'Show/Hide Columns' dropdown list and select 'Show # Resources' column Select the three checkboxes for the sprints of \"Release 1.0\" Click the Edit button on the toolbar Adjust the # Resources for the sprints to 2 Click Save","title":"Create the Release and Iteration Plan"},{"location":"SpiraPlan-Quick-Start-Guide/#adding-requirement-tasks","text":"We have defined the high-level schedule for Release 1.0. The next stage is to have the developers take each of the requirements defined so far and define the various tasks needed to deliver them. Each task will have its own estimate associated with it. In addition, you can optionally specify date ranges and priorities to each of the individual tasks. To start adding tasks, go to the main navigation bar and click out of Releases and hit Requirements to display the requirements list. Click on the hyperlink for the first requirement (\"System must allow entry of users\") and the requirement's details page will be displayed: Notice that under 'Dates and Times' column on the right, the system displays an initial resource estimate of 1.5 points and 12 hours. This is based on an initial product setting of 8 hours per story point. Once you start adding tasks and getting metrics based on the actual team velocity (how many story points they can accomplish in a given time frame), the system can update that conversion metric. Click on the 'Tasks' tab to display the list of tasks defined for this requirement. The list is empty, so let's change that: Because we want to enter the estimated effort for each task, before entering the tasks, first click on the 'Show/Hide Columns' dropdown list and hit the 'Show Est. Effort' column Click the New Task button (this adds a new task and associates it with this requirement) Set the task's name to \"Create user data tables\" Choose a 'Priority' level Set the 'Est. effort' to 10.0h. Click Save . The new task has now been added: We have more tasks to add. The table below shows 12 tasks in total to add to 4 different requirements. This includes the one we just created for completeness. Requirement / Task Est. Estimate System must allow entry of users Create user data tables 10.0h Develop user business object 10.0h Build user creation screens 20.0h System must allow the modification of users Extend user business object to handle updates 5.0h Add user list page 15.0h Add user details page 20.0h Add user permissions page 15.0h System must allow the deletion of users Extend user business object to handle deletes 5.0h Update user list page to add delete functionality 10.0h System should allow administrators to setup notifications Create user administration home 15.0h Add user settings for notifications to database 10.0h Create user notifications administration page 20.0h On the main Navigation bar, click again on 'Requirements'. You should now have the following requirements list page. In this screenshot we have hidden the 'Author' field and shown the 'Task Effort' field to show the detailed task effort aggregated up to the requirements. The total number of hours for these tasks divided by the total number of story points gives a number a lot more than the 8 hours that the system assumes. We can update the system to better estimate the number of hours to deliver each story point. To update the metric, go to the three cogs dropdown menu on the rightmost corner of the main Navigation Bar, locate Planning and click Planning Options: As you can see, the system lists 8.0 hours as the current number of hours required to deliver a single story point of functionality. Now that we have some actual tasks in the product, click on the 'Suggest 'button to have the system provide its suggestion of the new metric: Click the 'Apply' button to update the planning metric, and then click the main Save button at the very bottom of the page to confirm the change.","title":"Adding Requirement Tasks"},{"location":"SpiraPlan-Quick-Start-Guide/#adding-the-test-cases","text":"Click on the Artifacts > Test Cases menu option to display the product's test case list page: The test case list is empty and the only folder visible in the 'Folders' tree on the left-hand side is 'Root'. Click on the Add button underneath the folder tree Enter the new folder name 'Functional Tests' Click Add You now have a new folder in the 'Folders' tree view. To show it, click 'Refresh'. Click on this folder from the 'Folders' tree on the left Click 'New Test Case' from the toolbar Enter \"Test ability to add new users\" for the name of this new test case Click Save And New Repeat the above steps to create 3 more test cases: \"Test ability to edit existing users\" \"Test ability to delete existing users\" \"Test ability to edit notifications\" You should now have the following test case list: Next, we need to enter detailed test steps to each test case, and link each test to the appropriate requirements. Click on the hyperlink for the first test case 'Test ability to add new users'. This will bring up the test case details page: In the 'Description' box under 'Detailed Information' section, enter a brief overview of the test case (something like \"this test case verifies that you can add new users to the system and that all of the fields get saved correctly.\"). Scrolling down to the 'Test Steps' section, you will see a single test step has been automatically created for you with some suggested text: This test case needs 3 test steps. Click 'Edit' on 'Step 1' and enter the first set of parameters below. Click Save and then 'Insert Step' to add the second test step and enter its information from below Click 'Save and New' to make the third step Once you've entered its information click Save Test Step Description Expected Result Sample Data Click on the link to add new user New user screen displayed Enter the name, email address and password of the new user. Data accepted Fred Bloggs fredblogs@example.com Click the 'Submit' button to create the user. The user is created You should now have the following test steps in the test case: Next, we need to link this test case to the requirement(s) that it validates. Click the 'Req. Coverage' tab above: Click the '+ Add' button to display the association adding panel: Choose the 'System must allow the entry of users' requirement Click the Save button beneath the list of requirements to add the test case to this requirement Let's repeat the process for the other test cases, adding a couple of test steps to each. Then link the test cases to the requirements according to this table just like you did above: Test Case Requirement Test ability to add new users System must allow entry of users Test ability to edit existing users System must allow the modification of users Test ability to delete existing users System must allow the deletion of users Test ability to edit notifications System should allow administrators to setup notifications We have created test cases and set up their test coverage. Next, we need to specify which releases and sprints they can be tested in. First navigate to the product's test case list page again by clicking on 'Test Cases' on the main navigation bar Select the checkbox of each test case in the 'Functional Tests' folder. Click on 'Tools' drop-down menu on the toolbar Click 'Add to Release' Select 'Release 1.0 Click Add . You have added all the tests to the overarching Release. Finally, we want to add the tests to the different sprints, based off the data in the table below. Select the checkbox of each relevant test case in the 'Functional Tests' folder. Click on 'Tools' drop-down menu on the toolbar Click 'Add to Release' Select the appropriate sprint Click Add Test Case Sprint(s) Test ability to add new users Release 1.0 - Iteration 1 Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to edit existing users Release 1.0 - Iteration 1 Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to delete existing users Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to edit notifications Release 1.0 - Iteration 3 You typically want to include previous functionality in each of the successive iterations to ensure regression coverage. That is what we have done here. This means that each sprint includes new test cases for the new requirements, as well as existing test cases for pre-existing functionality.","title":"Adding the Test Cases"},{"location":"SpiraPlan-Quick-Start-Guide/#planning-the-sprint","text":"We have requirements that have tasks, and tests connected to them. What we haven't done yet is scope out which requirements go in which sprint. From the artifact dropdown in the global navigation bar, click \"Planning Board\" to display the product backlog planning board On the planning board page set the 'Group By' dropdown on the left to \"By Priority\" To show all requirements check that in the left-most column all the priority levels are shown in an expanded view (downward facing triangle signs) To view the iteration plan for a specific release, select 'Release 1.0' on the 'Planning:' drop down menu on the top left. Choose 'By Sprint' from the drop-down 'Group By' menu. That will display the sprint plan for the selected release (currently empty) Expand the '(Unassigned Items)' entry to display the requirements that are in the product backlog Each backlog item (requirement or incident) is represented by a virtual \"story card\" in the iteration. The left-hand side of each item displays the priority color. The progress bar near the bottom of each item depicts the progress of the item. You can flip through each iteration to see the work planned by clicking the left/right arrow buttons at the sides of the screen. Now drag the two highest priority requirements (the ones with Importance = 1 - Critical) to the first iteration: In the screenshots above the cards are showing more information then you may see by default. Extra information can be shown by toggling the buttons at the top right of the planning board To see more information about each requirement, enable the 'Detailed View' option To see the individual tasks associated with each requirement, select the 'Tasks' option To see the individual tests associated with each requirement, select the 'Test Cases' option You can determine how much time has been scheduled in the first sprint and how much time is remaining. Although we have spare time available in Iteration 1, we will leave room left for fixing incidents, so next, drag and drop the remaining two requirements to Iteration 2:","title":"Planning the Sprint"},{"location":"SpiraPlan-Quick-Start-Guide/#assigning-the-requirements-tasks","text":"Now that we have planned which requirements (user stories) and tasks are planned for each sprint, we can assign tasks to the appropriate developer(s). The process you follow will depend on your methodology (e.g. in Scrum the developers pick the tasks, but in Extreme Programming the product manager usually assigns tasks). To assign the tasks, go to the main Navigation Bar and click on Artifact > Tasks to display the main tasks list page: Click on the 'Board' option on the top-right of the screen to change to the Kanban board view: You can see at a glance which tasks are in each status (in this case, they are all marked as 'Not Started'). To see the distribution of tasks by person for a specific sprint, change the release selection to 'Release 1.0 Iteration 1', and the 'Group By' dropdown to 'By Person': For our sample product, we have two product members listed (included ourselves). As an example, select the first four tasks (which are all priority = 1 - Critical) and drag them to your user's section: Now you can clearly see the four tasks that have been assigned to your user. To simulate how this would appear to a developer, click on the main SpiraPlan icon (in the top-left) to display your user's \"My Page\" dashboard: This page lists all the development tasks that have been assigned to your user. Click on the task \"Create user data tables\" to display the task details page: This task has been estimated at 10.0 hours and is currently not started. The next step is to start working on the assigned task and report back progress. As an example: Click the workflow Operations button and choose 'Start Task' Then under 'Dates and Times' enter an 'Actual Effort' of 3.0 hours, and a 'Remaining Effort' of 5.0 hours In the 'Comments' section below, add a comment: \"Added initial set of data tables\" Click Save at the top of the page The progress indicator will reflect the changes and the new comment will have been added. Now click on the other three assigned tasks, start them, and specify the following: Requirement / Task Est. Estimate Actual Effort Remaining Effort Create user data tables 10.0h 3.0h 5.0h Develop user business object 10.0h 2.0h 7.5h Build user creation screens 20.0h 3.0h 18.0h Extend user business object to handle updates 5.0h 0.5h 4.0h After updating the assigned tasks, the 'My Page' dashboard will show all these changes: Similarly, for the product manager, click on Requirements from the artifact dropdown in the global Navigation Bar to display the requirements list. This will show the task progress as it impacts the various requirements:","title":"Assigning the Requirements &amp; Tasks"},{"location":"SpiraPlan-Quick-Start-Guide/#scheduling-the-testing-activities","text":"Now that we have created our test plan for each release and sprint, we need to schedule the test cases for execution by our testers. As an example, we'll create a single test set (also known as a test suite) that contains a list of test cases to be executed by a specific tester. On the main Navigation Bar, click on Artifacts >Test Sets menu option to display the product's test set list page: At first, the test set list will be empty and the 'Folders' tree on the left will only show 'Root'. Click the Add button beneath the folder tree Enter the new folder name 'Test Cycle #1' Click the Add button. Click on the folder you just made Click 'New Test Set' from the toolbar Enter the name of the new test set 'Testing new functionality' Click Save You should now have the following test set list: Click on the hyperlink for the test set to bring up the test set details page: Let's add the appropriate test cases to this set. Click the Add button in the 'Test Cases' section halfway down the page to bring up the following panel: Locate 'Root' drop down menu under 'Test Cases' section Choose the 'Functional Tests' folder and the test cases in that folder will be displayed: Select the following test cases and click the Save button: Test ability to add new users Test ability to edit existing users You should now have the following displayed: Next, let's assign this test set to a specific release and to a particular tester. To do that, choose the following values for the following fields and click Save : Owner = System Administrator (your user) Scheduled = Release 1.0 - Iteration 1 Planned Date = (Today's Date) You have now scheduled this test set to be executed by your user by the end of today against the first iteration of release 1.0:","title":"Scheduling the Testing Activities"},{"location":"SpiraPlan-Quick-Start-Guide/#running-tests-and-logging-incidents","text":"Now that you have scheduled the test set, if you go to the 'My Page' by clicking on the SpiraPlan logo in the top-left, you'll see your newly assigned test set down on the left: Click the 'Execute' button (with the play icon) to the right of this new test set. That will start the test execution wizard: On the first screen, the release dropdown list will have been automatically pre-selected to the release specified in the test set. Click 'Next' to move to the first test step in the first test case: Note that when you first visit this page, you will be shown a quick guided tour of how the page works. As a tester, you can progress through each of the test steps in each test case in the test set in turn. For each test step you can enter Pass , Fail , Blocked, Caution, or Not Applicable . If you enter any status other than Pass you need to enter a value for the 'Actual Result'. For a pass status, the Actual Result is optional. Click the 'Pass' button to pass the first test step. As soon as you do, the test will automatically progress to the second test step: Now for the second test step, enter in the actual result field \"Unable to enter the sample data as the fields were disabled\". Before clicking the Fail button, we also want to enter in the following fields in the Incident form (accessed by clicking the \"Incidents\" tab): Name: Error displaying user fields Type: Bug Priority: 2 - High Now click the 'Fail' button and you will have recorded a test failure and a new incident/defect: Now that we have logged the test failure and the new incident/defect, click on a hexagon on the main navigation bar on the left of \"Sample Empty Product\" option. You'll be taken to the product homepage with the requirements and test case metrics now visible in individual widgets (like the Test Execution Status widget shown below): If you go to the Artifacts > Test Sets page, you also see the status of our test set: If you go to the Artifacts > Requirements page, you'll see the different requirements' test coverage and the status of the tests associated with each requirement: The next step in the process is to triage the logged defect and assign it to a developer to be fixed.","title":"Running Tests and Logging Incidents"},{"location":"SpiraPlan-Quick-Start-Guide/#triaging-issues-and-defects","text":"Now that a new incident has been logged, the next step in the process is to review the incident and assign it to a developer to be fixed. First, click on the Artifacts > Incidents menu item. This will display the incident list page for the product. You can also view the same list of incidents in a Kanban board view. In either view, click on the hyperlink for the new incident \"Error displaying user fields\". This will display the incident details page: In the 'Operations' dropdown menu underneath the incident name on the top of the page, select 'Assign Incident' option. This will switch the status of the incident from New > Assigned Locate the 'People' section and set the 'Owner' field to System Administrator (your user) Add a new comment in the 'Comments' section at the bottom of the page. Type \"Assigning this to you to fix. Issue was found during testing.\" Click the Save button in the top toolbar. The incident will be assigned to your user for fixing. To see what a developer would see in real life, go back to the \"My Page\" by clicking on the orange SpiraPlan icon in the top-left of the main Navigation Bar on the top of the screen: You can see that you've been assigned an incident under the \"My Assigned Incidents\" widget (on the right-hand side). Now click on the hyperlink for the incident to bring up the incident details page: The status is 'Assigned' and the comment from the product manager is clearly visible. To help you reproduce the issue, you can click on the \"Associations\" tab to display the test run and requirements associated with this incident: If you click on the test run hyperlink \"Test ability to add new users\", you will see the detailed information about the test execution that resulted in the bug being logged: This allows the developer to retrace the steps taken by the tester and attempt to reproduce the issue. We are going to assume we can reproduce and fix the issue so we can go right ahead and resolve the incident. Make your way back to the incident details screen: Artifacts > Incidents > Error displaying user fields' link. Click on the workflow Operations drop-down menu and select 'Resolve Incident'. Fill in the following fields: Resolved Release: \"Release 1.0 - Iteration 2\" In 'Comments' section enter a new comment: \"Fixed the incident.\" Click Save on the main toolbar. The incident will now change from Assigned > Resolved and an email will be sent to the tester letting them know that they need to retest the test case and close the incident.","title":"Triaging Issues and Defects"},{"location":"SpiraPlan-Quick-Start-Guide/#reviewing-your-product","text":"You can check on the overall status of the product by clicking the hexagon on the main navigation bar. This will take you to the product home page. Below is what this home page looks like for a more complete product than we have been working through in this quick start guide. Note how you can change between several views (the buttons on the right) to show different information based on your role or current needs, or only show data for a particular release (see the dropdown beneath the product name on the left).","title":"Reviewing Your Product"},{"location":"SpiraPlan-Quick-Start-Guide/#reviewing-a-program","text":"In addition to having dashboards that let you monitor the performance of your product, SpiraPlan has several views available at the program level. These let you group products together into a common program and report on them as a whole. To see this in action, click on the \"Sample Program One\" link in the main navigation bar. You can click on the Artifacts > Planning Board tab to display the Program Planning Board (which is similar to the one we used previously for products, except that it is works across multiple products): There are additional program views that let you see the Releases and Incidents at a program level. Click Artifacts > Releases: Congratulations Congratulations! You have now completed the software development and testing lifecycle using SpiraPlan. For more information about any of the features, please refer to the SpiraPlan User Manual.","title":"Reviewing a Program"},{"location":"SpiraTeam-Quick-Start-Guide/","text":"SpiraTeam Quick Start Guide Logging In and Selecting a Product Once you have installed a self-hosted trial or signed up for a hosted trial of SpiraTeam, you should see the following login screen in your web browser: Enter the following default details to start using the system: Login: administrator Password: PleaseChange Once logged-in, you are shown your \"My Page\". The very first time you log in you will be able to take a quick orientation tour of the application (as shown in the screenshot below). The My Page looks pretty empty right now. This is normal. For this tutorial we want to start with an empty product that has no data in it, so click the hyperlink under 'My Products' for 'Sample Empty Product' / 'Sample Program Two'. That will select the empty product. Now to see the homepage for the product you just selected click on the hexagon in the top left: The product home page shows various widgets containing key product metrics. These are empty now, because the product has no data in it. In the rest of this guide we are going to fix that. Define the Requirements On the main Navigation bar, click Artifacts > Requirements to display the product's requirements list page: The terminology in SpiraTeam is designed to be methodology agnostic. The table below shows how the terms used in SpiraTeam relate to some common methodologies: SpiraPlan Extreme Programming Scrum AgileUP / DSDM Summary Requirement Epic Epic Feature Group Requirement User Story Backlog Item Requirement Task Task Task Task Release Release Release Release Sprint Iteration Sprint Iteration At first, the requirements list will be empty. Click the 'Insert' button in the toolbar to create your first requirement. Hit 'Save and New' (shown as buttons on the right of the new requirement in the list table) to add each new requirement after that. Below is the list of requirement names to add: Functional Requirements Module 1 System must allow entry of users System must allow the modification of users System must allow the deletion of users Module 2 System should allow administrators to setup notifications You should now have a simple, flat requirements list, like the one below: Next, we are going to indent the requirements. This will give us a hierarchy, with some requirements being children of others. To indent, select the checkboxes of all the requirements below 'Functional Requirements' and click 'Indent'. This makes 'Functional Requirements' the parent and all the other requirements its children. Now, select the three requirements immediately below 'Module 1' and click 'Indent' again. This makes these three requirements children of 'Module 1' (and grandchildren of 'Functional Requirements') Repeat for the requirement below 'Module 2' by right-clicking on this last requirement and choosing 'Indent' from the popup context menu. You should now have a list that looks like: We now have a nicely group set of requirements. Let's enter more information about them, starting with setting their types and priorities. Click the ''select all' checkbox at the top of the list (the checkbox just above the checkbox for 'Functional Requirements') Click on the top 'Edit' button in the right-hand column of that same row. That will make all the requirement rows editable: Set the 'Type' of the four requirements you can edit this for to User Story'. Choose whatever values you like for the 'Importance' field. Click the 'Save' button. You now have a prioritized list of user story requirements: The next thing we can do is assign estimates to each requirement. This is something that the developers or business analysts may do based on the complexity and scope of each. The 'Estimates' column is not visible yet, so first we need to show it. To do that, click on the 'Show/Hide Columns' dropdown list and select 'Show Estimate (points)'.: By default, all the requirements will have been assigned a default estimate of 1.0 point. A point is not a defined number of hours, but an indication of the size of the requirement. The estimates should reflect how big each of the requirements are relative to each other. To change the estimates: Click the \"select all\" checkbox at the top of the list Click on the top 'Edit' button in the right-hand column. The requirements should be in editable mode again. Enter the following estimates for the requirements Click 'Save' Requirement Estimate System must allow entry of users 1.5 points System must allow the modification of users 2.0 points System must allow the deletion of users 1.0 points System should allow administrators to setup notifications 2.0 points Your requirements should now look like this (with each parent's estimates automatically summing up the estimates of their children): We have created a list of prioritized, estimated requirements, which is a great way to start our product. In the next section we are going to enter releases and sprints. Create the Release and Iteration Plan On the main navigation bar, click out of 'Requirements' and select 'Releases' menu option to display the product's release list page: The release list will be empty. Click the 'Insert' button in the toolbar to create your first release. Hit 'Save and New' (shown as buttons on the right of the new release in the list table) to add each new release after that. Below is the list of release names to add Release 1.0 -- version number 1.0.0.0 Start Date: Today's Date End Date: Today's Date + 2 months Release 1.1 -- version number 1.1.0.0 Start Date: Today's Date + 2 months End Date: Today's Date + 4 months You should have a list of releases like this: We need to add one additional level of detail to each release -- the list of sprints that will take place in each release. Let's add some sample sprints for the first release. Select the checkbox for Release 1.0 and, from the toolbar, click Insert > Child Release. Choose a name for the new sprint Make sure its 'Type' is set to 'sprint' Specify its date-range. We recommend making each sprint last 2-weeks and have each one scheduled in series click 'Save And New'. Repeat steps 2-5 above, then steps 2-4 and then finally click 'Save' on the final sprint's row. You should have three sprints added to the list, all children of Release 1.0 Finally, let's specify the number of resources assigned to each sprint and release. Click on the 'Show/Hide Columns' dropdown list and select 'Show # Resources' column Select the three checkboxes for the sprints of \"Release 1.0\" Click the 'Edit' button on the toolbar. Adjust the # resources for the sprints to 2. Click 'Save': Adding Requirement Tasks We have defined the high-level schedule for Release 1.0. The next stage is to have the developers take each of the requirements defined so far and define the various tasks needed to deliver them. Each task will have its own estimate associated with it. In addition, you can optionally specify date-ranges and priorities to each of the individual tasks. To start adding tasks, go to the main navigation bar and click out of Releases and hit Requirements to display the requirements list. Click on the hyperlink for the first requirement (\"System must allow entry of users\") and the requirement's details page will be displayed: Notice that under 'Dates and Times' column on the right, the system displays an initial resource estimate of 1.5 points and 12 hours. This is based on an initial product setting of 8 hours per story point. Once you start adding tasks and getting metrics based on the actual team velocity (how many story points they can accomplish in a given time frame), the system can update that conversion metric. Click on the 'Tasks' tab to display the list of tasks defined for this requirement. The list is empty, so let's change that: Because we want to enter the estimated effort for each task, before entering the tasks, first click on the 'Show/Hide Columns' dropdown list and hit the 'Show Est. Effort' column. Click the 'New Task' button (this adds a new task and associated it with this requirement) Set the task's name to \"Create user data tables\" Choose a 'Priority' level Set the 'Est. effort' to 10.0h. Click 'Save'. The new task has now been added: We have more tasks to add. The table below shows 12 tasks in total to add to 4 different requirements. This includes the one we just created for completeness. Requirement / Task Est. Estimate System must allow entry of users Create user data tables 10.0h Develop user business object 10.0h Build user creation screens 20.0h System must allow the modification of users Extend user business object to handle updates 5.0h Add user list page 15.0h Add user details page 20.0h Add user permissions page 15.0h System must allow the deletion of users Extend user business object to handle deletes 5.0h Update user list page to add delete functionality 10.0h System should allow administrators to setup notifications Create user administration home 15.0h Add user settings for notifications to database 10.0h Create user notifications administration page 20.0h On the main Navigation bar, click again on 'Requirements'. You should now have the following requirements list page. In this screenshot we have hidden the 'Author' field and shown the 'Task Effort' field to show the detailed task effort aggregated up to the requirements. The total number of hours for these tasks divided by the total number of story points, gives a number a lot more than the 8 hours that the system assumes. We can update the system to better estimate the number of hours to deliver each story point. To update the metric, go to the three cogs dropdown menu on the rightmost corner of the main Navigation Bar, locate Planning and click Planning Options: As you can see, the system lists 8.0 hours as the current number of hours required to deliver a single story point of functionality. Now that we have some actual tasks in the product, click on the 'Suggest' button to have the system provide its suggestion of the new metric: Click the 'Apply' button to update the planning metric, and then click the main 'Save' button at the very bottom of the page to confirm the change. Adding the Test Cases Click on the Artifacts > Test Cases menu option to display the product's test case list page: The test case list is empty and the only folder visible in the 'Folders' tree on the left-hand side is 'Root'. Click on the 'Add' button underneath the folder tree, Enter the new folder name 'Functional Tests'. Click 'Add'. You now have a new folder in the 'Folders' tree view. To show it, click 'Refresh'. Click on this folder from the 'Folders' tree on the left Click 'New Test Case' from the toolbar. Enter \"Test ability to add new users\" for the name of this new test case Click 'Save And New' Repeat the above steps to create 3 more test cases: Test ability to edit existing users Test ability to delete existing users Test ability to edit notifications You should now have the following test case list: Next, we need to enter detailed test steps to each test case, and link each test to the appropriate requirements. Click on the hyperlink for the first test case 'Test ability to add new users'. This will bring up the test case details page In the 'Description' box under 'Detailed Information' section, enter a brief overview of the test case (something like \"this test case verifies that you can add new users to the system and that all of the fields get saved correctly.\"). Scrolling down to the 'Test Steps' section, you will see a single test step has been automatically created for you with some suggested text: This test case needs 3 test steps. Click 'Edit' on 'Step 1' and enter the first set of parameters below. Click 'Save' and then 'Insert Step' to add the second test step and enter its information from below Click 'Save and New' to make the third step Once you've entered its information click 'Save' Test Step Description Expected Result Sample Data Click on the link to add new user New user screen displayed Enter the name, email address and password of the new user. Data accepted Fred Bloggs fredblogs@example.com Click the 'Submit' button to create the user. The user is created You should now have the following test steps in the test case: Next, we need to link this test case to the requirement(s) that it validates. Click the 'Req. Coverage' tab above: Click the '+ Add' button to display the association adding panel: Choose the 'System must allow the entry of users' requirement Click the 'Save' button beneath the list of requirements to add the test case to this requirement Let's repeat the process for the other test cases, adding a couple of test steps to each. Then link the test cases to the requirements according to this table just like you did above: Test Case Requirement Test ability to add new users System must allow entry of users Test ability to edit existing users System must allow the modification of users Test ability to delete existing users System must allow the deletion of users Test ability to edit notifications System should allow administrators to setup notifications We have created test cases and set up their test coverage. Next, we need to specify which releases and sprints they can be tested in. First navigate to the product's test case list page again by clicking on 'Test Cases' on the main navigation bar Select the checkbox of each test case in the 'Functional Tests' folder. Click on 'Tools' drop-down menu on the toolbar Click 'Add to Release' Select 'Release 1.0 Click 'Add'. You have added all the tests to the overarching Release. Finally, we want to add the tests to the different sprints, based off the data in the table below. Select the checkbox of each relevant test case in the 'Functional Tests' folder. Click on 'Tools' drop-down menu on the toolbar Click 'Add to Release' Select the appropriate sprint Click 'Add' Test Case Sprint(s) Test ability to add new users Release 1.0 - Iteration 1 Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to edit existing users Release 1.0 - Iteration 1 Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to delete existing users Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to edit notifications Release 1.0 - Iteration 3 You typically want to include previous functionality in each of the successive iterations to ensure regression coverage. That is what we have done here. This means that each sprint includes new test cases for the new requirements, as well as existing test cases for pre-existing functionality. Planning the Sprint We have requirements that have tasks, and tests connected to them. What we haven't done yet is scope out which requirements go in which sprint. On the main Navigation Bar, click on the Planning > Planning Board option on the main menu to display the product backlog planning board. Make sure the 'Group By' dropdown on the left is set to \"By Priority\" Make sure all requirements are visible by checking the left-most column and ensuring that all priority levels are shown in an expanded view (downward facing triangle signs) To view the iteration plan for a specific release, select 'Release 1.0' on the 'Planning:' drop down menu on the top left. Choose 'By Sprint' from the drop-down 'Group By' menu. That will display the sprint plan for the selected release (currently empty) Expand the '(Unassigned Items)' entry to display the requirements that are in the product backlog Each backlog item (requirement or incident) is represented by a virtual \"story card\" in the iteration. The left-hand side of each item displays the priority color. The progress bar near the bottom of each item depicts the progress of the item. You can flip through each iteration to see the work planned by clicking the left/right arrow buttons at the sides of the screen. Now drag the two highest priority requirements (the ones with Importance = 1-Critical) to the first iteration: In the screenshots above the cards are showing more information then you may see by default. Extra information can be shown by toggling the buttons at the top right of the planning board To see more information about each requirement, enable the 'Detailed View' option To see the individual tasks associated with each requirement, select the 'Tasks' option To see the individual tests associated with each requirement, select the 'Test Cases' option You can determine how much time has been scheduled in the first sprint and how much time is remaining. Although we have spare time available in Iteration 1, we will leave room left for fixing incidents, so next, drag and drop the remaining two requirements to Iteration 2: Assigning the Requirements & Tasks Now that we have planned which requirements (user stories) and tasks are planned for each sprint, we can assign tasks to the appropriate developer(s). The process you follow will depend on your methodology (e.g. in Scrum the developers pick the tasks, but in Extreme Programming the product manager usually assigns tasks). To assign the tasks, go to the main Navigation Bar and click on Artifact > Tasks to display the main tasks list page: Click on the 'Board' option on the top-right of the screen to change to the Kanban board view: You can see at a glance which tasks are in each status (in this case, they are all marked as 'Not Started'). To see the distribution of tasks by person for a specific sprint, change the release selection to 'Release 1.0 Iteration 1', and the 'Group By' dropdown to 'By Person': For our sample product, we have two product members listed (included ourselves). As an example, select the first four tasks (which are all priority = 1 -- Critical) and drag them to your user's section: Now you can clearly see the four tasks that have been assigned to your user. To simulate how this would appear to a developer, click on the main SpiraTeam icon (in the top-left) to display your user's \"My Page\" dashboard: This page lists all the development tasks that have been assigned to your user. Click on the task \"Create user data tables\" to display the task details page: This task has been estimated at 10.0 hours and is currently not started. The next step is to start working on the assigned task and report back progress. As an example: click the workflow 'Operations' and chose 'Start Task'. Then under 'Dates and Times' enter an 'Actual Effort' of 3.0 hours, and a 'Remaining Effort' of 5.0 hours. In the 'Comments' section below, add a comment: \"Added initial set of data tables\", Click 'Save' at the top of the page. The progress indicator will reflect the changes and the new comment will have been added. Now click on the other three assigned tasks, start them, and specify the following: Requirement / Task Est. Estimate Actual Effort Remaining Effort Create user data tables 10.0h 3.0h 5.0h Develop user business object 10.0h 2.0h 7.5h Build user creation screens 20.0h 3.0h 18.0h Extend user business object to handle updates 5.0h 0.5h 4.0h After updating the assigned tasks, the 'My Page' dashboard will show all these changes: Similarly, for the product manager, On the main Navigation Bar, clicking on Artifacts > Requirements to display the requirements list will show the task progress as it impacts the various requirements: Scheduling the Testing Activities Now that we have created our test plan for each release and sprint, we need to schedule the test cases for execution by our testers. As an example, we'll create a single test set (also known as a test suite) that contains a list of test cases to be executed by a specific tester. On the main Navigation Bar, click on Artifacts >Test Sets menu option to display the product's test set list page: At first, the test set list will be empty and the 'Folders' tree on the left will only show 'Root'. Click the 'Add' button beneath the folder tree Enter the new folder name 'Test Cycle #1' Click the 'Add' button. Click on the folder you just made Click 'New Test Set' from the toolbar. Enter the name of the new test set 'Testing new functionality' Click 'Save' You should now have the following test set list: Click on the hyperlink for the test set to bring up the test set details page: Let's add the appropriate test cases to this set. Click the 'Add' button in the 'Test Cases' section half way down the page to bring up the following panel: Locate 'Root' drop down menu under 'Test Cases' section. Choose the 'Functional Tests' folder and the test cases in that folder will be displayed: Select the following test cases and click the 'Save' button: Test ability to add new users Test ability to edit existing users You should now have the following displayed: Next, let's assign this test set to a specific release and to a particular tester. To do that, choose the following values for the following fields and click 'Save': Owner = System Administrator (your user) Scheduled = Release 1.0 - Iteration 1 Planned Date = (Today's Date). You have now scheduled this test set to be executed by your user by the end of today against the first iteration of release 1.0: Running Tests and Logging Incidents Now that you have scheduled the test set, if you go to the 'My Page' by clicking on the SpiraTeam logo in the top-left, you'll see your newly assigned test set down on the left: Click the 'Execute' button (with the play icon) to the right of this new test set. That will start the test execution wizard: On the first screen, the release dropdown list will have been automatically pre-selected to the release specified in the test set. Click 'Next' to move to the first test step in the first test case: Note that when you first visit this page, you will be shown a quick guided tour of how the page works. As a tester, you can progress through each of the test steps in each test case in the test set in turn. For each test step you can enter Pass , Fail , Blocked, Caution, or Not Applicable . If you enter any status other than Pass you need to enter a value for the 'Actual Result'. For a pass status, the Actual Result is optional. Click the 'Pass' button to pass the first test step. As soon as you do, the test will automatically progress to the second test step: Now for the second test step, enter in the actual result field \"Unable to enter the sample data as the fields were disabled\". Before clicking the Fail button, we also want to enter in the following fields in the Incident form (accessed by clicking the \"Incidents\" tab): Name = Error displaying user fields Type = Bug Priority = 2 -- High Now click the 'Fail' button and you will have recorded a test failure and a new incident/defect: Now that we have logged the test failure and the new incident/defect, click on a hexagon on the main navigation bar on the left of \"Sample Empty Product\" option. You'll be taken to the product homepage with the requirements and test case metrics now visible in individual widgets (like the Test Execution Status widget shown below): If you go to the Artifacts > Test Sets page, you also see the status of our test set: If you go to the Artifacts > Requirements page, you'll see the different requirements' test coverage and the status of the tests associated with each requirement: The next step in the process is to triage the logged defect and assign it to a developer to be fixed. Triaging Issues and Defects Now that a new incident has been logged, the next step in the process is to review the incident and assign it to a developer to be fixed. First, click on the Artifacts > Incidents menu item. This will display the incident list page for the product. You can also view the same list of incidents in a Kanban board view. In either view, click on the hyperlink for the new incident \"Error displaying user fields\". This will display the incident details page: In the 'Operations' dropdown menu underneath the incident name on the top of the page, select 'Assign Incident' option. This will switch the status of the incident from New > Assigned. Location the 'People' section and set the 'Owner' field to System Administrator (your user) Add a new comment in the 'Comments' section at the bottom of the page. Type \"Assigning this to you to fix. Issue was found during testing.\" Click the 'Save' button in the top toolbar. The incident will be assigned to your user for fixing. To see what a developer would see in real life, go back to the \"My Page\" by clicking on the orange SpiraTeam icon in the top-left of the main Navigation Bar on the top of the screen: You can see that you've been assigned an incident under the \"My Assigned Incidents\" widget (on the right-hand side). Now click on the hyperlink for the incident to bring up the incident details page: The status is 'Assigned' and the comment from the product manager is clearly visible. To help you reproduce the issue, you can click on the \"Associations\" tab to display the test run and requirements associated with this incident: If you click on the test run hyperlink \"Test ability to add new users\", you will see the detailed information about the test execution that resulted in the bug being logged: This allows the developer to retrace the steps taken by the tester and attempt to reproduce the issue. We are going to assume we can reproduce and fix the issue so we can go right ahead and resolve the incident. Make your way back to the incident details screen: Artifacts> Incidents > Error displaying user fields' Hyperlink. Click on the workflow 'Operations' drop-down menu and select 'Resolve Incident'. Fill in the following fields Resolved Release = Release 1.0 - Iteration 2 In 'Comments' section enter a new comment = \"Fixed the incident.\" Click 'Save' on the main toolbar The incident will now change from Assigned > Resolved and an email will be sent to the tester letting them know that they need to retest the test case and close the incident. Reviewing Your Product You can check on the overall status of the product by clicking the hexagon on the main navigation bar. This will take you to the product home page. Below is what this home page looks like for a more complete product than we have been working through in this quick start guide. Note how you can change between several views (the buttons on the right) to show different information based on your role or current needs, or only show data for a particular release (see the dropdown beneath the product name on the left). Congratulations! You have now completed the software development and testing lifecycle using SpiraTeam. For more information about any of the features, please refer to the SpiraTeam User Manual.","title":"SpiraTeam"},{"location":"SpiraTeam-Quick-Start-Guide/#spirateam-quick-start-guide","text":"","title":"SpiraTeam Quick Start Guide"},{"location":"SpiraTeam-Quick-Start-Guide/#logging-in-and-selecting-a-product","text":"Once you have installed a self-hosted trial or signed up for a hosted trial of SpiraTeam, you should see the following login screen in your web browser: Enter the following default details to start using the system: Login: administrator Password: PleaseChange Once logged-in, you are shown your \"My Page\". The very first time you log in you will be able to take a quick orientation tour of the application (as shown in the screenshot below). The My Page looks pretty empty right now. This is normal. For this tutorial we want to start with an empty product that has no data in it, so click the hyperlink under 'My Products' for 'Sample Empty Product' / 'Sample Program Two'. That will select the empty product. Now to see the homepage for the product you just selected click on the hexagon in the top left: The product home page shows various widgets containing key product metrics. These are empty now, because the product has no data in it. In the rest of this guide we are going to fix that.","title":"Logging In and Selecting a Product"},{"location":"SpiraTeam-Quick-Start-Guide/#define-the-requirements","text":"On the main Navigation bar, click Artifacts > Requirements to display the product's requirements list page: The terminology in SpiraTeam is designed to be methodology agnostic. The table below shows how the terms used in SpiraTeam relate to some common methodologies: SpiraPlan Extreme Programming Scrum AgileUP / DSDM Summary Requirement Epic Epic Feature Group Requirement User Story Backlog Item Requirement Task Task Task Task Release Release Release Release Sprint Iteration Sprint Iteration At first, the requirements list will be empty. Click the 'Insert' button in the toolbar to create your first requirement. Hit 'Save and New' (shown as buttons on the right of the new requirement in the list table) to add each new requirement after that. Below is the list of requirement names to add: Functional Requirements Module 1 System must allow entry of users System must allow the modification of users System must allow the deletion of users Module 2 System should allow administrators to setup notifications You should now have a simple, flat requirements list, like the one below: Next, we are going to indent the requirements. This will give us a hierarchy, with some requirements being children of others. To indent, select the checkboxes of all the requirements below 'Functional Requirements' and click 'Indent'. This makes 'Functional Requirements' the parent and all the other requirements its children. Now, select the three requirements immediately below 'Module 1' and click 'Indent' again. This makes these three requirements children of 'Module 1' (and grandchildren of 'Functional Requirements') Repeat for the requirement below 'Module 2' by right-clicking on this last requirement and choosing 'Indent' from the popup context menu. You should now have a list that looks like: We now have a nicely group set of requirements. Let's enter more information about them, starting with setting their types and priorities. Click the ''select all' checkbox at the top of the list (the checkbox just above the checkbox for 'Functional Requirements') Click on the top 'Edit' button in the right-hand column of that same row. That will make all the requirement rows editable: Set the 'Type' of the four requirements you can edit this for to User Story'. Choose whatever values you like for the 'Importance' field. Click the 'Save' button. You now have a prioritized list of user story requirements: The next thing we can do is assign estimates to each requirement. This is something that the developers or business analysts may do based on the complexity and scope of each. The 'Estimates' column is not visible yet, so first we need to show it. To do that, click on the 'Show/Hide Columns' dropdown list and select 'Show Estimate (points)'.: By default, all the requirements will have been assigned a default estimate of 1.0 point. A point is not a defined number of hours, but an indication of the size of the requirement. The estimates should reflect how big each of the requirements are relative to each other. To change the estimates: Click the \"select all\" checkbox at the top of the list Click on the top 'Edit' button in the right-hand column. The requirements should be in editable mode again. Enter the following estimates for the requirements Click 'Save' Requirement Estimate System must allow entry of users 1.5 points System must allow the modification of users 2.0 points System must allow the deletion of users 1.0 points System should allow administrators to setup notifications 2.0 points Your requirements should now look like this (with each parent's estimates automatically summing up the estimates of their children): We have created a list of prioritized, estimated requirements, which is a great way to start our product. In the next section we are going to enter releases and sprints.","title":"Define the Requirements"},{"location":"SpiraTeam-Quick-Start-Guide/#create-the-release-and-iteration-plan","text":"On the main navigation bar, click out of 'Requirements' and select 'Releases' menu option to display the product's release list page: The release list will be empty. Click the 'Insert' button in the toolbar to create your first release. Hit 'Save and New' (shown as buttons on the right of the new release in the list table) to add each new release after that. Below is the list of release names to add Release 1.0 -- version number 1.0.0.0 Start Date: Today's Date End Date: Today's Date + 2 months Release 1.1 -- version number 1.1.0.0 Start Date: Today's Date + 2 months End Date: Today's Date + 4 months You should have a list of releases like this: We need to add one additional level of detail to each release -- the list of sprints that will take place in each release. Let's add some sample sprints for the first release. Select the checkbox for Release 1.0 and, from the toolbar, click Insert > Child Release. Choose a name for the new sprint Make sure its 'Type' is set to 'sprint' Specify its date-range. We recommend making each sprint last 2-weeks and have each one scheduled in series click 'Save And New'. Repeat steps 2-5 above, then steps 2-4 and then finally click 'Save' on the final sprint's row. You should have three sprints added to the list, all children of Release 1.0 Finally, let's specify the number of resources assigned to each sprint and release. Click on the 'Show/Hide Columns' dropdown list and select 'Show # Resources' column Select the three checkboxes for the sprints of \"Release 1.0\" Click the 'Edit' button on the toolbar. Adjust the # resources for the sprints to 2. Click 'Save':","title":"Create the Release and Iteration Plan"},{"location":"SpiraTeam-Quick-Start-Guide/#adding-requirement-tasks","text":"We have defined the high-level schedule for Release 1.0. The next stage is to have the developers take each of the requirements defined so far and define the various tasks needed to deliver them. Each task will have its own estimate associated with it. In addition, you can optionally specify date-ranges and priorities to each of the individual tasks. To start adding tasks, go to the main navigation bar and click out of Releases and hit Requirements to display the requirements list. Click on the hyperlink for the first requirement (\"System must allow entry of users\") and the requirement's details page will be displayed: Notice that under 'Dates and Times' column on the right, the system displays an initial resource estimate of 1.5 points and 12 hours. This is based on an initial product setting of 8 hours per story point. Once you start adding tasks and getting metrics based on the actual team velocity (how many story points they can accomplish in a given time frame), the system can update that conversion metric. Click on the 'Tasks' tab to display the list of tasks defined for this requirement. The list is empty, so let's change that: Because we want to enter the estimated effort for each task, before entering the tasks, first click on the 'Show/Hide Columns' dropdown list and hit the 'Show Est. Effort' column. Click the 'New Task' button (this adds a new task and associated it with this requirement) Set the task's name to \"Create user data tables\" Choose a 'Priority' level Set the 'Est. effort' to 10.0h. Click 'Save'. The new task has now been added: We have more tasks to add. The table below shows 12 tasks in total to add to 4 different requirements. This includes the one we just created for completeness. Requirement / Task Est. Estimate System must allow entry of users Create user data tables 10.0h Develop user business object 10.0h Build user creation screens 20.0h System must allow the modification of users Extend user business object to handle updates 5.0h Add user list page 15.0h Add user details page 20.0h Add user permissions page 15.0h System must allow the deletion of users Extend user business object to handle deletes 5.0h Update user list page to add delete functionality 10.0h System should allow administrators to setup notifications Create user administration home 15.0h Add user settings for notifications to database 10.0h Create user notifications administration page 20.0h On the main Navigation bar, click again on 'Requirements'. You should now have the following requirements list page. In this screenshot we have hidden the 'Author' field and shown the 'Task Effort' field to show the detailed task effort aggregated up to the requirements. The total number of hours for these tasks divided by the total number of story points, gives a number a lot more than the 8 hours that the system assumes. We can update the system to better estimate the number of hours to deliver each story point. To update the metric, go to the three cogs dropdown menu on the rightmost corner of the main Navigation Bar, locate Planning and click Planning Options: As you can see, the system lists 8.0 hours as the current number of hours required to deliver a single story point of functionality. Now that we have some actual tasks in the product, click on the 'Suggest' button to have the system provide its suggestion of the new metric: Click the 'Apply' button to update the planning metric, and then click the main 'Save' button at the very bottom of the page to confirm the change.","title":"Adding Requirement Tasks"},{"location":"SpiraTeam-Quick-Start-Guide/#adding-the-test-cases","text":"Click on the Artifacts > Test Cases menu option to display the product's test case list page: The test case list is empty and the only folder visible in the 'Folders' tree on the left-hand side is 'Root'. Click on the 'Add' button underneath the folder tree, Enter the new folder name 'Functional Tests'. Click 'Add'. You now have a new folder in the 'Folders' tree view. To show it, click 'Refresh'. Click on this folder from the 'Folders' tree on the left Click 'New Test Case' from the toolbar. Enter \"Test ability to add new users\" for the name of this new test case Click 'Save And New' Repeat the above steps to create 3 more test cases: Test ability to edit existing users Test ability to delete existing users Test ability to edit notifications You should now have the following test case list: Next, we need to enter detailed test steps to each test case, and link each test to the appropriate requirements. Click on the hyperlink for the first test case 'Test ability to add new users'. This will bring up the test case details page In the 'Description' box under 'Detailed Information' section, enter a brief overview of the test case (something like \"this test case verifies that you can add new users to the system and that all of the fields get saved correctly.\"). Scrolling down to the 'Test Steps' section, you will see a single test step has been automatically created for you with some suggested text: This test case needs 3 test steps. Click 'Edit' on 'Step 1' and enter the first set of parameters below. Click 'Save' and then 'Insert Step' to add the second test step and enter its information from below Click 'Save and New' to make the third step Once you've entered its information click 'Save' Test Step Description Expected Result Sample Data Click on the link to add new user New user screen displayed Enter the name, email address and password of the new user. Data accepted Fred Bloggs fredblogs@example.com Click the 'Submit' button to create the user. The user is created You should now have the following test steps in the test case: Next, we need to link this test case to the requirement(s) that it validates. Click the 'Req. Coverage' tab above: Click the '+ Add' button to display the association adding panel: Choose the 'System must allow the entry of users' requirement Click the 'Save' button beneath the list of requirements to add the test case to this requirement Let's repeat the process for the other test cases, adding a couple of test steps to each. Then link the test cases to the requirements according to this table just like you did above: Test Case Requirement Test ability to add new users System must allow entry of users Test ability to edit existing users System must allow the modification of users Test ability to delete existing users System must allow the deletion of users Test ability to edit notifications System should allow administrators to setup notifications We have created test cases and set up their test coverage. Next, we need to specify which releases and sprints they can be tested in. First navigate to the product's test case list page again by clicking on 'Test Cases' on the main navigation bar Select the checkbox of each test case in the 'Functional Tests' folder. Click on 'Tools' drop-down menu on the toolbar Click 'Add to Release' Select 'Release 1.0 Click 'Add'. You have added all the tests to the overarching Release. Finally, we want to add the tests to the different sprints, based off the data in the table below. Select the checkbox of each relevant test case in the 'Functional Tests' folder. Click on 'Tools' drop-down menu on the toolbar Click 'Add to Release' Select the appropriate sprint Click 'Add' Test Case Sprint(s) Test ability to add new users Release 1.0 - Iteration 1 Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to edit existing users Release 1.0 - Iteration 1 Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to delete existing users Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to edit notifications Release 1.0 - Iteration 3 You typically want to include previous functionality in each of the successive iterations to ensure regression coverage. That is what we have done here. This means that each sprint includes new test cases for the new requirements, as well as existing test cases for pre-existing functionality.","title":"Adding the Test Cases"},{"location":"SpiraTeam-Quick-Start-Guide/#planning-the-sprint","text":"We have requirements that have tasks, and tests connected to them. What we haven't done yet is scope out which requirements go in which sprint. On the main Navigation Bar, click on the Planning > Planning Board option on the main menu to display the product backlog planning board. Make sure the 'Group By' dropdown on the left is set to \"By Priority\" Make sure all requirements are visible by checking the left-most column and ensuring that all priority levels are shown in an expanded view (downward facing triangle signs) To view the iteration plan for a specific release, select 'Release 1.0' on the 'Planning:' drop down menu on the top left. Choose 'By Sprint' from the drop-down 'Group By' menu. That will display the sprint plan for the selected release (currently empty) Expand the '(Unassigned Items)' entry to display the requirements that are in the product backlog Each backlog item (requirement or incident) is represented by a virtual \"story card\" in the iteration. The left-hand side of each item displays the priority color. The progress bar near the bottom of each item depicts the progress of the item. You can flip through each iteration to see the work planned by clicking the left/right arrow buttons at the sides of the screen. Now drag the two highest priority requirements (the ones with Importance = 1-Critical) to the first iteration: In the screenshots above the cards are showing more information then you may see by default. Extra information can be shown by toggling the buttons at the top right of the planning board To see more information about each requirement, enable the 'Detailed View' option To see the individual tasks associated with each requirement, select the 'Tasks' option To see the individual tests associated with each requirement, select the 'Test Cases' option You can determine how much time has been scheduled in the first sprint and how much time is remaining. Although we have spare time available in Iteration 1, we will leave room left for fixing incidents, so next, drag and drop the remaining two requirements to Iteration 2:","title":"Planning the Sprint"},{"location":"SpiraTeam-Quick-Start-Guide/#assigning-the-requirements-tasks","text":"Now that we have planned which requirements (user stories) and tasks are planned for each sprint, we can assign tasks to the appropriate developer(s). The process you follow will depend on your methodology (e.g. in Scrum the developers pick the tasks, but in Extreme Programming the product manager usually assigns tasks). To assign the tasks, go to the main Navigation Bar and click on Artifact > Tasks to display the main tasks list page: Click on the 'Board' option on the top-right of the screen to change to the Kanban board view: You can see at a glance which tasks are in each status (in this case, they are all marked as 'Not Started'). To see the distribution of tasks by person for a specific sprint, change the release selection to 'Release 1.0 Iteration 1', and the 'Group By' dropdown to 'By Person': For our sample product, we have two product members listed (included ourselves). As an example, select the first four tasks (which are all priority = 1 -- Critical) and drag them to your user's section: Now you can clearly see the four tasks that have been assigned to your user. To simulate how this would appear to a developer, click on the main SpiraTeam icon (in the top-left) to display your user's \"My Page\" dashboard: This page lists all the development tasks that have been assigned to your user. Click on the task \"Create user data tables\" to display the task details page: This task has been estimated at 10.0 hours and is currently not started. The next step is to start working on the assigned task and report back progress. As an example: click the workflow 'Operations' and chose 'Start Task'. Then under 'Dates and Times' enter an 'Actual Effort' of 3.0 hours, and a 'Remaining Effort' of 5.0 hours. In the 'Comments' section below, add a comment: \"Added initial set of data tables\", Click 'Save' at the top of the page. The progress indicator will reflect the changes and the new comment will have been added. Now click on the other three assigned tasks, start them, and specify the following: Requirement / Task Est. Estimate Actual Effort Remaining Effort Create user data tables 10.0h 3.0h 5.0h Develop user business object 10.0h 2.0h 7.5h Build user creation screens 20.0h 3.0h 18.0h Extend user business object to handle updates 5.0h 0.5h 4.0h After updating the assigned tasks, the 'My Page' dashboard will show all these changes: Similarly, for the product manager, On the main Navigation Bar, clicking on Artifacts > Requirements to display the requirements list will show the task progress as it impacts the various requirements:","title":"Assigning the Requirements &amp; Tasks"},{"location":"SpiraTeam-Quick-Start-Guide/#scheduling-the-testing-activities","text":"Now that we have created our test plan for each release and sprint, we need to schedule the test cases for execution by our testers. As an example, we'll create a single test set (also known as a test suite) that contains a list of test cases to be executed by a specific tester. On the main Navigation Bar, click on Artifacts >Test Sets menu option to display the product's test set list page: At first, the test set list will be empty and the 'Folders' tree on the left will only show 'Root'. Click the 'Add' button beneath the folder tree Enter the new folder name 'Test Cycle #1' Click the 'Add' button. Click on the folder you just made Click 'New Test Set' from the toolbar. Enter the name of the new test set 'Testing new functionality' Click 'Save' You should now have the following test set list: Click on the hyperlink for the test set to bring up the test set details page: Let's add the appropriate test cases to this set. Click the 'Add' button in the 'Test Cases' section half way down the page to bring up the following panel: Locate 'Root' drop down menu under 'Test Cases' section. Choose the 'Functional Tests' folder and the test cases in that folder will be displayed: Select the following test cases and click the 'Save' button: Test ability to add new users Test ability to edit existing users You should now have the following displayed: Next, let's assign this test set to a specific release and to a particular tester. To do that, choose the following values for the following fields and click 'Save': Owner = System Administrator (your user) Scheduled = Release 1.0 - Iteration 1 Planned Date = (Today's Date). You have now scheduled this test set to be executed by your user by the end of today against the first iteration of release 1.0:","title":"Scheduling the Testing Activities"},{"location":"SpiraTeam-Quick-Start-Guide/#running-tests-and-logging-incidents","text":"Now that you have scheduled the test set, if you go to the 'My Page' by clicking on the SpiraTeam logo in the top-left, you'll see your newly assigned test set down on the left: Click the 'Execute' button (with the play icon) to the right of this new test set. That will start the test execution wizard: On the first screen, the release dropdown list will have been automatically pre-selected to the release specified in the test set. Click 'Next' to move to the first test step in the first test case: Note that when you first visit this page, you will be shown a quick guided tour of how the page works. As a tester, you can progress through each of the test steps in each test case in the test set in turn. For each test step you can enter Pass , Fail , Blocked, Caution, or Not Applicable . If you enter any status other than Pass you need to enter a value for the 'Actual Result'. For a pass status, the Actual Result is optional. Click the 'Pass' button to pass the first test step. As soon as you do, the test will automatically progress to the second test step: Now for the second test step, enter in the actual result field \"Unable to enter the sample data as the fields were disabled\". Before clicking the Fail button, we also want to enter in the following fields in the Incident form (accessed by clicking the \"Incidents\" tab): Name = Error displaying user fields Type = Bug Priority = 2 -- High Now click the 'Fail' button and you will have recorded a test failure and a new incident/defect: Now that we have logged the test failure and the new incident/defect, click on a hexagon on the main navigation bar on the left of \"Sample Empty Product\" option. You'll be taken to the product homepage with the requirements and test case metrics now visible in individual widgets (like the Test Execution Status widget shown below): If you go to the Artifacts > Test Sets page, you also see the status of our test set: If you go to the Artifacts > Requirements page, you'll see the different requirements' test coverage and the status of the tests associated with each requirement: The next step in the process is to triage the logged defect and assign it to a developer to be fixed.","title":"Running Tests and Logging Incidents"},{"location":"SpiraTeam-Quick-Start-Guide/#triaging-issues-and-defects","text":"Now that a new incident has been logged, the next step in the process is to review the incident and assign it to a developer to be fixed. First, click on the Artifacts > Incidents menu item. This will display the incident list page for the product. You can also view the same list of incidents in a Kanban board view. In either view, click on the hyperlink for the new incident \"Error displaying user fields\". This will display the incident details page: In the 'Operations' dropdown menu underneath the incident name on the top of the page, select 'Assign Incident' option. This will switch the status of the incident from New > Assigned. Location the 'People' section and set the 'Owner' field to System Administrator (your user) Add a new comment in the 'Comments' section at the bottom of the page. Type \"Assigning this to you to fix. Issue was found during testing.\" Click the 'Save' button in the top toolbar. The incident will be assigned to your user for fixing. To see what a developer would see in real life, go back to the \"My Page\" by clicking on the orange SpiraTeam icon in the top-left of the main Navigation Bar on the top of the screen: You can see that you've been assigned an incident under the \"My Assigned Incidents\" widget (on the right-hand side). Now click on the hyperlink for the incident to bring up the incident details page: The status is 'Assigned' and the comment from the product manager is clearly visible. To help you reproduce the issue, you can click on the \"Associations\" tab to display the test run and requirements associated with this incident: If you click on the test run hyperlink \"Test ability to add new users\", you will see the detailed information about the test execution that resulted in the bug being logged: This allows the developer to retrace the steps taken by the tester and attempt to reproduce the issue. We are going to assume we can reproduce and fix the issue so we can go right ahead and resolve the incident. Make your way back to the incident details screen: Artifacts> Incidents > Error displaying user fields' Hyperlink. Click on the workflow 'Operations' drop-down menu and select 'Resolve Incident'. Fill in the following fields Resolved Release = Release 1.0 - Iteration 2 In 'Comments' section enter a new comment = \"Fixed the incident.\" Click 'Save' on the main toolbar The incident will now change from Assigned > Resolved and an email will be sent to the tester letting them know that they need to retest the test case and close the incident.","title":"Triaging Issues and Defects"},{"location":"SpiraTeam-Quick-Start-Guide/#reviewing-your-product","text":"You can check on the overall status of the product by clicking the hexagon on the main navigation bar. This will take you to the product home page. Below is what this home page looks like for a more complete product than we have been working through in this quick start guide. Note how you can change between several views (the buttons on the right) to show different information based on your role or current needs, or only show data for a particular release (see the dropdown beneath the product name on the left). Congratulations! You have now completed the software development and testing lifecycle using SpiraTeam. For more information about any of the features, please refer to the SpiraTeam User Manual.","title":"Reviewing Your Product"},{"location":"SpiraTest-Quick-Start-Guide/","text":"SpiraTest Quick Start Guide Logging in and Selecting a Product Once you have installed a self-hosted trial or signed up for a hosted trial of SpiraTest, you should see the following login screen in your web browser: Enter the following default details to start using the system: Login: administrator Password: PleaseChange Once logged-in, you are shown your \"My Page\". The very first time you log in you will be able to take a quick orientation tour of the application (as shown in the screenshot below). The My Page looks pretty empty right now. This is normal. For this tutorial we want to start with an empty product that has no data in it, so click the hyperlink under 'My Products' for 'Sample Empty Product' / 'Sample Program Two'. That will select the empty product. Now to see the homepage for the product you just selected click on the hexagon in the top left: The product home page shows various widgets containing key product metrics. These are empty now, because the product has no data in it. In the rest of this guide we are going to fix that. Define the Requirements On the main Navigation bar, click Artifacts > Requirements to display the product's requirements list page: The terminology in SpiraTest is designed to be methodology agnostic. The table below shows how the terms used in SpiraTest relate to some common methodologies: SpiraPlan Extreme Programming Scrum AgileUP / DSDM Summary Requirement Epic Epic Feature Group Requirement User Story Backlog Item Requirement Task Task Task Task Release Release Release Release Sprint Iteration Sprint Iteration At first, the requirements list will be empty. Click the 'Insert' button in the toolbar to create your first requirement. Hit 'Save and New' (shown as buttons on the right of the new requirement in the list table) to add each new requirement after that. Below is the list of requirement names to add: Functional Requirements Module 1 System must allow entry of users System must allow the modification of users System must allow the deletion of users Module 2 System should allow administrators to setup notifications You should now have a simple, flat requirements list, like the one below: Next, we are going to indent the requirements. This will give us a hierarchy, with some requirements being children of others. To indent, select the checkboxes of all the requirements below 'Functional Requirements' and click 'Indent'. This makes 'Functional Requirements' the parent and all the other requirements its children. Now, select the three requirements immediately below 'Module 1' and click 'Indent' again. This makes these three requirements children of 'Module 1' (and grandchildren of 'Functional Requirements') Repeat for the requirement below 'Module 2' by right-clicking on this last requirement and choosing 'Indent' from the popup context menu. You should now have a list that looks like: We now have a nicely group set of requirements. Let's enter more information about them, starting with setting their types and priorities. Click the ''select all' checkbox at the top of the list (the checkbox just above the checkbox for 'Functional Requirements') Click on the top 'Edit' button in the right-hand column of that same row. That will make all the requirement rows editable: Set the 'Type' of the four requirements you can edit this for to User Story'. Choose whatever values you like for the 'Importance' field. Click the 'Save' button. You now have a prioritized list of user story requirements: The next thing we can do is assign estimates to each requirement. This is something that the developers or business analysts may do based on the complexity and scope of each. The 'Estimates' column is not visible yet, so first we need to show it. To do that, click on the 'Show/Hide Columns' dropdown list and select 'Show Estimate (points)'.: By default, all the requirements will have been assigned a default estimate of 1.0 point. A point is not a defined number of hours, but an indication of the size of the requirement. The estimates should reflect how big each of the requirements are relative to each other. To change the estimates: Click the \"select all\" checkbox at the top of the list Click on the top 'Edit' button in the right-hand column. The requirements should be in editable mode again. Enter the following estimates for the requirements Click 'Save' Requirement Estimate System must allow entry of users 1.5 points System must allow the modification of users 2.0 points System must allow the deletion of users 1.0 points System should allow administrators to setup notifications 2.0 points Your requirements should now look like this (with each parent's estimates automatically summing up the estimates of their children): We have created a list of prioritized, estimated requirements, which is a great way to start our product. In the next section we are going to enter releases and sprints. Create the Release and Iteration Plan On the main navigation bar, click out of 'Requirements' and select 'Releases' menu option to display the product's release list page: The release list will be empty. Click the 'Insert' button in the toolbar to create your first release. Hit 'Save and New' (shown as buttons on the right of the new release in the list table) to add each new release after that. Below is the list of release names to add Release 1.0 -- version number 1.0.0.0 Start Date: Today's Date End Date: Today's Date + 2 months Release 1.1 -- version number 1.1.0.0 Start Date: Today's Date + 2 months End Date: Today's Date + 4 months You should have a list of releases like this: We need to add one additional level of detail to each release -- the list of sprints that will take place in each release. Let's add some sample sprints for the first release. Select the checkbox for Release 1.0 and, from the toolbar, click Insert > Child Release. Choose a name for the new sprint Make sure its 'Type' is set to 'sprint' Specify its date-range. We recommend making each sprint last 2-weeks and have each one scheduled in series click 'Save And New'. Repeat steps 2-5 above, then steps 2-4 and then finally click 'Save' on the final sprint's row. You should have three sprints added to the list, all children of Release 1.0 Finally, let's specify the number of resources assigned to each sprint and release. Click on the 'Show/Hide Columns' dropdown list and select 'Show # Resources' column Select the three checkboxes for the sprints of \"Release 1.0\" Click the 'Edit' button on the toolbar. Adjust the # resources for the sprints to 2. Click 'Save' Now that we have the releases and sprints scheduled, we now need to assign our previously defined requirements to the different releases. On the main navigation bar, click on Artifacts' drop-down menu and click Requirements to display the requirements list. Click the 'select all' checkbox at the top of the list Click the top 'Edit' button on the main tool bar. That will make all the cells editable. Now choose the release/sprint for each of the lower-level requirements Click 'Save' Notice that all the requirements have automatically changed status from 'Requested' to 'Planned', this is because they have been assigned a specific release/iteration. Build the Test Plan On the main Navigation bar, click on the Artifacts drop-down menu and select Test Cases menu option to display the product's test case list page: The test case list is empty and the only folder visible in the 'Folders' tree on the left-hand side is 'Root'. Click on the 'Add' button underneath the folder tree, Enter the new folder name 'Functional Tests'. Click 'Add'. You now have a new folder in the 'Folders' tree view. To show it, click 'Refresh'. Click on this folder from the 'Folders' tree on the left Click 'New Test Case' from the toolbar. Enter \"Test ability to add new users\" for the name of this new test case Click 'Save And New' Repeat the above steps to create 3 more test cases: Test ability to edit existing users Test ability to delete existing users Test ability to edit notifications You should now have the following test case list: Next, we need to enter detailed test steps to each test case, and link each test to the appropriate requirements. Click on the hyperlink for the first test case 'Test ability to add new users. This will bring up the test case details page In the 'Description' box under 'Detailed Information' section, enter a brief overview of the test case (something like \"this test case verifies that you can add new users to the system and that all of the fields get saved correctly.\"). Scrolling down to the 'Test Steps' section, you will see a single test step has been automatically created for you with some suggested text: This test case needs 3 test steps. Click 'Edit' on 'Step 1' and enter the first set of parameters below. Click 'Save' and then 'Insert Step' to add the second test step and enter its information from below Click 'Save and New' to make the third step Once you've entered its information click 'Save' Test Step Description Expected Result Sample Data Click on the link to add new user New user screen displayed Enter the name, email address and password of the new user. Data accepted Fred Bloggs fredblogs@example.com Click the 'Submit' button to create the user. The user is created You should now have the following test steps in the test case: Next, we need to link this test case to the requirement(s) that it validates. Click the 'Req. Coverage' tab above: Click the '+ Add' button to display the association adding panel: Choose the 'System must allow the entry of users' requirement Click the 'Save' button beneath the list of requirements to add the test case to this requirement Let's repeat the process for the other test cases, adding a couple of test steps to each. Then link the test cases to the requirements according to this table just like you did above: Test Case Requirement Test ability to add new users System must allow entry of users Test ability to edit existing users System must allow the modification of users Test ability to delete existing users System must allow the deletion of users Test ability to edit notifications System should allow administrators to setup notifications We have created test cases and set up their test coverage. Next, we need to specify which releases and sprints they can be tested in. First navigate to the product's test case list page again by clicking on 'Test Cases' on the main navigation bar Select the checkbox of each test case in the 'Functional Tests' folder. Click on 'Tools' drop-down menu on the toolbar Click 'Add to Release' Select 'Release 1.0 Click 'Add'. You have added all the tests to the overarching Release. Finally, we want to add the tests to the different sprints, based off the data in the table below. Select the checkbox of each relevant test case in the 'Functional Tests' folder. Click on 'Tools' drop-down menu on the toolbar Click 'Add to Release' Select the appropriate sprint Click 'Add' Test Case Sprint(s) Test ability to add new users Release 1.0 - Iteration 1 Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to edit existing users Release 1.0 - Iteration 1 Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to delete existing users Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to edit notifications Release 1.0 - Iteration 3 You typically want to include previous functionality in each of the successive iterations to ensure regression coverage. That is what we have done here. This means that each sprint includes new test cases for the new requirements, as well as existing test cases for pre-existing functionality. Scheduling the Testing Activities Now that we have created our test plan for each release and sprint, we need to schedule the test cases for execution by our testers. As an example, we'll create a single test set (also known as a test suite) that contains a list of test cases to be executed by a specific tester. On the main Navigation Bar, click on Artifacts >Test Sets menu option to display the product's test set list page: At first, the test set list will be empty and the 'Folders' tree on the left will only show 'Root'. Click the 'Add' button beneath the folder tree Enter the new folder name 'Test Cycle #1' Click the 'Add' button. Click on the folder you just made Click 'New Test Set' from the toolbar. Enter the name of the new test set 'Testing new functionality' Click 'Save' You should now have the following test set list: Click on the hyperlink for the test set to bring up the test set details page: Let's add the appropriate test cases to this set. Click the 'Add' button in the 'Test Cases' section half way down the page to bring up the following panel: Locate 'Root' drop down menu under 'Test Cases' section. Choose the 'Functional Tests' folder and the test cases in that folder will be displayed: Select the following test cases and click the 'Save' button: Test ability to add new users Test ability to edit existing users You should now have the following displayed: Next, let's assign this test set to a specific release and to a particular tester. To do that, choose the following values for the following fields and click 'Save': Owner = System Administrator (your user) Scheduled = Release 1.0 - Iteration 1 Planned Date = (Today's Date). You have now scheduled this test set to be executed by your user by the end of today against the first iteration of release 1.0: Running Tests and Logging Incidents Now that you have scheduled the test set, if you go to the 'My Page' by clicking on the SpiraTest logo in the top-left, you'll see your newly assigned test set down on the left: Click the 'Execute' button (with the play icon) to the right of this new test set. That will start the test execution wizard: On the first screen, the release dropdown list will have been automatically pre-selected to the release specified in the test set. Click 'Next' to move to the first test step in the first test case: Note that when you first visit this page, you will be shown a quick guided tour of how the page works. As a tester, you can progress through each of the test steps in each test case in the test set in turn. For each test step you can enter Pass , Fail , Blocked, Caution, or Not Applicable . If you enter any status other than Pass you need to enter a value for the 'Actual Result'. For a pass status, the Actual Result is optional. Click the 'Pass' button to pass the first test step. As soon as you do, the test will automatically progress to the second test step: Now for the second test step, enter in the actual result field \"Unable to enter the sample data as the fields were disabled\". Before clicking the Fail button, we also want to enter in the following fields in the Incident form (accessed by clicking the \"Incidents\" tab): Name = Error displaying user fields Type = Bug Priority = 2 -- High Now click the 'Fail' button and you will have recorded a test failure and a new incident/defect: Now that we have logged the test failure and the new incident/defect, click on a hexagon on the main navigation bar on the left of \"Sample Empty Product\" option. You'll be taken to the product homepage with the requirements and test case metrics now visible in individual widgets (like the Test Execution Status widget shown below): If you go to the Artifacts > Test Sets page, you also see the status of our test set: If you go to the Artifacts > Requirements page, you'll see the different requirements' test coverage and the status of the tests associated with each requirement: The next step in the process is to triage the logged defect and assign it to a developer to be fixed. Triaging Issues and Defects Now that a new incident has been logged, the next step in the process is to review the incident and assign it to a developer to be fixed. First, click on the Artifacts > Incidents menu item. This will display the incident list page for the product. You can also view the same list of incidents in a Kanban board view. In either view, click on the hyperlink for the new incident \"Error displaying user fields\". This will display the incident details page: In the 'Operations' dropdown menu underneath the incident name on the top of the page, select 'Assign Incident' option. This will switch the status of the incident from New > Assigned. Location the 'People' section and set the 'Owner' field to System Administrator (your user) Add a new comment in the 'Comments' section at the bottom of the page. Type \"Assigning this to you to fix. Issue was found during testing.\" Click the 'Save' button in the top toolbar. The incident will be assigned to your user for fixing. To see what a developer would see in real life, go back to the \"My Page\" by clicking on the orange SpiraTest icon in the top-left of the main Navigation Bar on the top of the screen: You can see that you've been assigned an incident under the \"My Assigned Incidents\" widget (on the right-hand side). Now click on the hyperlink for the incident to bring up the incident details page: The status is 'Assigned' and the comment from the product manager is clearly visible. To help you reproduce the issue, you can click on the \"Associations\" tab to display the test run and requirements associated with this incident: If you click on the test run hyperlink \"Test ability to add new users\", you will see the detailed information about the test execution that resulted in the bug being logged: This allows the developer to retrace the steps taken by the tester and attempt to reproduce the issue. We are going to assume we can reproduce and fix the issue so we can go right ahead and resolve the incident. Make your way back to the incident details screen: Artifacts> Incidents > Error displaying user fields' Hyperlink. Click on the workflow 'Operations' drop-down menu and select 'Resolve Incident'. Fill in the following fields Resolved Release = Release 1.0 - Iteration 2 In 'Comments' section enter a new comment = \"Fixed the incident.\" Click 'Save' on the main toolbar The incident will now change from Assigned > Resolved and an email will be sent to the tester letting them know that they need to retest the test case and close the incident. Reviewing Your Product You can check on the overall status of the product by clicking the hexagon on the main navigation bar. This will take you to the product home page. Below is what this home page looks like for a more complete product than we have been working through in this quick start guide. Note how you can change between several views (the buttons on the right) to show different information based on your role or current needs, or only show data for a particular release (see the dropdown beneath the product name on the left). Congratulations, you have now completed the testing lifecycle using SpiraTest. For more information about any of the features, please refer to the SpiraTest User Manual.","title":"SpiraTest"},{"location":"SpiraTest-Quick-Start-Guide/#spiratest-quick-start-guide","text":"","title":"SpiraTest Quick Start Guide"},{"location":"SpiraTest-Quick-Start-Guide/#logging-in-and-selecting-a-product","text":"Once you have installed a self-hosted trial or signed up for a hosted trial of SpiraTest, you should see the following login screen in your web browser: Enter the following default details to start using the system: Login: administrator Password: PleaseChange Once logged-in, you are shown your \"My Page\". The very first time you log in you will be able to take a quick orientation tour of the application (as shown in the screenshot below). The My Page looks pretty empty right now. This is normal. For this tutorial we want to start with an empty product that has no data in it, so click the hyperlink under 'My Products' for 'Sample Empty Product' / 'Sample Program Two'. That will select the empty product. Now to see the homepage for the product you just selected click on the hexagon in the top left: The product home page shows various widgets containing key product metrics. These are empty now, because the product has no data in it. In the rest of this guide we are going to fix that.","title":"Logging in and Selecting a Product"},{"location":"SpiraTest-Quick-Start-Guide/#define-the-requirements","text":"On the main Navigation bar, click Artifacts > Requirements to display the product's requirements list page: The terminology in SpiraTest is designed to be methodology agnostic. The table below shows how the terms used in SpiraTest relate to some common methodologies: SpiraPlan Extreme Programming Scrum AgileUP / DSDM Summary Requirement Epic Epic Feature Group Requirement User Story Backlog Item Requirement Task Task Task Task Release Release Release Release Sprint Iteration Sprint Iteration At first, the requirements list will be empty. Click the 'Insert' button in the toolbar to create your first requirement. Hit 'Save and New' (shown as buttons on the right of the new requirement in the list table) to add each new requirement after that. Below is the list of requirement names to add: Functional Requirements Module 1 System must allow entry of users System must allow the modification of users System must allow the deletion of users Module 2 System should allow administrators to setup notifications You should now have a simple, flat requirements list, like the one below: Next, we are going to indent the requirements. This will give us a hierarchy, with some requirements being children of others. To indent, select the checkboxes of all the requirements below 'Functional Requirements' and click 'Indent'. This makes 'Functional Requirements' the parent and all the other requirements its children. Now, select the three requirements immediately below 'Module 1' and click 'Indent' again. This makes these three requirements children of 'Module 1' (and grandchildren of 'Functional Requirements') Repeat for the requirement below 'Module 2' by right-clicking on this last requirement and choosing 'Indent' from the popup context menu. You should now have a list that looks like: We now have a nicely group set of requirements. Let's enter more information about them, starting with setting their types and priorities. Click the ''select all' checkbox at the top of the list (the checkbox just above the checkbox for 'Functional Requirements') Click on the top 'Edit' button in the right-hand column of that same row. That will make all the requirement rows editable: Set the 'Type' of the four requirements you can edit this for to User Story'. Choose whatever values you like for the 'Importance' field. Click the 'Save' button. You now have a prioritized list of user story requirements: The next thing we can do is assign estimates to each requirement. This is something that the developers or business analysts may do based on the complexity and scope of each. The 'Estimates' column is not visible yet, so first we need to show it. To do that, click on the 'Show/Hide Columns' dropdown list and select 'Show Estimate (points)'.: By default, all the requirements will have been assigned a default estimate of 1.0 point. A point is not a defined number of hours, but an indication of the size of the requirement. The estimates should reflect how big each of the requirements are relative to each other. To change the estimates: Click the \"select all\" checkbox at the top of the list Click on the top 'Edit' button in the right-hand column. The requirements should be in editable mode again. Enter the following estimates for the requirements Click 'Save' Requirement Estimate System must allow entry of users 1.5 points System must allow the modification of users 2.0 points System must allow the deletion of users 1.0 points System should allow administrators to setup notifications 2.0 points Your requirements should now look like this (with each parent's estimates automatically summing up the estimates of their children): We have created a list of prioritized, estimated requirements, which is a great way to start our product. In the next section we are going to enter releases and sprints.","title":"Define the Requirements"},{"location":"SpiraTest-Quick-Start-Guide/#create-the-release-and-iteration-plan","text":"On the main navigation bar, click out of 'Requirements' and select 'Releases' menu option to display the product's release list page: The release list will be empty. Click the 'Insert' button in the toolbar to create your first release. Hit 'Save and New' (shown as buttons on the right of the new release in the list table) to add each new release after that. Below is the list of release names to add Release 1.0 -- version number 1.0.0.0 Start Date: Today's Date End Date: Today's Date + 2 months Release 1.1 -- version number 1.1.0.0 Start Date: Today's Date + 2 months End Date: Today's Date + 4 months You should have a list of releases like this: We need to add one additional level of detail to each release -- the list of sprints that will take place in each release. Let's add some sample sprints for the first release. Select the checkbox for Release 1.0 and, from the toolbar, click Insert > Child Release. Choose a name for the new sprint Make sure its 'Type' is set to 'sprint' Specify its date-range. We recommend making each sprint last 2-weeks and have each one scheduled in series click 'Save And New'. Repeat steps 2-5 above, then steps 2-4 and then finally click 'Save' on the final sprint's row. You should have three sprints added to the list, all children of Release 1.0 Finally, let's specify the number of resources assigned to each sprint and release. Click on the 'Show/Hide Columns' dropdown list and select 'Show # Resources' column Select the three checkboxes for the sprints of \"Release 1.0\" Click the 'Edit' button on the toolbar. Adjust the # resources for the sprints to 2. Click 'Save' Now that we have the releases and sprints scheduled, we now need to assign our previously defined requirements to the different releases. On the main navigation bar, click on Artifacts' drop-down menu and click Requirements to display the requirements list. Click the 'select all' checkbox at the top of the list Click the top 'Edit' button on the main tool bar. That will make all the cells editable. Now choose the release/sprint for each of the lower-level requirements Click 'Save' Notice that all the requirements have automatically changed status from 'Requested' to 'Planned', this is because they have been assigned a specific release/iteration.","title":"Create the Release and Iteration Plan"},{"location":"SpiraTest-Quick-Start-Guide/#build-the-test-plan","text":"On the main Navigation bar, click on the Artifacts drop-down menu and select Test Cases menu option to display the product's test case list page: The test case list is empty and the only folder visible in the 'Folders' tree on the left-hand side is 'Root'. Click on the 'Add' button underneath the folder tree, Enter the new folder name 'Functional Tests'. Click 'Add'. You now have a new folder in the 'Folders' tree view. To show it, click 'Refresh'. Click on this folder from the 'Folders' tree on the left Click 'New Test Case' from the toolbar. Enter \"Test ability to add new users\" for the name of this new test case Click 'Save And New' Repeat the above steps to create 3 more test cases: Test ability to edit existing users Test ability to delete existing users Test ability to edit notifications You should now have the following test case list: Next, we need to enter detailed test steps to each test case, and link each test to the appropriate requirements. Click on the hyperlink for the first test case 'Test ability to add new users. This will bring up the test case details page In the 'Description' box under 'Detailed Information' section, enter a brief overview of the test case (something like \"this test case verifies that you can add new users to the system and that all of the fields get saved correctly.\"). Scrolling down to the 'Test Steps' section, you will see a single test step has been automatically created for you with some suggested text: This test case needs 3 test steps. Click 'Edit' on 'Step 1' and enter the first set of parameters below. Click 'Save' and then 'Insert Step' to add the second test step and enter its information from below Click 'Save and New' to make the third step Once you've entered its information click 'Save' Test Step Description Expected Result Sample Data Click on the link to add new user New user screen displayed Enter the name, email address and password of the new user. Data accepted Fred Bloggs fredblogs@example.com Click the 'Submit' button to create the user. The user is created You should now have the following test steps in the test case: Next, we need to link this test case to the requirement(s) that it validates. Click the 'Req. Coverage' tab above: Click the '+ Add' button to display the association adding panel: Choose the 'System must allow the entry of users' requirement Click the 'Save' button beneath the list of requirements to add the test case to this requirement Let's repeat the process for the other test cases, adding a couple of test steps to each. Then link the test cases to the requirements according to this table just like you did above: Test Case Requirement Test ability to add new users System must allow entry of users Test ability to edit existing users System must allow the modification of users Test ability to delete existing users System must allow the deletion of users Test ability to edit notifications System should allow administrators to setup notifications We have created test cases and set up their test coverage. Next, we need to specify which releases and sprints they can be tested in. First navigate to the product's test case list page again by clicking on 'Test Cases' on the main navigation bar Select the checkbox of each test case in the 'Functional Tests' folder. Click on 'Tools' drop-down menu on the toolbar Click 'Add to Release' Select 'Release 1.0 Click 'Add'. You have added all the tests to the overarching Release. Finally, we want to add the tests to the different sprints, based off the data in the table below. Select the checkbox of each relevant test case in the 'Functional Tests' folder. Click on 'Tools' drop-down menu on the toolbar Click 'Add to Release' Select the appropriate sprint Click 'Add' Test Case Sprint(s) Test ability to add new users Release 1.0 - Iteration 1 Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to edit existing users Release 1.0 - Iteration 1 Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to delete existing users Release 1.0 - Iteration 2 Release 1.0 - Iteration 3 Test ability to edit notifications Release 1.0 - Iteration 3 You typically want to include previous functionality in each of the successive iterations to ensure regression coverage. That is what we have done here. This means that each sprint includes new test cases for the new requirements, as well as existing test cases for pre-existing functionality.","title":"Build the Test Plan"},{"location":"SpiraTest-Quick-Start-Guide/#scheduling-the-testing-activities","text":"Now that we have created our test plan for each release and sprint, we need to schedule the test cases for execution by our testers. As an example, we'll create a single test set (also known as a test suite) that contains a list of test cases to be executed by a specific tester. On the main Navigation Bar, click on Artifacts >Test Sets menu option to display the product's test set list page: At first, the test set list will be empty and the 'Folders' tree on the left will only show 'Root'. Click the 'Add' button beneath the folder tree Enter the new folder name 'Test Cycle #1' Click the 'Add' button. Click on the folder you just made Click 'New Test Set' from the toolbar. Enter the name of the new test set 'Testing new functionality' Click 'Save' You should now have the following test set list: Click on the hyperlink for the test set to bring up the test set details page: Let's add the appropriate test cases to this set. Click the 'Add' button in the 'Test Cases' section half way down the page to bring up the following panel: Locate 'Root' drop down menu under 'Test Cases' section. Choose the 'Functional Tests' folder and the test cases in that folder will be displayed: Select the following test cases and click the 'Save' button: Test ability to add new users Test ability to edit existing users You should now have the following displayed: Next, let's assign this test set to a specific release and to a particular tester. To do that, choose the following values for the following fields and click 'Save': Owner = System Administrator (your user) Scheduled = Release 1.0 - Iteration 1 Planned Date = (Today's Date). You have now scheduled this test set to be executed by your user by the end of today against the first iteration of release 1.0:","title":"Scheduling the Testing Activities"},{"location":"SpiraTest-Quick-Start-Guide/#running-tests-and-logging-incidents","text":"Now that you have scheduled the test set, if you go to the 'My Page' by clicking on the SpiraTest logo in the top-left, you'll see your newly assigned test set down on the left: Click the 'Execute' button (with the play icon) to the right of this new test set. That will start the test execution wizard: On the first screen, the release dropdown list will have been automatically pre-selected to the release specified in the test set. Click 'Next' to move to the first test step in the first test case: Note that when you first visit this page, you will be shown a quick guided tour of how the page works. As a tester, you can progress through each of the test steps in each test case in the test set in turn. For each test step you can enter Pass , Fail , Blocked, Caution, or Not Applicable . If you enter any status other than Pass you need to enter a value for the 'Actual Result'. For a pass status, the Actual Result is optional. Click the 'Pass' button to pass the first test step. As soon as you do, the test will automatically progress to the second test step: Now for the second test step, enter in the actual result field \"Unable to enter the sample data as the fields were disabled\". Before clicking the Fail button, we also want to enter in the following fields in the Incident form (accessed by clicking the \"Incidents\" tab): Name = Error displaying user fields Type = Bug Priority = 2 -- High Now click the 'Fail' button and you will have recorded a test failure and a new incident/defect: Now that we have logged the test failure and the new incident/defect, click on a hexagon on the main navigation bar on the left of \"Sample Empty Product\" option. You'll be taken to the product homepage with the requirements and test case metrics now visible in individual widgets (like the Test Execution Status widget shown below): If you go to the Artifacts > Test Sets page, you also see the status of our test set: If you go to the Artifacts > Requirements page, you'll see the different requirements' test coverage and the status of the tests associated with each requirement: The next step in the process is to triage the logged defect and assign it to a developer to be fixed.","title":"Running Tests and Logging Incidents"},{"location":"SpiraTest-Quick-Start-Guide/#triaging-issues-and-defects","text":"Now that a new incident has been logged, the next step in the process is to review the incident and assign it to a developer to be fixed. First, click on the Artifacts > Incidents menu item. This will display the incident list page for the product. You can also view the same list of incidents in a Kanban board view. In either view, click on the hyperlink for the new incident \"Error displaying user fields\". This will display the incident details page: In the 'Operations' dropdown menu underneath the incident name on the top of the page, select 'Assign Incident' option. This will switch the status of the incident from New > Assigned. Location the 'People' section and set the 'Owner' field to System Administrator (your user) Add a new comment in the 'Comments' section at the bottom of the page. Type \"Assigning this to you to fix. Issue was found during testing.\" Click the 'Save' button in the top toolbar. The incident will be assigned to your user for fixing. To see what a developer would see in real life, go back to the \"My Page\" by clicking on the orange SpiraTest icon in the top-left of the main Navigation Bar on the top of the screen: You can see that you've been assigned an incident under the \"My Assigned Incidents\" widget (on the right-hand side). Now click on the hyperlink for the incident to bring up the incident details page: The status is 'Assigned' and the comment from the product manager is clearly visible. To help you reproduce the issue, you can click on the \"Associations\" tab to display the test run and requirements associated with this incident: If you click on the test run hyperlink \"Test ability to add new users\", you will see the detailed information about the test execution that resulted in the bug being logged: This allows the developer to retrace the steps taken by the tester and attempt to reproduce the issue. We are going to assume we can reproduce and fix the issue so we can go right ahead and resolve the incident. Make your way back to the incident details screen: Artifacts> Incidents > Error displaying user fields' Hyperlink. Click on the workflow 'Operations' drop-down menu and select 'Resolve Incident'. Fill in the following fields Resolved Release = Release 1.0 - Iteration 2 In 'Comments' section enter a new comment = \"Fixed the incident.\" Click 'Save' on the main toolbar The incident will now change from Assigned > Resolved and an email will be sent to the tester letting them know that they need to retest the test case and close the incident.","title":"Triaging Issues and Defects"},{"location":"SpiraTest-Quick-Start-Guide/#reviewing-your-product","text":"You can check on the overall status of the product by clicking the hexagon on the main navigation bar. This will take you to the product home page. Below is what this home page looks like for a more complete product than we have been working through in this quick start guide. Note how you can change between several views (the buttons on the right) to show different information based on your role or current needs, or only show data for a particular release (see the dropdown beneath the product name on the left). Congratulations, you have now completed the testing lifecycle using SpiraTest. For more information about any of the features, please refer to the SpiraTest User Manual.","title":"Reviewing Your Product"},{"location":"TaraVault-User-Manual/Activating-TaraVault/","text":"Introduction TaraVault\u00ae is the secure source code and file hosting service from Inflectra that allows you to host your source code and other assets in our secure cloud, integrated with our SpiraTeam\u00ae application lifecycle management system. This guide outlines how to activate and use TaraVault\u00ae with a cloud-based instance of SpiraPlan \u00ae or SpiraTeam \u00ae . The guide covers the general activation process in additional to specific sections dedicated to the two supported SCM technologies -- Git or Subversion . This guide assumes that the reader is familiar with both SpiraPlan/SpiraTeam and the appropriate SCM platform (Git and/or Subversion). For information regarding how to use SpiraPlan/Team, please refer to the SpiraPlan User Manual or the SpiraTeam User Manual . Activating TaraVault To get started, log into your existing SpiraPlan or SpiraTeam instance (hereafter referred to as Spira) with a system administrator account and go to the main Administration menu: You should see the ' TaraVault' menu entry under the \" System \" heading. If you don't see this option then you might either be self-hosted or running SpiraTest. If you are running SpiraTest, please contact Inflectra customer services to get your account upgraded to SpiraTeam. Click on this TaraVault link to bring up the TaraVault administration home page: This screen lets you know that your instance of Spira does not yet have an active instance of TaraVault. This is normal and you should now click on the 'Activate TaraVault' button to activate TaraVault. Once this is done, the screen will display: This provides you information on the name and ID of your TaraVault account as well as an indication as to how many source code users your subscription allows. If you need to purchase additional users, just contact Inflectra customer services who will be happy to help you out. Now that your instance is active, you will need to provision individual projects and also activate the Spira users that will be allowed to commit code or files into the TaraVault repositories. Note: All users in Spira will be able to view the files in TaraVault without needing a separate TaraVault license.","title":"Activating"},{"location":"TaraVault-User-Manual/Activating-TaraVault/#introduction","text":"TaraVault\u00ae is the secure source code and file hosting service from Inflectra that allows you to host your source code and other assets in our secure cloud, integrated with our SpiraTeam\u00ae application lifecycle management system. This guide outlines how to activate and use TaraVault\u00ae with a cloud-based instance of SpiraPlan \u00ae or SpiraTeam \u00ae . The guide covers the general activation process in additional to specific sections dedicated to the two supported SCM technologies -- Git or Subversion . This guide assumes that the reader is familiar with both SpiraPlan/SpiraTeam and the appropriate SCM platform (Git and/or Subversion). For information regarding how to use SpiraPlan/Team, please refer to the SpiraPlan User Manual or the SpiraTeam User Manual .","title":"Introduction"},{"location":"TaraVault-User-Manual/Activating-TaraVault/#activating-taravault","text":"To get started, log into your existing SpiraPlan or SpiraTeam instance (hereafter referred to as Spira) with a system administrator account and go to the main Administration menu: You should see the ' TaraVault' menu entry under the \" System \" heading. If you don't see this option then you might either be self-hosted or running SpiraTest. If you are running SpiraTest, please contact Inflectra customer services to get your account upgraded to SpiraTeam. Click on this TaraVault link to bring up the TaraVault administration home page: This screen lets you know that your instance of Spira does not yet have an active instance of TaraVault. This is normal and you should now click on the 'Activate TaraVault' button to activate TaraVault. Once this is done, the screen will display: This provides you information on the name and ID of your TaraVault account as well as an indication as to how many source code users your subscription allows. If you need to purchase additional users, just contact Inflectra customer services who will be happy to help you out. Now that your instance is active, you will need to provision individual projects and also activate the Spira users that will be allowed to commit code or files into the TaraVault repositories. Note: All users in Spira will be able to view the files in TaraVault without needing a separate TaraVault license.","title":"Activating TaraVault"},{"location":"TaraVault-User-Manual/Provisioning-Projects-&-Users/","text":"Provisioning Projects & Users Once you have activated TaraVault for your instance of Spira, you can now begin to provision specific projects and assign users. Provisioning Projects To provision a new project with TaraVault, go to the main Spira Administration page and select the appropriate project and then go to the TaraVault administration page. For example, in the screenshot below we have selected the 'Library Information System' sample project: To provision this project with TaraVault, you need to choose the following: Project Name -- this is the name of the project in TaraVault. This name is incorporated into the connection URL so it should be alphanumeric only. Project Type -- this is the type of SCM repository you wish to use. Currently the choices are between Subversion and Git. We discuss the differences between Subversion (also known as SVN) and Git in the next two pages. Note: once you choose the repository type for a project it cannot be changed without deleting the entire repository, so make sure you understand the differences between the two technologies beforehand. For example we will choose 'libraryinformationsystem' as the project name and 'SVN' (Subversion) as the project type. Once you are happy with your choice, click 'Activate' to enable this project for TaraVault: The system will then populate the 'Client Connection' section with the URL that you need to use to connect to this TaraVault project from your Subversion or Git client (this is described in more detail in the following pages). In addition, it will display a list of users that are enabled for this project. Managing Users By default, the built-in system administrator account will be automatically enabled for TaraVault use and will be added as a member of all TaraVault projects. To enable other users to commit code/files to a TaraVault repository, you need to go to the Administration > Users > View/Edit Users menu item: This will display the user details page. On this page, if you have activated TaraVault there will be a special TaraVault tab that is used to enable a specific Spira user for TaraVault: Now change the setting to \"YES\" and the following screen appears: Enter in the desired password for TaraVault and click the main 'Save' button and this user will now be added to TaraVault. Note that you need to have sufficient TaraVault licenses for all of the users you wish to activate. Finally, you can now add this user to specific TaraVault projects by clicking on the user's administration page again: Now click on the 'Add Projects' link and you can now choose which TaraVault projects to add the user to: You should now click the 'Add User to Project' YES/NO slider and then click the 'Save button: The user will now be listed for that specific TaraVault project. If you now go back to the main Administration > TaraVault page: You will see the two users listed under the current project. If you click on the 'Edit Users' hyperlink it will let you make changes to the TaraVault user settings page. On this page you can use the Add Project option to add multiple TaraVault users to the current Spira project: Individual users can see their own TaraVault profile from the main Spira profile page. They need to click on the 'My Profile' link under their user's avatar on the main Spira navigation page: This page displays the current user's TaraVault login and password (masked). They can update the password for connecting to TaraVault via. Git or Subversion. Connecting to the Project Individual users can see the connection information they can use for connecting via. Git or Subversion by going to Tracking > Source Code: This dialog displays the connection string they should use to connect to the current project (the format will depend on whether the user is using Git or Subversion) along with the login and password. They can click on the blurred password option to reveal their actual password. This is necessary since they will need to know the password to use when connecting to Subversion / Git using their desired SCM client (e.g. TortoiseSVN, TortoiseGit, etc.).","title":"Provisioning Projects & Users"},{"location":"TaraVault-User-Manual/Provisioning-Projects-&-Users/#provisioning-projects-users","text":"Once you have activated TaraVault for your instance of Spira, you can now begin to provision specific projects and assign users.","title":"Provisioning Projects &amp; Users"},{"location":"TaraVault-User-Manual/Provisioning-Projects-&-Users/#provisioning-projects","text":"To provision a new project with TaraVault, go to the main Spira Administration page and select the appropriate project and then go to the TaraVault administration page. For example, in the screenshot below we have selected the 'Library Information System' sample project: To provision this project with TaraVault, you need to choose the following: Project Name -- this is the name of the project in TaraVault. This name is incorporated into the connection URL so it should be alphanumeric only. Project Type -- this is the type of SCM repository you wish to use. Currently the choices are between Subversion and Git. We discuss the differences between Subversion (also known as SVN) and Git in the next two pages. Note: once you choose the repository type for a project it cannot be changed without deleting the entire repository, so make sure you understand the differences between the two technologies beforehand. For example we will choose 'libraryinformationsystem' as the project name and 'SVN' (Subversion) as the project type. Once you are happy with your choice, click 'Activate' to enable this project for TaraVault: The system will then populate the 'Client Connection' section with the URL that you need to use to connect to this TaraVault project from your Subversion or Git client (this is described in more detail in the following pages). In addition, it will display a list of users that are enabled for this project.","title":"Provisioning Projects"},{"location":"TaraVault-User-Manual/Provisioning-Projects-&-Users/#managing-users","text":"By default, the built-in system administrator account will be automatically enabled for TaraVault use and will be added as a member of all TaraVault projects. To enable other users to commit code/files to a TaraVault repository, you need to go to the Administration > Users > View/Edit Users menu item: This will display the user details page. On this page, if you have activated TaraVault there will be a special TaraVault tab that is used to enable a specific Spira user for TaraVault: Now change the setting to \"YES\" and the following screen appears: Enter in the desired password for TaraVault and click the main 'Save' button and this user will now be added to TaraVault. Note that you need to have sufficient TaraVault licenses for all of the users you wish to activate. Finally, you can now add this user to specific TaraVault projects by clicking on the user's administration page again: Now click on the 'Add Projects' link and you can now choose which TaraVault projects to add the user to: You should now click the 'Add User to Project' YES/NO slider and then click the 'Save button: The user will now be listed for that specific TaraVault project. If you now go back to the main Administration > TaraVault page: You will see the two users listed under the current project. If you click on the 'Edit Users' hyperlink it will let you make changes to the TaraVault user settings page. On this page you can use the Add Project option to add multiple TaraVault users to the current Spira project: Individual users can see their own TaraVault profile from the main Spira profile page. They need to click on the 'My Profile' link under their user's avatar on the main Spira navigation page: This page displays the current user's TaraVault login and password (masked). They can update the password for connecting to TaraVault via. Git or Subversion.","title":"Managing Users"},{"location":"TaraVault-User-Manual/Provisioning-Projects-&-Users/#connecting-to-the-project","text":"Individual users can see the connection information they can use for connecting via. Git or Subversion by going to Tracking > Source Code: This dialog displays the connection string they should use to connect to the current project (the format will depend on whether the user is using Git or Subversion) along with the login and password. They can click on the blurred password option to reveal their actual password. This is necessary since they will need to know the password to use when connecting to Subversion / Git using their desired SCM client (e.g. TortoiseSVN, TortoiseGit, etc.).","title":"Connecting to the Project"},{"location":"TaraVault-User-Manual/Using-Git/","text":"Using Git Git is a Distributed Version Control System (DVCS) system that keeps track of software revisions and allows many developers to work on a given project without necessarily being connected to a common network since it doesn't rely on a central repository, but instead distributes copies of the entire source code repository to each user's workstation. Git Basics The major difference between Git and most other VCS (e.g. Subversion described in the previous section) is the way Git thinks about its data. Conceptually, most other systems store information as a list of file-based changes. These systems (CVS, Subversion, Perforce, Bazaar, and so on) think of the information they keep as a set of files and the changes made to each file over time. Git doesn't think of or store its data this way. Instead, Git thinks of its data more like a set of snapshots of a miniature filesystem. Every time you commit, or save the state of your project in Git, it basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, Git doesn't store the file again, just a link to the previous identical file it has already stored. Git thinks about its data more like a stream of snapshots: This is an important distinction between Git and nearly all other VCSs. It makes Git reconsider almost every aspect of version control that most other systems copied from the previous generation. This makes Git more like a mini filesystem with some incredibly powerful tools built on top of it, rather than simply a VCS. Another major difference between Git and Subversion is that Git has built-in support for 'branches' instead of relying on a specific folder structure. In Git, Branches are used to develop features isolated from each other. The master branch is the \"default\" branch when you create a repository. You can then use other branches for development and merge them back to the master branch upon completion. Working with Remotes To be able to work on any Git project, you need to know how to manage your remote repositories. Remote repositories the versions of your project that are hosted TaraVault itself. Collaborating with others involves managing these remote repositories and pushing and pulling data to and from them when you need to share work. Managing remote repositories includes knowing how to add remote repositories, remove remotes that are no longer valid, manage various remote branches and define them as being tracked or not, and more. This is in stark contrast to Subversion where every commit and update is being performed directly on the central TaraVault remote repository. So when you make changes to your local repository, the will need to explicitly synchronized with TaraVault for other users to see them, and for them to appear in Spira: Getting Started with Git This section assumes that you have already provisioned at least one Git project in TaraVault following the steps in Activating TaraVault and Provisioning Projects & Users . So you should now have a TaraVault user/password and a Git project with a connection URL: The next step is to actually connect to this repository using a Git client and commit some source code. We recommend using a GUI tool such as TortoiseGit but you can use any standard Git client with TaraVault (command-line or GUI-based) just as well. In our examples we shall be using TortoiseGit. The first thing we need to do is perform an initial 'clone' of our remote Git repository into a local repository. This will also do an implicit checkout from the local repository into the working directory. Assuming that you have already installed TortoiseGit, you would now create a folder to hold all of your Git projects (in our example we shall use C:\\Temp\\Git) and right-click and choose \"Git Clone\": The following dialog box will appear: You need to enter the following: URL -- needs to be the TaraVault Git connection string listed under 'My Profile' for the current project. Directory -- needs to be the local name of the folder for the local repository. Typically it is best to make it the same as the name of the project in TaraVault (e.g. C:\\Temp\\Git\\libraryinformationsystem in this example) When you click on the 'OK' button, the following authentication dialog box will appear: Enter your TaraVault Git username, and then click 'OK'. Then the following will appear: Enter your TaraVault password and then click 'OK' again. The success dialog will appear: You will now get a folder C:\\Temp\\Git\\sampleapplicationone that is completely empty apart from a special .git folder that is used by Git internally. Now that you have your Git local repository and working folder available, you are ready to start using Git. Adding Files to the Master Branch Now that you have your Git repository ready, we shall simulate working on a real project. You can now copy some code and folders into the empty working folder (which will be set to use the 'master' branch). In this example we shall add some sample Inflectra code: Select all the files and folders and choose TortoiseGit > Add. That will display the following dialog box: Select all the files and click OK. Click on [OK] to commit the files to the local repository. Note that this does not send them to the remote TaraVault repository at this stage since this is a distributed version control system and all commits are done locally. Enter in the appropriate commit message and then click [OK] to complete the local commit. The following screen will be displayed: At this stage, we are not ready to 'Push' the repository to TaraVault so just click 'Close'. Now, open up one of the files (we shall modify the SampleTestSuite\\AssemblyInfo.cs file in our example) and make a change to it. Then right-click on the top-level 'sampleapplicationone' folder and choose Git Commit -> \"master\" to commit the change. Make sure you add a comment: Click OK and the change (known as a revision) will now be committed into the 'master' branch of the local repository. Working with Branches Now that we have the primary development line in our master branch, we can work on a separate version of the code in a different branch, and then at a later date merge back in the changes to the 'master' branch. For example we might be working on an experimental new feature and we only want to merge it into the 'master' when it is internally stable and all the unit tests pass. We shall create a new named branch in our local repository using TortoiseGit. To do that right-click on the top-level folder (sampleapplicationone) and then click Tortoise Git > Create Branch: This will display the following dialog box: Enter in the name of the new branch (we have chosen 'experimental' in the example shown) and click [OK] to create the new branch. Since we want to start working in this new branch, we should now using TortoiseGit > Switch/Checkout to switch to this new branch: Click [OK] to confirm the switch. Now all your changes will be made on this branch. Now, let's simulate making a code change on the 'experimental' branch we made. To do that, change one of the files in the folder structure and then right-click Git Commit -> \"experimental\": That will display the commit dialog box: Enter in a comment in the 'Message' text box that describes the purpose of the change. Then click [OK]. On the success dialog box that appears, click 'Close'. Now unlike other VCS such as Subversion, we have made all of these changes in the local Git repository. Once you are ready to share your changes with your team, you need to 'Push' the local branches to the remote TaraVault repository. To do this, right-click on the top-level folder (sampleapplicationone) and choose TortoiseGit > Push. The following dialog box will be displayed: In this case we want to push all branches (master and experimental) to TaraVault, so select the checkbox 'Push all branches'. Then click 'OK' to push the changes: Once they have been pushed, we are now ready to view the repository within Spira. Viewing within Spira In addition to being able to browse the source code repository in Spira, which is itself very useful, the real strength comes from linking artifacts in Spira - including Incidents, Requirements, and Tasks - to revisions checked into the software repository, indicating what was fixed or implemented in a specific revision. Firstly, you can view the source code tree by selecting the Tracking > Source Code link under the main Spira menu. This will display the following: This is normal, it means simply that the source code viewer is initializing for initial use. Whenever you access a TaraVault project for the first time you will see this. After a few minutes it will be ready for use and you can refresh the page to display: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. The file view will display the filename, the current revision number of the file and the date of the last commit. You can filter and sort on any of the columns, as well. The page will display the folders and files for the currently selected branch (in the example above \"master\"), you can change the current branch at any time by selecting it from the dropdown menu: To view the file details, click on a file hyperlink the main source code file grid. The file details page displays the details on the selected revision. By default, it will be the latest revision in the current branch, unless you clicked to view the file details from a revision. By clicking on the file name, you can download the specified revision of the file to your local machine. This does not do a Git clone or pull; you are merely downloading the file to your local machine. Underneath the file details are tabs that show a preview of the file (with syntax highlighting), a list of all the revisions that this file belongs in, or was committed to, who performed the commit, and the log message for the commit, and a tab that shows any artifact associations. Throughout SpiraTeam, revisions are indicated by the icon: By clicking on a revision in SpiraTeam, you will be taken to the revision details page. The revision details screen shows the log for the commit, the commit date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this commit, with their full path, size, latest revision and date of edit. The Associations tab shows any artifact (Incident, Requirement, Test Case, Test Set) that the log message references. See Source Code Associations Linking Artifacts Linking an artifact is quite simple. To maintain the readability of Git commit messages, we adopted a square bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail. If you forget to add the association during the commit, you can use the 'Add Association' option within SpiraTeam to add the association after the fact.","title":"Using Git"},{"location":"TaraVault-User-Manual/Using-Git/#using-git","text":"Git is a Distributed Version Control System (DVCS) system that keeps track of software revisions and allows many developers to work on a given project without necessarily being connected to a common network since it doesn't rely on a central repository, but instead distributes copies of the entire source code repository to each user's workstation.","title":"Using Git"},{"location":"TaraVault-User-Manual/Using-Git/#git-basics","text":"The major difference between Git and most other VCS (e.g. Subversion described in the previous section) is the way Git thinks about its data. Conceptually, most other systems store information as a list of file-based changes. These systems (CVS, Subversion, Perforce, Bazaar, and so on) think of the information they keep as a set of files and the changes made to each file over time. Git doesn't think of or store its data this way. Instead, Git thinks of its data more like a set of snapshots of a miniature filesystem. Every time you commit, or save the state of your project in Git, it basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, Git doesn't store the file again, just a link to the previous identical file it has already stored. Git thinks about its data more like a stream of snapshots: This is an important distinction between Git and nearly all other VCSs. It makes Git reconsider almost every aspect of version control that most other systems copied from the previous generation. This makes Git more like a mini filesystem with some incredibly powerful tools built on top of it, rather than simply a VCS. Another major difference between Git and Subversion is that Git has built-in support for 'branches' instead of relying on a specific folder structure. In Git, Branches are used to develop features isolated from each other. The master branch is the \"default\" branch when you create a repository. You can then use other branches for development and merge them back to the master branch upon completion.","title":"Git Basics"},{"location":"TaraVault-User-Manual/Using-Git/#working-with-remotes","text":"To be able to work on any Git project, you need to know how to manage your remote repositories. Remote repositories the versions of your project that are hosted TaraVault itself. Collaborating with others involves managing these remote repositories and pushing and pulling data to and from them when you need to share work. Managing remote repositories includes knowing how to add remote repositories, remove remotes that are no longer valid, manage various remote branches and define them as being tracked or not, and more. This is in stark contrast to Subversion where every commit and update is being performed directly on the central TaraVault remote repository. So when you make changes to your local repository, the will need to explicitly synchronized with TaraVault for other users to see them, and for them to appear in Spira:","title":"Working with Remotes"},{"location":"TaraVault-User-Manual/Using-Git/#getting-started-with-git","text":"This section assumes that you have already provisioned at least one Git project in TaraVault following the steps in Activating TaraVault and Provisioning Projects & Users . So you should now have a TaraVault user/password and a Git project with a connection URL: The next step is to actually connect to this repository using a Git client and commit some source code. We recommend using a GUI tool such as TortoiseGit but you can use any standard Git client with TaraVault (command-line or GUI-based) just as well. In our examples we shall be using TortoiseGit. The first thing we need to do is perform an initial 'clone' of our remote Git repository into a local repository. This will also do an implicit checkout from the local repository into the working directory. Assuming that you have already installed TortoiseGit, you would now create a folder to hold all of your Git projects (in our example we shall use C:\\Temp\\Git) and right-click and choose \"Git Clone\": The following dialog box will appear: You need to enter the following: URL -- needs to be the TaraVault Git connection string listed under 'My Profile' for the current project. Directory -- needs to be the local name of the folder for the local repository. Typically it is best to make it the same as the name of the project in TaraVault (e.g. C:\\Temp\\Git\\libraryinformationsystem in this example) When you click on the 'OK' button, the following authentication dialog box will appear: Enter your TaraVault Git username, and then click 'OK'. Then the following will appear: Enter your TaraVault password and then click 'OK' again. The success dialog will appear: You will now get a folder C:\\Temp\\Git\\sampleapplicationone that is completely empty apart from a special .git folder that is used by Git internally. Now that you have your Git local repository and working folder available, you are ready to start using Git.","title":"Getting Started with Git"},{"location":"TaraVault-User-Manual/Using-Git/#adding-files-to-the-master-branch","text":"Now that you have your Git repository ready, we shall simulate working on a real project. You can now copy some code and folders into the empty working folder (which will be set to use the 'master' branch). In this example we shall add some sample Inflectra code: Select all the files and folders and choose TortoiseGit > Add. That will display the following dialog box: Select all the files and click OK. Click on [OK] to commit the files to the local repository. Note that this does not send them to the remote TaraVault repository at this stage since this is a distributed version control system and all commits are done locally. Enter in the appropriate commit message and then click [OK] to complete the local commit. The following screen will be displayed: At this stage, we are not ready to 'Push' the repository to TaraVault so just click 'Close'. Now, open up one of the files (we shall modify the SampleTestSuite\\AssemblyInfo.cs file in our example) and make a change to it. Then right-click on the top-level 'sampleapplicationone' folder and choose Git Commit -> \"master\" to commit the change. Make sure you add a comment: Click OK and the change (known as a revision) will now be committed into the 'master' branch of the local repository.","title":"Adding Files to the Master Branch"},{"location":"TaraVault-User-Manual/Using-Git/#working-with-branches","text":"Now that we have the primary development line in our master branch, we can work on a separate version of the code in a different branch, and then at a later date merge back in the changes to the 'master' branch. For example we might be working on an experimental new feature and we only want to merge it into the 'master' when it is internally stable and all the unit tests pass. We shall create a new named branch in our local repository using TortoiseGit. To do that right-click on the top-level folder (sampleapplicationone) and then click Tortoise Git > Create Branch: This will display the following dialog box: Enter in the name of the new branch (we have chosen 'experimental' in the example shown) and click [OK] to create the new branch. Since we want to start working in this new branch, we should now using TortoiseGit > Switch/Checkout to switch to this new branch: Click [OK] to confirm the switch. Now all your changes will be made on this branch. Now, let's simulate making a code change on the 'experimental' branch we made. To do that, change one of the files in the folder structure and then right-click Git Commit -> \"experimental\": That will display the commit dialog box: Enter in a comment in the 'Message' text box that describes the purpose of the change. Then click [OK]. On the success dialog box that appears, click 'Close'. Now unlike other VCS such as Subversion, we have made all of these changes in the local Git repository. Once you are ready to share your changes with your team, you need to 'Push' the local branches to the remote TaraVault repository. To do this, right-click on the top-level folder (sampleapplicationone) and choose TortoiseGit > Push. The following dialog box will be displayed: In this case we want to push all branches (master and experimental) to TaraVault, so select the checkbox 'Push all branches'. Then click 'OK' to push the changes: Once they have been pushed, we are now ready to view the repository within Spira.","title":"Working with Branches"},{"location":"TaraVault-User-Manual/Using-Git/#viewing-within-spira","text":"In addition to being able to browse the source code repository in Spira, which is itself very useful, the real strength comes from linking artifacts in Spira - including Incidents, Requirements, and Tasks - to revisions checked into the software repository, indicating what was fixed or implemented in a specific revision. Firstly, you can view the source code tree by selecting the Tracking > Source Code link under the main Spira menu. This will display the following: This is normal, it means simply that the source code viewer is initializing for initial use. Whenever you access a TaraVault project for the first time you will see this. After a few minutes it will be ready for use and you can refresh the page to display: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. The file view will display the filename, the current revision number of the file and the date of the last commit. You can filter and sort on any of the columns, as well. The page will display the folders and files for the currently selected branch (in the example above \"master\"), you can change the current branch at any time by selecting it from the dropdown menu: To view the file details, click on a file hyperlink the main source code file grid. The file details page displays the details on the selected revision. By default, it will be the latest revision in the current branch, unless you clicked to view the file details from a revision. By clicking on the file name, you can download the specified revision of the file to your local machine. This does not do a Git clone or pull; you are merely downloading the file to your local machine. Underneath the file details are tabs that show a preview of the file (with syntax highlighting), a list of all the revisions that this file belongs in, or was committed to, who performed the commit, and the log message for the commit, and a tab that shows any artifact associations. Throughout SpiraTeam, revisions are indicated by the icon: By clicking on a revision in SpiraTeam, you will be taken to the revision details page. The revision details screen shows the log for the commit, the commit date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this commit, with their full path, size, latest revision and date of edit. The Associations tab shows any artifact (Incident, Requirement, Test Case, Test Set) that the log message references. See Source Code Associations","title":"Viewing within Spira"},{"location":"TaraVault-User-Manual/Using-Git/#linking-artifacts","text":"Linking an artifact is quite simple. To maintain the readability of Git commit messages, we adopted a square bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail. If you forget to add the association during the commit, you can use the 'Add Association' option within SpiraTeam to add the association after the fact.","title":"Linking Artifacts"},{"location":"TaraVault-User-Manual/Using-Subversion/","text":"Using Subversion Subversion is a version control system (VCS) -- also known as a revision control system (RCS). That is, Subversion manages files and directories, and the changes made to them, over time. This allows you to recover older versions of your data or examine the history of how your data changed. Some version control systems are also software configuration management (SCM) systems. These systems are specifically tailored to manage trees of source code and have many features that are specific to software development---such as natively understanding programming languages, or supplying tools for building software. Subversion, however, is not one of these systems. It is a general system that can be used to manage any collection of files, though it is often used for SCM, handling source code files Repository Layout Before we get started with using Subversion, we need to discuss the standard folder layout. For TaraVault to display its branches, folders, files and revisions correctly in Spira you need to follow this layout for all your Subversion projects: These three concepts are explained below: Trunk is the main folder containing all the data. This is the main line of current development for the project. A Branch contains copy of the trunk files and directories. These are used to denote older or non-primary versions of the Trunk. You may still commit changes into these branches. For example you may be still fixing bugs on an older version whilst primary development is occurring on the latest version. Tags can also be referred as milestone. This is a check-point to indicate that your project has reached a certain point. You can use this to mark various releases. Unlike a branch, you cannot commit changes into a tag. An example setup for such a project could look like: The same folders and files are typically stored inside each of the Branches, Tags and the Trunk. We shall illustrate this more closely when we get started in the next section. Getting Started with Subversion This section assumes that you have already provisioned at least one Subversion project in TaraVault following the steps in Activating TaraVault and Provisioning Projects & Users . So you should now have a TaraVault user/password and a Subversion project with a connection URL: The next step is to actually connect to this repository using a Subversion client and commit some source code. We recommend using a GUI tool such as TortoiseSVN but you can use any standard Subversion client with TaraVault (command-line or GUI-based) just as well. In our examples we shall be using TortoiseSVN. The first thing we need to do is perform an initial 'check-out' of our repository into a new working folder (that will initially be empty). Assuming that you have already installed TortoiseSVN, you would now create a folder to hold all of your Subversion projects (in our example we shall use C:\\Temp\\Subversion) and right-click and choose TortoiseSVN > Check Out: The following dialog box will appear: You need to enter the following: URL of repository -- needs to be the TaraVault connection string listed under 'My Profile' for the current project. Checkout Directory -- needs to be the local name of the folder for this project. Typically it is best to make it the same as the name of the project in TaraVault (e.g. C:\\Temp\\Subversion\\libraryinformationsystem in this example) When you click on the 'OK' button, the following authentication dialog box will appear: Enter your TaraVault username/password, choose 'Save authentication' and then click 'OK'. You will now get a folder C:\\Temp\\Subversion\\libraryinformationsystem that is completely empty apart from a special _svn (or .svn) folder that is used by TortoiseSVN internally. Now that you have your Subversion working folder downloaded, you should add the following three folders right now: Trunk Branches Tags Once you have added them to Windows Explorer, select them all and choose TortoiseSVN > Add: This will display the following: Once they are added, then choose TortoiseSVN > Commit to commit these folders to the TaraVault repository. That will display the following dialog box: Typically you should add a message to describe what you did. Then click 'OK' and the three layout folders will now be added to your TaraVault subversion repository. Adding Files to the Trunk Now that you have your Subversion repository layout setup, we shall simulate working on a real project. You can now copy some code and folders into the Trunk top-level folder for your project. In this example we shall add some sample Inflectra code: Select all the files and folders and choose TortoiseSVN > Add, then after adding the files and folders, choose TortoiseSVN > Commit to add these files to the repository. Now, open up one of the files (we shall modify the SampleTestSuite\\AssemblyInfo.cs file in our example) and make a change to it. Then right-click on Trunk and choose TortoiseSVN > Commit to commit the change. Make sure you add a comment: Click OK and the change (known as a revision) will now be committed into TaraVault. Branching and Tagging Now that we have the primary development line in our Trunk, we can branch and tag a specific version of the code before we make other changes. For example we might be releasing a version and then making changes specific only to the next version. We shall create both a branch and a tag from the current Trunk. Firstly, to create a Branch, right-click on Trunk and choose TortoiseSVN > Branch/Tag: Change the 'To path' from /Trunk to /Branches/v2.0.0.0. You can either branch the latest revision (called the HEAD revision) or a specific revision: We also recommend adding a 'Log message' to describe the purpose of making the branch. Once you are happy with your choice, click 'OK' to confirm the branch. Once that is done, a copy of the Trunk will now be available under the Branches/v2.0.0.0 folder. To see this, right-click on Branches and choose TortoiseSVN > Update: Similarly, to make a Tag, right-click on Trunk and choose TortoiseSVN > Branch/Tag, and change the 'To path' from /Trunk to /Tags/v1.0.0.0: Once that has been completed, right-click on the Tags folder and choose TortoiseSVN > Update: The main difference between a Branch and a Tag is that you can continue to make changes on a Branch, whereas a Tag is a fixed snapshot of the Trunk and cannot be modified. To illustrate this, let's simulate making a bug fix on the v2.0 branch we made. To do that, change one of the files in the /Branches/v1.0.0.0 folder structure and then right-click TortoiseSVN > Commit: Click 'OK' and we are now ready to view the repository within Spira. Viewing within Spira In addition to being able to browse the source code repository in Spira, which is itself very useful, the real strength comes from linking artifacts in Spira - including Incidents, Requirements, and Tasks - to revisions checked into the software repository, indicating what was fixed or implemented in a specific revision. Firstly, you can view the source code tree by selecting the Tracking > Source Code link under the main Spira menu. This will display the following: This is normal, it means simply that the source code viewer is initializing for initial use. Whenever you access a TaraVault project for the first time you will see this. After a few minutes it will be ready for use and you can refresh the page to display: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. Note that this view will always show the current (HEAD) revision of the repository. Also note that the page will display the folders and files for the currently selected branch (in the example above \"Trunk\"), you can change the current branch at any time by selecting it from the dropdown menu: The file grid will display the filename, the current revision number of the file, the author of the last commit, and the date of the last commit. You can filter and sort on any of the columns, as well: To view the file details, click on a file hyperlink in the grid. The file details page displays the details on the selected file. By default, it will be the HEAD revision, unless you clicked to view the file details from a specific revision. By clicking on the file name, you can download the specified revision of the file to your local machine. This does not do an Subversion checkout; you are merely downloading the file to your local machine. Underneath the file details are tabs that show a preview of the file (with syntax highlighting), a list of all the revisions that this file belongs in, or was committed to, who performed the commit, and the log message for the commit, and a tab that shows any artifact associations. Throughout SpiraTeam, revisions are indicated by the icon: By clicking on a revision in SpiraTeam, you will be taken to the revision details page. The revision details screen shows the log for the Commit, the commit date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this commit, with their full path and the action that was performed on them for this commit. Possible values are Added, Modified, or Deleted. The Associations tab shows any artifact (Incident, Task, Requirement, Test Case, Test Set, etc.) that the log message references. See the next section for information on how to link a revision with a Subversion Commit: Linking Artifacts Linking an artifact is quite simple. To maintain the readability of Subversion's commit messages, we adopted a bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail. If you forget to add the association during the commit, you can use the 'Add Association' option within SpiraTeam to add the association after the fact. This is described in more detail in the SpiraTeam User Manual.","title":"Using Subversion"},{"location":"TaraVault-User-Manual/Using-Subversion/#using-subversion","text":"Subversion is a version control system (VCS) -- also known as a revision control system (RCS). That is, Subversion manages files and directories, and the changes made to them, over time. This allows you to recover older versions of your data or examine the history of how your data changed. Some version control systems are also software configuration management (SCM) systems. These systems are specifically tailored to manage trees of source code and have many features that are specific to software development---such as natively understanding programming languages, or supplying tools for building software. Subversion, however, is not one of these systems. It is a general system that can be used to manage any collection of files, though it is often used for SCM, handling source code files","title":"Using Subversion"},{"location":"TaraVault-User-Manual/Using-Subversion/#repository-layout","text":"Before we get started with using Subversion, we need to discuss the standard folder layout. For TaraVault to display its branches, folders, files and revisions correctly in Spira you need to follow this layout for all your Subversion projects: These three concepts are explained below: Trunk is the main folder containing all the data. This is the main line of current development for the project. A Branch contains copy of the trunk files and directories. These are used to denote older or non-primary versions of the Trunk. You may still commit changes into these branches. For example you may be still fixing bugs on an older version whilst primary development is occurring on the latest version. Tags can also be referred as milestone. This is a check-point to indicate that your project has reached a certain point. You can use this to mark various releases. Unlike a branch, you cannot commit changes into a tag. An example setup for such a project could look like: The same folders and files are typically stored inside each of the Branches, Tags and the Trunk. We shall illustrate this more closely when we get started in the next section.","title":"Repository Layout"},{"location":"TaraVault-User-Manual/Using-Subversion/#getting-started-with-subversion","text":"This section assumes that you have already provisioned at least one Subversion project in TaraVault following the steps in Activating TaraVault and Provisioning Projects & Users . So you should now have a TaraVault user/password and a Subversion project with a connection URL: The next step is to actually connect to this repository using a Subversion client and commit some source code. We recommend using a GUI tool such as TortoiseSVN but you can use any standard Subversion client with TaraVault (command-line or GUI-based) just as well. In our examples we shall be using TortoiseSVN. The first thing we need to do is perform an initial 'check-out' of our repository into a new working folder (that will initially be empty). Assuming that you have already installed TortoiseSVN, you would now create a folder to hold all of your Subversion projects (in our example we shall use C:\\Temp\\Subversion) and right-click and choose TortoiseSVN > Check Out: The following dialog box will appear: You need to enter the following: URL of repository -- needs to be the TaraVault connection string listed under 'My Profile' for the current project. Checkout Directory -- needs to be the local name of the folder for this project. Typically it is best to make it the same as the name of the project in TaraVault (e.g. C:\\Temp\\Subversion\\libraryinformationsystem in this example) When you click on the 'OK' button, the following authentication dialog box will appear: Enter your TaraVault username/password, choose 'Save authentication' and then click 'OK'. You will now get a folder C:\\Temp\\Subversion\\libraryinformationsystem that is completely empty apart from a special _svn (or .svn) folder that is used by TortoiseSVN internally. Now that you have your Subversion working folder downloaded, you should add the following three folders right now: Trunk Branches Tags Once you have added them to Windows Explorer, select them all and choose TortoiseSVN > Add: This will display the following: Once they are added, then choose TortoiseSVN > Commit to commit these folders to the TaraVault repository. That will display the following dialog box: Typically you should add a message to describe what you did. Then click 'OK' and the three layout folders will now be added to your TaraVault subversion repository.","title":"Getting Started with Subversion"},{"location":"TaraVault-User-Manual/Using-Subversion/#adding-files-to-the-trunk","text":"Now that you have your Subversion repository layout setup, we shall simulate working on a real project. You can now copy some code and folders into the Trunk top-level folder for your project. In this example we shall add some sample Inflectra code: Select all the files and folders and choose TortoiseSVN > Add, then after adding the files and folders, choose TortoiseSVN > Commit to add these files to the repository. Now, open up one of the files (we shall modify the SampleTestSuite\\AssemblyInfo.cs file in our example) and make a change to it. Then right-click on Trunk and choose TortoiseSVN > Commit to commit the change. Make sure you add a comment: Click OK and the change (known as a revision) will now be committed into TaraVault.","title":"Adding Files to the Trunk"},{"location":"TaraVault-User-Manual/Using-Subversion/#branching-and-tagging","text":"Now that we have the primary development line in our Trunk, we can branch and tag a specific version of the code before we make other changes. For example we might be releasing a version and then making changes specific only to the next version. We shall create both a branch and a tag from the current Trunk. Firstly, to create a Branch, right-click on Trunk and choose TortoiseSVN > Branch/Tag: Change the 'To path' from /Trunk to /Branches/v2.0.0.0. You can either branch the latest revision (called the HEAD revision) or a specific revision: We also recommend adding a 'Log message' to describe the purpose of making the branch. Once you are happy with your choice, click 'OK' to confirm the branch. Once that is done, a copy of the Trunk will now be available under the Branches/v2.0.0.0 folder. To see this, right-click on Branches and choose TortoiseSVN > Update: Similarly, to make a Tag, right-click on Trunk and choose TortoiseSVN > Branch/Tag, and change the 'To path' from /Trunk to /Tags/v1.0.0.0: Once that has been completed, right-click on the Tags folder and choose TortoiseSVN > Update: The main difference between a Branch and a Tag is that you can continue to make changes on a Branch, whereas a Tag is a fixed snapshot of the Trunk and cannot be modified. To illustrate this, let's simulate making a bug fix on the v2.0 branch we made. To do that, change one of the files in the /Branches/v1.0.0.0 folder structure and then right-click TortoiseSVN > Commit: Click 'OK' and we are now ready to view the repository within Spira.","title":"Branching and Tagging"},{"location":"TaraVault-User-Manual/Using-Subversion/#viewing-within-spira","text":"In addition to being able to browse the source code repository in Spira, which is itself very useful, the real strength comes from linking artifacts in Spira - including Incidents, Requirements, and Tasks - to revisions checked into the software repository, indicating what was fixed or implemented in a specific revision. Firstly, you can view the source code tree by selecting the Tracking > Source Code link under the main Spira menu. This will display the following: This is normal, it means simply that the source code viewer is initializing for initial use. Whenever you access a TaraVault project for the first time you will see this. After a few minutes it will be ready for use and you can refresh the page to display: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. Note that this view will always show the current (HEAD) revision of the repository. Also note that the page will display the folders and files for the currently selected branch (in the example above \"Trunk\"), you can change the current branch at any time by selecting it from the dropdown menu: The file grid will display the filename, the current revision number of the file, the author of the last commit, and the date of the last commit. You can filter and sort on any of the columns, as well: To view the file details, click on a file hyperlink in the grid. The file details page displays the details on the selected file. By default, it will be the HEAD revision, unless you clicked to view the file details from a specific revision. By clicking on the file name, you can download the specified revision of the file to your local machine. This does not do an Subversion checkout; you are merely downloading the file to your local machine. Underneath the file details are tabs that show a preview of the file (with syntax highlighting), a list of all the revisions that this file belongs in, or was committed to, who performed the commit, and the log message for the commit, and a tab that shows any artifact associations. Throughout SpiraTeam, revisions are indicated by the icon: By clicking on a revision in SpiraTeam, you will be taken to the revision details page. The revision details screen shows the log for the Commit, the commit date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this commit, with their full path and the action that was performed on them for this commit. Possible values are Added, Modified, or Deleted. The Associations tab shows any artifact (Incident, Task, Requirement, Test Case, Test Set, etc.) that the log message references. See the next section for information on how to link a revision with a Subversion Commit:","title":"Viewing within Spira"},{"location":"TaraVault-User-Manual/Using-Subversion/#linking-artifacts","text":"Linking an artifact is quite simple. To maintain the readability of Subversion's commit messages, we adopted a bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail. If you forget to add the association during the commit, you can use the 'Add Association' option within SpiraTeam to add the association after the fact. This is described in more detail in the SpiraTeam User Manual.","title":"Linking Artifacts"},{"location":"Unit-Testing-Integration/Integrating-UnitJS-&-NodeJS/","text":"Integrating UnitJS & NodeJS UnitJS is an assertion library for JavaScript, running on Node.js or a web browser. It works with various test runner and unit testing frameworks, including Mocha, Karma, Protractor, and QUnit. SpiraTest currently includes a pre-built extension for the MochaJS test runner and our sample code illustrates it working with UnitJS. However, we supply the source code to the extension, so you can easily adapt it for other runners such as Protractor. Using the SpiraTest MochaJS Reporter Mocha is a feature-rich JavaScript test framework running on Node.js and in the browser, making asynchronous testing simple and fun. Mocha tests run serially, allowing for flexible and accurate reporting, while mapping uncaught exceptions to the correct test cases. An example UnitJS test running Mocha looks something like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 var test = require ( 'unit.js' ); describe ( 'Example Test' , function (){ it ( 'sample pass' , function (){ // just for example of tested value var example = 'hello world' ; test . string ( example ) . startsWith ( 'hello' ) . match ( /\\[a-z\\]/ ) . given ( example = 'you are welcome' ) . string ( example ) . endsWith ( 'welcome' ) . contains ( 'you' ) . when ( '\"example\" becomes an object' , function (){ example = { message : 'hello world' , name : 'Nico' , job : 'developper' , from : 'France' }; }) . then ( 'test the \"example\" object' , function (){ test . object ( example ) . hasValue ( 'developper' ) . hasProperty ( 'name' ) . hasProperty ( 'from' , 'France' ) . contains ({ message : 'hello world' }) ; }) . if ( example = 'bad value' ) . error ( function (){ example . badMethod (); }) ; }); it ( 'sample fail' , function (){ // just for example of tested value var example = 'not hello world' ; test . string ( example ) . startsWith ( 'hello' ) . match ( /\\[a-z\\]/ ) . given ( example = 'you are welcome' ) . string ( example ) . endsWith ( 'welcome' ) . contains ( 'you' ) . when ( '\"example\" becomes an object' , function (){ example = { message : 'hello world' , name : 'Nico' , job : 'developper' , from : 'France' }; }) . then ( 'test the \"example\" object' , function (){ test . object ( example ) . hasValue ( 'developper' ) . hasProperty ( 'name' ) . hasProperty ( 'from' , 'France' ) . contains ({ message : 'hello world' }) ; }) . if ( example = 'bad value' ) . error ( function (){ example . badMethod (); }) ; }); }); In this sample, we have one test suite \"Example Test\" that has two tests -- \"sample pass\" and \"sample fail\" inside it. When you run this test using Mocha using the command line: node ./node_modules/mocha/bin/mocha .\\test\\example2.js You get the following: What we want is to have this test suite report back against a matching test case in SpiraTest. To do that we need to download and unzip the UnitJS-MochaJS-Reporter.zip file from the Inflectra website and extract the contents to the same location as your test framework. The reporter subfolder contains two NodeJS modules: SpiraReporter.js -- this contains the Mocha custom reporter used for sending the results to SpiraTest SpiraClient.js -- this contains the JavaScript module that sends a test result back to SpiraTest. It is used by SpiraReporter.js but can also be used directly in your code if you want to report back results without using Mocha. To use this custom reporter with your Mocha test framework, you simply need to do these two things: Add the reporter name to the command line used to invoke Mocha Add some configuration code to your UnitJS test suite to tell Mocha how to connect to your instance of SpiraTest. The first part is very straightforward, just add the Reporter to your Mocha command line: node ./node_modules/mocha/bin/mocha .\\test\\example2.js --reporter .\\reporter\\SpiraReporter For the second part, you need to add the following code to your test suite at the top: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 var SpiraReporter = require ( '../reporter/SpiraReporter.js' ); //set the SpiraTest options global . spiraOptions = { projectId : 1 , testCaseId : 4 , releaseId : 1 , testSetId : null , login : 'fredbloggs' , apiKey : '{7A05FD06-83C3-4436-B37F-51BCF0060483}' , protocol : 'http' , host : '127.0.0.1' , vdir : 'spira' }; The first line simply adds a reference to the SpiraTest Mocha reporter module. The second line defines the connection and test case information used for reporting back to SpiraTest. Here's what you need to put in each of the required configuration options: protocol -- this needs to be set to either \"http\" or \"https\" depending on how you connect to SpiraTest host -- this needs to be the name or IP address of the host running SpiraTest. For cloud customers, it will be something like mycompany.spiraservice.net port -- this is usually 80 for http and 443 for https unless you are running SpiraTest on a custom port vdir -- this is the name of any path used after the hostname. For example, if your URL is https://demo.spiraservice.net/mysite then the vdir would be \"mysite\". If your URL is just https://mycompany.spiraservice.net then you can leave the vdir blank or just not set a value for it. login -- this should be a login that has access to the project in SpiraTest with permissions to create test runs. apiKey -- this should be the API Key (also known as the RSS Token) for the login specified projectId -- this should be the numeric ID of the project that the test case belongs to (e.g. if the project is PR56 just use 56) testCaseId -- this should be the numeric ID of the test case that you want this Mocha test suite to report against (e.g. if the test case in question is TC23 just use 23) In addition, there are two optional configuration parameters you can use: releaseId -- If you would like the recorded test run to be reported against a specific release, iteration or phase in SpiraTest, you need to specify the ID of the release in question (e.g. for release RL18 just use 18) testSetId - If you would like the recorded test run to be reported against a specific test set in SpiraTest, you need to specify the ID of the test set in question (e.g. for test set TX35 just use 35) With those values set, when you run the test suite using the command line: node ./node_modules/mocha/bin/mocha .\\test\\example2.js --reporter .\\reporter\\SpiraReporter The results of the test suite will be displayed inside the Mocha console: When you login to SpiraTest and view the test case being executed, you will now see the automated test runs reported back from Mocha: Clicking on one of the MochaJS Reporter test runs will bring up a screen that provides the detailed test run report from Mocha: The Console Output section gives more detailed information: Congratulations... You are now able to run UnitJS automated tests using Mocha and the SpiraTest custom reporter and have the results be recorded within SpiraTest. The sample test suites example.js and example2.js are provided with the installation.","title":"UnitJS & NodeJS"},{"location":"Unit-Testing-Integration/Integrating-UnitJS-&-NodeJS/#integrating-unitjs-nodejs","text":"UnitJS is an assertion library for JavaScript, running on Node.js or a web browser. It works with various test runner and unit testing frameworks, including Mocha, Karma, Protractor, and QUnit. SpiraTest currently includes a pre-built extension for the MochaJS test runner and our sample code illustrates it working with UnitJS. However, we supply the source code to the extension, so you can easily adapt it for other runners such as Protractor.","title":"Integrating UnitJS &amp; NodeJS"},{"location":"Unit-Testing-Integration/Integrating-UnitJS-&-NodeJS/#using-the-spiratest-mochajs-reporter","text":"Mocha is a feature-rich JavaScript test framework running on Node.js and in the browser, making asynchronous testing simple and fun. Mocha tests run serially, allowing for flexible and accurate reporting, while mapping uncaught exceptions to the correct test cases. An example UnitJS test running Mocha looks something like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 var test = require ( 'unit.js' ); describe ( 'Example Test' , function (){ it ( 'sample pass' , function (){ // just for example of tested value var example = 'hello world' ; test . string ( example ) . startsWith ( 'hello' ) . match ( /\\[a-z\\]/ ) . given ( example = 'you are welcome' ) . string ( example ) . endsWith ( 'welcome' ) . contains ( 'you' ) . when ( '\"example\" becomes an object' , function (){ example = { message : 'hello world' , name : 'Nico' , job : 'developper' , from : 'France' }; }) . then ( 'test the \"example\" object' , function (){ test . object ( example ) . hasValue ( 'developper' ) . hasProperty ( 'name' ) . hasProperty ( 'from' , 'France' ) . contains ({ message : 'hello world' }) ; }) . if ( example = 'bad value' ) . error ( function (){ example . badMethod (); }) ; }); it ( 'sample fail' , function (){ // just for example of tested value var example = 'not hello world' ; test . string ( example ) . startsWith ( 'hello' ) . match ( /\\[a-z\\]/ ) . given ( example = 'you are welcome' ) . string ( example ) . endsWith ( 'welcome' ) . contains ( 'you' ) . when ( '\"example\" becomes an object' , function (){ example = { message : 'hello world' , name : 'Nico' , job : 'developper' , from : 'France' }; }) . then ( 'test the \"example\" object' , function (){ test . object ( example ) . hasValue ( 'developper' ) . hasProperty ( 'name' ) . hasProperty ( 'from' , 'France' ) . contains ({ message : 'hello world' }) ; }) . if ( example = 'bad value' ) . error ( function (){ example . badMethod (); }) ; }); }); In this sample, we have one test suite \"Example Test\" that has two tests -- \"sample pass\" and \"sample fail\" inside it. When you run this test using Mocha using the command line: node ./node_modules/mocha/bin/mocha .\\test\\example2.js You get the following: What we want is to have this test suite report back against a matching test case in SpiraTest. To do that we need to download and unzip the UnitJS-MochaJS-Reporter.zip file from the Inflectra website and extract the contents to the same location as your test framework. The reporter subfolder contains two NodeJS modules: SpiraReporter.js -- this contains the Mocha custom reporter used for sending the results to SpiraTest SpiraClient.js -- this contains the JavaScript module that sends a test result back to SpiraTest. It is used by SpiraReporter.js but can also be used directly in your code if you want to report back results without using Mocha. To use this custom reporter with your Mocha test framework, you simply need to do these two things: Add the reporter name to the command line used to invoke Mocha Add some configuration code to your UnitJS test suite to tell Mocha how to connect to your instance of SpiraTest. The first part is very straightforward, just add the Reporter to your Mocha command line: node ./node_modules/mocha/bin/mocha .\\test\\example2.js --reporter .\\reporter\\SpiraReporter For the second part, you need to add the following code to your test suite at the top: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 var SpiraReporter = require ( '../reporter/SpiraReporter.js' ); //set the SpiraTest options global . spiraOptions = { projectId : 1 , testCaseId : 4 , releaseId : 1 , testSetId : null , login : 'fredbloggs' , apiKey : '{7A05FD06-83C3-4436-B37F-51BCF0060483}' , protocol : 'http' , host : '127.0.0.1' , vdir : 'spira' }; The first line simply adds a reference to the SpiraTest Mocha reporter module. The second line defines the connection and test case information used for reporting back to SpiraTest. Here's what you need to put in each of the required configuration options: protocol -- this needs to be set to either \"http\" or \"https\" depending on how you connect to SpiraTest host -- this needs to be the name or IP address of the host running SpiraTest. For cloud customers, it will be something like mycompany.spiraservice.net port -- this is usually 80 for http and 443 for https unless you are running SpiraTest on a custom port vdir -- this is the name of any path used after the hostname. For example, if your URL is https://demo.spiraservice.net/mysite then the vdir would be \"mysite\". If your URL is just https://mycompany.spiraservice.net then you can leave the vdir blank or just not set a value for it. login -- this should be a login that has access to the project in SpiraTest with permissions to create test runs. apiKey -- this should be the API Key (also known as the RSS Token) for the login specified projectId -- this should be the numeric ID of the project that the test case belongs to (e.g. if the project is PR56 just use 56) testCaseId -- this should be the numeric ID of the test case that you want this Mocha test suite to report against (e.g. if the test case in question is TC23 just use 23) In addition, there are two optional configuration parameters you can use: releaseId -- If you would like the recorded test run to be reported against a specific release, iteration or phase in SpiraTest, you need to specify the ID of the release in question (e.g. for release RL18 just use 18) testSetId - If you would like the recorded test run to be reported against a specific test set in SpiraTest, you need to specify the ID of the test set in question (e.g. for test set TX35 just use 35) With those values set, when you run the test suite using the command line: node ./node_modules/mocha/bin/mocha .\\test\\example2.js --reporter .\\reporter\\SpiraReporter The results of the test suite will be displayed inside the Mocha console: When you login to SpiraTest and view the test case being executed, you will now see the automated test runs reported back from Mocha: Clicking on one of the MochaJS Reporter test runs will bring up a screen that provides the detailed test run report from Mocha: The Console Output section gives more detailed information: Congratulations... You are now able to run UnitJS automated tests using Mocha and the SpiraTest custom reporter and have the results be recorded within SpiraTest. The sample test suites example.js and example2.js are provided with the installation.","title":"Using the SpiraTest MochaJS Reporter"},{"location":"Unit-Testing-Integration/Integrating-with-JUnit/","text":"Integrating with JUnit The directions for using JUnit 5 and JUnit 4 are in different sections below: Installing the JUnit 5 Extension This section outlines how to install the SpiraTest Extension for JUnit onto a workstation so that you can then run automated JUnit tests against a Java application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v3.0 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v3.0 before trying to use this extension. You will also need to have at least version 5.0 of Junit. If you are using an earlier version, please visit www.junit.org to obtain the latest version. To obtain the version of the JUnit extension that is compatible with your version of SpiraTest, you simply need to log-in as a project-level administrator to SpiraTest, go to the Administration home page and download the JUnit Extension compressed archive (.zip). This process is described in the SpiraTest Administration Guide in more detail. The JUnit extension is provided as a compressed zipfile that includes both the binaries (packaged as a JAR-file) and the source code (stored in a folder structure that mirrors the Java classpath). The JAR-file binary was compiled for use on a Windows x86 platform, other platforms (e.g. Linux) will require you to compile the Java source files into the appropriate Java classfiles before using the extension. The rest of this section will assume that you are using the pre-compiled JAR-file. Once you have downloaded the Zip archive, you need to uncompress it into a folder of your choice on your local system. Assuming that you uncompressed it to the C:\\Program Files\\JUnit Extension folder, you should have the following folder structure created: C:\\Program Files\\JUnit Extension C:\\Program Files\\JUnit Extension\\com C:\\Program Files\\JUnit Extension\\com\\inflectra C:\\Program Files\\JUnit Extension\\com\\inflectra\\spiratest C:\\Program Files\\JUnit Extension\\com\\inflectra\\spiratest\\addons C:\\Program Files\\JUnit Extension\\com\\inflectra\\spiratest\\addons\\junitextension C:\\Program Files\\JUnit Extension\\com\\inflectra\\spiratest\\addons\\junitextension\\samples The JAR-file is located in the root folder, the source-code for the extension can be found in the \"junitextension\" subfolder, and the sample test fixture can be found in the \"samples\" subfolder. Now to use the extension within your test cases, you need to first make sure that the JAR-file is added to the Java classpath. The method for doing this is dependent on the platform you're using, so please refer to FAQ on www.junit.org for details on the appropriate method for your platform. As an example, on a Windows platform, the JAR-file would be added to the classpath by typing the following: set CLASSPATH=%CLASSPATH%; C:\\Program Files\\JUnit Extension\\JUnitExtension.jar Once you have completed this step, you are now ready to begin using your JUnit test fixtures with SpiraTest. Using JUnit 5 with SpiraTest The typical code structure for a JUnit test fixture coded in Java is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 package com.inflectra.spiratest.addons.junitextension.samples ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.Test ; import static org.junit.jupiter.api.Assertions.assertEquals ; import static org.junit.jupiter.api.Assertions.assertTrue ; /** * Some simple tests using the ability to return results back to SpiraTest * * @author Inflectra Corporation * @version 4.0.0 */ public class SimpleTest { protected int fValue1 ; protected int fValue2 ; /** * Sets up the unit test */ @BeforeEach public void setUp () { fValue1 = 2 ; fValue2 = 3 ; } /** * Tests the addition of the two values */ @Test public void testAdd () { double result = fValue1 + fValue2 ; // forced failure result == 5 assertTrue ( result == 6 ); } /** * Tests division by zero */ @Test public void testDivideByZero () { int zero = 0 ; int result = 8 / zero ; } /** * Tests two equal values */ @Test public void testEquals () { assertEquals ( 12 , 12 ); assertEquals ( 12L , 12L ); assertEquals ( new Long ( 12 ), new Long ( 12 )); assertEquals ( 12 , 13 , \"Size\" ); assertEquals ( 12.0 , 11.99 , 0.0 , \"Capacity\" ); } /** * Tests success */ @Test public void testSuccess () { //Successful test assertEquals ( 12 , 12 ); } } The Java class is marked as a JUnit test fixture by applying the @BeforeEach attribute to the setup method, and the @Test attribute to each of the test assertion methods individually -- highlighted in yellow above. When you open up the class in a JUnit runner or execute from the command line it loads all the test classes and executes all the methods marked with @Test in turn. Each of the Assert statements is used to test the state of the application after executing some sample code that calls the functionality being tested. If the condition in the assertion is true, then execution of the test continues, if it is false, then a failure is logged and JUnit moves on to the next test method. So, to use SpiraTest with JUnit, each of the test cases written for execution by JUnit needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, the changes that need to be made to the JUnit test fixture for SpiraTest to record the JUnit test run are illustrated below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 package com.inflectra.spiratest.addons.junitextension.samples ; import com.inflectra.spiratest.addons.junitextension.* ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.Test ; import static org.junit.jupiter.api.Assertions.assertEquals ; import static org.junit.jupiter.api.Assertions.assertTrue ; /** * Some simple tests using the ability to return results back to SpiraTest * * @author Inflectra Corporation * @version 4.0.0 */ @SpiraTestConfiguration ( //following are REQUIRED url = \"http://doctor/SpiraPlan\" , login = \"fredbloggs\" , rssToken = \"{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}\" , projectId = 1 , //following are OPTIONAL releaseId = 7 , testSetId = 1 ) public class SimpleTest { protected int fValue1 ; protected int fValue2 ; /** * Sets up the unit test */ @BeforeEach public void setUp () { fValue1 = 2 ; fValue2 = 3 ; } /** * Tests the addition of the two values */ @Test @SpiraTestCase ( testCaseId = 22 ) public void testAdd () { double result = fValue1 + fValue2 ; // forced failure result == 5 assertTrue ( result == 6 ); } /** * Tests division by zero */ @Test @SpiraTestCase ( testCaseId = 22 ) public void testDivideByZero () { int zero = 0 ; int result = 8 / zero ; } /** * Tests two equal values */ @Test @SpiraTestCase ( testCaseId = 22 ) public void testEquals () { assertEquals ( 12 , 12 ); assertEquals ( 12L , 12L ); assertEquals ( new Long ( 12 ), new Long ( 12 )); assertEquals ( 12 , 13 , \"Size\" ); assertEquals ( 12.0 , 11.99 , 0.0 , \"Capacity\" ); } /** * Tests success */ @Test @SpiraTestCase ( testCaseId = 22 ) public void testSuccess () { //Successful test assertEquals ( 12 , 12 ); } } The overall class is marked with a new @SpiraTestConfiguration attribute that contains the following pieces of information needed to access the SpiraTest test repository: URL - The URL to the instance of SpiraTest being accessed. This needs to start with http:// or https://. Login - A valid username for the instance of SpiraTest. RSS Token -- Found in your profile page, RSS Feeds must be enabled to work. Project Id - The ID of the project (this can be found on the project homepage in the \"Project Overview\" section) Release Id (Optional) - The ID of the release to associate the test run with. This can be found on the releases list page (click on the Planning > Releases tab). If you don't want to specify a release, just use the value -1. Test Set Id (Optional) -- The ID of the test set to associate the test run with. This can be found on the test set list page (click on the Testing > Test Sets tab). If you don't want to specify a test set, just use the value -1. If you choose a test set that is associated with a release, then you don't need to explicitly set a release id (i.e. just use -1). However if you do set a release value, it will override the value associated with the test set. In addition, each of the individual test methods needs to be mapped to a specific test case within SpiraTest. This is done by adding a @SpiraTestCase attribute to the test method together with the ID of the corresponding test case in SpiraTest. The Test Case ID can be found on the test cases list page (click the \"Test Cases\" tab). For these attributes to be available in your test fixture, you also need to add a reference to the com.inflectra.spiratest.addons.junitextension package. This package is bundled within the supplied JAR-file library for Windows, and can be compiled from the provided source .java files on other platforms. Now all you need to do is compile your code and then launch JUnit by executing the test fixture through the command line (or through your choice of IDE, e.g. Eclipse). E.g. for our sample test, you would use the following command: java com.inflectra.spiratest.addons.junitextension.samples.SimpleTest Once the test has run, you can view the test cases in SpiraTest, you should see a JUnit automated test run displayed in the list of executed test runs: Clicking on one of the JUnit test runs will bring up a screen that provides information regarding what JUnit test method failed, what the error was, together with the associated code stack-trace: Congratulations... You are now able to run JUnit automated tests and have the results be recorded within SpiraTest. The sample test fixture SimpleText.java is provided with the installation. Installing the JUnit 4 Extension This section outlines how to install the SpiraTest Extension for JUnit onto a workstation so that you can then run automated JUnit tests against a Java application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v3.0 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v3.0 before trying to use this extension. You will also need to have version 4.0 of JUnit. To use version 5.0 of JUnit, please visit Installing the JUnit 5 Extension To obtain the version of the JUnit extension that is compatible with your version of SpiraTest, you simply need to log-in as a project-level administrator to SpiraTest, go to the Administration home page and download the JUnit Extension compressed archive (.zip). This process is described in the SpiraTest Administration Guide in more detail. The JUnit extension is provided as a compressed zipfile that includes both the binaries (packaged as a JAR-file) and the source code (stored in a folder structure that mirrors the Java classpath). The JAR-file binary was compiled for use on a Windows x86 platform, other platforms (e.g. Linux) will require you to compile the Java source files into the appropriate Java classfiles before using the extension. The rest of this section will assume that you are using the pre-compiled JAR-file. Once you have downloaded the Zip archive, you need to uncompress it into a folder of your choice on your local system. Assuming that you uncompressed it to the C:\\Program Files\\JUnit Extension folder, you should have the following folder structure created: C:\\Program Files\\JUnit Extension C:\\Program Files\\JUnit Extension\\com C:\\Program Files\\JUnit Extension\\com\\inflectra C:\\Program Files\\JUnit Extension\\com\\inflectra\\spiratest C:\\Program Files\\JUnit Extension\\com\\inflectra\\spiratest\\addons C:\\Program Files\\JUnit Extension\\com\\inflectra\\spiratest\\addons\\junitextension C:\\Program Files\\JUnit Extension\\com\\inflectra\\spiratest\\addons\\junitextension\\samples The JAR-file is located in the root folder, the source-code for the extension can be found in the \"junitextension\" subfolder, and the sample test fixture can be found in the \"samples\" subfolder. Now to use the extension within your test cases, you need to first make sure that the JAR-file is added to the Java classpath. The method for doing this is dependent on the platform you're using, so please refer to FAQ on www.junit.org for details on the appropriate method for your platform. As an example, on a Windows platform, the JAR-file would be added to the classpath by typing the following: set CLASSPATH=%CLASSPATH%; C:\\Program Files\\JUnit Extension\\JUnitExtension.jar Once you have completed this step, you are now ready to begin using your JUnit test fixtures with SpiraTest. Using JUnit 4 with SpiraTest The typical code structure for a JUnit test fixture coded in Java is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 package com.inflectra.spiratest.addons.junitextension.samples ; import static org.junit.Assert.* ; import junit.framework.JUnit4TestAdapter ; import org.junit.Before ; import org.junit.Test ; import org.junit.runner.* ; import org.junit.runner.notification.* ; import java.util.* ; /** * Some simple tests using JUnit 4 * * @author Inflectra Corporation * @version 2.3.0 * */ public class SimpleTest { protected int fValue1 ; protected int fValue2 ; /** * Sets up the unit test */ @Before public void setUp () { fValue1 = 2 ; fValue2 = 3 ; } /** * Tests the addition of the two values */ @Test public void testAdd () { double result = fValue1 + fValue2 ; // forced failure result == 5 assertTrue ( result == 6 ); } /** * Tests division by zero */ @Test public void testDivideByZero () { int zero = 0 ; int result = 8 / zero ; result ++ ; // avoid warning for not using result } /** * Tests two equal values */ @Test public void testEquals () { assertEquals ( 12 , 12 ); assertEquals ( 12L , 12L ); assertEquals ( new Long ( 12 ), new Long ( 12 )); assertEquals ( \"Size\" , 12 , 13 ); assertEquals ( \"Capacity\" , 12.0 , 11.99 , 0.0 ); } /** * Tests success */ @Test public void testSuccess () { //Successful test assertEquals ( 12 , 12 ); } /** * Entry point for command line execution * * @param args The command line arguments */ public static void main ( String [] args ) { //Instantiate the JUnit core JUnitCore core = new JUnitCore (); //Finally run the test fixture core . run ( SimpleTest . class ); } /** * Entry point for JUnit 4.x runners * * @return Handle to the test framework */ public static junit . framework . Test suite () { return new JUnit4TestAdapter ( SimpleTest . class ); } } The Java class is marked as a JUnit test fixture by applying the @Before attribute to the setup method, and the @Test attribute to each of the test assertion methods individually -- highlighted in yellow above. When you open up the class in a JUnit runner or execute from the command line it loads all the test classes and executes all the methods marked with @Test in turn. Each of the Assert statements is used to test the state of the application after executing some sample code that calls the functionality being tested. If the condition in the assertion is true, then execution of the test continues, if it is false, then a failure is logged and JUnit moves on to the next test method. So, to use SpiraTest with JUnit, each of the test cases written for execution by JUnit needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, the changes that need to be made to the JUnit test fixture for SpiraTest to record the JUnit test run are illustrated below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 package com.inflectra.spiratest.addons.junitextension.samples ; import static org.junit.Assert.* ; import junit.framework.JUnit4TestAdapter ; import org.junit.Before ; import org.junit.Test ; import org.junit.runner.* ; import org.junit.runner.notification.* ; import com.inflectra.spiratest.addons.junitextension.* ; import java.util.* ; /** * Some simple tests using the ability to return results back to SpiraTest * * @author Inflectra Corporation * @version 2.3.0 * */ @SpiraTestConfiguration ( url = \"http://sandman/SpiraTest\" , login = \"fredbloggs\" , password = \"fredbloggs\" , projectId = 1 , releaseId = 1 , testSetId = 1 ) public class SimpleTest { protected int fValue1 ; protected int fValue2 ; /** * Sets up the unit test */ @Before public void setUp () { fValue1 = 2 ; fValue2 = 3 ; } /** * Tests the addition of the two values */ @Test @SpiraTestCase ( testCaseId = 5 ) public void testAdd () { double result = fValue1 + fValue2 ; // forced failure result == 5 assertTrue ( result == 6 ); } /** * Tests division by zero */ @Test @SpiraTestCase ( testCaseId = 5 ) public void testDivideByZero () { int zero = 0 ; int result = 8 / zero ; result ++ ; // avoid warning for not using result } /** * Tests two equal values */ @Test @SpiraTestCase ( testCaseId = 6 ) public void testEquals () { assertEquals ( 12 , 12 ); assertEquals ( 12L , 12L ); assertEquals ( new Long ( 12 ), new Long ( 12 )); assertEquals ( \"Size\" , 12 , 13 ); assertEquals ( \"Capacity\" , 12.0 , 11.99 , 0.0 ); } /** * Tests success */ @Test @SpiraTestCase ( testCaseId = 6 ) public void testSuccess () { //Successful test assertEquals ( 12 , 12 ); } /** * Entry point for command line execution * * @param args The command line arguments */ public static void main ( String [] args ) { //Instantiate the JUnit core JUnitCore core = new JUnitCore (); //Add the custom SpiraTest listener core . addListener ( new SpiraTestListener ()); //Finally run the test fixture core . run ( SimpleTest . class ); } /** * Entry point for JUnit 4.x runners * * @return Handle to the test framework */ public static junit . framework . Test suite () { return new JUnit4TestAdapter ( SimpleTest . class ); } } The overall class is marked with a new @SpiraTestConfiguration attribute that contains the following pieces of information needed to access the SpiraTest test repository: URL - The URL to the instance of SpiraTest being accessed. This needs to start with http:// or https://. Login - A valid username for the instance of SpiraTest. Password - A valid password for the instance of SpiraTest. Project Id - The ID of the project (this can be found on the project homepage in the \"Project Overview\" section) Release Id (Optional) - The ID of the release to associate the test run with. This can be found on the releases list page (click on the Planning > Releases tab). If you don't want to specify a release, just use the value -1. Test Set Id (Optional) -- The ID of the test set to associate the test run with. This can be found on the test set list page (click on the Testing > Test Sets tab). If you don't want to specify a test set, just use the value -1. If you choose a test set that is associated with a release, then you don't need to explicitly set a release id (i.e. just use -1). However if you do set a release value, it will override the value associated with the test set. In addition, each of the individual test methods needs to be mapped to a specific test case within SpiraTest. This is done by adding a @SpiraTestCase attribute to the test method together with the ID of the corresponding test case in SpiraTest. The Test Case ID can be found on the test cases list page (click the \"Test Cases\" tab). For these attributes to be available in your test fixture, you also need to add a reference to the com.inflectra.spiratest.addons.junitextension package. This package is bundled within the supplied JAR-file library for Windows, and can be compiled from the provided source .java files on other platforms. Now all you need to do is compile your code and then launch JUnit by executing the test fixture through the command line (or through your choice of IDE, e.g. Eclipse). E.g. for our sample test, you would use the following command: java com.inflectra.spiratest.addons.junitextension.samples.SimpleTest Once the test has run, you can view the test cases in SpiraTest, you should see a JUnit automated test run displayed in the list of executed test runs: Clicking on one of the JUnit test runs will bring up a screen that provides information regarding what JUnit test method failed, what the error was, together with the associated code stack-trace: Congratulations... You are now able to run JUnit automated tests and have the results be recorded within SpiraTest. The sample test fixture SimpleText.java is provided with the installation.","title":"JUnit"},{"location":"Unit-Testing-Integration/Integrating-with-JUnit/#integrating-with-junit","text":"The directions for using JUnit 5 and JUnit 4 are in different sections below:","title":"Integrating with JUnit"},{"location":"Unit-Testing-Integration/Integrating-with-JUnit/#installing-the-junit-5-extension","text":"This section outlines how to install the SpiraTest Extension for JUnit onto a workstation so that you can then run automated JUnit tests against a Java application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v3.0 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v3.0 before trying to use this extension. You will also need to have at least version 5.0 of Junit. If you are using an earlier version, please visit www.junit.org to obtain the latest version. To obtain the version of the JUnit extension that is compatible with your version of SpiraTest, you simply need to log-in as a project-level administrator to SpiraTest, go to the Administration home page and download the JUnit Extension compressed archive (.zip). This process is described in the SpiraTest Administration Guide in more detail. The JUnit extension is provided as a compressed zipfile that includes both the binaries (packaged as a JAR-file) and the source code (stored in a folder structure that mirrors the Java classpath). The JAR-file binary was compiled for use on a Windows x86 platform, other platforms (e.g. Linux) will require you to compile the Java source files into the appropriate Java classfiles before using the extension. The rest of this section will assume that you are using the pre-compiled JAR-file. Once you have downloaded the Zip archive, you need to uncompress it into a folder of your choice on your local system. Assuming that you uncompressed it to the C:\\Program Files\\JUnit Extension folder, you should have the following folder structure created: C:\\Program Files\\JUnit Extension C:\\Program Files\\JUnit Extension\\com C:\\Program Files\\JUnit Extension\\com\\inflectra C:\\Program Files\\JUnit Extension\\com\\inflectra\\spiratest C:\\Program Files\\JUnit Extension\\com\\inflectra\\spiratest\\addons C:\\Program Files\\JUnit Extension\\com\\inflectra\\spiratest\\addons\\junitextension C:\\Program Files\\JUnit Extension\\com\\inflectra\\spiratest\\addons\\junitextension\\samples The JAR-file is located in the root folder, the source-code for the extension can be found in the \"junitextension\" subfolder, and the sample test fixture can be found in the \"samples\" subfolder. Now to use the extension within your test cases, you need to first make sure that the JAR-file is added to the Java classpath. The method for doing this is dependent on the platform you're using, so please refer to FAQ on www.junit.org for details on the appropriate method for your platform. As an example, on a Windows platform, the JAR-file would be added to the classpath by typing the following: set CLASSPATH=%CLASSPATH%; C:\\Program Files\\JUnit Extension\\JUnitExtension.jar Once you have completed this step, you are now ready to begin using your JUnit test fixtures with SpiraTest.","title":"Installing the JUnit 5 Extension"},{"location":"Unit-Testing-Integration/Integrating-with-JUnit/#using-junit-5-with-spiratest","text":"The typical code structure for a JUnit test fixture coded in Java is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 package com.inflectra.spiratest.addons.junitextension.samples ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.Test ; import static org.junit.jupiter.api.Assertions.assertEquals ; import static org.junit.jupiter.api.Assertions.assertTrue ; /** * Some simple tests using the ability to return results back to SpiraTest * * @author Inflectra Corporation * @version 4.0.0 */ public class SimpleTest { protected int fValue1 ; protected int fValue2 ; /** * Sets up the unit test */ @BeforeEach public void setUp () { fValue1 = 2 ; fValue2 = 3 ; } /** * Tests the addition of the two values */ @Test public void testAdd () { double result = fValue1 + fValue2 ; // forced failure result == 5 assertTrue ( result == 6 ); } /** * Tests division by zero */ @Test public void testDivideByZero () { int zero = 0 ; int result = 8 / zero ; } /** * Tests two equal values */ @Test public void testEquals () { assertEquals ( 12 , 12 ); assertEquals ( 12L , 12L ); assertEquals ( new Long ( 12 ), new Long ( 12 )); assertEquals ( 12 , 13 , \"Size\" ); assertEquals ( 12.0 , 11.99 , 0.0 , \"Capacity\" ); } /** * Tests success */ @Test public void testSuccess () { //Successful test assertEquals ( 12 , 12 ); } } The Java class is marked as a JUnit test fixture by applying the @BeforeEach attribute to the setup method, and the @Test attribute to each of the test assertion methods individually -- highlighted in yellow above. When you open up the class in a JUnit runner or execute from the command line it loads all the test classes and executes all the methods marked with @Test in turn. Each of the Assert statements is used to test the state of the application after executing some sample code that calls the functionality being tested. If the condition in the assertion is true, then execution of the test continues, if it is false, then a failure is logged and JUnit moves on to the next test method. So, to use SpiraTest with JUnit, each of the test cases written for execution by JUnit needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, the changes that need to be made to the JUnit test fixture for SpiraTest to record the JUnit test run are illustrated below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 package com.inflectra.spiratest.addons.junitextension.samples ; import com.inflectra.spiratest.addons.junitextension.* ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.Test ; import static org.junit.jupiter.api.Assertions.assertEquals ; import static org.junit.jupiter.api.Assertions.assertTrue ; /** * Some simple tests using the ability to return results back to SpiraTest * * @author Inflectra Corporation * @version 4.0.0 */ @SpiraTestConfiguration ( //following are REQUIRED url = \"http://doctor/SpiraPlan\" , login = \"fredbloggs\" , rssToken = \"{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}\" , projectId = 1 , //following are OPTIONAL releaseId = 7 , testSetId = 1 ) public class SimpleTest { protected int fValue1 ; protected int fValue2 ; /** * Sets up the unit test */ @BeforeEach public void setUp () { fValue1 = 2 ; fValue2 = 3 ; } /** * Tests the addition of the two values */ @Test @SpiraTestCase ( testCaseId = 22 ) public void testAdd () { double result = fValue1 + fValue2 ; // forced failure result == 5 assertTrue ( result == 6 ); } /** * Tests division by zero */ @Test @SpiraTestCase ( testCaseId = 22 ) public void testDivideByZero () { int zero = 0 ; int result = 8 / zero ; } /** * Tests two equal values */ @Test @SpiraTestCase ( testCaseId = 22 ) public void testEquals () { assertEquals ( 12 , 12 ); assertEquals ( 12L , 12L ); assertEquals ( new Long ( 12 ), new Long ( 12 )); assertEquals ( 12 , 13 , \"Size\" ); assertEquals ( 12.0 , 11.99 , 0.0 , \"Capacity\" ); } /** * Tests success */ @Test @SpiraTestCase ( testCaseId = 22 ) public void testSuccess () { //Successful test assertEquals ( 12 , 12 ); } } The overall class is marked with a new @SpiraTestConfiguration attribute that contains the following pieces of information needed to access the SpiraTest test repository: URL - The URL to the instance of SpiraTest being accessed. This needs to start with http:// or https://. Login - A valid username for the instance of SpiraTest. RSS Token -- Found in your profile page, RSS Feeds must be enabled to work. Project Id - The ID of the project (this can be found on the project homepage in the \"Project Overview\" section) Release Id (Optional) - The ID of the release to associate the test run with. This can be found on the releases list page (click on the Planning > Releases tab). If you don't want to specify a release, just use the value -1. Test Set Id (Optional) -- The ID of the test set to associate the test run with. This can be found on the test set list page (click on the Testing > Test Sets tab). If you don't want to specify a test set, just use the value -1. If you choose a test set that is associated with a release, then you don't need to explicitly set a release id (i.e. just use -1). However if you do set a release value, it will override the value associated with the test set. In addition, each of the individual test methods needs to be mapped to a specific test case within SpiraTest. This is done by adding a @SpiraTestCase attribute to the test method together with the ID of the corresponding test case in SpiraTest. The Test Case ID can be found on the test cases list page (click the \"Test Cases\" tab). For these attributes to be available in your test fixture, you also need to add a reference to the com.inflectra.spiratest.addons.junitextension package. This package is bundled within the supplied JAR-file library for Windows, and can be compiled from the provided source .java files on other platforms. Now all you need to do is compile your code and then launch JUnit by executing the test fixture through the command line (or through your choice of IDE, e.g. Eclipse). E.g. for our sample test, you would use the following command: java com.inflectra.spiratest.addons.junitextension.samples.SimpleTest Once the test has run, you can view the test cases in SpiraTest, you should see a JUnit automated test run displayed in the list of executed test runs: Clicking on one of the JUnit test runs will bring up a screen that provides information regarding what JUnit test method failed, what the error was, together with the associated code stack-trace: Congratulations... You are now able to run JUnit automated tests and have the results be recorded within SpiraTest. The sample test fixture SimpleText.java is provided with the installation.","title":"Using JUnit 5 with SpiraTest"},{"location":"Unit-Testing-Integration/Integrating-with-JUnit/#installing-the-junit-4-extension","text":"This section outlines how to install the SpiraTest Extension for JUnit onto a workstation so that you can then run automated JUnit tests against a Java application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v3.0 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v3.0 before trying to use this extension. You will also need to have version 4.0 of JUnit. To use version 5.0 of JUnit, please visit Installing the JUnit 5 Extension To obtain the version of the JUnit extension that is compatible with your version of SpiraTest, you simply need to log-in as a project-level administrator to SpiraTest, go to the Administration home page and download the JUnit Extension compressed archive (.zip). This process is described in the SpiraTest Administration Guide in more detail. The JUnit extension is provided as a compressed zipfile that includes both the binaries (packaged as a JAR-file) and the source code (stored in a folder structure that mirrors the Java classpath). The JAR-file binary was compiled for use on a Windows x86 platform, other platforms (e.g. Linux) will require you to compile the Java source files into the appropriate Java classfiles before using the extension. The rest of this section will assume that you are using the pre-compiled JAR-file. Once you have downloaded the Zip archive, you need to uncompress it into a folder of your choice on your local system. Assuming that you uncompressed it to the C:\\Program Files\\JUnit Extension folder, you should have the following folder structure created: C:\\Program Files\\JUnit Extension C:\\Program Files\\JUnit Extension\\com C:\\Program Files\\JUnit Extension\\com\\inflectra C:\\Program Files\\JUnit Extension\\com\\inflectra\\spiratest C:\\Program Files\\JUnit Extension\\com\\inflectra\\spiratest\\addons C:\\Program Files\\JUnit Extension\\com\\inflectra\\spiratest\\addons\\junitextension C:\\Program Files\\JUnit Extension\\com\\inflectra\\spiratest\\addons\\junitextension\\samples The JAR-file is located in the root folder, the source-code for the extension can be found in the \"junitextension\" subfolder, and the sample test fixture can be found in the \"samples\" subfolder. Now to use the extension within your test cases, you need to first make sure that the JAR-file is added to the Java classpath. The method for doing this is dependent on the platform you're using, so please refer to FAQ on www.junit.org for details on the appropriate method for your platform. As an example, on a Windows platform, the JAR-file would be added to the classpath by typing the following: set CLASSPATH=%CLASSPATH%; C:\\Program Files\\JUnit Extension\\JUnitExtension.jar Once you have completed this step, you are now ready to begin using your JUnit test fixtures with SpiraTest.","title":"Installing the JUnit 4 Extension"},{"location":"Unit-Testing-Integration/Integrating-with-JUnit/#using-junit-4-with-spiratest","text":"The typical code structure for a JUnit test fixture coded in Java is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 package com.inflectra.spiratest.addons.junitextension.samples ; import static org.junit.Assert.* ; import junit.framework.JUnit4TestAdapter ; import org.junit.Before ; import org.junit.Test ; import org.junit.runner.* ; import org.junit.runner.notification.* ; import java.util.* ; /** * Some simple tests using JUnit 4 * * @author Inflectra Corporation * @version 2.3.0 * */ public class SimpleTest { protected int fValue1 ; protected int fValue2 ; /** * Sets up the unit test */ @Before public void setUp () { fValue1 = 2 ; fValue2 = 3 ; } /** * Tests the addition of the two values */ @Test public void testAdd () { double result = fValue1 + fValue2 ; // forced failure result == 5 assertTrue ( result == 6 ); } /** * Tests division by zero */ @Test public void testDivideByZero () { int zero = 0 ; int result = 8 / zero ; result ++ ; // avoid warning for not using result } /** * Tests two equal values */ @Test public void testEquals () { assertEquals ( 12 , 12 ); assertEquals ( 12L , 12L ); assertEquals ( new Long ( 12 ), new Long ( 12 )); assertEquals ( \"Size\" , 12 , 13 ); assertEquals ( \"Capacity\" , 12.0 , 11.99 , 0.0 ); } /** * Tests success */ @Test public void testSuccess () { //Successful test assertEquals ( 12 , 12 ); } /** * Entry point for command line execution * * @param args The command line arguments */ public static void main ( String [] args ) { //Instantiate the JUnit core JUnitCore core = new JUnitCore (); //Finally run the test fixture core . run ( SimpleTest . class ); } /** * Entry point for JUnit 4.x runners * * @return Handle to the test framework */ public static junit . framework . Test suite () { return new JUnit4TestAdapter ( SimpleTest . class ); } } The Java class is marked as a JUnit test fixture by applying the @Before attribute to the setup method, and the @Test attribute to each of the test assertion methods individually -- highlighted in yellow above. When you open up the class in a JUnit runner or execute from the command line it loads all the test classes and executes all the methods marked with @Test in turn. Each of the Assert statements is used to test the state of the application after executing some sample code that calls the functionality being tested. If the condition in the assertion is true, then execution of the test continues, if it is false, then a failure is logged and JUnit moves on to the next test method. So, to use SpiraTest with JUnit, each of the test cases written for execution by JUnit needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, the changes that need to be made to the JUnit test fixture for SpiraTest to record the JUnit test run are illustrated below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 package com.inflectra.spiratest.addons.junitextension.samples ; import static org.junit.Assert.* ; import junit.framework.JUnit4TestAdapter ; import org.junit.Before ; import org.junit.Test ; import org.junit.runner.* ; import org.junit.runner.notification.* ; import com.inflectra.spiratest.addons.junitextension.* ; import java.util.* ; /** * Some simple tests using the ability to return results back to SpiraTest * * @author Inflectra Corporation * @version 2.3.0 * */ @SpiraTestConfiguration ( url = \"http://sandman/SpiraTest\" , login = \"fredbloggs\" , password = \"fredbloggs\" , projectId = 1 , releaseId = 1 , testSetId = 1 ) public class SimpleTest { protected int fValue1 ; protected int fValue2 ; /** * Sets up the unit test */ @Before public void setUp () { fValue1 = 2 ; fValue2 = 3 ; } /** * Tests the addition of the two values */ @Test @SpiraTestCase ( testCaseId = 5 ) public void testAdd () { double result = fValue1 + fValue2 ; // forced failure result == 5 assertTrue ( result == 6 ); } /** * Tests division by zero */ @Test @SpiraTestCase ( testCaseId = 5 ) public void testDivideByZero () { int zero = 0 ; int result = 8 / zero ; result ++ ; // avoid warning for not using result } /** * Tests two equal values */ @Test @SpiraTestCase ( testCaseId = 6 ) public void testEquals () { assertEquals ( 12 , 12 ); assertEquals ( 12L , 12L ); assertEquals ( new Long ( 12 ), new Long ( 12 )); assertEquals ( \"Size\" , 12 , 13 ); assertEquals ( \"Capacity\" , 12.0 , 11.99 , 0.0 ); } /** * Tests success */ @Test @SpiraTestCase ( testCaseId = 6 ) public void testSuccess () { //Successful test assertEquals ( 12 , 12 ); } /** * Entry point for command line execution * * @param args The command line arguments */ public static void main ( String [] args ) { //Instantiate the JUnit core JUnitCore core = new JUnitCore (); //Add the custom SpiraTest listener core . addListener ( new SpiraTestListener ()); //Finally run the test fixture core . run ( SimpleTest . class ); } /** * Entry point for JUnit 4.x runners * * @return Handle to the test framework */ public static junit . framework . Test suite () { return new JUnit4TestAdapter ( SimpleTest . class ); } } The overall class is marked with a new @SpiraTestConfiguration attribute that contains the following pieces of information needed to access the SpiraTest test repository: URL - The URL to the instance of SpiraTest being accessed. This needs to start with http:// or https://. Login - A valid username for the instance of SpiraTest. Password - A valid password for the instance of SpiraTest. Project Id - The ID of the project (this can be found on the project homepage in the \"Project Overview\" section) Release Id (Optional) - The ID of the release to associate the test run with. This can be found on the releases list page (click on the Planning > Releases tab). If you don't want to specify a release, just use the value -1. Test Set Id (Optional) -- The ID of the test set to associate the test run with. This can be found on the test set list page (click on the Testing > Test Sets tab). If you don't want to specify a test set, just use the value -1. If you choose a test set that is associated with a release, then you don't need to explicitly set a release id (i.e. just use -1). However if you do set a release value, it will override the value associated with the test set. In addition, each of the individual test methods needs to be mapped to a specific test case within SpiraTest. This is done by adding a @SpiraTestCase attribute to the test method together with the ID of the corresponding test case in SpiraTest. The Test Case ID can be found on the test cases list page (click the \"Test Cases\" tab). For these attributes to be available in your test fixture, you also need to add a reference to the com.inflectra.spiratest.addons.junitextension package. This package is bundled within the supplied JAR-file library for Windows, and can be compiled from the provided source .java files on other platforms. Now all you need to do is compile your code and then launch JUnit by executing the test fixture through the command line (or through your choice of IDE, e.g. Eclipse). E.g. for our sample test, you would use the following command: java com.inflectra.spiratest.addons.junitextension.samples.SimpleTest Once the test has run, you can view the test cases in SpiraTest, you should see a JUnit automated test run displayed in the list of executed test runs: Clicking on one of the JUnit test runs will bring up a screen that provides information regarding what JUnit test method failed, what the error was, together with the associated code stack-trace: Congratulations... You are now able to run JUnit automated tests and have the results be recorded within SpiraTest. The sample test fixture SimpleText.java is provided with the installation.","title":"Using JUnit 4 with SpiraTest"},{"location":"Unit-Testing-Integration/Integrating-with-Jasmine/","text":"Integrating with Jasmine Jasmine is a behavior-driven development framework for testing JavaScript code. It does not depend on any other JavaScript frameworks. It does not require a DOM. And it has a clean, obvious syntax so that you can easily write tests. Some key features of Jasmine are: Fast- Low overhead, jasmine-core has no external dependencies. Batteries Included - Comes out of the box with everything you need to test your code. NodeJS and Browser - Run your browser tests and Node.js tests with the same framework. The Spira Reporter for Jasmine will integrate JasmineJS with Spira. It will create a test run in Spira for each test spec executed in Jasmine. Setting up the integration Install the integration by running npm i jasmine-spiratest in the root directory of your tests. Inside each test spec file, import the SpiraReporter with var SpiraReporter = require('jasmine-spiratest') then put the line jasmine.getEnv().addReporter(new SpiraReporter(spiraCredentials)); where spiraCredentials is an object of the format below. You can see a full sample test spec at the bottom of this page. 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"url\": \"https://doctor/SpiraPlan\", \"username\": \"fredbloggs\", \"token\": \"{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}\", \"projectId\": 1, \"releaseId\": 1, \"testSetId\": 1, \"testCases\": { \"default\": 20, \"should multiply correctly\": 21, \"should solve exponents and logarithms correctly\": 16 } } Fields are required unless otherwise noted. Field Description url The root URL of your SpiraTest instance without a '/' at the end username The username you use to sign into SpiraTest token Your RSS Token. Found in your profile page as the RSS Token field. You must have RSS Feeds enabled for this to work projectId The ID of the product you would like the Test Runs to be filed under releaseId OPTIONAL - Use if you would like to associate created test runs with a release testSetId OPTIONAL - Use if you would like to associated created test runs with a test set testCases Must contain the default field within it and, optionally, specific test cases for a given test spec name default Inside the testCases field, this is the ID of the default test case mapped to a created test run OPTIONAL - Use as many times as you would like to map a the created test run for a spec to a particular test case in SpiraTest. Note that capitalization, special characters and spaces are ignored both in testCases and the spec itself Once you have added the SpiraReporter to the jasmine environment in each file as described above, you are all set! Using the SpiraTest Reporter Run npm test or however you ran jasmine before and you should see test runs created in the product you specified. Sample Test Spec with SpiraTest Integration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 describe ( \"Test having two specs\" , () => { var SpiraReporter = require ( 'jasmine-spiratest' ); jasmine . getEnv (). addReporter ( new SpiraReporter ( { \"url\" : \"https://doctor/SpiraPlan\" , \"username\" : \"fredbloggs\" , \"token\" : \"{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}\" , \"projectId\" : 1 , \"releaseId\" : 1 , \"testSetId\" : 1 , \"testCases\" : { \"default\" : 20 , \"equality works\" : 21 , \"addition works\" : 16 } } )); describe ( \"Test basic JavaScript\" , () => { it ( \"Equality works...\" , () => { expect ( 2 ). toEqual ( 2 ); } ); it ( \"Addition works\" , () => { expect ( 3 + 2 ). toEqual ( 5 ); } ); it ( \"Multiplication works\" , () => { expect ( 4 * 5 ). toEqual ( 20 ); } ); } ); } );","title":"Jasmine"},{"location":"Unit-Testing-Integration/Integrating-with-Jasmine/#integrating-with-jasmine","text":"Jasmine is a behavior-driven development framework for testing JavaScript code. It does not depend on any other JavaScript frameworks. It does not require a DOM. And it has a clean, obvious syntax so that you can easily write tests. Some key features of Jasmine are: Fast- Low overhead, jasmine-core has no external dependencies. Batteries Included - Comes out of the box with everything you need to test your code. NodeJS and Browser - Run your browser tests and Node.js tests with the same framework. The Spira Reporter for Jasmine will integrate JasmineJS with Spira. It will create a test run in Spira for each test spec executed in Jasmine.","title":"Integrating with Jasmine"},{"location":"Unit-Testing-Integration/Integrating-with-Jasmine/#setting-up-the-integration","text":"Install the integration by running npm i jasmine-spiratest in the root directory of your tests. Inside each test spec file, import the SpiraReporter with var SpiraReporter = require('jasmine-spiratest') then put the line jasmine.getEnv().addReporter(new SpiraReporter(spiraCredentials)); where spiraCredentials is an object of the format below. You can see a full sample test spec at the bottom of this page. 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"url\": \"https://doctor/SpiraPlan\", \"username\": \"fredbloggs\", \"token\": \"{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}\", \"projectId\": 1, \"releaseId\": 1, \"testSetId\": 1, \"testCases\": { \"default\": 20, \"should multiply correctly\": 21, \"should solve exponents and logarithms correctly\": 16 } } Fields are required unless otherwise noted. Field Description url The root URL of your SpiraTest instance without a '/' at the end username The username you use to sign into SpiraTest token Your RSS Token. Found in your profile page as the RSS Token field. You must have RSS Feeds enabled for this to work projectId The ID of the product you would like the Test Runs to be filed under releaseId OPTIONAL - Use if you would like to associate created test runs with a release testSetId OPTIONAL - Use if you would like to associated created test runs with a test set testCases Must contain the default field within it and, optionally, specific test cases for a given test spec name default Inside the testCases field, this is the ID of the default test case mapped to a created test run OPTIONAL - Use as many times as you would like to map a the created test run for a spec to a particular test case in SpiraTest. Note that capitalization, special characters and spaces are ignored both in testCases and the spec itself Once you have added the SpiraReporter to the jasmine environment in each file as described above, you are all set!","title":"Setting up the integration"},{"location":"Unit-Testing-Integration/Integrating-with-Jasmine/#using-the-spiratest-reporter","text":"Run npm test or however you ran jasmine before and you should see test runs created in the product you specified.","title":"Using the SpiraTest Reporter"},{"location":"Unit-Testing-Integration/Integrating-with-Jasmine/#sample-test-spec-with-spiratest-integration","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 describe ( \"Test having two specs\" , () => { var SpiraReporter = require ( 'jasmine-spiratest' ); jasmine . getEnv (). addReporter ( new SpiraReporter ( { \"url\" : \"https://doctor/SpiraPlan\" , \"username\" : \"fredbloggs\" , \"token\" : \"{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}\" , \"projectId\" : 1 , \"releaseId\" : 1 , \"testSetId\" : 1 , \"testCases\" : { \"default\" : 20 , \"equality works\" : 21 , \"addition works\" : 16 } } )); describe ( \"Test basic JavaScript\" , () => { it ( \"Equality works...\" , () => { expect ( 2 ). toEqual ( 2 ); } ); it ( \"Addition works\" , () => { expect ( 3 + 2 ). toEqual ( 5 ); } ); it ( \"Multiplication works\" , () => { expect ( 4 * 5 ). toEqual ( 20 ); } ); } ); } );","title":"Sample Test Spec with SpiraTest Integration"},{"location":"Unit-Testing-Integration/Integrating-with-Jest/","text":"Integrating with Jest JS Brief Overview This reporter will integrate JestJS with Inflectra's ALM suite. It will create a test run in Spira for each test executed in Jest. Guide Basics Unfortunately, this integration will work with SpiraTest/SpiraTeam/SpiraPlan (hereafter refered to as SpiraTest) version 5.0 and above and at least Jest 24.x. If you have an older version, you will need to update to use this reporter. This guide assumes a basic familiarity with both SpiraTest and the Jest testing framework. Setting up the integration Install the integration by running npm i jest-spiratest in the root directory of your tests. Inside your package.json file, add the jest field with the format as shown below. You can see a full sample package.json at the bottom of this README. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \"reporters\" : [ \"default\" , [ \"jest-spiratest\" , { \"url\" : \"https://doctor/SpiraPlan\" , \"username\" : \"fredbloggs\" , \"token\" : \"{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}\" , \"projectId\" : 1 , \"releaseId\" : 1 , \"testSetId\" : 1 , \"testCases\" : { \"default\" : 20 , \"storesCorrectly\" : 21 , \"javascriptWorks\" : 16 } } ] ] Fields are required unless otherwise noted. Field | Description --- | --- | url | The root URL of your SpiraTest instance without a '/' at the end username | The username you use to sign into SpiraTest token | Your RSS Token. Foundin your profile page as the RSS Token field. You must have RSS Feeds enabled for this to work projectId | The ID of the project you would like the Test Runs to be filed under releaseId | OPTIONAL - Use if you would like to associate created test runs with a release testSetId | OPTIONAL - Use if you would like to associated created test runs with a test set testCases | Must contain the default field within it and, optionally, specific test cases for a given test spec name default | Inside the testCases field, this is the ID of the default test case mapped to a created test run <test_name> | OPTIONAL - Use as many times as you would like to map a the created test run to a particular test case in SpiraTest. Note that capitalization, special characters and spaces are ignored both in testCases and the test declaration Once you have added the SpiraReporter to jest as described above, you are all set! Using the SpiraTest Reporter Actually, you don't do anything different! Just run npm test or however you ran jest before and you should see test runs created in the project you specified! Sample package.json with SpiraTest Integration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"name\" : \"sample\" , \"scripts\" : { \"test\" : \"jest\" }, \"jest\" : { \"reporters\" : [ \"default\" , [ \"jest-spiratest\" , { \"url\" : \"https://doctor/SpiraPlan\" , \"username\" : \"fredbloggs\" , \"token\" : \"{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}\" , \"projectId\" : 1 , \"releaseId\" : 1 , \"testSetId\" : 1 , \"testCases\" : { \"default\" : 20 , \"storesCorrectly\" : 21 , \"javascriptWorks\" : 16 } } ] ] } }","title":"Jest"},{"location":"Unit-Testing-Integration/Integrating-with-Jest/#integrating-with-jest-js","text":"","title":"Integrating with Jest JS"},{"location":"Unit-Testing-Integration/Integrating-with-Jest/#brief-overview","text":"This reporter will integrate JestJS with Inflectra's ALM suite. It will create a test run in Spira for each test executed in Jest.","title":"Brief Overview"},{"location":"Unit-Testing-Integration/Integrating-with-Jest/#guide-basics","text":"Unfortunately, this integration will work with SpiraTest/SpiraTeam/SpiraPlan (hereafter refered to as SpiraTest) version 5.0 and above and at least Jest 24.x. If you have an older version, you will need to update to use this reporter. This guide assumes a basic familiarity with both SpiraTest and the Jest testing framework.","title":"Guide Basics"},{"location":"Unit-Testing-Integration/Integrating-with-Jest/#setting-up-the-integration","text":"Install the integration by running npm i jest-spiratest in the root directory of your tests. Inside your package.json file, add the jest field with the format as shown below. You can see a full sample package.json at the bottom of this README. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \"reporters\" : [ \"default\" , [ \"jest-spiratest\" , { \"url\" : \"https://doctor/SpiraPlan\" , \"username\" : \"fredbloggs\" , \"token\" : \"{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}\" , \"projectId\" : 1 , \"releaseId\" : 1 , \"testSetId\" : 1 , \"testCases\" : { \"default\" : 20 , \"storesCorrectly\" : 21 , \"javascriptWorks\" : 16 } } ] ] Fields are required unless otherwise noted. Field | Description --- | --- | url | The root URL of your SpiraTest instance without a '/' at the end username | The username you use to sign into SpiraTest token | Your RSS Token. Foundin your profile page as the RSS Token field. You must have RSS Feeds enabled for this to work projectId | The ID of the project you would like the Test Runs to be filed under releaseId | OPTIONAL - Use if you would like to associate created test runs with a release testSetId | OPTIONAL - Use if you would like to associated created test runs with a test set testCases | Must contain the default field within it and, optionally, specific test cases for a given test spec name default | Inside the testCases field, this is the ID of the default test case mapped to a created test run <test_name> | OPTIONAL - Use as many times as you would like to map a the created test run to a particular test case in SpiraTest. Note that capitalization, special characters and spaces are ignored both in testCases and the test declaration Once you have added the SpiraReporter to jest as described above, you are all set!","title":"Setting up the integration"},{"location":"Unit-Testing-Integration/Integrating-with-Jest/#using-the-spiratest-reporter","text":"Actually, you don't do anything different! Just run npm test or however you ran jest before and you should see test runs created in the project you specified!","title":"Using the SpiraTest Reporter"},{"location":"Unit-Testing-Integration/Integrating-with-Jest/#sample-packagejson-with-spiratest-integration","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 { \"name\" : \"sample\" , \"scripts\" : { \"test\" : \"jest\" }, \"jest\" : { \"reporters\" : [ \"default\" , [ \"jest-spiratest\" , { \"url\" : \"https://doctor/SpiraPlan\" , \"username\" : \"fredbloggs\" , \"token\" : \"{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}\" , \"projectId\" : 1 , \"releaseId\" : 1 , \"testSetId\" : 1 , \"testCases\" : { \"default\" : 20 , \"storesCorrectly\" : 21 , \"javascriptWorks\" : 16 } } ] ] } }","title":"Sample package.json with SpiraTest Integration"},{"location":"Unit-Testing-Integration/Integrating-with-MS-Test/","text":"Integrating with MS-Test This section describes how to use SpiraTest in conjunction with the unit testing features provided by Microsoft Visual Studio Team System (MS VSTS) Test -- commonly known as MS-Test. Installing the MS-Test Extension This section outlines how to install the SpiraTest extension for Microsoft Visual Studio Team System Test (MS-Test) onto a workstation so that you can then run automated MS-Test tests against a .NET application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v2.3 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v2.3 before trying to use this add-in. You will also need to have either Visual Studio Team System 2005 or later or Visual Studio 2008 Professional or later, since earlier versions do not come with the test automation features. To obtain the latest version of the SpiraTest extension, you can either access the administration section of SpiraTest, and click on the Add-Ins & Downloads link or simply visit the Inflectra corporate downloads webpage ( http://www.inflectra.com/Products/Downloads.aspx ) and then download the compressed archive (.zip) that contains the extension and associated sample files. The MS-Test extension is provided as a compressed zipfile that includes both the binaries (packaged as a .NET dll assembly) and the source code (stored in a Visual Studio project folder structure). The rest of this section will assume that you are using the pre-compiled assembly. Once you have downloaded the Zip archive, you need to uncompress it into a folder of your choice on your local system. Assuming that you uncompressed it to the C:\\Program Files\\SpiraTest\\MSTest Extension folder, you should have the following folder structure created: C:\\Program Files\\SpiraTest\\MSTest Extension C:\\Program Files\\SpiraTest\\MSTest Extension\\SampleMSTest C:\\Program Files\\SpiraTest\\MSTest Extension\\SampleMSTest\\Properties C:\\Program Files\\SpiraTest\\MSTest Extension\\SpiraTestMSExtension C:\\Program Files\\SpiraTest\\MSTest Extension\\SpiraTestMSExtension\\Properties C:\\Program Files\\SpiraTest\\MSTest Extension\\SpiraTestMSExtension\\Web References The pre-built assembly SpiraTestMSTestExtension.dll is located in the root folder, the source-code for the extension can be found in the \"SpiraTestMSExtension\" subfolder, and the sample test fixture can be found in the \"SampleMSTest\" subfolder. Now to use the extension within your test cases, you need to first make sure that the SpiraTestMSTestExtension.dll assembly is added to the project references. Once you have completed this step, you are now ready to begin using your MS-Test test fixtures with SpiraTest. Using MS-Test with SpiraTest The typical code structure for a Visual Studio Team System Test (MS-Test) test fixture coded in C# is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 using System ; using System.Threading ; using Microsoft.VisualStudio.TestTools.UnitTesting ; namespace Inflectra.SpiraTest.AddOns.SpiraTestMSTestExtension.SampleMSTest { /// <summary> /// Sample test fixture that tests the SpiraTest integration /// Written by Paul Tissue. Packed by Inflectra Corporation /// </summary> [ TestClass ] public class SpiraTestCaseAttributeTest { /// <summary> /// Test fixture state /// </summary> protected static int testFixtureState = 1 ; /// <summary> /// Constructor method /// </summary> public SpiraTestCaseAttributeTest () { //Delegates to base //Set the state to 2 testFixtureState = 2 ; } /// <summary> /// Sample test that asserts a failure and overrides the default configuration /// </summary> [ TestMethod ] public void SampleFail () { //Verify the state Assert . AreEqual ( 2 , testFixtureState , \"*Real Error*: State not persisted\" ); //Failure Assertion Assert . AreEqual ( 1 , 0 , \"Failed as Expected\" ); } /// <summary> /// Sample test that succeeds - uses the default configuration /// </summary> [ TestMethod ] public void SamplePass () { //Verify the state Assert . AreEqual ( 2 , testFixtureState , \"*Real Error*: State not persisted\" ); //Successful assertion Assert . AreEqual ( 1 , 1 , \"Passed as Expected\" ); } /// <summary> /// Sample test that does not log to SpiraTest /// </summary> [ TestMethod, ExpectedException(typeof(AssertFailedException)) ] public void SampleIgnore () { //Verify the state Assert . AreEqual ( 2 , testFixtureState , \"*Real Error*: State not persisted\" ); //Failure Assertion Assert . AreEqual ( 1 , 0 , \"Failed as Expected\" ); } } } The .NET class is marked as a MS-Test unit test fixture by applying the [TestClass] attribute to the class as a whole, and the [TestMethod] attribute to each of the test assertion methods individually -- shown above. When you open up the class in Visual Studio and click Tests > Run > Run All Tests in Solution it loads all the test classes marked with [TestClass] and executes all the methods marked with [TestMethod] in turn. Each of the Assert statements is used to test the state of the application after executing some sample code that calls the functionality being tested. If the condition in the assertion is true, then execution of the test continues, if it is false, then a failure is logged and MS-Test moves on to the next test method. So, to use SpiraTest with MS-Test, each of the test cases written for execution by MS-Test needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, the changes that need to be made to the MS-Test test fixture for SpiraTest to record the MS-Test test run are illustrated below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 using System ; using System.Threading ; using Microsoft.VisualStudio.TestTools.UnitTesting ; namespace Inflectra.SpiraTest.AddOns.SpiraTestMSTestExtension.SampleMSTest { /// <summary> /// Sample test fixture that tests the SpiraTest integration /// Written by Paul Tissue. Packed by Inflectra Corporation /// </summary> [ TestClass ] public class SpiraTestCaseAttributeTest : MSTestExtensionsTestFixture { /// <summary> /// Test fixture state /// </summary> protected static int testFixtureState = 1 ; /// <summary> /// Constructor method /// </summary> public SpiraTestCaseAttributeTest () { //Delegates to base //Set the state to 2 testFixtureState = 2 ; } /// <summary> /// Sample test that asserts a failure and overrides the default configuration /// </summary> [ TestMethod, SpiraTestCase(5), SpiraTestConfiguration(\"http://localhost/SpiraTest\", \"fredbloggs\", \"fredbloggs\", 1, 1, 2) ] public void SampleFail () { //Verify the state Assert . AreEqual ( 2 , testFixtureState , \"*Real Error*: State not persisted\" ); //Failure Assertion Assert . AreEqual ( 1 , 0 , \"Failed as Expected\" ); } /// <summary> /// Sample test that succeeds - uses the default configuration /// </summary> [ TestMethod, SpiraTestCase(6) ] public void SamplePass () { //Verify the state Assert . AreEqual ( 2 , testFixtureState , \"*Real Error*: State not persisted\" ); //Successful assertion Assert . AreEqual ( 1 , 1 , \"Passed as Expected\" ); } /// <summary> /// Sample test that does not log to SpiraTest /// </summary> [ TestMethod, ExpectedException(typeof(AssertFailedException)) ] public void SampleIgnore () { //Verify the state Assert . AreEqual ( 2 , testFixtureState , \"*Real Error*: State not persisted\" ); //Failure Assertion Assert . AreEqual ( 1 , 0 , \"Failed as Expected\" ); } } } And the following settings need to be added to the .config file associated with the test fixture assembly: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 <?xml version=\"1.0\"?> <configuration> <configSections> <sectionGroup name= \"applicationSettings\" type= \"System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" > <section name= \"Inflectra.SpiraTest.AddOns.SpiraTestMSTestExtension.Properties.Settings\" type= \"System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" requirePermission= \"false\" /> </sectionGroup> </configSections> <applicationSettings> <Inflectra.SpiraTest.AddOns.SpiraTestMSTestExtension.Properties.Settings> <setting name= \"Url\" serializeAs= \"String\" > <value> http://localhost/SpiraTest </value> </setting> <setting name= \"Login\" serializeAs= \"String\" > <value> fredbloggs </value> </setting> <setting name= \"Password\" serializeAs= \"String\" > <value> fredbloggs </value> </setting> <setting name= \"ProjectId\" serializeAs= \"String\" > <value> 1 </value> </setting> <setting name= \"ReleaseId\" serializeAs= \"String\" > <value> 1 </value> </setting> <setting name= \"TestSetId\" serializeAs= \"String\" > <value> 1 </value> </setting> <setting name= \"RecordTestRun\" serializeAs= \"String\" > <value> True </value> </setting> </Inflectra.SpiraTest.AddOns.SpiraTestMSTestExtension.Properties.Settings> </applicationSettings> Firstly the settings in the .config file indicate the following information to the test fixture: The URL to the instance of SpiraTest being accessed. This needs to start with http:// or https://. A valid username and password for the instance of SpiraTest. The ID of the project (this can be found on the project homepage in the \"Project Overview\" section) (Optional) The ID of the release to associate the test-run with. This can be found on the releases list page (click on the Planning > Releases tab) (Optional) The ID of the test set to associate the test-run with. This can be found on the test set list page (click on the Testing > Test Sets tab) A flag that tells MS-Test whether or not to record the results in SpiraTest. Next, the test fixture class needs to be derived from the MSTestExtensionsTestFixture base class so that the test runner knows that the test class will be reporting back to SpiraTest. In addition, each of the individual test methods needs to be mapped to a specific test case within SpiraTest. This is done by adding a [SpiraTestCase] attribute to the test method together with the ID of the corresponding test case in SpiraTest. The Test Case ID can be found on the test cases list page (click the \"Test Cases\" tab). In addition you can also override the default SpiraTest configuration settings from the .config file by adding the [SpiraTestConfiguration] attribute directly to the test method and specifying the SpiraTest URL, authentication information, project id, release id (optional) and test set id (optional). An example of this is shown above for the SampleFail() method. Now all you need to do is compile your code, launch Visual Studio, run the test fixtures as you would normally do, and when you view the test cases in SpiraTest, you should see a MSTest automated test run displayed in the list of executed test runs: Clicking on one of the MSTest test runs will bring up a screen that provides information regarding what MSTest test method failed, what the error was, together with the associated code stack-trace: Congratulations. You are now able to run MSTest automated tests and have the results be recorded within SpiraTest. The sample test project SampleMSTest is provided with the installation.","title":"MS-Test"},{"location":"Unit-Testing-Integration/Integrating-with-MS-Test/#integrating-with-ms-test","text":"This section describes how to use SpiraTest in conjunction with the unit testing features provided by Microsoft Visual Studio Team System (MS VSTS) Test -- commonly known as MS-Test.","title":"Integrating with MS-Test"},{"location":"Unit-Testing-Integration/Integrating-with-MS-Test/#installing-the-ms-test-extension","text":"This section outlines how to install the SpiraTest extension for Microsoft Visual Studio Team System Test (MS-Test) onto a workstation so that you can then run automated MS-Test tests against a .NET application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v2.3 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v2.3 before trying to use this add-in. You will also need to have either Visual Studio Team System 2005 or later or Visual Studio 2008 Professional or later, since earlier versions do not come with the test automation features. To obtain the latest version of the SpiraTest extension, you can either access the administration section of SpiraTest, and click on the Add-Ins & Downloads link or simply visit the Inflectra corporate downloads webpage ( http://www.inflectra.com/Products/Downloads.aspx ) and then download the compressed archive (.zip) that contains the extension and associated sample files. The MS-Test extension is provided as a compressed zipfile that includes both the binaries (packaged as a .NET dll assembly) and the source code (stored in a Visual Studio project folder structure). The rest of this section will assume that you are using the pre-compiled assembly. Once you have downloaded the Zip archive, you need to uncompress it into a folder of your choice on your local system. Assuming that you uncompressed it to the C:\\Program Files\\SpiraTest\\MSTest Extension folder, you should have the following folder structure created: C:\\Program Files\\SpiraTest\\MSTest Extension C:\\Program Files\\SpiraTest\\MSTest Extension\\SampleMSTest C:\\Program Files\\SpiraTest\\MSTest Extension\\SampleMSTest\\Properties C:\\Program Files\\SpiraTest\\MSTest Extension\\SpiraTestMSExtension C:\\Program Files\\SpiraTest\\MSTest Extension\\SpiraTestMSExtension\\Properties C:\\Program Files\\SpiraTest\\MSTest Extension\\SpiraTestMSExtension\\Web References The pre-built assembly SpiraTestMSTestExtension.dll is located in the root folder, the source-code for the extension can be found in the \"SpiraTestMSExtension\" subfolder, and the sample test fixture can be found in the \"SampleMSTest\" subfolder. Now to use the extension within your test cases, you need to first make sure that the SpiraTestMSTestExtension.dll assembly is added to the project references. Once you have completed this step, you are now ready to begin using your MS-Test test fixtures with SpiraTest.","title":"Installing the MS-Test Extension"},{"location":"Unit-Testing-Integration/Integrating-with-MS-Test/#using-ms-test-with-spiratest","text":"The typical code structure for a Visual Studio Team System Test (MS-Test) test fixture coded in C# is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 using System ; using System.Threading ; using Microsoft.VisualStudio.TestTools.UnitTesting ; namespace Inflectra.SpiraTest.AddOns.SpiraTestMSTestExtension.SampleMSTest { /// <summary> /// Sample test fixture that tests the SpiraTest integration /// Written by Paul Tissue. Packed by Inflectra Corporation /// </summary> [ TestClass ] public class SpiraTestCaseAttributeTest { /// <summary> /// Test fixture state /// </summary> protected static int testFixtureState = 1 ; /// <summary> /// Constructor method /// </summary> public SpiraTestCaseAttributeTest () { //Delegates to base //Set the state to 2 testFixtureState = 2 ; } /// <summary> /// Sample test that asserts a failure and overrides the default configuration /// </summary> [ TestMethod ] public void SampleFail () { //Verify the state Assert . AreEqual ( 2 , testFixtureState , \"*Real Error*: State not persisted\" ); //Failure Assertion Assert . AreEqual ( 1 , 0 , \"Failed as Expected\" ); } /// <summary> /// Sample test that succeeds - uses the default configuration /// </summary> [ TestMethod ] public void SamplePass () { //Verify the state Assert . AreEqual ( 2 , testFixtureState , \"*Real Error*: State not persisted\" ); //Successful assertion Assert . AreEqual ( 1 , 1 , \"Passed as Expected\" ); } /// <summary> /// Sample test that does not log to SpiraTest /// </summary> [ TestMethod, ExpectedException(typeof(AssertFailedException)) ] public void SampleIgnore () { //Verify the state Assert . AreEqual ( 2 , testFixtureState , \"*Real Error*: State not persisted\" ); //Failure Assertion Assert . AreEqual ( 1 , 0 , \"Failed as Expected\" ); } } } The .NET class is marked as a MS-Test unit test fixture by applying the [TestClass] attribute to the class as a whole, and the [TestMethod] attribute to each of the test assertion methods individually -- shown above. When you open up the class in Visual Studio and click Tests > Run > Run All Tests in Solution it loads all the test classes marked with [TestClass] and executes all the methods marked with [TestMethod] in turn. Each of the Assert statements is used to test the state of the application after executing some sample code that calls the functionality being tested. If the condition in the assertion is true, then execution of the test continues, if it is false, then a failure is logged and MS-Test moves on to the next test method. So, to use SpiraTest with MS-Test, each of the test cases written for execution by MS-Test needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, the changes that need to be made to the MS-Test test fixture for SpiraTest to record the MS-Test test run are illustrated below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 using System ; using System.Threading ; using Microsoft.VisualStudio.TestTools.UnitTesting ; namespace Inflectra.SpiraTest.AddOns.SpiraTestMSTestExtension.SampleMSTest { /// <summary> /// Sample test fixture that tests the SpiraTest integration /// Written by Paul Tissue. Packed by Inflectra Corporation /// </summary> [ TestClass ] public class SpiraTestCaseAttributeTest : MSTestExtensionsTestFixture { /// <summary> /// Test fixture state /// </summary> protected static int testFixtureState = 1 ; /// <summary> /// Constructor method /// </summary> public SpiraTestCaseAttributeTest () { //Delegates to base //Set the state to 2 testFixtureState = 2 ; } /// <summary> /// Sample test that asserts a failure and overrides the default configuration /// </summary> [ TestMethod, SpiraTestCase(5), SpiraTestConfiguration(\"http://localhost/SpiraTest\", \"fredbloggs\", \"fredbloggs\", 1, 1, 2) ] public void SampleFail () { //Verify the state Assert . AreEqual ( 2 , testFixtureState , \"*Real Error*: State not persisted\" ); //Failure Assertion Assert . AreEqual ( 1 , 0 , \"Failed as Expected\" ); } /// <summary> /// Sample test that succeeds - uses the default configuration /// </summary> [ TestMethod, SpiraTestCase(6) ] public void SamplePass () { //Verify the state Assert . AreEqual ( 2 , testFixtureState , \"*Real Error*: State not persisted\" ); //Successful assertion Assert . AreEqual ( 1 , 1 , \"Passed as Expected\" ); } /// <summary> /// Sample test that does not log to SpiraTest /// </summary> [ TestMethod, ExpectedException(typeof(AssertFailedException)) ] public void SampleIgnore () { //Verify the state Assert . AreEqual ( 2 , testFixtureState , \"*Real Error*: State not persisted\" ); //Failure Assertion Assert . AreEqual ( 1 , 0 , \"Failed as Expected\" ); } } } And the following settings need to be added to the .config file associated with the test fixture assembly: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 <?xml version=\"1.0\"?> <configuration> <configSections> <sectionGroup name= \"applicationSettings\" type= \"System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" > <section name= \"Inflectra.SpiraTest.AddOns.SpiraTestMSTestExtension.Properties.Settings\" type= \"System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" requirePermission= \"false\" /> </sectionGroup> </configSections> <applicationSettings> <Inflectra.SpiraTest.AddOns.SpiraTestMSTestExtension.Properties.Settings> <setting name= \"Url\" serializeAs= \"String\" > <value> http://localhost/SpiraTest </value> </setting> <setting name= \"Login\" serializeAs= \"String\" > <value> fredbloggs </value> </setting> <setting name= \"Password\" serializeAs= \"String\" > <value> fredbloggs </value> </setting> <setting name= \"ProjectId\" serializeAs= \"String\" > <value> 1 </value> </setting> <setting name= \"ReleaseId\" serializeAs= \"String\" > <value> 1 </value> </setting> <setting name= \"TestSetId\" serializeAs= \"String\" > <value> 1 </value> </setting> <setting name= \"RecordTestRun\" serializeAs= \"String\" > <value> True </value> </setting> </Inflectra.SpiraTest.AddOns.SpiraTestMSTestExtension.Properties.Settings> </applicationSettings> Firstly the settings in the .config file indicate the following information to the test fixture: The URL to the instance of SpiraTest being accessed. This needs to start with http:// or https://. A valid username and password for the instance of SpiraTest. The ID of the project (this can be found on the project homepage in the \"Project Overview\" section) (Optional) The ID of the release to associate the test-run with. This can be found on the releases list page (click on the Planning > Releases tab) (Optional) The ID of the test set to associate the test-run with. This can be found on the test set list page (click on the Testing > Test Sets tab) A flag that tells MS-Test whether or not to record the results in SpiraTest. Next, the test fixture class needs to be derived from the MSTestExtensionsTestFixture base class so that the test runner knows that the test class will be reporting back to SpiraTest. In addition, each of the individual test methods needs to be mapped to a specific test case within SpiraTest. This is done by adding a [SpiraTestCase] attribute to the test method together with the ID of the corresponding test case in SpiraTest. The Test Case ID can be found on the test cases list page (click the \"Test Cases\" tab). In addition you can also override the default SpiraTest configuration settings from the .config file by adding the [SpiraTestConfiguration] attribute directly to the test method and specifying the SpiraTest URL, authentication information, project id, release id (optional) and test set id (optional). An example of this is shown above for the SampleFail() method. Now all you need to do is compile your code, launch Visual Studio, run the test fixtures as you would normally do, and when you view the test cases in SpiraTest, you should see a MSTest automated test run displayed in the list of executed test runs: Clicking on one of the MSTest test runs will bring up a screen that provides information regarding what MSTest test method failed, what the error was, together with the associated code stack-trace: Congratulations. You are now able to run MSTest automated tests and have the results be recorded within SpiraTest. The sample test project SampleMSTest is provided with the installation.","title":"Using MS-Test with SpiraTest"},{"location":"Unit-Testing-Integration/Integrating-with-NUnit/","text":"Integrating with NUnit The installation directions for NUnit 3 and NUnit 2.x are covered in different sections below: Installing the NUnit 3 Add-In This section outlines how to use SpiraTest/SpiraTeam/SpiraPlan (hereafter referred to as SpiraPlan) in conjunction with NUnit 3 and above. With this add-in, you can run automated tests against a .NET application and have the results recorded inside SpiraPlan as a test run. This guide assumes that you already have a working installation of SpiraTest/Team/Plan installed v5.0 or later. If you have an earlier version of SpiraPlan, you need to upgrade to at least v5.0 before trying to use this add-in. Additionally, you must have at least version 3.0 of NUnit Console installed. If you have an earlier version, you can visit www.nunit.org to obtain the latest version. To obtain the add-in, go to www.inflectra.com/SpiraPlan/Downloads.aspx and download the NUnit add-in zipfile. Extract the archive and copy SpiraTestNUnitAddIn.dll and Newtonsoft.Json.dll into your installation of the NUnit Console Runner (typically .\\packages\\NUnit.ConsoleRunner\\tools ). Once they've been copied, edit the .addins file (typically nunit.nuget.addins ) and add SpiraTestNUnitAddIn.dll on a new line in the file. If you've followed all the steps correctly, the SpiraPlan NUnit add-in should now be properly installed. Using NUnit 3 with SpiraTest For this example, we will be using the following sample test fixture: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 using NUnit.Framework ; namespace SampleTestSuite { [TestFixture] class SampleTest { int One , Two ; [SetUp] protected void SetUp () { One = 1 ; Two = 2 ; } [Test] public void TestAdd () { int Result = One + Two ; //will succeed Assert . AreEqual ( Result , 3 ); } [Test] public void TestMultiply () { int Result = One * Two ; //will fail Assert . AreEqual ( Result , 3 ); } [Test] public void TestConcat () { string Result = string . Concat ( One , Two ); //will fail Assert . AreEqual ( Result , \"21\" ); } } } In your test root directory (the directory with your .nunit file), create a new file called SpiraConfig.json , and populate it like so: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"credentials\" : { \"url\" : \"localhost/SpiraPlan\" , \"username\" : \"fredbloggs\" , \"token\" : \"{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}\" , \"project_id\" : 1 , \"release_id\" : 5 , \"test_set_id\" : 1 }, \"test_cases\" : { \"default\" : 20 , \"TestMultiply\" : 22 } } For the plugin to work, you must have both settings groups (credentials and test_cases) with the following in the credentials group: url -- The base url to your SpiraPlan installation, without a '/' at the end. username -- The username you use to sign into SpiraTest. token -- Your RSS Token. Found in your profile page as the \"RSS Token\" field, you must have RSS Feeds enabled for this to work. project_id -- The ID of the project you would like the test runs to be sent to release_id -- OPTIONAL -- Use if you would like to associate the test run with a release. test_set_id -- OPTIONAL -- Use if you would like to associate the test run with a test set. Under the test_cases group, put the following: default -- The default test case ID for functions without an assigned test case <method name> - Used to override the default setting for a method's test case ID in SpiraPlan. Only include the method name, without the parentheses. Once you run your tests with the NUnit Console Runner, you should see the results in SpiraPlan: Clicking on one of the test runs will show you the results: Congratulations... You are now able to run NUnit automated tests and have the results be recorded within SpiraPlan. The sample test fixture SampleTest.cs is provided with the installation. Installing the NUnit 2.x Add-In This section outlines how to install the SpiraTest Add-In for NUnit onto a workstation so that you can then run automated NUnit tests against a .NET application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v2.2 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v2.2 before trying to use this add-in. You will also need to have either version v2.5.5 or v2.6.3 of NUnit , since there are two versions of the add-in that have been compiled with the v2.5.5 and v2.6.3 NUnit APIs. If you are using a different version, please visit www.nunit.org to obtain the appropriate version (2.5.5 or 2.6.3). To obtain the version of the add-in that is compatible with your version of SpiraTest, you simply need to go to http://www.inflectra.com/SpiraTest/Downloads.aspx or http://www.inflectra.com/SpiraTeam/Downloads.aspx and download the NUnit Add-In zipfile. Once you have obtained the NUnit Zipfile from our website, you should extract all the files from zip archive into a temporary folder on your computer (e.g. C:\\Temp). Next, you should copy the add-in libraries to the folder NUnit expects to find them in. First, if you are running any instances of the NUnit GUI, close them. Then, copy the SpiraTestNUnitAddIn.dll assembly from its location in the temporary folder to the NUnit Add-In folder (typically C:\\Program Files\\NUnit 2.5.5\\bin\\net-2.0\\addins). Now you can restart the NUnit GUI application. To check that the add-in was loaded successfully, click on Tools > Addins... to bring up the list of loaded add-ins: You should see an entry marked \"SpiraTest Addin\" listed with its detailed description and status \"Loaded\". If this does not happen, try closing and reopening NUnit. Using NUnit 2.x with SpiraTest The typical code structure for an NUnit test fixture coded in C# is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 using System ; using NUnit.Framework ; namespace Inflectra.SpiraTest.AddOns.SpiraTestNUnitAddIn.SampleTestSuite { /// <summary> /// Sample test fixture that tests the NUnit SpiraTest integration /// </summary> [TestFixture] public class SampleTestFixture { [SetUp] public void Init () { //Do Nothing } /// <summary> /// Sample test that asserts a failure /// </summary> [Test] public void _01_SampleFailure () { //Failure Assertion Assert . AreEqual ( 1 , 0 ); } /// <summary> /// Sample test that succeeds /// </summary> [Test] public void _02_SamplePass () { //Successful assertion Assert . AreEqual ( 1 , 1 ); } /// <summary> /// Sample test that fails /// </summary> [Test] public void _03_SampleIgnore () { //Failure Assertion Assert . AreEqual ( 1 , 0 ); } } } The .NET class is marked as an NUnit test fixture by applying the [TestFixture] attribute to the class as a whole, and the [Test] attribute to each of the test assertion methods individually -- highlighted in yellow above. When you open up the class in NUnit and click the <Run> button it loads all the test classes marked with [TestFixture] and executes all the methods marked with [Test] in turn. Each of the Assert statements is used to test the state of the application after executing some sample code that calls the functionality being tested. If the condition in the assertion is true, then execution of the test continues, if it is false, then a failure is logged and NUnit moves on to the next test method. So, to use SpiraTest with NUnit, each of the test cases written for execution by NUnit needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, the changes that need to be made to the NUnit test fixture for SpiraTest to record the NUnit test run are illustrated below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 using System ; using NUnit.Framework ; using Inflectra.SpiraTest.AddOns.SpiraTestNUnitAddIn.SpiraTestFramework ; namespace Inflectra.SpiraTest.AddOns.SpiraTestNUnitAddIn.SampleTestSuite { /// <summary> /// Sample test fixture that tests the NUnit SpiraTest integration /// </summary> [ TestFixture, SpiraTestConfiguration ( \"http://<server name>/SpiraTest\", \"<username>\", \"<password>\", <project id>, <release id>, <test set id>, <runner name> ) ] public class SampleTestFixture { [SetUp] public void Init () { //Do Nothing } /// <summary> /// Sample test that asserts a failure /// </summary> [ Test, SpiraTestCase (<test case id>) ] public void _01_SampleFailure () { //Failure Assertion Assert . AreEqual ( 1 , 0 ); } /// <summary> /// Sample test that succeeds /// </summary> [ Test, SpiraTestCase (<test case id>)) ] public void _02_SamplePass () { //Successful assertion Assert . AreEqual ( 1 , 1 ); } /// <summary> /// Sample test that does not log to SpiraTest /// </summary> [ Test ] public void _03_SampleIgnore () { //Failure Assertion Assert . AreEqual ( 1 , 0 ); } } } The overall class is marked with a new [SpiraTestConfiguration] attribute that contains the following pieces of information needed to access the SpiraTest test repository: URL - The URL to the instance of SpiraTest being accessed. This needs to start with http:// or https://. User Name - A valid username for the instance of SpiraTest. Password - A valid password for the instance of SpiraTest. Project Id - The ID of the project (this can be found on the project homepage in the \"Project Overview\" section) Release Id (Optional) - The ID of the release to associate the test run with. This can be found on the releases list page (click on the Planning > Releases tab). If you don't want to specify a release, just use the value -1. Test Set Id (Optional) -- The ID of the test set to associate the test run with. This can be found on the test set list page (click on the Testing > Test Sets tab). If you don't want to specify a test set, just use the value -1. If you choose a test set that is associated with a release, then you don't need to explicitly set a release id (i.e. just use -1). However if you do set a release value, it will override the value associated with the test set. Runner Name -- This should be set to NUnit so that the test results recorded in SpiraTest have the name 'NUnit' associated with them. In addition, each of the individual test methods needs to be mapped to a specific test case within SpiraTest. This is done by adding a [SpiraTestCase] attribute to the test method together with the ID of the corresponding test case in SpiraTest. The Test Case ID can be found on the test cases list page (click the \"Test Cases\" tab). For these attributes to be available in your test fixture, you also need to add a reference to the SpiraTestFramework.dll assembly. This assembly can be found in the temporary folder that you extracting the add-in to. It is recommended that you move this file from the temporary folder into a permanent folder located within your .NET project. Now all you need to do is compile your code, launch NUnit, run the test fixtures as you would normally do, and when you view the test cases in SpiraTest, you should see an NUnit automated test run displayed in the list of executed test runs: Clicking on one of the NUnit test runs will bring up a screen that provides information regarding what NUnit test method failed, what the error was, together with the associated code stack-trace: Congratulations... You are now able to run NUnit automated tests and have the results be recorded within SpiraTest. The sample test fixture SampleTestSuite.cs is provided with the installation.","title":"NUnit"},{"location":"Unit-Testing-Integration/Integrating-with-NUnit/#integrating-with-nunit","text":"The installation directions for NUnit 3 and NUnit 2.x are covered in different sections below:","title":"Integrating with NUnit"},{"location":"Unit-Testing-Integration/Integrating-with-NUnit/#installing-the-nunit-3-add-in","text":"This section outlines how to use SpiraTest/SpiraTeam/SpiraPlan (hereafter referred to as SpiraPlan) in conjunction with NUnit 3 and above. With this add-in, you can run automated tests against a .NET application and have the results recorded inside SpiraPlan as a test run. This guide assumes that you already have a working installation of SpiraTest/Team/Plan installed v5.0 or later. If you have an earlier version of SpiraPlan, you need to upgrade to at least v5.0 before trying to use this add-in. Additionally, you must have at least version 3.0 of NUnit Console installed. If you have an earlier version, you can visit www.nunit.org to obtain the latest version. To obtain the add-in, go to www.inflectra.com/SpiraPlan/Downloads.aspx and download the NUnit add-in zipfile. Extract the archive and copy SpiraTestNUnitAddIn.dll and Newtonsoft.Json.dll into your installation of the NUnit Console Runner (typically .\\packages\\NUnit.ConsoleRunner\\tools ). Once they've been copied, edit the .addins file (typically nunit.nuget.addins ) and add SpiraTestNUnitAddIn.dll on a new line in the file. If you've followed all the steps correctly, the SpiraPlan NUnit add-in should now be properly installed.","title":"Installing the NUnit 3 Add-In"},{"location":"Unit-Testing-Integration/Integrating-with-NUnit/#using-nunit-3-with-spiratest","text":"For this example, we will be using the following sample test fixture: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 using NUnit.Framework ; namespace SampleTestSuite { [TestFixture] class SampleTest { int One , Two ; [SetUp] protected void SetUp () { One = 1 ; Two = 2 ; } [Test] public void TestAdd () { int Result = One + Two ; //will succeed Assert . AreEqual ( Result , 3 ); } [Test] public void TestMultiply () { int Result = One * Two ; //will fail Assert . AreEqual ( Result , 3 ); } [Test] public void TestConcat () { string Result = string . Concat ( One , Two ); //will fail Assert . AreEqual ( Result , \"21\" ); } } } In your test root directory (the directory with your .nunit file), create a new file called SpiraConfig.json , and populate it like so: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"credentials\" : { \"url\" : \"localhost/SpiraPlan\" , \"username\" : \"fredbloggs\" , \"token\" : \"{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}\" , \"project_id\" : 1 , \"release_id\" : 5 , \"test_set_id\" : 1 }, \"test_cases\" : { \"default\" : 20 , \"TestMultiply\" : 22 } } For the plugin to work, you must have both settings groups (credentials and test_cases) with the following in the credentials group: url -- The base url to your SpiraPlan installation, without a '/' at the end. username -- The username you use to sign into SpiraTest. token -- Your RSS Token. Found in your profile page as the \"RSS Token\" field, you must have RSS Feeds enabled for this to work. project_id -- The ID of the project you would like the test runs to be sent to release_id -- OPTIONAL -- Use if you would like to associate the test run with a release. test_set_id -- OPTIONAL -- Use if you would like to associate the test run with a test set. Under the test_cases group, put the following: default -- The default test case ID for functions without an assigned test case <method name> - Used to override the default setting for a method's test case ID in SpiraPlan. Only include the method name, without the parentheses. Once you run your tests with the NUnit Console Runner, you should see the results in SpiraPlan: Clicking on one of the test runs will show you the results: Congratulations... You are now able to run NUnit automated tests and have the results be recorded within SpiraPlan. The sample test fixture SampleTest.cs is provided with the installation.","title":"Using NUnit 3 with SpiraTest"},{"location":"Unit-Testing-Integration/Integrating-with-NUnit/#installing-the-nunit-2x-add-in","text":"This section outlines how to install the SpiraTest Add-In for NUnit onto a workstation so that you can then run automated NUnit tests against a .NET application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v2.2 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v2.2 before trying to use this add-in. You will also need to have either version v2.5.5 or v2.6.3 of NUnit , since there are two versions of the add-in that have been compiled with the v2.5.5 and v2.6.3 NUnit APIs. If you are using a different version, please visit www.nunit.org to obtain the appropriate version (2.5.5 or 2.6.3). To obtain the version of the add-in that is compatible with your version of SpiraTest, you simply need to go to http://www.inflectra.com/SpiraTest/Downloads.aspx or http://www.inflectra.com/SpiraTeam/Downloads.aspx and download the NUnit Add-In zipfile. Once you have obtained the NUnit Zipfile from our website, you should extract all the files from zip archive into a temporary folder on your computer (e.g. C:\\Temp). Next, you should copy the add-in libraries to the folder NUnit expects to find them in. First, if you are running any instances of the NUnit GUI, close them. Then, copy the SpiraTestNUnitAddIn.dll assembly from its location in the temporary folder to the NUnit Add-In folder (typically C:\\Program Files\\NUnit 2.5.5\\bin\\net-2.0\\addins). Now you can restart the NUnit GUI application. To check that the add-in was loaded successfully, click on Tools > Addins... to bring up the list of loaded add-ins: You should see an entry marked \"SpiraTest Addin\" listed with its detailed description and status \"Loaded\". If this does not happen, try closing and reopening NUnit.","title":"Installing the NUnit 2.x Add-In"},{"location":"Unit-Testing-Integration/Integrating-with-NUnit/#using-nunit-2x-with-spiratest","text":"The typical code structure for an NUnit test fixture coded in C# is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 using System ; using NUnit.Framework ; namespace Inflectra.SpiraTest.AddOns.SpiraTestNUnitAddIn.SampleTestSuite { /// <summary> /// Sample test fixture that tests the NUnit SpiraTest integration /// </summary> [TestFixture] public class SampleTestFixture { [SetUp] public void Init () { //Do Nothing } /// <summary> /// Sample test that asserts a failure /// </summary> [Test] public void _01_SampleFailure () { //Failure Assertion Assert . AreEqual ( 1 , 0 ); } /// <summary> /// Sample test that succeeds /// </summary> [Test] public void _02_SamplePass () { //Successful assertion Assert . AreEqual ( 1 , 1 ); } /// <summary> /// Sample test that fails /// </summary> [Test] public void _03_SampleIgnore () { //Failure Assertion Assert . AreEqual ( 1 , 0 ); } } } The .NET class is marked as an NUnit test fixture by applying the [TestFixture] attribute to the class as a whole, and the [Test] attribute to each of the test assertion methods individually -- highlighted in yellow above. When you open up the class in NUnit and click the <Run> button it loads all the test classes marked with [TestFixture] and executes all the methods marked with [Test] in turn. Each of the Assert statements is used to test the state of the application after executing some sample code that calls the functionality being tested. If the condition in the assertion is true, then execution of the test continues, if it is false, then a failure is logged and NUnit moves on to the next test method. So, to use SpiraTest with NUnit, each of the test cases written for execution by NUnit needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, the changes that need to be made to the NUnit test fixture for SpiraTest to record the NUnit test run are illustrated below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 using System ; using NUnit.Framework ; using Inflectra.SpiraTest.AddOns.SpiraTestNUnitAddIn.SpiraTestFramework ; namespace Inflectra.SpiraTest.AddOns.SpiraTestNUnitAddIn.SampleTestSuite { /// <summary> /// Sample test fixture that tests the NUnit SpiraTest integration /// </summary> [ TestFixture, SpiraTestConfiguration ( \"http://<server name>/SpiraTest\", \"<username>\", \"<password>\", <project id>, <release id>, <test set id>, <runner name> ) ] public class SampleTestFixture { [SetUp] public void Init () { //Do Nothing } /// <summary> /// Sample test that asserts a failure /// </summary> [ Test, SpiraTestCase (<test case id>) ] public void _01_SampleFailure () { //Failure Assertion Assert . AreEqual ( 1 , 0 ); } /// <summary> /// Sample test that succeeds /// </summary> [ Test, SpiraTestCase (<test case id>)) ] public void _02_SamplePass () { //Successful assertion Assert . AreEqual ( 1 , 1 ); } /// <summary> /// Sample test that does not log to SpiraTest /// </summary> [ Test ] public void _03_SampleIgnore () { //Failure Assertion Assert . AreEqual ( 1 , 0 ); } } } The overall class is marked with a new [SpiraTestConfiguration] attribute that contains the following pieces of information needed to access the SpiraTest test repository: URL - The URL to the instance of SpiraTest being accessed. This needs to start with http:// or https://. User Name - A valid username for the instance of SpiraTest. Password - A valid password for the instance of SpiraTest. Project Id - The ID of the project (this can be found on the project homepage in the \"Project Overview\" section) Release Id (Optional) - The ID of the release to associate the test run with. This can be found on the releases list page (click on the Planning > Releases tab). If you don't want to specify a release, just use the value -1. Test Set Id (Optional) -- The ID of the test set to associate the test run with. This can be found on the test set list page (click on the Testing > Test Sets tab). If you don't want to specify a test set, just use the value -1. If you choose a test set that is associated with a release, then you don't need to explicitly set a release id (i.e. just use -1). However if you do set a release value, it will override the value associated with the test set. Runner Name -- This should be set to NUnit so that the test results recorded in SpiraTest have the name 'NUnit' associated with them. In addition, each of the individual test methods needs to be mapped to a specific test case within SpiraTest. This is done by adding a [SpiraTestCase] attribute to the test method together with the ID of the corresponding test case in SpiraTest. The Test Case ID can be found on the test cases list page (click the \"Test Cases\" tab). For these attributes to be available in your test fixture, you also need to add a reference to the SpiraTestFramework.dll assembly. This assembly can be found in the temporary folder that you extracting the add-in to. It is recommended that you move this file from the temporary folder into a permanent folder located within your .NET project. Now all you need to do is compile your code, launch NUnit, run the test fixtures as you would normally do, and when you view the test cases in SpiraTest, you should see an NUnit automated test run displayed in the list of executed test runs: Clicking on one of the NUnit test runs will bring up a screen that provides information regarding what NUnit test method failed, what the error was, together with the associated code stack-trace: Congratulations... You are now able to run NUnit automated tests and have the results be recorded within SpiraTest. The sample test fixture SampleTestSuite.cs is provided with the installation.","title":"Using NUnit 2.x with SpiraTest"},{"location":"Unit-Testing-Integration/Integrating-with-PHPUnit/","text":"Integrating with PHPUnit Installing the PHPUnit Extension This section outlines how to install the SpiraTest Extension for PHPUnit onto a workstation so that you can then run automated PHPUnit tests against a PHP application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v3 or later, and a working PHP development environment. If you have an earlier version of SpiraTest you will need to upgrade to at least v3 before trying to use this extension. To obtain the latest version of the SpiraTest PHPUnit extension you simply need to go to http://www.inflectra.com/SpiraTest/Downloads.aspx page and download the PHPUnit Extension compressed archive (.zip). This process is described in the SpiraTest Administration Guide in more detail. The PHPUnit extension is provided as a set of PHP source files that can be imported into your existing unit tests to add the SpiraTest reporting functionality. Once you have downloaded the Zip archive, you simply need to uncompress it into a folder of your choice on your local system (e.g. C:\\Program Files\\SpiraTest\\PHPUnit Extension) Now to use the extension within your test cases, you need to first make sure that the folder is added to the PHP include_path . The method for doing this is dependent on the platform you're using, so please refer to the documentation on php.org for details on the appropriate method for your platform. Alternatively you can copy the PHPUnit extension files to the root of the PHP installation and then just include the extension files using the root folder syntax. Once you have completed these steps, you are now ready to begin using your PHPUnit test fixtures with SpiraTest. Using PHPUnit with SpiraTest The typical code structure for a PHPUnit test suite and test case coded in PHP is as follows: a) Sample Test Suite 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 <?php /** * * @author Inflectra Corporation * @version 0 * */ require_once 'PHPUnit/Framework.php' ; require_once 'PHPUnit/TextUI/ResultPrinter.php' ; require_once './SimpleTest.php' ; // Create a test suite that contains the tests // from the ArrayTest class $suite = new PHPUnit_Framework_TestSuite ( 'SimpleTest' ); // Create a test result and attach the default console text listener $result = new PHPUnit_Framework_TestResult ; $textPrinter = new PHPUnit_TextUI_ResultPrinter ; $result -> addListener ( $textPrinter ); // Run the tests and print the results $result = $suite -> run ( $result ); $textPrinter -> printResult ( $result ); ?> b) Sample Test Case <?php require_once 'PHPUnit/Framework/TestCase.php' ; /** * Some simple tests * * @author Inflectra Corporation * @version 0 * */ class SimpleTest extends PHPUnit_Framework_TestCase { protected $fValue1 ; protected $fValue2 ; /** * Sets up the unit test */ protected function setUp () { $this -> fValue1 = 2 ; $this -> fValue2 = 3 ; } /** * Tests the addition of the two values */ public function testAdd () { $result = $this -> fValue1 + $this -> fValue2 ; // forced failure result == 5 $this -> assertTrue ( $result == 6 ); } /** * Tests division by zero */ /* public function testDivideByZero() { $zero = 0; $result = 8 / $zero; $result++; // avoid warning for not using result } /** * Tests two equal values */ /* public function testEquals() { $this->assertEquals(12, 12); $this->assertEquals(10, 10); $num1 = 12; $num2 = 12; $this->assertEquals($num1, $num2); $this->assertEquals(\"Size\", 12, 13); $this->assertEquals(\"Capacity\", 10, 199, 0); } /** * Tests success */ /* public function testSuccess () { //Successful test $this -> assertEquals ( 12 , 12 ); } } ?> The PHP class is marked as a PHPUnit test case by inheriting from the PHPUnit_Framework_TestCase base class, and the individual test methods are identified by using the 'test' prefix, with special setUp() and tearDown() methods reserved for the respective purposes. When you open up the class in a PHPUnit runner or execute from the command line it loads all the test classes and executes all the methods marked with 'test...' in turn. Each of the Assert statements is used to test the state of the application after executing some sample code that calls the functionality being tested. If the condition in the assertion is true, then execution of the test continues, if it is false, then a failure is logged and PHPUnit moves on to the next test method. So, to use SpiraTest with PHPUnit, each of the test cases written for execution by PHPUnit needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, the changes that need to be made to the PHPUnit test case and test suite for SpiraTest to record the PHPUnit test run are illustrated below: a) Sample Test Suite 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 <?php /** * Passes a list of tests to be executed to PHPUnit and adds the custom SpiraTest Listener * * @author Inflectra Corporation * @version 0 * */ require_once 'PHPUnit/Framework.php' ; require_once 'PHPUnit/TextUI/ResultPrinter.php' ; require_once './SimpleTest.php' ; require_once '../SpiraListener/Listener.php' ; // Create a test suite that contains the tests // from the ArrayTest class $suite = new PHPUnit_Framework_TestSuite ( 'SimpleTest' ); //Set the timezone identifier to match that used by the SpiraTest server date_default_timezone_set ( \"US/Eastern\" ); //Create a new SpiraTest listener instance and specify the connection info $spiraListener = new SpiraListener_Listener ; $spiraListener -> setBaseUrl ( 'http://localhost/SpiraTeam' ); $spiraListener -> setUserName ( 'fredbloggs' ); $spiraListener -> setPassword ( 'fredbloggs' ); $spiraListener -> setProjectId ( 1 ); $spiraListener -> setReleaseId ( 1 ); $spiraListener -> setTestSetId ( 1 ); // Create a test result and attach the SpiraTest listener // object as an observer to it (as well as the default console text listener) $result = new PHPUnit_Framework_TestResult ; $textPrinter = new PHPUnit_TextUI_ResultPrinter ; $result -> addListener ( $textPrinter ); $result -> addListener ( $spiraListener ); // Run the tests and print the results $result = $suite -> run ( $result ); $textPrinter -> printResult ( $result ); ?> b) Sample Test Case 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 <?php require_once 'PHPUnit/Framework/TestCase.php' ; /** * Some simple tests using the ability to return results back to SpiraTest * * @author Inflectra Corporation * @version 0 * */ class SimpleTest extends PHPUnit_Framework_TestCase { protected $fValue1 ; protected $fValue2 ; /** * Sets up the unit test */ protected function setUp () { $this -> fValue1 = 2 ; $this -> fValue2 = 3 ; } /** * Tests the addition of the two values */ public function testAdd__2 () { $result = $this -> fValue1 + $this -> fValue2 ; // forced failure result == 5 $this -> assertTrue ( $result == 6 ); } /** * Tests division by zero */ /* public function testDivideByZero__3() { $zero = 0; $result = 8 / $zero; $result++; // avoid warning for not using result } /** * Tests two equal values */ /* public function testEquals__4() { $this->assertEquals(12, 12); $this->assertEquals(10, 10); $num1 = 12; $num2 = 12; $this->assertEquals($num1, $num2); $this->assertEquals(\"Size\", 12, 13); $this->assertEquals(\"Capacity\", 10, 199, 0); } /** * Tests success */ /* public function testSuccess__5 () { //Successful test $this -> assertEquals ( 12 , 12 ); } } ?> Firstly, each of the individual test methods is appended with two underscores followed by the ID of the corresponding test case in SpiraTest. So for example testSuccess() is now testSuccess__5() as it maps to test case TC00005 inside SpiraTest. Second, in the Test Suite class, the PHPUnit TestResult object is passed an additional PHPUnit listener (in addition to the default one). This special listener class intercepts the results from the test run during execution and uses it to generate the web-service messages that are sent to SpiraTest to communicate the test results. The following attributes need to be set on the instance of the SpiraListener_Listener () object so that the extension can access the SpiraTest repository: baseUrl -- The base URL used to access your instance of SpiraTest (e.g. http://myserver/SpiraTest ). It should include the protocol (e.g. http/https), the server-name, the port number (if not 80/443) and the virtual directory (if there is one). userName - A valid username for the instance of SpiraTest that has access to the project specified above password - A valid password for the user specified above projectId -- The ID of the project inside SpiraTest (this can be found on the project homepage in the \"Project Overview\" section) releaseId - The ID of the SpiraTest release to associate the test run with. This can be found on the releases list page (click on the Planning > Releases tab). If you don't want to associate the test run with a specific release, just use the value -1 to indicate N/A. testSetId - The ID of the SpiraTest test set to associate the test run with. This can be found on the test set list page (click on the Testing > Test Sets tab). If you don't want to associate the test run with a specific test set, just use the value -1 to indicate N/A. The SpiraListener_Listener class can also be called with the parameters as the constructor arguments: 1 2 3 4 5 6 7 8 //Create a new SpiraTest listener instance and specify the connection info $spiraListener = new SpiraListener_Listener ( 'http://localhost/SpiraTeam', 'fredbloggs', 'fredbloggs', 1, 1, 1); You can also attach the listener to the class declaratively by adding it to the phpunit.xml configuration file instead of adding through PHP code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <phpunit> <listeners> <listener class= \"SpiraListener_Listener\" file= \"../SpiraListener/Listener.php\" > <arguments> <!-- URL --> <string> http://localhost/SpiraTeam </string> <!-- User Name --> <string> fredbloggs </string> <!-- User Password --> <string> fredbloggs </string> <!-- Project ID --> <integer> 1 </integer> <!-- Release ID --> <integer> 1 </integer> <!-- Test Set ID --> <integer> 1 </integer> </arguments> </listener> </listeners> <testsuites> <testsuite name= \"Sample Suite\" > <directory> . </directory> <file> ./SampleSuite.php </file> </testsuite> </testsuites> </phpunit> Now all you need to do is save your code, launch PHPUnit, run the test suite as you would normally do, and when you view the test cases in SpiraTest, you should see a PHPUnit automated test run displayed in the list of executed test runs: Clicking on one of the PHPUnit test runs will bring up a screen that provides information regarding what PHPUnit test method failed, what the error was, together with the associated code stack-trace: Congratulations... You are now able to run PHPUnit automated tests and have the results be recorded within SpiraTest. The sample test suite SampleSuite.php and sample test case SampleTest.php are provided with the installation in the Samples subfolder.","title":"PHPUnit"},{"location":"Unit-Testing-Integration/Integrating-with-PHPUnit/#integrating-with-phpunit","text":"","title":"Integrating with PHPUnit"},{"location":"Unit-Testing-Integration/Integrating-with-PHPUnit/#installing-the-phpunit-extension","text":"This section outlines how to install the SpiraTest Extension for PHPUnit onto a workstation so that you can then run automated PHPUnit tests against a PHP application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v3 or later, and a working PHP development environment. If you have an earlier version of SpiraTest you will need to upgrade to at least v3 before trying to use this extension. To obtain the latest version of the SpiraTest PHPUnit extension you simply need to go to http://www.inflectra.com/SpiraTest/Downloads.aspx page and download the PHPUnit Extension compressed archive (.zip). This process is described in the SpiraTest Administration Guide in more detail. The PHPUnit extension is provided as a set of PHP source files that can be imported into your existing unit tests to add the SpiraTest reporting functionality. Once you have downloaded the Zip archive, you simply need to uncompress it into a folder of your choice on your local system (e.g. C:\\Program Files\\SpiraTest\\PHPUnit Extension) Now to use the extension within your test cases, you need to first make sure that the folder is added to the PHP include_path . The method for doing this is dependent on the platform you're using, so please refer to the documentation on php.org for details on the appropriate method for your platform. Alternatively you can copy the PHPUnit extension files to the root of the PHP installation and then just include the extension files using the root folder syntax. Once you have completed these steps, you are now ready to begin using your PHPUnit test fixtures with SpiraTest.","title":"Installing the PHPUnit Extension"},{"location":"Unit-Testing-Integration/Integrating-with-PHPUnit/#using-phpunit-with-spiratest","text":"The typical code structure for a PHPUnit test suite and test case coded in PHP is as follows: a) Sample Test Suite 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 <?php /** * * @author Inflectra Corporation * @version 0 * */ require_once 'PHPUnit/Framework.php' ; require_once 'PHPUnit/TextUI/ResultPrinter.php' ; require_once './SimpleTest.php' ; // Create a test suite that contains the tests // from the ArrayTest class $suite = new PHPUnit_Framework_TestSuite ( 'SimpleTest' ); // Create a test result and attach the default console text listener $result = new PHPUnit_Framework_TestResult ; $textPrinter = new PHPUnit_TextUI_ResultPrinter ; $result -> addListener ( $textPrinter ); // Run the tests and print the results $result = $suite -> run ( $result ); $textPrinter -> printResult ( $result ); ?> b) Sample Test Case <?php require_once 'PHPUnit/Framework/TestCase.php' ; /** * Some simple tests * * @author Inflectra Corporation * @version 0 * */ class SimpleTest extends PHPUnit_Framework_TestCase { protected $fValue1 ; protected $fValue2 ; /** * Sets up the unit test */ protected function setUp () { $this -> fValue1 = 2 ; $this -> fValue2 = 3 ; } /** * Tests the addition of the two values */ public function testAdd () { $result = $this -> fValue1 + $this -> fValue2 ; // forced failure result == 5 $this -> assertTrue ( $result == 6 ); } /** * Tests division by zero */ /* public function testDivideByZero() { $zero = 0; $result = 8 / $zero; $result++; // avoid warning for not using result } /** * Tests two equal values */ /* public function testEquals() { $this->assertEquals(12, 12); $this->assertEquals(10, 10); $num1 = 12; $num2 = 12; $this->assertEquals($num1, $num2); $this->assertEquals(\"Size\", 12, 13); $this->assertEquals(\"Capacity\", 10, 199, 0); } /** * Tests success */ /* public function testSuccess () { //Successful test $this -> assertEquals ( 12 , 12 ); } } ?> The PHP class is marked as a PHPUnit test case by inheriting from the PHPUnit_Framework_TestCase base class, and the individual test methods are identified by using the 'test' prefix, with special setUp() and tearDown() methods reserved for the respective purposes. When you open up the class in a PHPUnit runner or execute from the command line it loads all the test classes and executes all the methods marked with 'test...' in turn. Each of the Assert statements is used to test the state of the application after executing some sample code that calls the functionality being tested. If the condition in the assertion is true, then execution of the test continues, if it is false, then a failure is logged and PHPUnit moves on to the next test method. So, to use SpiraTest with PHPUnit, each of the test cases written for execution by PHPUnit needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, the changes that need to be made to the PHPUnit test case and test suite for SpiraTest to record the PHPUnit test run are illustrated below: a) Sample Test Suite 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 <?php /** * Passes a list of tests to be executed to PHPUnit and adds the custom SpiraTest Listener * * @author Inflectra Corporation * @version 0 * */ require_once 'PHPUnit/Framework.php' ; require_once 'PHPUnit/TextUI/ResultPrinter.php' ; require_once './SimpleTest.php' ; require_once '../SpiraListener/Listener.php' ; // Create a test suite that contains the tests // from the ArrayTest class $suite = new PHPUnit_Framework_TestSuite ( 'SimpleTest' ); //Set the timezone identifier to match that used by the SpiraTest server date_default_timezone_set ( \"US/Eastern\" ); //Create a new SpiraTest listener instance and specify the connection info $spiraListener = new SpiraListener_Listener ; $spiraListener -> setBaseUrl ( 'http://localhost/SpiraTeam' ); $spiraListener -> setUserName ( 'fredbloggs' ); $spiraListener -> setPassword ( 'fredbloggs' ); $spiraListener -> setProjectId ( 1 ); $spiraListener -> setReleaseId ( 1 ); $spiraListener -> setTestSetId ( 1 ); // Create a test result and attach the SpiraTest listener // object as an observer to it (as well as the default console text listener) $result = new PHPUnit_Framework_TestResult ; $textPrinter = new PHPUnit_TextUI_ResultPrinter ; $result -> addListener ( $textPrinter ); $result -> addListener ( $spiraListener ); // Run the tests and print the results $result = $suite -> run ( $result ); $textPrinter -> printResult ( $result ); ?> b) Sample Test Case 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 <?php require_once 'PHPUnit/Framework/TestCase.php' ; /** * Some simple tests using the ability to return results back to SpiraTest * * @author Inflectra Corporation * @version 0 * */ class SimpleTest extends PHPUnit_Framework_TestCase { protected $fValue1 ; protected $fValue2 ; /** * Sets up the unit test */ protected function setUp () { $this -> fValue1 = 2 ; $this -> fValue2 = 3 ; } /** * Tests the addition of the two values */ public function testAdd__2 () { $result = $this -> fValue1 + $this -> fValue2 ; // forced failure result == 5 $this -> assertTrue ( $result == 6 ); } /** * Tests division by zero */ /* public function testDivideByZero__3() { $zero = 0; $result = 8 / $zero; $result++; // avoid warning for not using result } /** * Tests two equal values */ /* public function testEquals__4() { $this->assertEquals(12, 12); $this->assertEquals(10, 10); $num1 = 12; $num2 = 12; $this->assertEquals($num1, $num2); $this->assertEquals(\"Size\", 12, 13); $this->assertEquals(\"Capacity\", 10, 199, 0); } /** * Tests success */ /* public function testSuccess__5 () { //Successful test $this -> assertEquals ( 12 , 12 ); } } ?> Firstly, each of the individual test methods is appended with two underscores followed by the ID of the corresponding test case in SpiraTest. So for example testSuccess() is now testSuccess__5() as it maps to test case TC00005 inside SpiraTest. Second, in the Test Suite class, the PHPUnit TestResult object is passed an additional PHPUnit listener (in addition to the default one). This special listener class intercepts the results from the test run during execution and uses it to generate the web-service messages that are sent to SpiraTest to communicate the test results. The following attributes need to be set on the instance of the SpiraListener_Listener () object so that the extension can access the SpiraTest repository: baseUrl -- The base URL used to access your instance of SpiraTest (e.g. http://myserver/SpiraTest ). It should include the protocol (e.g. http/https), the server-name, the port number (if not 80/443) and the virtual directory (if there is one). userName - A valid username for the instance of SpiraTest that has access to the project specified above password - A valid password for the user specified above projectId -- The ID of the project inside SpiraTest (this can be found on the project homepage in the \"Project Overview\" section) releaseId - The ID of the SpiraTest release to associate the test run with. This can be found on the releases list page (click on the Planning > Releases tab). If you don't want to associate the test run with a specific release, just use the value -1 to indicate N/A. testSetId - The ID of the SpiraTest test set to associate the test run with. This can be found on the test set list page (click on the Testing > Test Sets tab). If you don't want to associate the test run with a specific test set, just use the value -1 to indicate N/A. The SpiraListener_Listener class can also be called with the parameters as the constructor arguments: 1 2 3 4 5 6 7 8 //Create a new SpiraTest listener instance and specify the connection info $spiraListener = new SpiraListener_Listener ( 'http://localhost/SpiraTeam', 'fredbloggs', 'fredbloggs', 1, 1, 1); You can also attach the listener to the class declaratively by adding it to the phpunit.xml configuration file instead of adding through PHP code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <phpunit> <listeners> <listener class= \"SpiraListener_Listener\" file= \"../SpiraListener/Listener.php\" > <arguments> <!-- URL --> <string> http://localhost/SpiraTeam </string> <!-- User Name --> <string> fredbloggs </string> <!-- User Password --> <string> fredbloggs </string> <!-- Project ID --> <integer> 1 </integer> <!-- Release ID --> <integer> 1 </integer> <!-- Test Set ID --> <integer> 1 </integer> </arguments> </listener> </listeners> <testsuites> <testsuite name= \"Sample Suite\" > <directory> . </directory> <file> ./SampleSuite.php </file> </testsuite> </testsuites> </phpunit> Now all you need to do is save your code, launch PHPUnit, run the test suite as you would normally do, and when you view the test cases in SpiraTest, you should see a PHPUnit automated test run displayed in the list of executed test runs: Clicking on one of the PHPUnit test runs will bring up a screen that provides information regarding what PHPUnit test method failed, what the error was, together with the associated code stack-trace: Congratulations... You are now able to run PHPUnit automated tests and have the results be recorded within SpiraTest. The sample test suite SampleSuite.php and sample test case SampleTest.php are provided with the installation in the Samples subfolder.","title":"Using PHPUnit with SpiraTest"},{"location":"Unit-Testing-Integration/Integrating-with-Perl-TAP/","text":"Integrating with Perl TAP Installing the Perl TAP Extension This section outlines how to install the SpiraTest extensions for Perl's Test Anything Protocol (TAP) so that you can then run automated Perl TAP unit tests against a Perl application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v2.3 or later, and a working Perl development environment. If you have an earlier version of SpiraTest you will need to upgrade to at least v2.3 before trying to use this extension. To obtain the latest version of the TAP extension you simply need to go to http://www.inflectra.com/SpiraTest/Downloads.aspx page and download the Perl TAP Extension compressed archive (.zip). This process is described in the SpiraTest Administration Guide in more detail. The TAP extension is provided as a set of Perl library files (.pm) that can be imported into your existing TAP test harnesses to add the SpiraTest reporting functionality. Once you have downloaded the Zip archive, you simply need to uncompress it and copy the Inflectra folder (and subfolders) into the standard Perl library location (e.g. C:\\Perl\\lib on Windows). The sample files (the ones ending in .pl) that are not located in a folder can be put into a folder of your choice. Once you have completed this step, you are now ready to begin running one of the provided samples or use your existing TAP unit tests with SpiraTest. Using Perl TAP Extension with SpiraTest The typical code structure for a Perl TAP test harness is as follows: a) The sample test harness - SampleHarness.pl #this is a test case that tests addition operations #!/usr/bin/perl -w use TAP::Harness; #instantiate the harness my $harness = TAP::Harness ->new; #define the list of tests to be executed my @tests = (\"SampleTest1.pl\", \"SampleTest2.pl\"); $harness->runtests(@tests); b) One of the sample test fixtures -- Sample1Test.pl #!/usr/bin/perl -w # Specify our plan, how many tests we're writing use Test::More tests => 9; # or alternately, if we don't know how many: # use Test::More qw(no_plan); # Check that our module compiles and can be \"use\"d. BEGIN { use_ok( 'Inflectra::SpiraTest::Addons::Samples::TestMe' ); } # Check our module can be required. Very similar test to that above. require_ok( 'Inflectra::SpiraTest::Addons::Samples::TestMe' ); # There are a number of ways to generate the \"ok\" tests. These are: # ok: first argument is true, second argument is name of test. # is: first argument equals (eq) second argument, third argument is name of test. # isnt: first argument does not equal (ne) the second, third is name of test # like: first argument matches regexp in second, third is name of test # unlike: first argument does not match regexp, third is name of test # cmp_ok: compares first and third argument with comparison in second. Forth is test name. # Here are some examples that should PASS ok( add(1,1) == 2, \"Basic addition is working\"); is ( subtract(2,1), 1, \"Basic subtraction is working\"); isnt( multiply(2,2), 5, \"Basic multiplication doesn't fail\"); # Here are some examples that should FAIL ok( add(1,1) == 3, \"Basic addition is working\"); is ( subtract(2,1), 0, \"Basic subtraction is working\"); isnt( multiply(2,2), 4, \"Basic multiplication doesn't fail\"); # Here is an example of a test that throws an ERROR is($notdeclared, 1, \"Undeclared variable test\"); The TAP test cases in the sample code use the Test::More library which provides the necessary assertion methods for testing results from the code under test. The tests are themselves executed by adding their filenames to an array passed to the default TAP::Harness class. To run the test cases, you just need to execute the SampleHarness.pl file from the command line, and the test output will be echoed onto the screen. Now, to use SpiraTest with TAR, each of the TAP test case files (e.g. SampleTest1.pl, SampleTest2.pl in our example) needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, no changes need to be made to the individual test cases , but the following changes need to be made to the test harness (illustrated in yellow below): #this is a test case that tests addition operations #!/usr/bin/perl -w use Inflectra::SpiraTest::Addons::SpiraHarness::Harness; #instantiate the harness my $harness = Inflectra::SpiraTest::Addons::SpiraHarness::Harness->new; #specify the spiratest custom harness properties $spira_args = {}; $spira_args->{\"base_url\"} = \" http://localhost/SpiraTest \"; $spira_args->{\"user_name\"} = \"fredbloggs\"; $spira_args->{\"password\"} = \"fredbloggs\"; $spira_args->{\"project_id\"} = 1; $spira_args->{\"release_id\"} = 1; $spira_args->{\"test_set_id\"} = 1; $harness->{\"spira_args\"} = $spira_args; #define the list of tests and their SpiraTest Mapping #Hash is of the format: TestFile => Test Case ID my $tests = {}; $tests->{\"SampleTest1.pl\"} = 2; $tests->{\"SampleTest2.pl\"} = 3; harness-\\>runtests( harness-\\>runtests( tests); Firstly you need to use the SpiraTest specific harness rather than the general TAP::Harness library. This new class is actually a subclass of the standard one, so it supports all the same methods, with the exception of the runtests command, which now accepts a Perl hashref rather than a simple array. Also you need to create and pass a hashref of arguments to the test harness (the spira_args property on the instantiated harness class) so that it knows how to access the SpiraTest server during test execution: base_url -- The base URL used to access your instance of SpiraTest (e.g. http://myserver/SpiraTest ). It should include the protocol (e.g. http/https), the server-name, the port number (if not 80/443) and the virtual directory (if there is one). user_name - A valid username for the instance of SpiraTest that has access to the project specified above password - A valid password for the user specified above project_id - The ID of the project inside SpiraTest (this can be found on the project homepage in the \"Project Overview\" section) release_id - The ID of the SpiraTest release to associate the test run with. This can be found on the releases list page (click on the Planning > Releases tab). If you don't want to associate the test run with a specific release, just comment out the line. test_set_id - The ID of the SpiraTest test set to associate the test run with. This can be found on the test set list page (click on the Testing > Test Sets tab). If you don't want to associate the test run with a specific test set, just comment out the line. Finally instead of passing a simple array of the test case files to be executed, you instead need to create a Perl hashref and pass that to the runtests(...) method. The hashref needs to contain a list of the various test case files and their associated SpiraTest Test Case ID with the TC prefix removed (e.g. test case TC00005 would be just 5). Now all you need to do is save your code, run the test fixtures as you would normally do (e.g. by executing from the command line), and when you view the test cases in SpiraTest, you should see a Perl::TAP automated test run displayed in the list of executed test runs: Clicking on one of the Perl::TAP test runs will bring up a screen that provides information regarding what Perl::TAP test method failed, what the error was, together with the associated code stack-trace: Congratulations... You are now able to run Perl TAP unit tests and have the results be recorded within SpiraTest. The sample test suite SampleHarness.pl together with its two test cases (SampleTest1.pl and SampleTest2.pl) is provided with the installation.","title":"Perl TAP"},{"location":"Unit-Testing-Integration/Integrating-with-Perl-TAP/#integrating-with-perl-tap","text":"","title":"Integrating with Perl TAP"},{"location":"Unit-Testing-Integration/Integrating-with-Perl-TAP/#installing-the-perl-tap-extension","text":"This section outlines how to install the SpiraTest extensions for Perl's Test Anything Protocol (TAP) so that you can then run automated Perl TAP unit tests against a Perl application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v2.3 or later, and a working Perl development environment. If you have an earlier version of SpiraTest you will need to upgrade to at least v2.3 before trying to use this extension. To obtain the latest version of the TAP extension you simply need to go to http://www.inflectra.com/SpiraTest/Downloads.aspx page and download the Perl TAP Extension compressed archive (.zip). This process is described in the SpiraTest Administration Guide in more detail. The TAP extension is provided as a set of Perl library files (.pm) that can be imported into your existing TAP test harnesses to add the SpiraTest reporting functionality. Once you have downloaded the Zip archive, you simply need to uncompress it and copy the Inflectra folder (and subfolders) into the standard Perl library location (e.g. C:\\Perl\\lib on Windows). The sample files (the ones ending in .pl) that are not located in a folder can be put into a folder of your choice. Once you have completed this step, you are now ready to begin running one of the provided samples or use your existing TAP unit tests with SpiraTest.","title":"Installing the Perl TAP Extension"},{"location":"Unit-Testing-Integration/Integrating-with-Perl-TAP/#using-perl-tap-extension-with-spiratest","text":"The typical code structure for a Perl TAP test harness is as follows: a) The sample test harness - SampleHarness.pl #this is a test case that tests addition operations #!/usr/bin/perl -w use TAP::Harness; #instantiate the harness my $harness = TAP::Harness ->new; #define the list of tests to be executed my @tests = (\"SampleTest1.pl\", \"SampleTest2.pl\"); $harness->runtests(@tests); b) One of the sample test fixtures -- Sample1Test.pl #!/usr/bin/perl -w # Specify our plan, how many tests we're writing use Test::More tests => 9; # or alternately, if we don't know how many: # use Test::More qw(no_plan); # Check that our module compiles and can be \"use\"d. BEGIN { use_ok( 'Inflectra::SpiraTest::Addons::Samples::TestMe' ); } # Check our module can be required. Very similar test to that above. require_ok( 'Inflectra::SpiraTest::Addons::Samples::TestMe' ); # There are a number of ways to generate the \"ok\" tests. These are: # ok: first argument is true, second argument is name of test. # is: first argument equals (eq) second argument, third argument is name of test. # isnt: first argument does not equal (ne) the second, third is name of test # like: first argument matches regexp in second, third is name of test # unlike: first argument does not match regexp, third is name of test # cmp_ok: compares first and third argument with comparison in second. Forth is test name. # Here are some examples that should PASS ok( add(1,1) == 2, \"Basic addition is working\"); is ( subtract(2,1), 1, \"Basic subtraction is working\"); isnt( multiply(2,2), 5, \"Basic multiplication doesn't fail\"); # Here are some examples that should FAIL ok( add(1,1) == 3, \"Basic addition is working\"); is ( subtract(2,1), 0, \"Basic subtraction is working\"); isnt( multiply(2,2), 4, \"Basic multiplication doesn't fail\"); # Here is an example of a test that throws an ERROR is($notdeclared, 1, \"Undeclared variable test\"); The TAP test cases in the sample code use the Test::More library which provides the necessary assertion methods for testing results from the code under test. The tests are themselves executed by adding their filenames to an array passed to the default TAP::Harness class. To run the test cases, you just need to execute the SampleHarness.pl file from the command line, and the test output will be echoed onto the screen. Now, to use SpiraTest with TAR, each of the TAP test case files (e.g. SampleTest1.pl, SampleTest2.pl in our example) needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, no changes need to be made to the individual test cases , but the following changes need to be made to the test harness (illustrated in yellow below): #this is a test case that tests addition operations #!/usr/bin/perl -w use Inflectra::SpiraTest::Addons::SpiraHarness::Harness; #instantiate the harness my $harness = Inflectra::SpiraTest::Addons::SpiraHarness::Harness->new; #specify the spiratest custom harness properties $spira_args = {}; $spira_args->{\"base_url\"} = \" http://localhost/SpiraTest \"; $spira_args->{\"user_name\"} = \"fredbloggs\"; $spira_args->{\"password\"} = \"fredbloggs\"; $spira_args->{\"project_id\"} = 1; $spira_args->{\"release_id\"} = 1; $spira_args->{\"test_set_id\"} = 1; $harness->{\"spira_args\"} = $spira_args; #define the list of tests and their SpiraTest Mapping #Hash is of the format: TestFile => Test Case ID my $tests = {}; $tests->{\"SampleTest1.pl\"} = 2; $tests->{\"SampleTest2.pl\"} = 3; harness-\\>runtests( harness-\\>runtests( tests); Firstly you need to use the SpiraTest specific harness rather than the general TAP::Harness library. This new class is actually a subclass of the standard one, so it supports all the same methods, with the exception of the runtests command, which now accepts a Perl hashref rather than a simple array. Also you need to create and pass a hashref of arguments to the test harness (the spira_args property on the instantiated harness class) so that it knows how to access the SpiraTest server during test execution: base_url -- The base URL used to access your instance of SpiraTest (e.g. http://myserver/SpiraTest ). It should include the protocol (e.g. http/https), the server-name, the port number (if not 80/443) and the virtual directory (if there is one). user_name - A valid username for the instance of SpiraTest that has access to the project specified above password - A valid password for the user specified above project_id - The ID of the project inside SpiraTest (this can be found on the project homepage in the \"Project Overview\" section) release_id - The ID of the SpiraTest release to associate the test run with. This can be found on the releases list page (click on the Planning > Releases tab). If you don't want to associate the test run with a specific release, just comment out the line. test_set_id - The ID of the SpiraTest test set to associate the test run with. This can be found on the test set list page (click on the Testing > Test Sets tab). If you don't want to associate the test run with a specific test set, just comment out the line. Finally instead of passing a simple array of the test case files to be executed, you instead need to create a Perl hashref and pass that to the runtests(...) method. The hashref needs to contain a list of the various test case files and their associated SpiraTest Test Case ID with the TC prefix removed (e.g. test case TC00005 would be just 5). Now all you need to do is save your code, run the test fixtures as you would normally do (e.g. by executing from the command line), and when you view the test cases in SpiraTest, you should see a Perl::TAP automated test run displayed in the list of executed test runs: Clicking on one of the Perl::TAP test runs will bring up a screen that provides information regarding what Perl::TAP test method failed, what the error was, together with the associated code stack-trace: Congratulations... You are now able to run Perl TAP unit tests and have the results be recorded within SpiraTest. The sample test suite SampleHarness.pl together with its two test cases (SampleTest1.pl and SampleTest2.pl) is provided with the installation.","title":"Using Perl TAP Extension with SpiraTest"},{"location":"Unit-Testing-Integration/Integrating-with-PyTest/","text":"Integrating with PyTest This section describes how to use SpiraTest/SpiraTeam/SpiraPlan (hereafter referred to as SpiraTest) in conjunction with python's pytest unit testing framework. The SpiraTest-pytest plugin enables the automated sending of unit test results from pytest to SpiraTest with a specified Test Case, and (optionally), a release and/or test set as well. Installing the pytest plugin This section outlines how to install the SpiraTest plugin for pytest. It assumes that you already have a working installation of SpiraTest v2.3 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v2.3 before trying to use this plugin. You will also need to have Python (with pip) and pytest version 3.0 or later. To obtain the latest version of the SpiraTest plugin, simply run the following command: pip install pytest-spiratest This command will install the latest version of the plugin straight from the Python Package Index (PyPI). Once the SpiraTest plugin is successfully installed, all you need to do is configure the extension, then you can begin testing! Configuring the pytest plugin This section outlines how to configure the SpiraTest plugin for pytest. It assumes that you are familiar with pytest, and already have some working tests configured. Here is a sample test file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import pytest # Function we are testing def add ( num1 , num2 ): return num1 + num2 # Successful test def test_add_1 (): assert add ( 1 , 1 ) == 2 # Failed test def test_add_2 (): assert add ( 2 , 1 ) == 2 # Failed test def test_add_3 (): assert add ( 4 , 1 ) == 6 Note how test_add_2 is used in the configuration file discussed below. In your test root folder (the folder you run the pytest command from), create a file named \"spira.cfg\" with the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 [credentials] # Following are required url = localhost/SpiraTest username = fredbloggs token = {XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX} project_id = 1 # Following are optional: release_id = 5 test_set_id = 1 [test_cases] # Assigned to the rest default = 20 # Test case for a specific function test_add_2 = 22 For the plugin to work, you must have both settings groups (credentials and test_cases) with the following in the credentials group: url -- The base url to your SpiraTest installation, without a '/' at the end. username -- The username you use to sign into SpiraTest. token -- Your RSS Token. Found in your profile page as the \"RSS Token\" field, you must have RSS Feeds enabled for this to work. project_id -- The ID of the project you would like the test runs to be sent to release_id -- OPTIONAL -- Use if you would like to associate the test run with a release. test_set_id -- OPTIONAL -- Use if you would like to associate the test run with a test set. Under the test_cases group, put the following: default -- The default test case ID for functions without an assigned test case \\ - Used to override the default setting for a function's test case ID in SpiraTest. Only include the function name, without the parentheses. Once you have filled out all of the configurations, you are all set to go! Running the pytest (or py.test) command will run your unit tests, send the data to SpiraTest, and show the results to you. Here is an example of the test_add_3 function inside SpiraTest:","title":"PyTest"},{"location":"Unit-Testing-Integration/Integrating-with-PyTest/#integrating-with-pytest","text":"This section describes how to use SpiraTest/SpiraTeam/SpiraPlan (hereafter referred to as SpiraTest) in conjunction with python's pytest unit testing framework. The SpiraTest-pytest plugin enables the automated sending of unit test results from pytest to SpiraTest with a specified Test Case, and (optionally), a release and/or test set as well.","title":"Integrating with PyTest"},{"location":"Unit-Testing-Integration/Integrating-with-PyTest/#installing-the-pytest-plugin","text":"This section outlines how to install the SpiraTest plugin for pytest. It assumes that you already have a working installation of SpiraTest v2.3 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v2.3 before trying to use this plugin. You will also need to have Python (with pip) and pytest version 3.0 or later. To obtain the latest version of the SpiraTest plugin, simply run the following command: pip install pytest-spiratest This command will install the latest version of the plugin straight from the Python Package Index (PyPI). Once the SpiraTest plugin is successfully installed, all you need to do is configure the extension, then you can begin testing!","title":"Installing the pytest plugin"},{"location":"Unit-Testing-Integration/Integrating-with-PyTest/#configuring-the-pytest-plugin","text":"This section outlines how to configure the SpiraTest plugin for pytest. It assumes that you are familiar with pytest, and already have some working tests configured. Here is a sample test file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import pytest # Function we are testing def add ( num1 , num2 ): return num1 + num2 # Successful test def test_add_1 (): assert add ( 1 , 1 ) == 2 # Failed test def test_add_2 (): assert add ( 2 , 1 ) == 2 # Failed test def test_add_3 (): assert add ( 4 , 1 ) == 6 Note how test_add_2 is used in the configuration file discussed below. In your test root folder (the folder you run the pytest command from), create a file named \"spira.cfg\" with the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 [credentials] # Following are required url = localhost/SpiraTest username = fredbloggs token = {XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX} project_id = 1 # Following are optional: release_id = 5 test_set_id = 1 [test_cases] # Assigned to the rest default = 20 # Test case for a specific function test_add_2 = 22 For the plugin to work, you must have both settings groups (credentials and test_cases) with the following in the credentials group: url -- The base url to your SpiraTest installation, without a '/' at the end. username -- The username you use to sign into SpiraTest. token -- Your RSS Token. Found in your profile page as the \"RSS Token\" field, you must have RSS Feeds enabled for this to work. project_id -- The ID of the project you would like the test runs to be sent to release_id -- OPTIONAL -- Use if you would like to associate the test run with a release. test_set_id -- OPTIONAL -- Use if you would like to associate the test run with a test set. Under the test_cases group, put the following: default -- The default test case ID for functions without an assigned test case \\ - Used to override the default setting for a function's test case ID in SpiraTest. Only include the function name, without the parentheses. Once you have filled out all of the configurations, you are all set to go! Running the pytest (or py.test) command will run your unit tests, send the data to SpiraTest, and show the results to you. Here is an example of the test_add_3 function inside SpiraTest:","title":"Configuring the pytest plugin"},{"location":"Unit-Testing-Integration/Integrating-with-PyUnit/","text":"Integrating with PyUnit Installing the PyUnit Extension This section outlines how to install the SpiraTest Extension for PyUnit onto a workstation so that you can then run automated PyUnit tests against a Python application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v2.3 or later, and a working Python development environment. If you have an earlier version of SpiraTest you will need to upgrade to at least v2.3 before trying to use this extension. To obtain the version of the PyUnit extension that is compatible with your version of SpiraTest, you simply need to log-in as a project-level administrator to SpiraTest, go to the Administration home page and download the PyUnit Extension compressed archive (.zip). This process is described in the SpiraTest Administration Guide in more detail. Note: there are two versions of the PyUnit extension, one compatible with Python 2.x, and one compatible with Python 3.x. Please make sure you use the correct version. The PyUnit extension is provided as a set of Python source files that can be imported into your existing unit tests to add the SpiraTest reporting functionality. Once you have downloaded the Zip archive, you simply need to uncompress it into a folder of your choice on your local system (e.g. C:\\Program Files\\SpiraTest\\PyUnit Extension) Now to use the extension within your test cases, you need to first make sure that the folder is added to the Python PYTHONPATH . The method for doing this is dependent on the platform you're using, so please refer to the documentation on python.org for details on the appropriate method for your platform. As an example, on a Windows platform, the folder would be added to the PYTHONPATH by typing the following: set PYTHONPATH=%PYTHONPATH%; C:\\Program Files\\SpiraTest\\PyUnit Extension Once you have completed this step, you are now ready to begin using your PyUnit test fixtures with SpiraTest. Using PyUnit with SpiraTest The typical code structure for a PyUnit test fixture coded in Python is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 import random import unittest \\ # sample PyUnit test case class TestSequenceFunctions ( unittest . TestCase ): def setUp ( self ): self . seq = range ( 10 ) def testshuffle ( self ): \\ # make sure the shuffled sequence does not lose any elements random . shuffle ( self . seq ) self . seq . sort () self . assertEqual ( self . seq , range ( 10 )) def testchoice ( self ): element = random . choice ( self . seq ) self . assert \\ _ ( element in self . seq ) def testfail ( self ): self . assertEqual ( 1 , 2 , \"1==2 Should fail\" ) def testsample ( self ): self . assertRaises ( ValueError , random . sample , self . seq , 20 ) for element in random . sample ( self . seq , 5 ): self . assert \\ _ ( element in self . seq ) suite = unittest . TestLoader () . loadTestsFromTestCase ( TestSequenceFunctions ) testResult = unittest . TextTestRunner ( verbosity = 2 ) . run ( suite ) The Python class is marked as a PyUnit test fixture by inheriting from the unittest.TestCase base class, and the individual test methods are identified by using the 'test' prefix, with special setUp() and tearDown() methods reserved for the respective purposes. When you open up the class in a PyUnit runner or execute from the command line it loads all the test classes and executes all the methods marked with 'test...' in turn. Each of the Assert statements is used to test the state of the application after executing some sample code that calls the functionality being tested. If the condition in the assertion is true, then execution of the test continues, if it is false, then a failure is logged and PyUnit moves on to the next test method. So, to use SpiraTest with PyUnit, each of the test cases written for execution by PyUnit needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, the changes that need to be made to the PyUnit test fixture for SpiraTest to record the PyUnit test run are illustrated below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 import random import unittest import spiratestextension \\ # sample PyUnit test case class TestSequenceFunctions ( unittest . TestCase ): def setUp ( self ): self . seq = range ( 10 ) def testshuffle \\ _ \\ _2 ( self ): \\ # make sure the shuffled sequence does not lose any elements random . shuffle ( self . seq ) self . seq . sort () self . assertEqual ( self . seq , range ( 10 )) def testchoice \\ _ \\ _3 ( self ): element = random . choice ( self . seq ) self . assert \\ _ ( element in self . seq ) def testfail \\ _ \\ _4 ( self ): self . assertEqual ( 1 , 2 , \"1==2 Should fail\" ) def testsample \\ _ \\ _5 ( self ): self . assertRaises ( ValueError , random . sample , self . seq , 20 ) for element in random . sample ( self . seq , 5 ): self . assert \\ _ ( element in self . seq ) suite = unittest . TestLoader () . loadTestsFromTestCase ( TestSequenceFunctions ) testResult = unittest . TextTestRunner ( verbosity = 2 ) . run ( suite ) releaseId = 1 testSetId = 1 spiraTestExtension = spiratestextension . SpiraTestExtension () spiraTestExtension . projectId = 1 spiraTestExtension . server = \"localhost\" spiraTestExtension . port = 80 spiraTestExtension . ssl = False spiraTestExtension . path = \"SpiraTest\" spiraTestExtension . userName = \"fredbloggs\" spiraTestExtension . password = \"PleaseChange\" spiraTestExtension . recordResults ( TestSequenceFunctions , testResult , releaseId , testSetId ) Firstly, each of the individual test methods is appended with two underscores followed by the ID of the corresponding test case in SpiraTest. So for example testshuffle() is now testshuffle__2() as it maps to test case TC00002 inside SpiraTest. Second, at the end of the test run, the testResults object generated by the test run is passed to a special SpiraTestExtension() class via the recordResults() method. This class takes the results from the test run and uses it to generate the web-service messages that are sent to SpiraTest to communicate the test results. The following attributes need to be set on the instance of the SpiraTestExtension() object so that the extension can access the SpiraTest repository: spiraTestExtension.projectId -- The ID of the project inside SpiraTest (this can be found on the project homepage in the \"Project Overview\" section) spiraTestExtension.server - The name of the web server that SpiraTest is installed on spiraTestExtension.port -- The port used to access SpiraTest over the network (typically 80 unless you have a custom port setup) spiraTestExtension.ssl -- This should be set to False for HTTP and True for HTTPS spiraTestExtension.path -- The path to SpiraTest on your webserver (typically just 'SpiraTest') spiraTestExtension.userName - A valid username for the instance of SpiraTest that has access to the project specified above spiraTestExtension.password - A valid password for the user specified above In addition, when calling the recordResults() method, you should also pass the Release ID and the Test Set ID which is used to tell SpiraTest which release and/or test set to associate the test execution with. The Release ID can be found on the releases list page (click on the Planning > Releases tab) -- just remove the RL prefix from the number as well as any leading zeros. Similarly, the Test Set ID can be found on the test set list page (click on the Testing > Test Sets tab) -- just remove the TX prefix from the number as well as any leading zeros. If you don't want to associate the test run with a specific release or test set, just use the special value -1 to indicate N/A. Now all you need to do is save your code, launch PyUnit, run the test fixtures as you would normally do, and when you view the test cases in SpiraTest, you should see a PyUnit automated test run displayed in the list of executed test runs: Clicking on one of the PyUnit test runs will bring up a screen that provides information regarding what PyUnit test method failed, what the error was, together with the associated code stack-trace: Congratulations... You are now able to run PyUnit automated tests and have the results be recorded within SpiraTest. The sample test fixture testsequencefunctions.py is provided with the installation.","title":"PyUnit"},{"location":"Unit-Testing-Integration/Integrating-with-PyUnit/#integrating-with-pyunit","text":"","title":"Integrating with PyUnit"},{"location":"Unit-Testing-Integration/Integrating-with-PyUnit/#installing-the-pyunit-extension","text":"This section outlines how to install the SpiraTest Extension for PyUnit onto a workstation so that you can then run automated PyUnit tests against a Python application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v2.3 or later, and a working Python development environment. If you have an earlier version of SpiraTest you will need to upgrade to at least v2.3 before trying to use this extension. To obtain the version of the PyUnit extension that is compatible with your version of SpiraTest, you simply need to log-in as a project-level administrator to SpiraTest, go to the Administration home page and download the PyUnit Extension compressed archive (.zip). This process is described in the SpiraTest Administration Guide in more detail. Note: there are two versions of the PyUnit extension, one compatible with Python 2.x, and one compatible with Python 3.x. Please make sure you use the correct version. The PyUnit extension is provided as a set of Python source files that can be imported into your existing unit tests to add the SpiraTest reporting functionality. Once you have downloaded the Zip archive, you simply need to uncompress it into a folder of your choice on your local system (e.g. C:\\Program Files\\SpiraTest\\PyUnit Extension) Now to use the extension within your test cases, you need to first make sure that the folder is added to the Python PYTHONPATH . The method for doing this is dependent on the platform you're using, so please refer to the documentation on python.org for details on the appropriate method for your platform. As an example, on a Windows platform, the folder would be added to the PYTHONPATH by typing the following: set PYTHONPATH=%PYTHONPATH%; C:\\Program Files\\SpiraTest\\PyUnit Extension Once you have completed this step, you are now ready to begin using your PyUnit test fixtures with SpiraTest.","title":"Installing the PyUnit Extension"},{"location":"Unit-Testing-Integration/Integrating-with-PyUnit/#using-pyunit-with-spiratest","text":"The typical code structure for a PyUnit test fixture coded in Python is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 import random import unittest \\ # sample PyUnit test case class TestSequenceFunctions ( unittest . TestCase ): def setUp ( self ): self . seq = range ( 10 ) def testshuffle ( self ): \\ # make sure the shuffled sequence does not lose any elements random . shuffle ( self . seq ) self . seq . sort () self . assertEqual ( self . seq , range ( 10 )) def testchoice ( self ): element = random . choice ( self . seq ) self . assert \\ _ ( element in self . seq ) def testfail ( self ): self . assertEqual ( 1 , 2 , \"1==2 Should fail\" ) def testsample ( self ): self . assertRaises ( ValueError , random . sample , self . seq , 20 ) for element in random . sample ( self . seq , 5 ): self . assert \\ _ ( element in self . seq ) suite = unittest . TestLoader () . loadTestsFromTestCase ( TestSequenceFunctions ) testResult = unittest . TextTestRunner ( verbosity = 2 ) . run ( suite ) The Python class is marked as a PyUnit test fixture by inheriting from the unittest.TestCase base class, and the individual test methods are identified by using the 'test' prefix, with special setUp() and tearDown() methods reserved for the respective purposes. When you open up the class in a PyUnit runner or execute from the command line it loads all the test classes and executes all the methods marked with 'test...' in turn. Each of the Assert statements is used to test the state of the application after executing some sample code that calls the functionality being tested. If the condition in the assertion is true, then execution of the test continues, if it is false, then a failure is logged and PyUnit moves on to the next test method. So, to use SpiraTest with PyUnit, each of the test cases written for execution by PyUnit needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, the changes that need to be made to the PyUnit test fixture for SpiraTest to record the PyUnit test run are illustrated below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 import random import unittest import spiratestextension \\ # sample PyUnit test case class TestSequenceFunctions ( unittest . TestCase ): def setUp ( self ): self . seq = range ( 10 ) def testshuffle \\ _ \\ _2 ( self ): \\ # make sure the shuffled sequence does not lose any elements random . shuffle ( self . seq ) self . seq . sort () self . assertEqual ( self . seq , range ( 10 )) def testchoice \\ _ \\ _3 ( self ): element = random . choice ( self . seq ) self . assert \\ _ ( element in self . seq ) def testfail \\ _ \\ _4 ( self ): self . assertEqual ( 1 , 2 , \"1==2 Should fail\" ) def testsample \\ _ \\ _5 ( self ): self . assertRaises ( ValueError , random . sample , self . seq , 20 ) for element in random . sample ( self . seq , 5 ): self . assert \\ _ ( element in self . seq ) suite = unittest . TestLoader () . loadTestsFromTestCase ( TestSequenceFunctions ) testResult = unittest . TextTestRunner ( verbosity = 2 ) . run ( suite ) releaseId = 1 testSetId = 1 spiraTestExtension = spiratestextension . SpiraTestExtension () spiraTestExtension . projectId = 1 spiraTestExtension . server = \"localhost\" spiraTestExtension . port = 80 spiraTestExtension . ssl = False spiraTestExtension . path = \"SpiraTest\" spiraTestExtension . userName = \"fredbloggs\" spiraTestExtension . password = \"PleaseChange\" spiraTestExtension . recordResults ( TestSequenceFunctions , testResult , releaseId , testSetId ) Firstly, each of the individual test methods is appended with two underscores followed by the ID of the corresponding test case in SpiraTest. So for example testshuffle() is now testshuffle__2() as it maps to test case TC00002 inside SpiraTest. Second, at the end of the test run, the testResults object generated by the test run is passed to a special SpiraTestExtension() class via the recordResults() method. This class takes the results from the test run and uses it to generate the web-service messages that are sent to SpiraTest to communicate the test results. The following attributes need to be set on the instance of the SpiraTestExtension() object so that the extension can access the SpiraTest repository: spiraTestExtension.projectId -- The ID of the project inside SpiraTest (this can be found on the project homepage in the \"Project Overview\" section) spiraTestExtension.server - The name of the web server that SpiraTest is installed on spiraTestExtension.port -- The port used to access SpiraTest over the network (typically 80 unless you have a custom port setup) spiraTestExtension.ssl -- This should be set to False for HTTP and True for HTTPS spiraTestExtension.path -- The path to SpiraTest on your webserver (typically just 'SpiraTest') spiraTestExtension.userName - A valid username for the instance of SpiraTest that has access to the project specified above spiraTestExtension.password - A valid password for the user specified above In addition, when calling the recordResults() method, you should also pass the Release ID and the Test Set ID which is used to tell SpiraTest which release and/or test set to associate the test execution with. The Release ID can be found on the releases list page (click on the Planning > Releases tab) -- just remove the RL prefix from the number as well as any leading zeros. Similarly, the Test Set ID can be found on the test set list page (click on the Testing > Test Sets tab) -- just remove the TX prefix from the number as well as any leading zeros. If you don't want to associate the test run with a specific release or test set, just use the special value -1 to indicate N/A. Now all you need to do is save your code, launch PyUnit, run the test fixtures as you would normally do, and when you view the test cases in SpiraTest, you should see a PyUnit automated test run displayed in the list of executed test runs: Clicking on one of the PyUnit test runs will bring up a screen that provides information regarding what PyUnit test method failed, what the error was, together with the associated code stack-trace: Congratulations... You are now able to run PyUnit automated tests and have the results be recorded within SpiraTest. The sample test fixture testsequencefunctions.py is provided with the installation.","title":"Using PyUnit with SpiraTest"},{"location":"Unit-Testing-Integration/Integrating-with-Ruby-TestUnit/","text":"Integrating with Ruby Test::Unit Installing the Ruby Test::Unit Test Runner This section outlines how to install the SpiraTest custom Test Runner for Test::Unit onto a workstation so that you can then run automated Test::Unit tests against a Ruby application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v2.3 or later, and a working Ruby development environment. If you have an earlier version of SpiraTest you will need to upgrade to at least v2.3 before trying to use this extension. To obtain the version of the Test::Unit test runner that is compatible with your version of SpiraTest, you simply need to log-in as a project-level administrator to SpiraTest, go to the Administration home page and download the Test::Unit test runner compressed archive (.zip). This process is described in the SpiraTest Administration Guide in more detail. The Test::Unit test runner is provided as a set of Ruby source files that can be imported into your existing unit tests to add the SpiraTest reporting functionality. Once you have downloaded the Zip archive, you simply need to uncompress it into a folder of your choice on your local system (e.g. C:\\Program Files\\SpiraTest\\RubyTestUnitRunner) Now to use the custom test runner within your test cases, you need to first make sure that the folder is added to the Ruby RUBYPATH (or just the system PATH) . The method for doing this is dependent on the platform you're using, so please refer to the documentation on http://ruby-lang.org for details on the appropriate method for your platform. As an example, on a Windows platform, the folder would be added to the RUBYPATH by typing the following: set RUBYPATH=%RUBYPATH%; C:\\Program Files\\SpiraTest\\RubyTestUnitRunner Once you have completed this step, you are now ready to begin using your Test::Unit test fixtures with SpiraTest. Using Ruby Test::Unit with SpiraTest The typical code structure for a Test::Unit test suite and test case coded in Ruby is as follows: #this is a test case that tests addition operations class TC_Adder < Test::Unit::TestCase def setup @adder = Adder.new(5) end def test_add assert_equal(7, @adder.add(2), \"Should have added correctly\") end def test_addfail assert_equal(7, @adder.add(3), \"Test failure\") end def teardown @adder = nil end end #this is a test suite that calls the test case class TS_Examples def self.suite suite = Test::Unit::TestSuite.new suite << TC_Adder.suite return suite end end Test::Unit::UI::Console::TestRunner.run(TS_Examples) The Test::Unit test case is marked as a Test::Unit test case by inheriting from the Test::Unit::TestCase base class, and the individual test methods are identified by using the 'test' prefix, with special setup and teardown methods reserved for the respective purposes. When you open up the class in a Ruby Test::Unit runner or execute from the command line it loads all the test classes and executes all the methods marked with 'test...' in turn. Each of the Assert statements is used to test the state of the application after executing some sample code that calls the functionality being tested. If the condition in the assertion is true, then execution of the test continues, if it is false, then a failure is logged and Test::Unit moves on to the next test method. So, to use SpiraTest with Test::Unit, each of the test cases written for execution by Test::Unit needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, the changes that need to be made to the Test::Unit test case and test suite for SpiraTest to record the Test::Unit test run are illustrated below: #this is a test case that tests addition operations class TC_Adder < Test::Unit::TestCase def setup @adder = Adder.new(5) end def test_add__2 assert_equal(7, @adder.add(2), \"Should have added correctly\") end def test_addfail__3 assert_equal(7, @adder.add(3), \"Test failure\") end def teardown @adder = nil end end #this is a test suite that calls the test case class TS_Examples def self.suite suite = Test::Unit::TestSuite.new suite << TC_Adder.suite return suite end end projectId = 1 releaseId = 2 testSetId = -1 testRunner = Test::Unit::SpiraTest::TestRunner.new(TS_Examples, \"http://servername/SpiraTest\", \"fredbloggs\", \"fredbloggs\", projectId, releaseId, testSetId) testRunner.start Firstly, each of the individual test methods is appended with two underscores followed by the ID of the corresponding test case in SpiraTest. So for example test_add is now test_add__2 as it maps to test case TC00002 inside SpiraTest. Second, at the end of the test suite, instead of just creating the standard Console Test Runner class and passing it a reference to the test suite (e.g. TS_Examples), we now create an instance of the special Test::Unit::SpiraTest::TestRunner class, passing it a reference to the test suite as well as specifying the SpiraTest connection information. This class takes the results from the test suite being executed and uses it to generate the web-service messages that are sent to SpiraTest to communicate the test results. The following parameters need to be passed during the instantiation of the Test::Unit::SpiraTest::TestRunner object so that the custom test runner can access the SpiraTest repository: suite -- the reference to the Test::Unit test suite that contains the test cases being executed. In our example above, this is the TS_Examples class. baseUrl -- The base URL used to access your instance of SpiraTest (e.g. http://myserver/SpiraTest ). It should include the protocol (e.g. http/https), the server-name, the port number (if not 80/443) and the virtual directory (if there is one). userName - A valid username for the instance of SpiraTest that has access to the project specified above password - A valid password for the user specified above projectId - The ID of the project inside SpiraTest (this can be found on the project homepage in the \"Project Overview\" section) releaseId - The ID of the SpiraTest release to associate the test run with. This can be found on the releases list page (click on the Planning > Releases tab). If you don't want to associate the test run with a specific release, just use the value -1 to indicate N/A. testSetId - The ID of the SpiraTest test set to associate the test run with. This can be found on the test set list page (click on the Testing > Test Sets tab). If you don't want to associate the test run with a specific test set, just use the value -1 to indicate N/A. Now all you need to do is save your code, launch Test::Unit, run the test fixtures as you would normally do (e.g. by executing the TS_Examples ruby file from the command line), and when you view the test cases in SpiraTest, you should see a Ruby Test::Unit automated test run displayed in the list of executed test runs: Clicking on one of the Ruby Test::Unit test runs will bring up a screen that provides information regarding what Ruby Test::Unit test method failed, what the error was, together with the associated code stack-trace: Congratulations... You are now able to run Test::Unit automated tests and have the results be recorded within SpiraTest. The sample test suite ts_examples.rb together with two test cases (tc_adder and tc_subtracter) is provided with the installation.","title":"Ruby Test::Unit"},{"location":"Unit-Testing-Integration/Integrating-with-Ruby-TestUnit/#integrating-with-ruby-testunit","text":"","title":"Integrating with Ruby Test::Unit"},{"location":"Unit-Testing-Integration/Integrating-with-Ruby-TestUnit/#installing-the-ruby-testunit-test-runner","text":"This section outlines how to install the SpiraTest custom Test Runner for Test::Unit onto a workstation so that you can then run automated Test::Unit tests against a Ruby application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v2.3 or later, and a working Ruby development environment. If you have an earlier version of SpiraTest you will need to upgrade to at least v2.3 before trying to use this extension. To obtain the version of the Test::Unit test runner that is compatible with your version of SpiraTest, you simply need to log-in as a project-level administrator to SpiraTest, go to the Administration home page and download the Test::Unit test runner compressed archive (.zip). This process is described in the SpiraTest Administration Guide in more detail. The Test::Unit test runner is provided as a set of Ruby source files that can be imported into your existing unit tests to add the SpiraTest reporting functionality. Once you have downloaded the Zip archive, you simply need to uncompress it into a folder of your choice on your local system (e.g. C:\\Program Files\\SpiraTest\\RubyTestUnitRunner) Now to use the custom test runner within your test cases, you need to first make sure that the folder is added to the Ruby RUBYPATH (or just the system PATH) . The method for doing this is dependent on the platform you're using, so please refer to the documentation on http://ruby-lang.org for details on the appropriate method for your platform. As an example, on a Windows platform, the folder would be added to the RUBYPATH by typing the following: set RUBYPATH=%RUBYPATH%; C:\\Program Files\\SpiraTest\\RubyTestUnitRunner Once you have completed this step, you are now ready to begin using your Test::Unit test fixtures with SpiraTest.","title":"Installing the Ruby Test::Unit Test Runner"},{"location":"Unit-Testing-Integration/Integrating-with-Ruby-TestUnit/#using-ruby-testunit-with-spiratest","text":"The typical code structure for a Test::Unit test suite and test case coded in Ruby is as follows: #this is a test case that tests addition operations class TC_Adder < Test::Unit::TestCase def setup @adder = Adder.new(5) end def test_add assert_equal(7, @adder.add(2), \"Should have added correctly\") end def test_addfail assert_equal(7, @adder.add(3), \"Test failure\") end def teardown @adder = nil end end #this is a test suite that calls the test case class TS_Examples def self.suite suite = Test::Unit::TestSuite.new suite << TC_Adder.suite return suite end end Test::Unit::UI::Console::TestRunner.run(TS_Examples) The Test::Unit test case is marked as a Test::Unit test case by inheriting from the Test::Unit::TestCase base class, and the individual test methods are identified by using the 'test' prefix, with special setup and teardown methods reserved for the respective purposes. When you open up the class in a Ruby Test::Unit runner or execute from the command line it loads all the test classes and executes all the methods marked with 'test...' in turn. Each of the Assert statements is used to test the state of the application after executing some sample code that calls the functionality being tested. If the condition in the assertion is true, then execution of the test continues, if it is false, then a failure is logged and Test::Unit moves on to the next test method. So, to use SpiraTest with Test::Unit, each of the test cases written for execution by Test::Unit needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, the changes that need to be made to the Test::Unit test case and test suite for SpiraTest to record the Test::Unit test run are illustrated below: #this is a test case that tests addition operations class TC_Adder < Test::Unit::TestCase def setup @adder = Adder.new(5) end def test_add__2 assert_equal(7, @adder.add(2), \"Should have added correctly\") end def test_addfail__3 assert_equal(7, @adder.add(3), \"Test failure\") end def teardown @adder = nil end end #this is a test suite that calls the test case class TS_Examples def self.suite suite = Test::Unit::TestSuite.new suite << TC_Adder.suite return suite end end projectId = 1 releaseId = 2 testSetId = -1 testRunner = Test::Unit::SpiraTest::TestRunner.new(TS_Examples, \"http://servername/SpiraTest\", \"fredbloggs\", \"fredbloggs\", projectId, releaseId, testSetId) testRunner.start Firstly, each of the individual test methods is appended with two underscores followed by the ID of the corresponding test case in SpiraTest. So for example test_add is now test_add__2 as it maps to test case TC00002 inside SpiraTest. Second, at the end of the test suite, instead of just creating the standard Console Test Runner class and passing it a reference to the test suite (e.g. TS_Examples), we now create an instance of the special Test::Unit::SpiraTest::TestRunner class, passing it a reference to the test suite as well as specifying the SpiraTest connection information. This class takes the results from the test suite being executed and uses it to generate the web-service messages that are sent to SpiraTest to communicate the test results. The following parameters need to be passed during the instantiation of the Test::Unit::SpiraTest::TestRunner object so that the custom test runner can access the SpiraTest repository: suite -- the reference to the Test::Unit test suite that contains the test cases being executed. In our example above, this is the TS_Examples class. baseUrl -- The base URL used to access your instance of SpiraTest (e.g. http://myserver/SpiraTest ). It should include the protocol (e.g. http/https), the server-name, the port number (if not 80/443) and the virtual directory (if there is one). userName - A valid username for the instance of SpiraTest that has access to the project specified above password - A valid password for the user specified above projectId - The ID of the project inside SpiraTest (this can be found on the project homepage in the \"Project Overview\" section) releaseId - The ID of the SpiraTest release to associate the test run with. This can be found on the releases list page (click on the Planning > Releases tab). If you don't want to associate the test run with a specific release, just use the value -1 to indicate N/A. testSetId - The ID of the SpiraTest test set to associate the test run with. This can be found on the test set list page (click on the Testing > Test Sets tab). If you don't want to associate the test run with a specific test set, just use the value -1 to indicate N/A. Now all you need to do is save your code, launch Test::Unit, run the test fixtures as you would normally do (e.g. by executing the TS_Examples ruby file from the command line), and when you view the test cases in SpiraTest, you should see a Ruby Test::Unit automated test run displayed in the list of executed test runs: Clicking on one of the Ruby Test::Unit test runs will bring up a screen that provides information regarding what Ruby Test::Unit test method failed, what the error was, together with the associated code stack-trace: Congratulations... You are now able to run Test::Unit automated tests and have the results be recorded within SpiraTest. The sample test suite ts_examples.rb together with two test cases (tc_adder and tc_subtracter) is provided with the installation.","title":"Using Ruby Test::Unit with SpiraTest"},{"location":"Unit-Testing-Integration/Integrating-with-Selenium/","text":"Integrating with Selenium Selenium WebDriver is a test tool that allows you to write automated web application user interface tests in any programming language against any HTTP website using any mainstream JavaScript-enabled browser. Selenium WebDriver comes in two parts. An API or library for the web browser itself that is used to allow external applications to connect to the web browser and instruct it to perform certain operations. Client libraries for various computer languages - these are referred to as 'language bindings. Therefore to use SpiraTest with Selenium WebDriver (hereafter referred to as just Selenium), you need to decide which client driver you want to use, and then use the appropriate integration between SpiraTest and that driver's underlying platform/language. Any unit test framework listed in this guide can be used with Selenium (in addition to just running unit tests), we have some examples below for .NET, Java and Python. Using the .NET Driver To use the .NET driver for Selenium with SpiraTest, you will need to run your Selenium tests within the context of an NUnit test fixture . Once you have configured NUnit for use with SpriaTest, there is one change that needs to be made to the SpiraTest NUnit configuration so that the Selenium tests report back to SpiraTest as 'Selenium' rather than \"NUnit' so you can distinguish between them. Supplied with the SpiraTest NUnit add-in is a sample test for using Selenium with SpiraTest: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 using System ; using NUnit.Framework ; using Inflectra.SpiraTest.AddOns.SpiraTestNUnitAddIn.SpiraTestFramework ; using Selenium ; namespace SeleniumSampleTest { /// <summary> /// Sample test fixture that tests the NUnit SpiraTest integration with the /// Selenium-RC .NET Driver /// </summary> [ TestFixture, SpiraTestConfiguration(\"http://localhost/SpiraTest\", \"fredbloggs\", \"fredbloggs\", 1, 1, 2, SpiraTestConfigurationAttribute.RunnerName.Selenium) ] public class GoogleTest { private static ISelenium selenium ; [SetUp] public void SetupTest () { //Instantiate the selenium .NET proxy selenium = new DefaultSelenium ( \"localhost\" , 4444 , \"*iexplore\" , \"http://www.google.com\" ); selenium . Start (); } [TearDown] public void TeardownTest () { selenium . Stop (); } /// <summary> /// Sample test that searches on Google, passes correctly /// </summary> [ Test, SpiraTestCase (5) ] public void GoogleSearch () { //Opens up Google selenium . Open ( \"http://www.google.com/webhp\" ); //Verifies that the title matches Assert . AreEqual ( \"Google\" , selenium . GetTitle ()); selenium . Type ( \"q\" , \"Selenium OpenQA\" ); //Verifies that it can find the Selenium website Assert . AreEqual ( \"Selenium OpenQA\" , selenium . GetValue ( \"q\" )); selenium . Click ( \"btnG\" ); selenium . WaitForPageToLoad ( \"5000\" ); Assert . IsTrue ( selenium . IsTextPresent ( \"www.openqa.org\" )); Assert . AreEqual ( \"Selenium OpenQA - Google Search\" , selenium . GetTitle ()); } } } The details of the sample itself are described in more detail on the Selenium website, and you can see that we have added the SpiraTest specific attributes onto the test case and test methods to indicate that they need to report back to SpiraTest. However there is one change that has been made to the SpiraTestConfiguration attribute applied to the test fixture -- an extra SpiraTestConfigurationAttribute.RunnerName.Selenium parameter has been specified. This tells the SpiraTest NUnit add-in to report the results back as being generated by Selenium rather than NUnit. Using the Java Driver To use the Java driver for Selenium with SpiraTest, you will need to run your Selenium tests within the context of a TestNG test fixture . Once you have configured TestNG for use with SpriaTest, there is one change that needs to be made to the SpiraTest TestNG configuration so that the Selenium tests report back to SpiraTest as 'Selenium' rather than \"TestNG' so you can distinguish between them. Supplied with the SpiraTest TestNG listener is a sample test for using Selenium with SpiraTest: The details of the sample itself are described in more detail on the Selenium website, and you can see that we have added the SpiraTest specific attributes onto the test case and test methods to indicate that they need to report back to SpiraTest. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 package com.inflectra.spiratest.addons.testnglistener.samples ; import org.testng.annotations.* ; import static org.testng.AssertJUnit.* ; import com.thoughtworks.selenium.* ; import com.inflectra.spiratest.addons.testnglistener.* ; /** * A sample Selenium test using the ability to return results back to SpiraTest * * @author Inflectra Corporation * @version 2.3.0 * */ @SpiraTestConfiguration ( url = \"http://localhost/SpiraTest\" , login = \"fredbloggs\" , password = \"fredbloggs\" , projectId = 1 , releaseId = 1 , testSetId =- 1 runner = RunnerName . Selenium ) @Test ( groups = { \"seleniumtest\" }) public class SeleniumTest { private Selenium selenium ; @BeforeClass public void setUp () { //Instantiate the selenium Java proxy String url = \"http://www.google.com\" ; selenium = new DefaultSelenium ( \"localhost\" , 4444 , \"*firefox\" , url ); selenium . start (); } @AfterClass protected void tearDown () { selenium . stop (); } // Sample test that searches on Google, passes correctly @Test ( groups = { \"seleniumtest\" }) @SpiraTestCase ( testCaseId = 5 ) public void testGoogle () { //Opens up Google selenium . open ( \"http://www.google.com/webhp?hl=en\" ); //Verifies that the title matches assertEquals ( \"Google\" , selenium . getTitle ()); selenium . type ( \"q\" , \"Selenium OpenQA\" ); //Verifies that it can find the Selenium website assertEquals ( \"Selenium OpenQA\" , selenium . getValue ( \"q\" )); selenium . click ( \"btnG\" ); selenium . waitForPageToLoad ( \"5000\" ); assertEquals ( \"Selenium OpenQA - Google Search\" , selenium . getTitle ()); } } However there is one change that has been made to the SpiraTestConfiguration attribute applied to the test fixture -- an extra runner=RunnerName.Selenium parameter has been specified. This tells the SpiraTest TestNG listener to report the results back as being generated by Selenium rather than TestNG. Using the Python Driver To use the Python driver for Selenium with SpiraTest, you will need to run your Selenium tests within the context of a PyUnit unit-test fixture . Once you have configured PyUnit for use with SpriaTest, there is one change that needs to be made to the SpiraTest PyUnit configuration so that the Selenium tests report back to SpiraTest as 'Selenium' rather than \"PyUnit' so you can distinguish between them. Supplied with the SpiraTest PyUnit extension is a sample test for using Selenium with SpiraTest: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 from selenium import selenium import unittest import sys , time import spiratestextension # A sample Selenium test using the ability to return results back to SpiraTest # # Author Inflectra Corporation # Version 2.3.0 # class TestSeleniumSample ( unittest . TestCase ): seleniumHost = 'localhost' seleniumPort = str ( 4444 ) browserStartCommand = \"*firefox\" browserURL = \"http://www.google.com\" def setUp ( self ): print \"Using selenium server at \" + self . seleniumHost + \":\" + self . seleniumPort self . selenium = selenium ( self . seleniumHost , self . seleniumPort , self . browserStartCommand , self . browserURL ) self . selenium . start () def testGoogle__4 ( self ): selenium = self . selenium selenium . open ( \"http://www.google.com/webhp?hl=en\" ) #Verifies that the title matches self . assertEqual ( \"Google\" , selenium . get_title ()) selenium . type ( \"q\" , \"Selenium OpenQA\" ) #Verifies that it can find the Selenium website self . assertEqual ( \"Selenium OpenQA\" , selenium . get_value ( \"q\" )) selenium . click ( \"btnG\" ) selenium . wait_for_page_to_load ( \"5000\" ) self . assertEqual ( \"Selenium OpenQA - Google Search\" , selenium . get_title ()) def tearDown ( self ): self . selenium . stop () suite = unittest . TestLoader () . loadTestsFromTestCase ( TestSeleniumSample ) testResult = unittest . TextTestRunner ( verbosity = 2 ) . run ( suite ) releaseId = 1 testSetId = - 1 spiraTestExtension = spiratestextension . SpiraTestExtension () spiraTestExtension . projectId = 1 spiraTestExtension . server = \"localhost\" spiraTestExtension . port = 80 spiraTestExtension . path = \"SpiraTest\" spiraTestExtension . userName = \"fredbloggs\" spiraTestExtension . password = \"fredbloggs\" spiraTestExtension . recordResults ( TestSeleniumSample , testResult , releaseId , testSetId , \"Selenium\" ) The details of the sample itself are described in more detail on the Selenium website, and you can see that we have added the SpiraTest specific test case suffixes and reporting code into the test methods to indicate that they need to report back to SpiraTest. However there is one change that has been made to the spiraTestExtension.recordResults method called at the end of the test case. An extra string parameter has been specified that contains \"Selenium\". This tells the SpiraTest PyUnit extension to report the results back as being generated by Selenium rather than PyUnit.","title":"Selenium"},{"location":"Unit-Testing-Integration/Integrating-with-Selenium/#integrating-with-selenium","text":"Selenium WebDriver is a test tool that allows you to write automated web application user interface tests in any programming language against any HTTP website using any mainstream JavaScript-enabled browser. Selenium WebDriver comes in two parts. An API or library for the web browser itself that is used to allow external applications to connect to the web browser and instruct it to perform certain operations. Client libraries for various computer languages - these are referred to as 'language bindings. Therefore to use SpiraTest with Selenium WebDriver (hereafter referred to as just Selenium), you need to decide which client driver you want to use, and then use the appropriate integration between SpiraTest and that driver's underlying platform/language. Any unit test framework listed in this guide can be used with Selenium (in addition to just running unit tests), we have some examples below for .NET, Java and Python.","title":"Integrating with Selenium"},{"location":"Unit-Testing-Integration/Integrating-with-Selenium/#using-the-net-driver","text":"To use the .NET driver for Selenium with SpiraTest, you will need to run your Selenium tests within the context of an NUnit test fixture . Once you have configured NUnit for use with SpriaTest, there is one change that needs to be made to the SpiraTest NUnit configuration so that the Selenium tests report back to SpiraTest as 'Selenium' rather than \"NUnit' so you can distinguish between them. Supplied with the SpiraTest NUnit add-in is a sample test for using Selenium with SpiraTest: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 using System ; using NUnit.Framework ; using Inflectra.SpiraTest.AddOns.SpiraTestNUnitAddIn.SpiraTestFramework ; using Selenium ; namespace SeleniumSampleTest { /// <summary> /// Sample test fixture that tests the NUnit SpiraTest integration with the /// Selenium-RC .NET Driver /// </summary> [ TestFixture, SpiraTestConfiguration(\"http://localhost/SpiraTest\", \"fredbloggs\", \"fredbloggs\", 1, 1, 2, SpiraTestConfigurationAttribute.RunnerName.Selenium) ] public class GoogleTest { private static ISelenium selenium ; [SetUp] public void SetupTest () { //Instantiate the selenium .NET proxy selenium = new DefaultSelenium ( \"localhost\" , 4444 , \"*iexplore\" , \"http://www.google.com\" ); selenium . Start (); } [TearDown] public void TeardownTest () { selenium . Stop (); } /// <summary> /// Sample test that searches on Google, passes correctly /// </summary> [ Test, SpiraTestCase (5) ] public void GoogleSearch () { //Opens up Google selenium . Open ( \"http://www.google.com/webhp\" ); //Verifies that the title matches Assert . AreEqual ( \"Google\" , selenium . GetTitle ()); selenium . Type ( \"q\" , \"Selenium OpenQA\" ); //Verifies that it can find the Selenium website Assert . AreEqual ( \"Selenium OpenQA\" , selenium . GetValue ( \"q\" )); selenium . Click ( \"btnG\" ); selenium . WaitForPageToLoad ( \"5000\" ); Assert . IsTrue ( selenium . IsTextPresent ( \"www.openqa.org\" )); Assert . AreEqual ( \"Selenium OpenQA - Google Search\" , selenium . GetTitle ()); } } } The details of the sample itself are described in more detail on the Selenium website, and you can see that we have added the SpiraTest specific attributes onto the test case and test methods to indicate that they need to report back to SpiraTest. However there is one change that has been made to the SpiraTestConfiguration attribute applied to the test fixture -- an extra SpiraTestConfigurationAttribute.RunnerName.Selenium parameter has been specified. This tells the SpiraTest NUnit add-in to report the results back as being generated by Selenium rather than NUnit.","title":"Using the .NET Driver"},{"location":"Unit-Testing-Integration/Integrating-with-Selenium/#using-the-java-driver","text":"To use the Java driver for Selenium with SpiraTest, you will need to run your Selenium tests within the context of a TestNG test fixture . Once you have configured TestNG for use with SpriaTest, there is one change that needs to be made to the SpiraTest TestNG configuration so that the Selenium tests report back to SpiraTest as 'Selenium' rather than \"TestNG' so you can distinguish between them. Supplied with the SpiraTest TestNG listener is a sample test for using Selenium with SpiraTest: The details of the sample itself are described in more detail on the Selenium website, and you can see that we have added the SpiraTest specific attributes onto the test case and test methods to indicate that they need to report back to SpiraTest. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 package com.inflectra.spiratest.addons.testnglistener.samples ; import org.testng.annotations.* ; import static org.testng.AssertJUnit.* ; import com.thoughtworks.selenium.* ; import com.inflectra.spiratest.addons.testnglistener.* ; /** * A sample Selenium test using the ability to return results back to SpiraTest * * @author Inflectra Corporation * @version 2.3.0 * */ @SpiraTestConfiguration ( url = \"http://localhost/SpiraTest\" , login = \"fredbloggs\" , password = \"fredbloggs\" , projectId = 1 , releaseId = 1 , testSetId =- 1 runner = RunnerName . Selenium ) @Test ( groups = { \"seleniumtest\" }) public class SeleniumTest { private Selenium selenium ; @BeforeClass public void setUp () { //Instantiate the selenium Java proxy String url = \"http://www.google.com\" ; selenium = new DefaultSelenium ( \"localhost\" , 4444 , \"*firefox\" , url ); selenium . start (); } @AfterClass protected void tearDown () { selenium . stop (); } // Sample test that searches on Google, passes correctly @Test ( groups = { \"seleniumtest\" }) @SpiraTestCase ( testCaseId = 5 ) public void testGoogle () { //Opens up Google selenium . open ( \"http://www.google.com/webhp?hl=en\" ); //Verifies that the title matches assertEquals ( \"Google\" , selenium . getTitle ()); selenium . type ( \"q\" , \"Selenium OpenQA\" ); //Verifies that it can find the Selenium website assertEquals ( \"Selenium OpenQA\" , selenium . getValue ( \"q\" )); selenium . click ( \"btnG\" ); selenium . waitForPageToLoad ( \"5000\" ); assertEquals ( \"Selenium OpenQA - Google Search\" , selenium . getTitle ()); } } However there is one change that has been made to the SpiraTestConfiguration attribute applied to the test fixture -- an extra runner=RunnerName.Selenium parameter has been specified. This tells the SpiraTest TestNG listener to report the results back as being generated by Selenium rather than TestNG.","title":"Using the Java Driver"},{"location":"Unit-Testing-Integration/Integrating-with-Selenium/#using-the-python-driver","text":"To use the Python driver for Selenium with SpiraTest, you will need to run your Selenium tests within the context of a PyUnit unit-test fixture . Once you have configured PyUnit for use with SpriaTest, there is one change that needs to be made to the SpiraTest PyUnit configuration so that the Selenium tests report back to SpiraTest as 'Selenium' rather than \"PyUnit' so you can distinguish between them. Supplied with the SpiraTest PyUnit extension is a sample test for using Selenium with SpiraTest: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 from selenium import selenium import unittest import sys , time import spiratestextension # A sample Selenium test using the ability to return results back to SpiraTest # # Author Inflectra Corporation # Version 2.3.0 # class TestSeleniumSample ( unittest . TestCase ): seleniumHost = 'localhost' seleniumPort = str ( 4444 ) browserStartCommand = \"*firefox\" browserURL = \"http://www.google.com\" def setUp ( self ): print \"Using selenium server at \" + self . seleniumHost + \":\" + self . seleniumPort self . selenium = selenium ( self . seleniumHost , self . seleniumPort , self . browserStartCommand , self . browserURL ) self . selenium . start () def testGoogle__4 ( self ): selenium = self . selenium selenium . open ( \"http://www.google.com/webhp?hl=en\" ) #Verifies that the title matches self . assertEqual ( \"Google\" , selenium . get_title ()) selenium . type ( \"q\" , \"Selenium OpenQA\" ) #Verifies that it can find the Selenium website self . assertEqual ( \"Selenium OpenQA\" , selenium . get_value ( \"q\" )) selenium . click ( \"btnG\" ) selenium . wait_for_page_to_load ( \"5000\" ) self . assertEqual ( \"Selenium OpenQA - Google Search\" , selenium . get_title ()) def tearDown ( self ): self . selenium . stop () suite = unittest . TestLoader () . loadTestsFromTestCase ( TestSeleniumSample ) testResult = unittest . TextTestRunner ( verbosity = 2 ) . run ( suite ) releaseId = 1 testSetId = - 1 spiraTestExtension = spiratestextension . SpiraTestExtension () spiraTestExtension . projectId = 1 spiraTestExtension . server = \"localhost\" spiraTestExtension . port = 80 spiraTestExtension . path = \"SpiraTest\" spiraTestExtension . userName = \"fredbloggs\" spiraTestExtension . password = \"fredbloggs\" spiraTestExtension . recordResults ( TestSeleniumSample , testResult , releaseId , testSetId , \"Selenium\" ) The details of the sample itself are described in more detail on the Selenium website, and you can see that we have added the SpiraTest specific test case suffixes and reporting code into the test methods to indicate that they need to report back to SpiraTest. However there is one change that has been made to the spiraTestExtension.recordResults method called at the end of the test case. An extra string parameter has been specified that contains \"Selenium\". This tells the SpiraTest PyUnit extension to report the results back as being generated by Selenium rather than PyUnit.","title":"Using the Python Driver"},{"location":"Unit-Testing-Integration/Integrating-with-TestNG/","text":"Integrating with TestNG Installing the TestNG Listener This section outlines how to install the SpiraTest Listener for TestNG onto a workstation so that you can then run automated TestNG unit tests against a Java application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v3.0 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v3.0 before trying to use this listener. You will also need to have at least version 1.0 of TestNG running under JDK 1.5 or later, since earlier versions do not have support for annotations and custom listeners. If you are using an earlier version, please visit www.testng.org to obtain the latest version. To obtain the latest version of the TestNG listener, you simply need to log-in as a project-level administrator to SpiraTest, go to the Administration home page and download the SpiraTest TestNG Listener compressed archive (.zip) from the section that lists downloads and add-ons. This process is described in the SpiraTest Administration Guide in more detail. The TestNG listener is provided as a compressed zipfile that includes both the binaries (packaged as a JAR-file) and the source code (stored in a folder structure that mirrors the Java classpath). The JAR-file binary was compiled for use on a Windows x86 platform, other platforms (e.g. Linux) will require you to compile the Java source files into the appropriate Java classfiles before using the extension. The rest of this section will assume that you are using the pre-compiled JAR-file. Once you have downloaded the Zip archive, you need to uncompress it into a folder of your choice on your local system. Assuming that you uncompressed it to the C:\\Program Files\\SpiraTestListener folder, you should have the following folder structure created: C:\\Program Files\\SpiraTestListener C:\\Program Files\\SpiraTestListener\\com C:\\Program Files\\SpiraTestListener\\com\\inflectra C:\\Program Files\\SpiraTestListener\\com\\inflectra\\spiratest C:\\Program Files\\SpiraTestListener\\com\\inflectra\\spiratest\\addons C:\\Program Files\\SpiraTestListener\\com\\inflectra\\spiratest\\addons\\testnglistener C:\\Program Files\\SpiraTestListener\\Extension\\com\\inflectra\\spiratest\\addons\\testnglistener\\samples The JAR-file is located in the root folder, the source-code for the extension can be found in the \"testnglistener\" subfolder, and the sample test fixture can be found in the \"samples\" subfolder. Now to use the listener within your test cases, you need to first make sure that the JAR-file is added to the Java classpath. The method for doing this is dependent on the platform you're using, so please refer to FAQ on www.testngorg for details on the appropriate method for your platform. As an example, on a Windows platform, the JAR-file would be added to the classpath by typing the following: set CLASSPATH=%CLASSPATH%; C:\\Program Files\\SpiraTestListener\\TestNGListener.jar Once you have completed this step, you are now ready to begin using your TestNG test fixtures with SpiraTest. Using TestNG with SpiraTest The typical code structure for a TestNG test fixture coded in Java is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 package com.inflectra.spiratest.addons.testnglistener.samples ; import org.testng.annotations.* ; import static org.testng.AssertJUnit.* ; import java.util.* ; /** * Some simple tests using the ability to return results back to SpiraTest * * @author Inflectra Corporation * @version 2.3.0 * */ @Test ( groups = { \"unittest\" }) public class SimpleTest { protected int fValue1 ; protected int fValue2 ; /** * Sets up the unit test */ @BeforeClass public void setUp () { fValue1 = 2 ; fValue2 = 3 ; } /** * Tests the addition of the two values */ @Test ( groups = { \"unittest\" }) public void testAdd () { double result = fValue1 + fValue2 ; // forced failure result == 5 assertTrue ( result == 6 ); } /** * Tests division by zero */ @Test ( groups = { \"unittest\" }) public void testDivideByZero () { int zero = 0 ; int result = 8 / zero ; result ++ ; // avoid warning for not using result } /** * Tests two equal values */ @Test ( groups = { \"unittest\" }) public void testEquals () { assertEquals ( 12 , 12 ); assertEquals ( 12L , 12L ); assertEquals ( new Long ( 12 ), new Long ( 12 )); assertEquals ( \"Size\" , 12 , 13 ); assertEquals ( \"Capacity\" , 12.0 , 11.99 , 0.0 ); } /** * Tests success */ @Test ( groups = { \"unittest\" }) public void testSuccess () { //Successful test assertEquals ( 12 , 12 ); } } The Java class is marked as a TestNG test fixture by applying the @Test attribute to the class definition, and the @Test attribute to each of the test assertion methods individually -- highlighted in yellow above. In addition, special setup methods are marked with annotations such as @BeforeClass. When you open up the class in a TestNG runner or execute from the command line it loads all the test classes and executes all the methods marked with @Test in turn. Each of the Assert statements is used to test the state of the application after executing some sample code that calls the functionality being tested. If the condition in the assertion is true, then execution of the test continues, if it is false, then a failure is logged and TestNG moves on to the next test method. So, to use SpiraTest with TestNG, each of the test cases written for execution by TestNG needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, the changes that need to be made to the TestNG test fixture for SpiraTest to record the TestNG test run are illustrated below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 package com.inflectra.spiratest.addons.testnglistener.samples ; import org.testng.annotations.* ; import static org.testng.AssertJUnit.* ; import com.inflectra.spiratest.addons.testnglistener.* ; import java.util.* ; /** * Some simple tests using the ability to return results back to SpiraTest * * @author Inflectra Corporation * @version 2.3.0 * */ @SpiraTestConfiguration ( url = \"http://localhost/SpiraTest\" , login = \"fredbloggs\" , password = \"fredbloggs\" , projectId = 1 , releaseId = 1 , testSetId ) @Test ( groups = { \"unittest\" }) public class SimpleTest { protected int fValue1 ; protected int fValue2 ; /** * Sets up the unit test */ @BeforeClass public void setUp () { fValue1 = 2 ; fValue2 = 3 ; } /** * Tests the addition of the two values */ @Test ( groups = { \"unittest\" }) @SpiraTestCase ( testCaseId = 5 ) public void testAdd () { double result = fValue1 + fValue2 ; // forced failure result == 5 assertTrue ( result == 6 ); } /** * Tests division by zero */ @Test ( groups = { \"unittest\" }) @SpiraTestCase ( testCaseId = 5 ) public void testDivideByZero () { int zero = 0 ; int result = 8 / zero ; result ++ ; // avoid warning for not using result } /** * Tests two equal values */ @Test ( groups = { \"unittest\" }) @SpiraTestCase ( testCaseId = 6 ) public void testEquals () { assertEquals ( 12 , 12 ); assertEquals ( 12L , 12L ); assertEquals ( new Long ( 12 ), new Long ( 12 )); assertEquals ( \"Size\" , 12 , 13 ); assertEquals ( \"Capacity\" , 12.0 , 11.99 , 0.0 ); } /** * Tests success */ @Test ( groups = { \"unittest\" }) @SpiraTestCase ( testCaseId = 6 ) public void testSuccess () { //Successful test assertEquals ( 12 , 12 ); } } The overall class is marked with a new @SpiraTestConfiguration attribute that contains the following pieces of information needed to access the SpiraTest test repository: URL - The URL to the instance of SpiraTest being accessed. This needs to start with http:// or https:// Login - A valid username for the instance of SpiraTest. Password - A valid password for the instance of SpiraTest. Project Id - The ID of the project (this can be found on the project homepage in the \"Project Overview\" section) Release Id (Optional) - The ID of the release to associate the test run with. This can be found on the releases list page (click on the Planning > Releases tab). If you don't want to specify a release, just use the value -1. Test Set Id (Optional) -- The ID of the test set to associate the test run with. This can be found on the test set list page (click on the Testing > Test Sets tab). If you don't want to specify a test set, just use the value -1. If you choose a test set that is associated with a release, then you don't need to explicitly set a release id (i.e. just use -1). However if you do set a release value, it will override the value associated with the test set. In addition, each of the individual test methods needs to be mapped to a specific test case within SpiraTest. This is done by adding a @SpiraTestCase attribute to the test method together with the ID of the corresponding test case in SpiraTest. The Test Case ID can be found on the test cases list page (click the \"Test Cases\" tab). For these attributes to be available in your test fixture, you also need to add a reference to the com.inflectra.spiratest.addons.testnglistener package. This package is bundled within the supplied JAR-file library for Windows machines, and can be compiled from the provided source .java files on other platforms. Now all you need to do is compile your code and then launch TestNG by executing the test fixture through the command line (or through your choice of IDE, e.g. Eclipse) with the SpiraTest listener option specified as a command argument. E.g. for our sample test, you would use the following command: java\\ -classpath \" C:\\Program Files\\Selenium-RC-1.0.0\\selenium-remote-control-1.0.0\\selenium-java-client-driver-1.0.0\\selenium-java-client-driver.jar;C:\\Program Files\\SpiraTestListener\\TestNGListener.jar;C:\\Program Files\\TestNG-5.7\\testng-5.7\\testng-5.7-jdk15.jar\" org.testng.TestNG\\ -listener com.inflectra.spiratest.addons.testnglistener.SpiraTestListener com\\inflectra\\spiratest\\addons\\testnglistener\\samples\\unittests.xml Once the test has run, you can view the test cases in SpiraTest, you should see a TestNG automated test run displayed in the list of executed test runs: Clicking on one of the TestNG test runs will bring up a screen that provides information regarding what TestNG test method failed, what the error was, together with the associated code stack-trace: Congratulations... You are now able to run TestNG automated tests and have the results be recorded within SpiraTest. The sample test fixture SimpleText.java is provided with the installation.","title":"TestNG"},{"location":"Unit-Testing-Integration/Integrating-with-TestNG/#integrating-with-testng","text":"","title":"Integrating with TestNG"},{"location":"Unit-Testing-Integration/Integrating-with-TestNG/#installing-the-testng-listener","text":"This section outlines how to install the SpiraTest Listener for TestNG onto a workstation so that you can then run automated TestNG unit tests against a Java application and have the results be recorded as test runs inside SpiraTest. It assumes that you already have a working installation of SpiraTest v3.0 or later. If you have an earlier version of SpiraTest you will need to upgrade to at least v3.0 before trying to use this listener. You will also need to have at least version 1.0 of TestNG running under JDK 1.5 or later, since earlier versions do not have support for annotations and custom listeners. If you are using an earlier version, please visit www.testng.org to obtain the latest version. To obtain the latest version of the TestNG listener, you simply need to log-in as a project-level administrator to SpiraTest, go to the Administration home page and download the SpiraTest TestNG Listener compressed archive (.zip) from the section that lists downloads and add-ons. This process is described in the SpiraTest Administration Guide in more detail. The TestNG listener is provided as a compressed zipfile that includes both the binaries (packaged as a JAR-file) and the source code (stored in a folder structure that mirrors the Java classpath). The JAR-file binary was compiled for use on a Windows x86 platform, other platforms (e.g. Linux) will require you to compile the Java source files into the appropriate Java classfiles before using the extension. The rest of this section will assume that you are using the pre-compiled JAR-file. Once you have downloaded the Zip archive, you need to uncompress it into a folder of your choice on your local system. Assuming that you uncompressed it to the C:\\Program Files\\SpiraTestListener folder, you should have the following folder structure created: C:\\Program Files\\SpiraTestListener C:\\Program Files\\SpiraTestListener\\com C:\\Program Files\\SpiraTestListener\\com\\inflectra C:\\Program Files\\SpiraTestListener\\com\\inflectra\\spiratest C:\\Program Files\\SpiraTestListener\\com\\inflectra\\spiratest\\addons C:\\Program Files\\SpiraTestListener\\com\\inflectra\\spiratest\\addons\\testnglistener C:\\Program Files\\SpiraTestListener\\Extension\\com\\inflectra\\spiratest\\addons\\testnglistener\\samples The JAR-file is located in the root folder, the source-code for the extension can be found in the \"testnglistener\" subfolder, and the sample test fixture can be found in the \"samples\" subfolder. Now to use the listener within your test cases, you need to first make sure that the JAR-file is added to the Java classpath. The method for doing this is dependent on the platform you're using, so please refer to FAQ on www.testngorg for details on the appropriate method for your platform. As an example, on a Windows platform, the JAR-file would be added to the classpath by typing the following: set CLASSPATH=%CLASSPATH%; C:\\Program Files\\SpiraTestListener\\TestNGListener.jar Once you have completed this step, you are now ready to begin using your TestNG test fixtures with SpiraTest.","title":"Installing the TestNG Listener"},{"location":"Unit-Testing-Integration/Integrating-with-TestNG/#using-testng-with-spiratest","text":"The typical code structure for a TestNG test fixture coded in Java is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 package com.inflectra.spiratest.addons.testnglistener.samples ; import org.testng.annotations.* ; import static org.testng.AssertJUnit.* ; import java.util.* ; /** * Some simple tests using the ability to return results back to SpiraTest * * @author Inflectra Corporation * @version 2.3.0 * */ @Test ( groups = { \"unittest\" }) public class SimpleTest { protected int fValue1 ; protected int fValue2 ; /** * Sets up the unit test */ @BeforeClass public void setUp () { fValue1 = 2 ; fValue2 = 3 ; } /** * Tests the addition of the two values */ @Test ( groups = { \"unittest\" }) public void testAdd () { double result = fValue1 + fValue2 ; // forced failure result == 5 assertTrue ( result == 6 ); } /** * Tests division by zero */ @Test ( groups = { \"unittest\" }) public void testDivideByZero () { int zero = 0 ; int result = 8 / zero ; result ++ ; // avoid warning for not using result } /** * Tests two equal values */ @Test ( groups = { \"unittest\" }) public void testEquals () { assertEquals ( 12 , 12 ); assertEquals ( 12L , 12L ); assertEquals ( new Long ( 12 ), new Long ( 12 )); assertEquals ( \"Size\" , 12 , 13 ); assertEquals ( \"Capacity\" , 12.0 , 11.99 , 0.0 ); } /** * Tests success */ @Test ( groups = { \"unittest\" }) public void testSuccess () { //Successful test assertEquals ( 12 , 12 ); } } The Java class is marked as a TestNG test fixture by applying the @Test attribute to the class definition, and the @Test attribute to each of the test assertion methods individually -- highlighted in yellow above. In addition, special setup methods are marked with annotations such as @BeforeClass. When you open up the class in a TestNG runner or execute from the command line it loads all the test classes and executes all the methods marked with @Test in turn. Each of the Assert statements is used to test the state of the application after executing some sample code that calls the functionality being tested. If the condition in the assertion is true, then execution of the test continues, if it is false, then a failure is logged and TestNG moves on to the next test method. So, to use SpiraTest with TestNG, each of the test cases written for execution by TestNG needs to have a corresponding test case in SpiraTest. These can be either existing test cases that have manual test steps or they can be new test cases designed specifically for automated testing and therefore have no defined test steps. In either case, the changes that need to be made to the TestNG test fixture for SpiraTest to record the TestNG test run are illustrated below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 package com.inflectra.spiratest.addons.testnglistener.samples ; import org.testng.annotations.* ; import static org.testng.AssertJUnit.* ; import com.inflectra.spiratest.addons.testnglistener.* ; import java.util.* ; /** * Some simple tests using the ability to return results back to SpiraTest * * @author Inflectra Corporation * @version 2.3.0 * */ @SpiraTestConfiguration ( url = \"http://localhost/SpiraTest\" , login = \"fredbloggs\" , password = \"fredbloggs\" , projectId = 1 , releaseId = 1 , testSetId ) @Test ( groups = { \"unittest\" }) public class SimpleTest { protected int fValue1 ; protected int fValue2 ; /** * Sets up the unit test */ @BeforeClass public void setUp () { fValue1 = 2 ; fValue2 = 3 ; } /** * Tests the addition of the two values */ @Test ( groups = { \"unittest\" }) @SpiraTestCase ( testCaseId = 5 ) public void testAdd () { double result = fValue1 + fValue2 ; // forced failure result == 5 assertTrue ( result == 6 ); } /** * Tests division by zero */ @Test ( groups = { \"unittest\" }) @SpiraTestCase ( testCaseId = 5 ) public void testDivideByZero () { int zero = 0 ; int result = 8 / zero ; result ++ ; // avoid warning for not using result } /** * Tests two equal values */ @Test ( groups = { \"unittest\" }) @SpiraTestCase ( testCaseId = 6 ) public void testEquals () { assertEquals ( 12 , 12 ); assertEquals ( 12L , 12L ); assertEquals ( new Long ( 12 ), new Long ( 12 )); assertEquals ( \"Size\" , 12 , 13 ); assertEquals ( \"Capacity\" , 12.0 , 11.99 , 0.0 ); } /** * Tests success */ @Test ( groups = { \"unittest\" }) @SpiraTestCase ( testCaseId = 6 ) public void testSuccess () { //Successful test assertEquals ( 12 , 12 ); } } The overall class is marked with a new @SpiraTestConfiguration attribute that contains the following pieces of information needed to access the SpiraTest test repository: URL - The URL to the instance of SpiraTest being accessed. This needs to start with http:// or https:// Login - A valid username for the instance of SpiraTest. Password - A valid password for the instance of SpiraTest. Project Id - The ID of the project (this can be found on the project homepage in the \"Project Overview\" section) Release Id (Optional) - The ID of the release to associate the test run with. This can be found on the releases list page (click on the Planning > Releases tab). If you don't want to specify a release, just use the value -1. Test Set Id (Optional) -- The ID of the test set to associate the test run with. This can be found on the test set list page (click on the Testing > Test Sets tab). If you don't want to specify a test set, just use the value -1. If you choose a test set that is associated with a release, then you don't need to explicitly set a release id (i.e. just use -1). However if you do set a release value, it will override the value associated with the test set. In addition, each of the individual test methods needs to be mapped to a specific test case within SpiraTest. This is done by adding a @SpiraTestCase attribute to the test method together with the ID of the corresponding test case in SpiraTest. The Test Case ID can be found on the test cases list page (click the \"Test Cases\" tab). For these attributes to be available in your test fixture, you also need to add a reference to the com.inflectra.spiratest.addons.testnglistener package. This package is bundled within the supplied JAR-file library for Windows machines, and can be compiled from the provided source .java files on other platforms. Now all you need to do is compile your code and then launch TestNG by executing the test fixture through the command line (or through your choice of IDE, e.g. Eclipse) with the SpiraTest listener option specified as a command argument. E.g. for our sample test, you would use the following command: java\\ -classpath \" C:\\Program Files\\Selenium-RC-1.0.0\\selenium-remote-control-1.0.0\\selenium-java-client-driver-1.0.0\\selenium-java-client-driver.jar;C:\\Program Files\\SpiraTestListener\\TestNGListener.jar;C:\\Program Files\\TestNG-5.7\\testng-5.7\\testng-5.7-jdk15.jar\" org.testng.TestNG\\ -listener com.inflectra.spiratest.addons.testnglistener.SpiraTestListener com\\inflectra\\spiratest\\addons\\testnglistener\\samples\\unittests.xml Once the test has run, you can view the test cases in SpiraTest, you should see a TestNG automated test run displayed in the list of executed test runs: Clicking on one of the TestNG test runs will bring up a screen that provides information regarding what TestNG test method failed, what the error was, together with the associated code stack-trace: Congratulations... You are now able to run TestNG automated tests and have the results be recorded within SpiraTest. The sample test fixture SimpleText.java is provided with the installation.","title":"Using TestNG with SpiraTest"},{"location":"Version-Control-Integration/Integrating-with-CVS/","text":"Integrating with CVS The Concurrent Versions System (CVS) is a Software Configuration Management (SCM) system that enables users to work on code simultaneously while preserving previous versions by avoiding collisions in code edits. This plug-in will allow users of SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) to be able to browse a CVS repository and view revisions linked to SpiraTeam artifacts. The plug-in will download a working-copy of the CVS repository onto the SpiraTeam server and use that for displaying the list of files/folders. The list of revisions will be queries dynamically from the CVS repository on an as-needed basis. The rest of this section outlines how to install and use the plug-in with SpiraTeam. Note: The plug-in will allow users to download and view different revisions of files and view revision logs, but no changes to the repository are allowed through the plug-in. Installing the CVS Plug-In To install the CVS Version Control plug-in, follow these steps: Copy the following files from the plug-in zip-archive into the \"VersionControl\" sub-folder of the SpiraTeam installation: CvsProvider.dll DocsVision.Remoting.dll ICSharpCode.SharpCvsLib.dll ICSharpCode.SharpZipLib.dll log4net.dll Log in as the Administrator and go into SpiraTeam main Administration page and click on the \"Version Control\" link under System . Click the \"Add\" button to enter the Plug-in details page. The fields required are as follows: Name : The name must be \"CvsProvider\". Description : The description is for your use only, and does not affect operation of the plug-in. Active : If checked, the plug-in is active and able to be used for any project. Connection Info : This field holds the root of the repository for any project accessing the plug-in, unless overridden in the Project Settings. Please use the following format: <cvs repository url>:/cvsroot/<repository path> For example: sharpcvslib.cvs.sourceforge.net:/cvsroot/sharpcvslib Login / Password : The user id and the password of the user to use while accessing and retrieving information from the CVS server. If you are accessing a public repository anonymously, just use \" anonymous \" for both username and password and it will be handled correctly. Custom 01 -- This must contain the name of the connection protocol being used to access the CVS server. The following protocols are supported: pserver - the first access protocol according to the client-server scheme, the most simple and the fastest one. Its imperfection - it transfers all the data unsecured. If you need to secure codes and user passwords, do not use this protocol in public nets. ext or ssh - access protocol using SSH (Secure Shell). It is used for accessing UNIX servers and it supports all data encodings. sspi - access protocol for Windows server with data encoding support. Custom 02 -- This must contain the name of the module you wish to access in the CVS repository. When finished, click the \"Insert\" button and you will be taken back to the Version Control integration list page, with CvsProvider listed as an available plug-in. Verify that you are in the correct project using the drop-down at top, and click on the \"Project Settings\" link for the CvsProvider. You will get a screen listing all the same configuration settings: Be sure to change the Active field to Yes, or the repository will not be available for the current project. Any other settings entered on this page will override - and have the same use as - the general settings that you created above. You would use these settings if you will have more than one project access different code repositories. Initial setup is complete, click on the \"Source Code\" menu under the Tracking tab to navigate and browse the source code repository. Using CVS with SpiraTeam While being able to browse the source code repository can be useful in itself, the real strength comes from linking artifacts in SpiraTeam - including Incidents, Requirements, and Tasks - to revisions checked into the software repository. Viewing the Repository Tree View the source code tree by selecting the \"Source Code\" link under the Tracking tab. You will get a screen similar to: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. Note that this view will always show the current (HEAD) revision of the repository. The file view will display the filename, the current revision number of the file and the date of the last commit. You can filter and sort on any of the columns, as well. Viewing File Details To view the file details, click on a file in the right-hand side of the repository. The file details page displays the details on the selected revision. By default, it will be the HEAD revision, unless you clicked to view the file details from a revision. By clicking on the file name, you can download the specified revision of the file to your local machine. This does not do an CVS checkout; you are merely downloading the file to your local machine. Underneath the file details is a list of all the revisions that this file belongs in, or was committed to, who performed the commit, and the log message for the commit. Throughout SpiraTeam, revisions are indicated by the icon. Revision Details By clicking on a revision in SpiraTeam, you will be taken to the revision details page. The revision details screen shows the log for the Commit, the commit date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this commit, with their full path, size, latest revision and date of edit. The Associations tab shows any artifact (Incident, Requirement, Test Case, Test Set) that the log message references. See Linking Artifacts for information on how to link a revision with a CVS Commit: Linking Artifacts Linking an artifact is quite simple. To maintain the readability of CVS commit messages, we adopted a square bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail. Troubleshooting While integration with CVS is rather complex, as a user you will only receive a couple of errors that will prevent the integration from working: When you first load the list of folders and files for a repository it may take several minutes to load as it's downloading the entire repository from the CVS server to the SpiraTeam server. This delay will not occur on subsequent views of the page. SpiraTeam will not display the login page, and there is an error (either on the page or in the Application Event Log) that says \"Could not load file or assembly.\". If this error occurs, it is most likely that the CvsProvider.dll or some of its dependent assemblies were not correctly placed in the VersionControl folder of the SpiraTeam installation. SpiraTeam reports that the login information is incorrect. In this case, double check the Version Control settings, both for the Project (which overrides the general settings) and the general settings. Project settings will over-ride the general settings. Be sure to use a user that has access to all nodes in the tree starting from the root repository location. If you are taken back to the repository screen and given a message saying that the requested file was deleted from the system, this means that an attempt was made to view details on a file that is no longer part of the HEAD revision. This can happen when a file is deleted or renamed, and this is a normal condition in the code repository, not necessarily an error with CVS or SpiraTeam. Data Purging Since the integration with CVS requires that a working copy of the CVS repository be stored on the SpiraTeam server, you may decide at some point to unlink a disused CVS repository from SpiraTeam to save disk-space. However unlinking the repository through the SpiraTeam web interface will not remove the working copy of the repository from the server. To permanently remove a repository from the SpiraTeam server, you need to locate the following path: (Windows XP, 2003) - C:\\Documents and Settings\\All Users\\Application Data (Windows 2008, 7, Vista) -- C:\\ProgramData If you look inside this folder, you will see a subfolder called \"Inflectra\", and under that will be a subfolder called \"CvsProvider\". If you open up this subfolder, you will see a list of all the CVS modules that have been accessed through SpiraTeam. To purge a module, just select it and choose the Delete Folder option in Windows.","title":"CVS"},{"location":"Version-Control-Integration/Integrating-with-CVS/#integrating-with-cvs","text":"The Concurrent Versions System (CVS) is a Software Configuration Management (SCM) system that enables users to work on code simultaneously while preserving previous versions by avoiding collisions in code edits. This plug-in will allow users of SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) to be able to browse a CVS repository and view revisions linked to SpiraTeam artifacts. The plug-in will download a working-copy of the CVS repository onto the SpiraTeam server and use that for displaying the list of files/folders. The list of revisions will be queries dynamically from the CVS repository on an as-needed basis. The rest of this section outlines how to install and use the plug-in with SpiraTeam. Note: The plug-in will allow users to download and view different revisions of files and view revision logs, but no changes to the repository are allowed through the plug-in.","title":"Integrating with CVS"},{"location":"Version-Control-Integration/Integrating-with-CVS/#installing-the-cvs-plug-in-to-install-the-cvs-version-control-plug-in-follow-these-steps","text":"","title":"Installing the CVS Plug-In To install the CVS Version Control plug-in, follow these steps:"},{"location":"Version-Control-Integration/Integrating-with-CVS/#copy-the-following-files-from-the-plug-in-zip-archive-into-the-versioncontrol-sub-folder-of-the-spirateam-installation","text":"CvsProvider.dll DocsVision.Remoting.dll ICSharpCode.SharpCvsLib.dll ICSharpCode.SharpZipLib.dll log4net.dll Log in as the Administrator and go into SpiraTeam main Administration page and click on the \"Version Control\" link under System . Click the \"Add\" button to enter the Plug-in details page. The fields required are as follows: Name : The name must be \"CvsProvider\". Description : The description is for your use only, and does not affect operation of the plug-in. Active : If checked, the plug-in is active and able to be used for any project. Connection Info : This field holds the root of the repository for any project accessing the plug-in, unless overridden in the Project Settings. Please use the following format: <cvs repository url>:/cvsroot/<repository path> For example: sharpcvslib.cvs.sourceforge.net:/cvsroot/sharpcvslib Login / Password : The user id and the password of the user to use while accessing and retrieving information from the CVS server. If you are accessing a public repository anonymously, just use \" anonymous \" for both username and password and it will be handled correctly. Custom 01 -- This must contain the name of the connection protocol being used to access the CVS server. The following protocols are supported: pserver - the first access protocol according to the client-server scheme, the most simple and the fastest one. Its imperfection - it transfers all the data unsecured. If you need to secure codes and user passwords, do not use this protocol in public nets. ext or ssh - access protocol using SSH (Secure Shell). It is used for accessing UNIX servers and it supports all data encodings. sspi - access protocol for Windows server with data encoding support. Custom 02 -- This must contain the name of the module you wish to access in the CVS repository. When finished, click the \"Insert\" button and you will be taken back to the Version Control integration list page, with CvsProvider listed as an available plug-in. Verify that you are in the correct project using the drop-down at top, and click on the \"Project Settings\" link for the CvsProvider. You will get a screen listing all the same configuration settings: Be sure to change the Active field to Yes, or the repository will not be available for the current project. Any other settings entered on this page will override - and have the same use as - the general settings that you created above. You would use these settings if you will have more than one project access different code repositories. Initial setup is complete, click on the \"Source Code\" menu under the Tracking tab to navigate and browse the source code repository.","title":"Copy the following files from the plug-in zip-archive into the \"VersionControl\" sub-folder of the SpiraTeam installation:"},{"location":"Version-Control-Integration/Integrating-with-CVS/#using-cvs-with-spirateam","text":"While being able to browse the source code repository can be useful in itself, the real strength comes from linking artifacts in SpiraTeam - including Incidents, Requirements, and Tasks - to revisions checked into the software repository.","title":"Using CVS with SpiraTeam"},{"location":"Version-Control-Integration/Integrating-with-CVS/#viewing-the-repository-tree","text":"View the source code tree by selecting the \"Source Code\" link under the Tracking tab. You will get a screen similar to: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. Note that this view will always show the current (HEAD) revision of the repository. The file view will display the filename, the current revision number of the file and the date of the last commit. You can filter and sort on any of the columns, as well.","title":"Viewing the Repository Tree"},{"location":"Version-Control-Integration/Integrating-with-CVS/#viewing-file-details","text":"To view the file details, click on a file in the right-hand side of the repository. The file details page displays the details on the selected revision. By default, it will be the HEAD revision, unless you clicked to view the file details from a revision. By clicking on the file name, you can download the specified revision of the file to your local machine. This does not do an CVS checkout; you are merely downloading the file to your local machine. Underneath the file details is a list of all the revisions that this file belongs in, or was committed to, who performed the commit, and the log message for the commit. Throughout SpiraTeam, revisions are indicated by the icon.","title":"Viewing File Details"},{"location":"Version-Control-Integration/Integrating-with-CVS/#revision-details","text":"By clicking on a revision in SpiraTeam, you will be taken to the revision details page. The revision details screen shows the log for the Commit, the commit date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this commit, with their full path, size, latest revision and date of edit. The Associations tab shows any artifact (Incident, Requirement, Test Case, Test Set) that the log message references. See Linking Artifacts for information on how to link a revision with a CVS Commit:","title":"Revision Details"},{"location":"Version-Control-Integration/Integrating-with-CVS/#linking-artifacts","text":"Linking an artifact is quite simple. To maintain the readability of CVS commit messages, we adopted a square bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail.","title":"Linking Artifacts"},{"location":"Version-Control-Integration/Integrating-with-CVS/#troubleshooting","text":"While integration with CVS is rather complex, as a user you will only receive a couple of errors that will prevent the integration from working: When you first load the list of folders and files for a repository it may take several minutes to load as it's downloading the entire repository from the CVS server to the SpiraTeam server. This delay will not occur on subsequent views of the page. SpiraTeam will not display the login page, and there is an error (either on the page or in the Application Event Log) that says \"Could not load file or assembly.\". If this error occurs, it is most likely that the CvsProvider.dll or some of its dependent assemblies were not correctly placed in the VersionControl folder of the SpiraTeam installation. SpiraTeam reports that the login information is incorrect. In this case, double check the Version Control settings, both for the Project (which overrides the general settings) and the general settings. Project settings will over-ride the general settings. Be sure to use a user that has access to all nodes in the tree starting from the root repository location. If you are taken back to the repository screen and given a message saying that the requested file was deleted from the system, this means that an attempt was made to view details on a file that is no longer part of the HEAD revision. This can happen when a file is deleted or renamed, and this is a normal condition in the code repository, not necessarily an error with CVS or SpiraTeam.","title":"Troubleshooting"},{"location":"Version-Control-Integration/Integrating-with-CVS/#data-purging","text":"Since the integration with CVS requires that a working copy of the CVS repository be stored on the SpiraTeam server, you may decide at some point to unlink a disused CVS repository from SpiraTeam to save disk-space. However unlinking the repository through the SpiraTeam web interface will not remove the working copy of the repository from the server. To permanently remove a repository from the SpiraTeam server, you need to locate the following path: (Windows XP, 2003) - C:\\Documents and Settings\\All Users\\Application Data (Windows 2008, 7, Vista) -- C:\\ProgramData If you look inside this folder, you will see a subfolder called \"Inflectra\", and under that will be a subfolder called \"CvsProvider\". If you open up this subfolder, you will see a list of all the CVS modules that have been accessed through SpiraTeam. To purge a module, just select it and choose the Delete Folder option in Windows.","title":"Data Purging"},{"location":"Version-Control-Integration/Integrating-with-Git/","text":"Integrating with Git Git is a Distributed Version Control System (DVCS) system that keeps track of software revisions and allows many developers to work on a given project without necessarily being connected to a common network since it doesn't rely on a central repository, but instead distributes copies of the entire source code repository to each user's workstation. The SpiraTeam plug-in for Git allows users of SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) to be able to browse a Git repository and view revisions linked to SpiraTeam artifacts. The plug-in will clone a read-only \"bare\" (i.e. no working folder) copy of the Git repository onto the SpiraTeam server and use that for displaying the list of branches/files/folders/revisions. The plug-in also performs 'pull' requests from the specified remote repository to ensure that the local bare repository remains up to date. The rest of this section outlines how to install and use the plug-in with SpiraTeam. The current version of the Git plugin requires SpiraPlan or SpiraTeam v4.2.0.2 or later. Note: The plug-in will allow users to download and view different revisions of files and view revision logs, but no changes to the repository are allowed through the plug-in. Installing the Git Plug-In To install the Git Version Control plug-in, follow these steps: Copy the following files from the plug-in zip-archive into the \"VersionControl\" sub-folder of the SpiraTeam installation: GitProvider.dll Inflectra.Global.dll LibGit2Sharp.dll If your server operating system is 64-bit, then copy \" git2.dll \" from the \" x64 \" directory of the downloaded plug-in zip file into the \"VersionControl\" sub-folder of the SpiraTeam installation. Note: Do not create an x64 folder under VersionControl, make sure the file lives in the VersionControl folder itself. If your server operating system is 32-bit, then copy \" git2.dll \" from the \" x32 \" directory of the downloaded plug-in zip file into the \"VersionControl\" sub-folder of the SpiraTeam installation. Note: Do not create an x32 folder under VersionControl, make sure the file lives in the VersionControl folder itself. Log in as the Administrator and go into SpiraTeam main Administration page and click on the \"Version Control\" link under System . Click the \"Add\" button to enter the Plug-in details page. The fields required are as follows: Name : The name must be \"GitProvider\". Description : The description is for your use only, and does not affect operation of the plug-in. Active : If checked, the plug-in is active and able to be used for any project. Connection Info : This field holds the clone URL of the repository for any project accessing the plug-in, unless overridden in the Project Settings: For example: git://github.com/henon/GitSharp.git http://github.com/user/repo.git Login / Password : The user id and the password of the user to use while accessing and retrieving information from the remote Git repository. If you are accessing a public repository anonymously, just use \" anonymous \" for both username and password and it will be handled correctly. Custom 01 -- By default, SpiraTeam will store a copy of the Git working directory in the C:\\ProgramData\\Inflectra\\Spira\\GitProvider\\URL folder (where URL is the Git connection URL). If you would like to use an override location for the Git repository, you should specify it in this setting (e.g. C:\\Git\\Repositories) Custom 02 -- Custom 05 -- Not used by this plugin. When finished, click the \"Insert\" button and you will be taken back to the Version Control integration list page, with GitProvider listed as an available plug-in. Verify that you are in the correct project using the drop-down at top, and click on the \"Project Settings\" link for the GitProvider. You will get a screen listing all the same configuration settings: Be sure to change the Active field to Yes, or the repository will not be available for the current project. Any other settings entered on this page will override - and have the same use as - the general settings that you created above. You would use these settings if you will have more than one project access different code repositories. Initial setup is complete, click on the \"Source Code\" menu under the Tracking tab to navigate and browse the source code repository. Using Git with SpiraTeam While being able to browse the source code repository can be useful in itself, the real strength comes from linking artifacts in SpiraTeam - including Incidents, Requirements, and Tasks - to revisions checked into the software repository. Viewing the Repository Tree View the source code tree by selecting the \"Source Code\" link under the Tracking tab. You will get a screen similar to: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. The file view will display the filename, the current revision number of the file and the date of the last commit. You can filter and sort on any of the columns, as well. The page will display the folders and files for the currently selected branch (in the example above \"master\"), you can change the current branch at any time by selecting it from the dropdown menu: Viewing File Details To view the file details, click on a file in the right-hand side of the repository. The file details page displays the details on the selected revision. By default, it will be the latest revision in the current branch, unless you clicked to view the file details from a revision. By clicking on the file name, you can download the specified revision of the file to your local machine. This does not do a Git clone or pull; you are merely downloading the file to your local machine. Underneath the file details are tabs that show a preview of the file (with syntax highlighting), a list of all the revisions that this file belongs in, or was committed to, who performed the commit, and the log message for the commit, and a tab that shows any artifact associations. Throughout SpiraTeam, revisions are indicated by the icon: Revision Details By clicking on a revision in SpiraTeam, you will be taken to the revision details page. The revision details screen shows the log for the commit, the commit date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this commit, with their full path, size, latest revision and date of edit. The Associations tab shows any artifact (Incident, Requirement, Test Case, Test Set) that the log message references. See Linking Artifacts for information on how to link a revision with a Git commit: Linking Artifacts Linking an artifact is quite simple. To maintain the readability of Git commit messages, we adopted a square bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail. If you forget to add the association during the commit, you can use the 'Add Association' option within SpiraTeam to add the association after the fact. Troubleshooting While integration with Git is sophisticated behind the scenes, as a user you will only receive a couple of errors that will prevent the integration from working: When you first load the list of folders and files for a repository it may take several minutes to load as it's cloning the entire 'bare' repository from the remote Git server to the SpiraTeam server. This delay will not occur on subsequent views of the page. SpiraTeam will not display the login page, and there is an error (either on the page or in the Application Event Log) that says \"Could not load file or assembly.\". If this error occurs, it is most likely that the GitProvider.dll or some of its dependent assemblies were not correctly placed in the VersionControl folder of the SpiraTeam installation. SpiraTeam reports that the login information is incorrect. In this case, double check the Version Control settings, both for the Project (which overrides the general settings) and the general settings. Project settings will over-ride the general settings. Be sure to use a user that has access to all nodes in the tree starting from the root repository location. If you are taken back to the repository screen and given a message saying that the requested file was deleted from the system, this means that an attempt was made to view details on a file that is no longer part of the current branch. This can happen when a file is deleted or renamed, and this is a normal condition in the code repository, not necessarily an error with Git or SpiraTeam. Data Purging Since the integration with Git requires that a bare copy of the Git repository be stored on the SpiraTeam server, you may decide at some point to unlink a disused Git repository from SpiraTeam to save disk-space. However unlinking the repository through the SpiraTeam web interface will not remove the bare copy of the repository from the server. To permanently remove a repository from the SpiraTeam server, you need to locate the following path: (Windows XP, 2003) - C:\\Documents and Settings\\All Users\\Application Data\\Inflectra (Windows 2008, 7, Vista) -- C:\\ProgramData\\Inflectra If you look inside this folder, you will see a subfolder called \"Spira\", and under that will be a subfolder called \"GitProvider\". If you open up this subfolder, you will see a list of all the Git repositories that have been accessed through SpiraTeam. To purge a module, just select it and choose the Delete Folder option in Windows.","title":"Git"},{"location":"Version-Control-Integration/Integrating-with-Git/#integrating-with-git","text":"Git is a Distributed Version Control System (DVCS) system that keeps track of software revisions and allows many developers to work on a given project without necessarily being connected to a common network since it doesn't rely on a central repository, but instead distributes copies of the entire source code repository to each user's workstation. The SpiraTeam plug-in for Git allows users of SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) to be able to browse a Git repository and view revisions linked to SpiraTeam artifacts. The plug-in will clone a read-only \"bare\" (i.e. no working folder) copy of the Git repository onto the SpiraTeam server and use that for displaying the list of branches/files/folders/revisions. The plug-in also performs 'pull' requests from the specified remote repository to ensure that the local bare repository remains up to date. The rest of this section outlines how to install and use the plug-in with SpiraTeam. The current version of the Git plugin requires SpiraPlan or SpiraTeam v4.2.0.2 or later. Note: The plug-in will allow users to download and view different revisions of files and view revision logs, but no changes to the repository are allowed through the plug-in.","title":"Integrating with Git"},{"location":"Version-Control-Integration/Integrating-with-Git/#installing-the-git-plug-in-to-install-the-git-version-control-plug-in-follow-these-steps","text":"Copy the following files from the plug-in zip-archive into the \"VersionControl\" sub-folder of the SpiraTeam installation: GitProvider.dll Inflectra.Global.dll LibGit2Sharp.dll If your server operating system is 64-bit, then copy \" git2.dll \" from the \" x64 \" directory of the downloaded plug-in zip file into the \"VersionControl\" sub-folder of the SpiraTeam installation. Note: Do not create an x64 folder under VersionControl, make sure the file lives in the VersionControl folder itself. If your server operating system is 32-bit, then copy \" git2.dll \" from the \" x32 \" directory of the downloaded plug-in zip file into the \"VersionControl\" sub-folder of the SpiraTeam installation. Note: Do not create an x32 folder under VersionControl, make sure the file lives in the VersionControl folder itself. Log in as the Administrator and go into SpiraTeam main Administration page and click on the \"Version Control\" link under System . Click the \"Add\" button to enter the Plug-in details page. The fields required are as follows: Name : The name must be \"GitProvider\". Description : The description is for your use only, and does not affect operation of the plug-in. Active : If checked, the plug-in is active and able to be used for any project. Connection Info : This field holds the clone URL of the repository for any project accessing the plug-in, unless overridden in the Project Settings: For example: git://github.com/henon/GitSharp.git http://github.com/user/repo.git Login / Password : The user id and the password of the user to use while accessing and retrieving information from the remote Git repository. If you are accessing a public repository anonymously, just use \" anonymous \" for both username and password and it will be handled correctly. Custom 01 -- By default, SpiraTeam will store a copy of the Git working directory in the C:\\ProgramData\\Inflectra\\Spira\\GitProvider\\URL folder (where URL is the Git connection URL). If you would like to use an override location for the Git repository, you should specify it in this setting (e.g. C:\\Git\\Repositories) Custom 02 -- Custom 05 -- Not used by this plugin. When finished, click the \"Insert\" button and you will be taken back to the Version Control integration list page, with GitProvider listed as an available plug-in. Verify that you are in the correct project using the drop-down at top, and click on the \"Project Settings\" link for the GitProvider. You will get a screen listing all the same configuration settings: Be sure to change the Active field to Yes, or the repository will not be available for the current project. Any other settings entered on this page will override - and have the same use as - the general settings that you created above. You would use these settings if you will have more than one project access different code repositories. Initial setup is complete, click on the \"Source Code\" menu under the Tracking tab to navigate and browse the source code repository.","title":"Installing the Git Plug-In To install the Git Version Control plug-in, follow these steps:"},{"location":"Version-Control-Integration/Integrating-with-Git/#using-git-with-spirateam","text":"While being able to browse the source code repository can be useful in itself, the real strength comes from linking artifacts in SpiraTeam - including Incidents, Requirements, and Tasks - to revisions checked into the software repository.","title":"Using Git with SpiraTeam"},{"location":"Version-Control-Integration/Integrating-with-Git/#viewing-the-repository-tree","text":"View the source code tree by selecting the \"Source Code\" link under the Tracking tab. You will get a screen similar to: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. The file view will display the filename, the current revision number of the file and the date of the last commit. You can filter and sort on any of the columns, as well. The page will display the folders and files for the currently selected branch (in the example above \"master\"), you can change the current branch at any time by selecting it from the dropdown menu:","title":"Viewing the Repository Tree"},{"location":"Version-Control-Integration/Integrating-with-Git/#viewing-file-details","text":"To view the file details, click on a file in the right-hand side of the repository. The file details page displays the details on the selected revision. By default, it will be the latest revision in the current branch, unless you clicked to view the file details from a revision. By clicking on the file name, you can download the specified revision of the file to your local machine. This does not do a Git clone or pull; you are merely downloading the file to your local machine. Underneath the file details are tabs that show a preview of the file (with syntax highlighting), a list of all the revisions that this file belongs in, or was committed to, who performed the commit, and the log message for the commit, and a tab that shows any artifact associations. Throughout SpiraTeam, revisions are indicated by the icon:","title":"Viewing File Details"},{"location":"Version-Control-Integration/Integrating-with-Git/#revision-details","text":"By clicking on a revision in SpiraTeam, you will be taken to the revision details page. The revision details screen shows the log for the commit, the commit date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this commit, with their full path, size, latest revision and date of edit. The Associations tab shows any artifact (Incident, Requirement, Test Case, Test Set) that the log message references. See Linking Artifacts for information on how to link a revision with a Git commit:","title":"Revision Details"},{"location":"Version-Control-Integration/Integrating-with-Git/#linking-artifacts","text":"Linking an artifact is quite simple. To maintain the readability of Git commit messages, we adopted a square bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail. If you forget to add the association during the commit, you can use the 'Add Association' option within SpiraTeam to add the association after the fact.","title":"Linking Artifacts"},{"location":"Version-Control-Integration/Integrating-with-Git/#troubleshooting","text":"While integration with Git is sophisticated behind the scenes, as a user you will only receive a couple of errors that will prevent the integration from working: When you first load the list of folders and files for a repository it may take several minutes to load as it's cloning the entire 'bare' repository from the remote Git server to the SpiraTeam server. This delay will not occur on subsequent views of the page. SpiraTeam will not display the login page, and there is an error (either on the page or in the Application Event Log) that says \"Could not load file or assembly.\". If this error occurs, it is most likely that the GitProvider.dll or some of its dependent assemblies were not correctly placed in the VersionControl folder of the SpiraTeam installation. SpiraTeam reports that the login information is incorrect. In this case, double check the Version Control settings, both for the Project (which overrides the general settings) and the general settings. Project settings will over-ride the general settings. Be sure to use a user that has access to all nodes in the tree starting from the root repository location. If you are taken back to the repository screen and given a message saying that the requested file was deleted from the system, this means that an attempt was made to view details on a file that is no longer part of the current branch. This can happen when a file is deleted or renamed, and this is a normal condition in the code repository, not necessarily an error with Git or SpiraTeam.","title":"Troubleshooting"},{"location":"Version-Control-Integration/Integrating-with-Git/#data-purging","text":"Since the integration with Git requires that a bare copy of the Git repository be stored on the SpiraTeam server, you may decide at some point to unlink a disused Git repository from SpiraTeam to save disk-space. However unlinking the repository through the SpiraTeam web interface will not remove the bare copy of the repository from the server. To permanently remove a repository from the SpiraTeam server, you need to locate the following path: (Windows XP, 2003) - C:\\Documents and Settings\\All Users\\Application Data\\Inflectra (Windows 2008, 7, Vista) -- C:\\ProgramData\\Inflectra If you look inside this folder, you will see a subfolder called \"Spira\", and under that will be a subfolder called \"GitProvider\". If you open up this subfolder, you will see a list of all the Git repositories that have been accessed through SpiraTeam. To purge a module, just select it and choose the Delete Folder option in Windows.","title":"Data Purging"},{"location":"Version-Control-Integration/Integrating-with-Mercurial/","text":"Integrating with Mercurial Mercurial is a Distributed Version Control System (DVCS) system that keeps track of software revisions and allows many developers to work on a given project without necessarily being connected to a common network since it doesn't rely on a central repository, but instead distributes copies of the entire source code repository to each user's workstation. The SpiraTeam plug-in for Mercurial allows users of SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) to be able to browse a Mercurial repository and view revisions linked to SpiraTeam artifacts. The plug-in will download a read-only working-copy of the Mercurial repository onto the SpiraTeam server and use that for displaying the list of files/folders. The list of revisions will be queried dynamically from this local repository on an as-needed basis. The plug-in also performs 'pull' requests from the specified remote repository to ensure that the local repository remains up to date. The rest of this section outlines how to install and use the plug-in with SpiraTeam. Note: The plug-in will allow users to download and view different revisions of files and view revision logs, but no changes to the repository are allowed through the plug-in. Installing the Mercurial Plug-In To install the Mercurial Version Control plug-in, follow these steps: Copy the following files from the plug-in zip-archive into the \"VersionControl\" sub-folder of the SpiraTeam installation: MercurialProvider.dll Mercurial.Net.dll Log in as the Administrator and go into SpiraTeam main Administration page and click on the \"Version Control\" link under System . Click the \"Add\" button to enter the Plug-in details page. The fields required are as follows: Name : The name must be \"MercurialProvider\". Description : The description is for your use only, and does not affect operation of the plug-in. Active : If checked, the plug-in is active and able to be used for any project. Connection Info : This field holds the clone URL of the repository for any project accessing the plug-in, unless overridden in the Project Settings: For example: https://bitbucket.org/aragost/javahg ssh://example.com/hg/ Login / Password : The user id and the password of the user to use while accessing and retrieving information from the remote Mercurial repository. If you are accessing a public repository anonymously, just use \" anonymous \" for both username and password and it will be handled correctly. Custom 01 -- This needs to contain the path on the SpiraTeam server where the Mercurial executable (Hg.exe) can be found. If left blank, it will attempt to automatically discover Mercurial from the Windows %PATH% environment variable. Custom 02 -- Custom 05 -- Not used by this plugin. When finished, click the \"Insert\" button and you will be taken back to the Version Control integration list page, with MercurialProvider listed as an available plug-in. Verify that you are in the correct project using the drop-down at top, and click on the \"Project Settings\" link for the MercurialProvider. You will get a screen listing all the same configuration settings: Be sure to change the Active field to Yes, or the repository will not be available for the current project. Any other settings entered on this page will override - and have the same use as - the general settings that you created above. You would use these settings if you will have more than one project access different code repositories. Initial setup is complete, click on the \"Source Code\" menu under the Tracking tab to navigate and browse the source code repository. Using Mercurial with SpiraTeam While being able to browse the source code repository can be useful in itself, the real strength comes from linking artifacts in SpiraTeam - including Incidents, Requirements, and Tasks - to revisions checked into the software repository. Viewing the Repository Tree View the source code tree by selecting the \"Source Code\" link under the Tracking tab. You will get a screen similar to: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. Note that this view will always show the current (TIP) branch of the repository. The file view will display the filename, the current revision number of the file and the date of the last commit. You can filter and sort on any of the columns, as well. Viewing File Details To view the file details, click on a file in the right-hand side of the repository. The file details page displays the details on the selected revision. By default, it will be the TIP branch, unless you clicked to view the file details from a revision. By clicking on the file name, you can download the specified revision of the file to your local machine. This does not do a Mercurial clone or pull; you are merely downloading the file to your local machine. Underneath the file details is a list of all the revisions (Mercurial changesets) that this file belongs in, or was committed to, who performed the commit, and the log message for the commit. Throughout SpiraTeam, revisions are indicated by the icon. Revision Details By clicking on a revision in SpiraTeam, you will be taken to the revision details page. The revision details screen shows the log for the changeset, the commit date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this commit, with their full path, size, latest revision and date of edit. The Associations tab shows any artifact (Incident, Requirement, Test Case, Test Set) that the log message references. See Linking Artifacts for information on how to link a revision with a Mercurial changeset: Linking Artifacts Linking an artifact is quite simple. To maintain the readability of Mercurial changeset messages, we adopted a square bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail. Troubleshooting While integration with Mercurial is sophisticated behind the scenes, as a user you will only receive a couple of errors that will prevent the integration from working: When you first load the list of folders and files for a repository it may take several minutes to load as it's cloning the entire repository from the remote Mercurial server to the SpiraTeam server. This delay will not occur on subsequent views of the page. SpiraTeam will not display the login page, and there is an error (either on the page or in the Application Event Log) that says \"Could not load file or assembly.\". If this error occurs, it is most likely that the MercurialProvider.dll or some of its dependent assemblies were not correctly placed in the VersionControl folder of the SpiraTeam installation. SpiraTeam reports that the login information is incorrect. In this case, double check the Version Control settings, both for the Project (which overrides the general settings) and the general settings. Project settings will over-ride the general settings. Be sure to use a user that has access to all nodes in the tree starting from the root repository location. If you are taken back to the repository screen and given a message saying that the requested file was deleted from the system, this means that an attempt was made to view details on a file that is no longer part of the TIP branch. This can happen when a file is deleted or renamed, and this is a normal condition in the code repository, not necessarily an error with Mercurial or SpiraTeam. Data Purging Since the integration with Mercurial requires that a working copy of the Mercurial repository be stored on the SpiraTeam server, you may decide at some point to unlink a disused Mercurial repository from SpiraTeam to save disk-space. However unlinking the repository through the SpiraTeam web interface will not remove the working copy of the repository from the server. To permanently remove a repository from the SpiraTeam server, you need to locate the following path: (Windows XP, 2003) - C:\\Documents and Settings\\All Users\\Application Data (Windows 2008, 7, Vista) -- C:\\ProgramData If you look inside this folder, you will see a subfolder called \"Inflectra\", and under that will be a subfolder called \"MercurialProvider\". If you open up this subfolder, you will see a list of all the Mercurial repositories that have been accessed through SpiraTeam. To purge a module, just select it and choose the Delete Folder option in Windows.","title":"Mercurial"},{"location":"Version-Control-Integration/Integrating-with-Mercurial/#integrating-with-mercurial","text":"Mercurial is a Distributed Version Control System (DVCS) system that keeps track of software revisions and allows many developers to work on a given project without necessarily being connected to a common network since it doesn't rely on a central repository, but instead distributes copies of the entire source code repository to each user's workstation. The SpiraTeam plug-in for Mercurial allows users of SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) to be able to browse a Mercurial repository and view revisions linked to SpiraTeam artifacts. The plug-in will download a read-only working-copy of the Mercurial repository onto the SpiraTeam server and use that for displaying the list of files/folders. The list of revisions will be queried dynamically from this local repository on an as-needed basis. The plug-in also performs 'pull' requests from the specified remote repository to ensure that the local repository remains up to date. The rest of this section outlines how to install and use the plug-in with SpiraTeam. Note: The plug-in will allow users to download and view different revisions of files and view revision logs, but no changes to the repository are allowed through the plug-in.","title":"Integrating with Mercurial"},{"location":"Version-Control-Integration/Integrating-with-Mercurial/#installing-the-mercurial-plug-in-to-install-the-mercurial-version-control-plug-in-follow-these-steps","text":"Copy the following files from the plug-in zip-archive into the \"VersionControl\" sub-folder of the SpiraTeam installation: MercurialProvider.dll Mercurial.Net.dll Log in as the Administrator and go into SpiraTeam main Administration page and click on the \"Version Control\" link under System . Click the \"Add\" button to enter the Plug-in details page. The fields required are as follows: Name : The name must be \"MercurialProvider\". Description : The description is for your use only, and does not affect operation of the plug-in. Active : If checked, the plug-in is active and able to be used for any project. Connection Info : This field holds the clone URL of the repository for any project accessing the plug-in, unless overridden in the Project Settings: For example: https://bitbucket.org/aragost/javahg ssh://example.com/hg/ Login / Password : The user id and the password of the user to use while accessing and retrieving information from the remote Mercurial repository. If you are accessing a public repository anonymously, just use \" anonymous \" for both username and password and it will be handled correctly. Custom 01 -- This needs to contain the path on the SpiraTeam server where the Mercurial executable (Hg.exe) can be found. If left blank, it will attempt to automatically discover Mercurial from the Windows %PATH% environment variable. Custom 02 -- Custom 05 -- Not used by this plugin. When finished, click the \"Insert\" button and you will be taken back to the Version Control integration list page, with MercurialProvider listed as an available plug-in. Verify that you are in the correct project using the drop-down at top, and click on the \"Project Settings\" link for the MercurialProvider. You will get a screen listing all the same configuration settings: Be sure to change the Active field to Yes, or the repository will not be available for the current project. Any other settings entered on this page will override - and have the same use as - the general settings that you created above. You would use these settings if you will have more than one project access different code repositories. Initial setup is complete, click on the \"Source Code\" menu under the Tracking tab to navigate and browse the source code repository.","title":"Installing the Mercurial Plug-In To install the Mercurial Version Control plug-in, follow these steps:"},{"location":"Version-Control-Integration/Integrating-with-Mercurial/#using-mercurial-with-spirateam","text":"While being able to browse the source code repository can be useful in itself, the real strength comes from linking artifacts in SpiraTeam - including Incidents, Requirements, and Tasks - to revisions checked into the software repository.","title":"Using Mercurial with SpiraTeam"},{"location":"Version-Control-Integration/Integrating-with-Mercurial/#viewing-the-repository-tree","text":"View the source code tree by selecting the \"Source Code\" link under the Tracking tab. You will get a screen similar to: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. Note that this view will always show the current (TIP) branch of the repository. The file view will display the filename, the current revision number of the file and the date of the last commit. You can filter and sort on any of the columns, as well.","title":"Viewing the Repository Tree"},{"location":"Version-Control-Integration/Integrating-with-Mercurial/#viewing-file-details","text":"To view the file details, click on a file in the right-hand side of the repository. The file details page displays the details on the selected revision. By default, it will be the TIP branch, unless you clicked to view the file details from a revision. By clicking on the file name, you can download the specified revision of the file to your local machine. This does not do a Mercurial clone or pull; you are merely downloading the file to your local machine. Underneath the file details is a list of all the revisions (Mercurial changesets) that this file belongs in, or was committed to, who performed the commit, and the log message for the commit. Throughout SpiraTeam, revisions are indicated by the icon.","title":"Viewing File Details"},{"location":"Version-Control-Integration/Integrating-with-Mercurial/#revision-details","text":"By clicking on a revision in SpiraTeam, you will be taken to the revision details page. The revision details screen shows the log for the changeset, the commit date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this commit, with their full path, size, latest revision and date of edit. The Associations tab shows any artifact (Incident, Requirement, Test Case, Test Set) that the log message references. See Linking Artifacts for information on how to link a revision with a Mercurial changeset:","title":"Revision Details"},{"location":"Version-Control-Integration/Integrating-with-Mercurial/#linking-artifacts","text":"Linking an artifact is quite simple. To maintain the readability of Mercurial changeset messages, we adopted a square bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail.","title":"Linking Artifacts"},{"location":"Version-Control-Integration/Integrating-with-Mercurial/#troubleshooting","text":"While integration with Mercurial is sophisticated behind the scenes, as a user you will only receive a couple of errors that will prevent the integration from working: When you first load the list of folders and files for a repository it may take several minutes to load as it's cloning the entire repository from the remote Mercurial server to the SpiraTeam server. This delay will not occur on subsequent views of the page. SpiraTeam will not display the login page, and there is an error (either on the page or in the Application Event Log) that says \"Could not load file or assembly.\". If this error occurs, it is most likely that the MercurialProvider.dll or some of its dependent assemblies were not correctly placed in the VersionControl folder of the SpiraTeam installation. SpiraTeam reports that the login information is incorrect. In this case, double check the Version Control settings, both for the Project (which overrides the general settings) and the general settings. Project settings will over-ride the general settings. Be sure to use a user that has access to all nodes in the tree starting from the root repository location. If you are taken back to the repository screen and given a message saying that the requested file was deleted from the system, this means that an attempt was made to view details on a file that is no longer part of the TIP branch. This can happen when a file is deleted or renamed, and this is a normal condition in the code repository, not necessarily an error with Mercurial or SpiraTeam.","title":"Troubleshooting"},{"location":"Version-Control-Integration/Integrating-with-Mercurial/#data-purging","text":"Since the integration with Mercurial requires that a working copy of the Mercurial repository be stored on the SpiraTeam server, you may decide at some point to unlink a disused Mercurial repository from SpiraTeam to save disk-space. However unlinking the repository through the SpiraTeam web interface will not remove the working copy of the repository from the server. To permanently remove a repository from the SpiraTeam server, you need to locate the following path: (Windows XP, 2003) - C:\\Documents and Settings\\All Users\\Application Data (Windows 2008, 7, Vista) -- C:\\ProgramData If you look inside this folder, you will see a subfolder called \"Inflectra\", and under that will be a subfolder called \"MercurialProvider\". If you open up this subfolder, you will see a list of all the Mercurial repositories that have been accessed through SpiraTeam. To purge a module, just select it and choose the Delete Folder option in Windows.","title":"Data Purging"},{"location":"Version-Control-Integration/Integrating-with-Perforce/","text":"Integrating with Perforce Installing the Perforce Plug-In To install the Perforce Version Control plug-in, follow these steps: Copy the following files to the folder named \"VersionControl\" in the SpiraTeam installation folder: Inflectra.Global.dll P4API.dll P4DN.dll PerforceProvider.dll Log in as the Administrator and go into SpiraTeam main Administration page and click on the \"Version Control\" link under System . Click the \"Add\" button to enter the Plug-in details page. The fields required are as follows: Name : The name must be \"PerforceProvider\". Description : The description is for your use only, and does not affect operation of the plug-in. Active : If checked, the plug-in is active and able to be used for any project. Connection Info : This field is the server's DNS or IP with the port to connect to. No depot information or root directory is to be specified here. Do not enter in any protocol, like http:// or ftp://. Login / Password : The user id and the password of the user to use while accessing and retrieving information from the Subversion server. If either field needs to be blank, enter in 'anonymous'. Domain : Not used. Custom01 : The client name is to be entered here. The plugin will attempt to create the client if it does not exist. Unless you have a client pre-defined for the plugin, we recommend using the default, \"PerforceProvider\". Custom02 : The base depot or root directory must be entered here. Other Fields : The other custom fields (Custom03 -- Custom05) are not used by the plug-in and will be ignored. When finished, click the \"Insert\" button and you will be taken back to the Version Control integration list page, with PerforceProvider listed as an available plug-in. Verify that you are in the correct project using the drop-down at top, and click on the \"Project Settings\" link for the PerforceProvider. You will get a screen listing all the same configuration settings: Be sure to change the Active field to Yes, or the repository will not be available for the current project. Any other settings entered on this page will override - and have the same use as - the general settings that you created above. You would use these settings if you will have more than one project access different code repositories. Initial setup is complete, click on the \"Source Code\" menu under the Tracking tab to navigate and browse the source code repository. Using Perforce with SpiraTeam While being able to browse the source code repository can be useful in itself, the real strength comes from linking artifacts in SpiraTeam - including Incidents, Requirements, and Tasks - to revisions checked into the software repository. Viewing the Repository Tree View the source code tree by selecting the \"Source Code\" link under the Tracking tab. You will get a screen similar to: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. Note that this view will always show the current (HEAD) changelist of the depot. The file view will display the filename, the current change number of the file, the author of the last change, and the date of the last change. You can filter and sort on any of the columns, as well. Viewing File Details To view the file details, click on a file in the right-hand side of the screen. The file details page displays the details on the selected file. By default, it will be the HEAD change, unless you clicked to view the file details from a change. By clicking on the file name, you can download the specified change version of the file to your local machine. This does not open the file on the depot; you are merely downloading the file to your local machine. Underneath the file's details is a list of all the changes that this file was changed in, who performed the change, and the log message for the change. Throughout SpiraTeam, changes are indicated by the icon. Change Details By clicking on a change in SpiraTeam, you will be taken to the changelist details page: The revision details screen shows the log for the change, the change date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this change, with their full path and the action that was performed on them for this change. Possible values are Added, Modified, Deleted, or Other. The Associations tab shows any artifact (Incident, Requirement, Test Case, Test Set) that the log message references. See Linking Artifacts for information on how to link a revision with a Perforce change: Linking Artifacts Linking an artifact is quite simple. To maintain the readability of Subversion's change messages, we adopted a bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a change message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail. Troubleshooting While integration with Perforce is rather complex, as a user you will only receive a couple of errors that will prevent the integration from working: SpiraTeam will not display the login page, and there is an error (either on the page or in the Application Event Log) that says \"Could not load file or assembly.\" This simply means that not all of the required DLL libraries are present in the \\VersionControl directory inside of the installation. It could also mean that the IIS Application Pool is not set to allow 32-bit applications. (At this time, there are no 64-bit DLLs available for the Perforce Provider.) SpiraTeam reports that the login information is incorrect. In this case, double check the Version Control settings, both for the Project (which overrides the general settings) and the general settings. Project settings will over-ride the general settings. Be sure to use a user that has access to all nodes in the tree starting from the root repository location. If you are taken back to the repository screen and given a message saying that the requested file was deleted from the system, this means that an attempt was made to view details on a file that is no longer part of the HEAD revision. This can happen when a file is deleted or renamed, and this is a normal condition in the code repository, not necessarily an error with Subversion or SpiraTeam. Any other errors about not being able to load the version control provider will have the error messages logged in the web server's (that hosts SpiraTeam) Application Event Log. When contacting support, be sure to have the event logs ready.","title":"Perforce"},{"location":"Version-Control-Integration/Integrating-with-Perforce/#integrating-with-perforce","text":"","title":"Integrating with Perforce"},{"location":"Version-Control-Integration/Integrating-with-Perforce/#installing-the-perforce-plug-in","text":"To install the Perforce Version Control plug-in, follow these steps: Copy the following files to the folder named \"VersionControl\" in the SpiraTeam installation folder: Inflectra.Global.dll P4API.dll P4DN.dll PerforceProvider.dll Log in as the Administrator and go into SpiraTeam main Administration page and click on the \"Version Control\" link under System . Click the \"Add\" button to enter the Plug-in details page. The fields required are as follows: Name : The name must be \"PerforceProvider\". Description : The description is for your use only, and does not affect operation of the plug-in. Active : If checked, the plug-in is active and able to be used for any project. Connection Info : This field is the server's DNS or IP with the port to connect to. No depot information or root directory is to be specified here. Do not enter in any protocol, like http:// or ftp://. Login / Password : The user id and the password of the user to use while accessing and retrieving information from the Subversion server. If either field needs to be blank, enter in 'anonymous'. Domain : Not used. Custom01 : The client name is to be entered here. The plugin will attempt to create the client if it does not exist. Unless you have a client pre-defined for the plugin, we recommend using the default, \"PerforceProvider\". Custom02 : The base depot or root directory must be entered here. Other Fields : The other custom fields (Custom03 -- Custom05) are not used by the plug-in and will be ignored. When finished, click the \"Insert\" button and you will be taken back to the Version Control integration list page, with PerforceProvider listed as an available plug-in. Verify that you are in the correct project using the drop-down at top, and click on the \"Project Settings\" link for the PerforceProvider. You will get a screen listing all the same configuration settings: Be sure to change the Active field to Yes, or the repository will not be available for the current project. Any other settings entered on this page will override - and have the same use as - the general settings that you created above. You would use these settings if you will have more than one project access different code repositories. Initial setup is complete, click on the \"Source Code\" menu under the Tracking tab to navigate and browse the source code repository.","title":"Installing the Perforce Plug-In"},{"location":"Version-Control-Integration/Integrating-with-Perforce/#using-perforce-with-spirateam","text":"While being able to browse the source code repository can be useful in itself, the real strength comes from linking artifacts in SpiraTeam - including Incidents, Requirements, and Tasks - to revisions checked into the software repository.","title":"Using Perforce with SpiraTeam"},{"location":"Version-Control-Integration/Integrating-with-Perforce/#viewing-the-repository-tree","text":"View the source code tree by selecting the \"Source Code\" link under the Tracking tab. You will get a screen similar to: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. Note that this view will always show the current (HEAD) changelist of the depot. The file view will display the filename, the current change number of the file, the author of the last change, and the date of the last change. You can filter and sort on any of the columns, as well.","title":"Viewing the Repository Tree"},{"location":"Version-Control-Integration/Integrating-with-Perforce/#viewing-file-details","text":"To view the file details, click on a file in the right-hand side of the screen. The file details page displays the details on the selected file. By default, it will be the HEAD change, unless you clicked to view the file details from a change. By clicking on the file name, you can download the specified change version of the file to your local machine. This does not open the file on the depot; you are merely downloading the file to your local machine. Underneath the file's details is a list of all the changes that this file was changed in, who performed the change, and the log message for the change. Throughout SpiraTeam, changes are indicated by the icon.","title":"Viewing File Details"},{"location":"Version-Control-Integration/Integrating-with-Perforce/#change-details","text":"By clicking on a change in SpiraTeam, you will be taken to the changelist details page: The revision details screen shows the log for the change, the change date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this change, with their full path and the action that was performed on them for this change. Possible values are Added, Modified, Deleted, or Other. The Associations tab shows any artifact (Incident, Requirement, Test Case, Test Set) that the log message references. See Linking Artifacts for information on how to link a revision with a Perforce change:","title":"Change Details"},{"location":"Version-Control-Integration/Integrating-with-Perforce/#linking-artifacts","text":"Linking an artifact is quite simple. To maintain the readability of Subversion's change messages, we adopted a bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a change message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail.","title":"Linking Artifacts"},{"location":"Version-Control-Integration/Integrating-with-Perforce/#troubleshooting","text":"While integration with Perforce is rather complex, as a user you will only receive a couple of errors that will prevent the integration from working: SpiraTeam will not display the login page, and there is an error (either on the page or in the Application Event Log) that says \"Could not load file or assembly.\" This simply means that not all of the required DLL libraries are present in the \\VersionControl directory inside of the installation. It could also mean that the IIS Application Pool is not set to allow 32-bit applications. (At this time, there are no 64-bit DLLs available for the Perforce Provider.) SpiraTeam reports that the login information is incorrect. In this case, double check the Version Control settings, both for the Project (which overrides the general settings) and the general settings. Project settings will over-ride the general settings. Be sure to use a user that has access to all nodes in the tree starting from the root repository location. If you are taken back to the repository screen and given a message saying that the requested file was deleted from the system, this means that an attempt was made to view details on a file that is no longer part of the HEAD revision. This can happen when a file is deleted or renamed, and this is a normal condition in the code repository, not necessarily an error with Subversion or SpiraTeam. Any other errors about not being able to load the version control provider will have the error messages logged in the web server's (that hosts SpiraTeam) Application Event Log. When contacting support, be sure to have the event logs ready.","title":"Troubleshooting"},{"location":"Version-Control-Integration/Integrating-with-Subversion/","text":"Integrating with Subversion Subversion (also known as SVN) is a Software Configuration Management (SCM) system, that enables users to work on code simultaneously while preserving previous versions by avoiding collisions in code edits. While users working on the code will usually have a complete copy of the repository on their local systems, this plug-in will access the repository remotely by use of the \" svn:// \" , \" http:// \" and \" https:// \" protocols. (Note that \" svn+ssh:// \" may be supported on a server by server basis.) Due to the methodologies in which IIS handles web requests and runs on the server, any SSH connection certificates that have trust issues will be automatically accepted. Therefore, we recommend using an IP address to connect to the server instead of a DNS name that could be redirected to an unsafe connection. The current version of the Subversion plugin requires SpiraPlan or SpiraTeam v5.4.0.0 or later. Installing the Subversion Plug-In To install the Subversion Version Control plug-in, follow these steps: Copy the following files into place on your Web Server's SpiraTeam installation: Copy the file \"SubversionProvider.dll\" file into the \"VersionControl\" sub-folder of the SpiraTeam installation. If your server operating system is 64-bit, then copy all the files in the \" x64 \" directory of the downloaded plug-in zip file into the \"VersionControl\" sub-folder of the SpiraTeam installation. Note: Do not create an x64 folder under VersionControl, make sure the files live in the VersionControl folder itself. If your server operating system is 32-bit, then copy all the files in the \" x32 \" directory of the downloaded plug-in zip file into the \"VersionControl\" sub-folder of the SpiraTeam installation. Note: Do not create an x32 folder under VersionControl, make sure the files live in the VersionControl folder itself. Log in as the Administrator and go into SpiraTeam main Administration page and click on the \"Version Control\" link under System . Click the \"Add\" button to enter the Plug-in details page. The fields required are as follows: Name : The name must be \"SubversionProvider\". Description : The description is for your use only, and does not affect operation of the plug-in. Active : If checked, the plug-in is active and able to be used for any project. Connection Info : This field holds the root of the repository for any project accessing the plug-in, unless overridden in the Project Settings. Start the connection string with svn:// , http:// , or https:// . Login / Password : The user id and the password of the user to use while accessing and retrieving information from the Subversion server. Custom 01 : This field is used for debugging. Please leave it blank unless specified by support. Custom 02-04: These three fields are used to specify the standard Subversion layout, where there are specific folders for the Trunk, Branches and Tags: If you want to use the Branches feature in SpiraTeam, you need to populate all three fields: Custom 02: The folder containing the Trunk (usually called Trunk or trunk) Custom 03: The folder containing the Branches (usually called Branches or branches) Custom 04: The folder containing the Tags (usually called Tags or tags) Other Fields : The other fields (Domain, Custom 05) are not used by the plug-in and will be ignored. When finished, click the \"Insert\" button and you will be taken back to the Version Control integration list page, with SubversionProvider listed as an available plug-in. Verify that you are in the correct project using the drop-down at top, and click on the \"Project Settings\" link for the SubversionProvider. You will get a screen listing all the same configuration settings: Be sure to change the Active field to Yes, or the repository will not be available for the current project. Any other settings entered on this page will override - and have the same use as - the general settings that you created above. You would use these settings if you will have more than one project access different code repositories. Initial setup is complete, click on the \"Source Code\" menu under the Tracking tab to navigate and browse the source code repository. Using Subversion with SpiraTeam While being able to browse the source code repository can be useful in itself, the real strength comes from linking artifacts in SpiraTeam - including Incidents, Requirements, and Tasks - to revisions checked into the software repository. Viewing the Repository Tree View the source code tree by selecting the \"Source Code\" link under the Tracking tab. You will get a screen similar to: This means that SpiraTeam is making the initial connection to Subversion and building its local cache. Once it has finished building the cache, you'll see a screen that looks like: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. The file view will display the filename, the current revision number of the file and the date of the last commit. You can filter and sort on any of the columns, as well. The page will display the folders and files for the currently selected branch (in the example above \"Trunk\"), you can change the current branch at any time by selecting it from the dropdown menu: If you click on the Clone or Checkout button, SpiraTeam will display the URL you should use for connecting to Subversion using your SVN client: Viewing File Details To view the file details, click on a file in the right-hand side of the repository. The file details page displays the details on the selected revision. By default, it will be the HEAD revision, unless you clicked to view the file details from a revision. By clicking on the file name, you can download the specified revision of the file to your local machine. This does not do an SVN checkout; you are merely downloading the file to your local machine. Underneath the file details are tabs that show a preview of the file (with syntax highlighting), a list of all the revisions that this file belongs in, or was committed to, who performed the commit, and the log message for the commit, and a tab that shows any artifact associations. Throughout SpiraTeam, revisions are indicated by the icon: Revision Details By clicking on a revision in SpiraTeam, you will be taken to the revision details page. The revision details screen shows the log for the Commit, the commit date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this commit, with their full path and the action that was performed on them for this commit. Possible values are Added, Modified, or Deleted. The Associations tab shows any artifact (Incident, Task, Requirement, Test Case, Test Set, etc.) that the log message references. See Linking Artifacts for information on how to link a revision with a Subversion Commit: Linking Artifacts Linking an artifact is quite simple. To maintain the readability of Subversion's commit messages, we adopted a bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail. If you forget to add the association during the commit, you can use the 'Add Association' option within SpiraTeam to add the association after the fact. Troubleshooting While integration with Subversion is rather complex, as a user you will only receive a couple of errors that will prevent the integration from working: SpiraTeam will not display the login page, and there is an error (either on the page or in the Application Event Log) that says \"Could not load file or assembly.\" Subversion control and library files come in both 32-bit and 64-bit (\" Win32 \" or \" x64 \") versions. If this error occurs, it is most likely that the wrong version of the files were installed. Download the correct version from the Inflectra website, and overwrite the files in the VersionControl folder. SpiraTeam reports that the login information is incorrect. In this case, double check the Version Control settings, both for the Project (which overrides the general settings) and the general settings. Project settings will over-ride the general settings. Be sure to use a user that has access to all nodes in the tree starting from the root repository location. If you are taken back to the repository screen and given a message saying that the requested file was deleted from the system, this means that an attempt was made to view details on a file that is no longer part of the HEAD revision. This can happen when a file is deleted or renamed, and this is a normal condition in the code repository, not necessarily an error with Subversion or SpiraTeam.","title":"Subversion"},{"location":"Version-Control-Integration/Integrating-with-Subversion/#integrating-with-subversion","text":"Subversion (also known as SVN) is a Software Configuration Management (SCM) system, that enables users to work on code simultaneously while preserving previous versions by avoiding collisions in code edits. While users working on the code will usually have a complete copy of the repository on their local systems, this plug-in will access the repository remotely by use of the \" svn:// \" , \" http:// \" and \" https:// \" protocols. (Note that \" svn+ssh:// \" may be supported on a server by server basis.) Due to the methodologies in which IIS handles web requests and runs on the server, any SSH connection certificates that have trust issues will be automatically accepted. Therefore, we recommend using an IP address to connect to the server instead of a DNS name that could be redirected to an unsafe connection. The current version of the Subversion plugin requires SpiraPlan or SpiraTeam v5.4.0.0 or later.","title":"Integrating with Subversion"},{"location":"Version-Control-Integration/Integrating-with-Subversion/#installing-the-subversion-plug-in-to-install-the-subversion-version-control-plug-in-follow-these-steps","text":"","title":"Installing the Subversion Plug-In To install the Subversion Version Control plug-in, follow these steps:"},{"location":"Version-Control-Integration/Integrating-with-Subversion/#copy-the-following-files-into-place-on-your-web-servers-spirateam-installation","text":"","title":"Copy the following files into place on your Web Server's SpiraTeam installation:"},{"location":"Version-Control-Integration/Integrating-with-Subversion/#copy-the-file-subversionproviderdll-file-into-the-versioncontrol-sub-folder-of-the-spirateam-installation","text":"If your server operating system is 64-bit, then copy all the files in the \" x64 \" directory of the downloaded plug-in zip file into the \"VersionControl\" sub-folder of the SpiraTeam installation. Note: Do not create an x64 folder under VersionControl, make sure the files live in the VersionControl folder itself. If your server operating system is 32-bit, then copy all the files in the \" x32 \" directory of the downloaded plug-in zip file into the \"VersionControl\" sub-folder of the SpiraTeam installation. Note: Do not create an x32 folder under VersionControl, make sure the files live in the VersionControl folder itself. Log in as the Administrator and go into SpiraTeam main Administration page and click on the \"Version Control\" link under System . Click the \"Add\" button to enter the Plug-in details page. The fields required are as follows: Name : The name must be \"SubversionProvider\". Description : The description is for your use only, and does not affect operation of the plug-in. Active : If checked, the plug-in is active and able to be used for any project. Connection Info : This field holds the root of the repository for any project accessing the plug-in, unless overridden in the Project Settings. Start the connection string with svn:// , http:// , or https:// . Login / Password : The user id and the password of the user to use while accessing and retrieving information from the Subversion server. Custom 01 : This field is used for debugging. Please leave it blank unless specified by support. Custom 02-04: These three fields are used to specify the standard Subversion layout, where there are specific folders for the Trunk, Branches and Tags: If you want to use the Branches feature in SpiraTeam, you need to populate all three fields: Custom 02: The folder containing the Trunk (usually called Trunk or trunk) Custom 03: The folder containing the Branches (usually called Branches or branches) Custom 04: The folder containing the Tags (usually called Tags or tags) Other Fields : The other fields (Domain, Custom 05) are not used by the plug-in and will be ignored. When finished, click the \"Insert\" button and you will be taken back to the Version Control integration list page, with SubversionProvider listed as an available plug-in. Verify that you are in the correct project using the drop-down at top, and click on the \"Project Settings\" link for the SubversionProvider. You will get a screen listing all the same configuration settings: Be sure to change the Active field to Yes, or the repository will not be available for the current project. Any other settings entered on this page will override - and have the same use as - the general settings that you created above. You would use these settings if you will have more than one project access different code repositories. Initial setup is complete, click on the \"Source Code\" menu under the Tracking tab to navigate and browse the source code repository.","title":"Copy the file \"SubversionProvider.dll\" file into the \"VersionControl\" sub-folder of the SpiraTeam installation."},{"location":"Version-Control-Integration/Integrating-with-Subversion/#using-subversion-with-spirateam","text":"While being able to browse the source code repository can be useful in itself, the real strength comes from linking artifacts in SpiraTeam - including Incidents, Requirements, and Tasks - to revisions checked into the software repository.","title":"Using Subversion with SpiraTeam"},{"location":"Version-Control-Integration/Integrating-with-Subversion/#viewing-the-repository-tree","text":"View the source code tree by selecting the \"Source Code\" link under the Tracking tab. You will get a screen similar to: This means that SpiraTeam is making the initial connection to Subversion and building its local cache. Once it has finished building the cache, you'll see a screen that looks like: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. The file view will display the filename, the current revision number of the file and the date of the last commit. You can filter and sort on any of the columns, as well. The page will display the folders and files for the currently selected branch (in the example above \"Trunk\"), you can change the current branch at any time by selecting it from the dropdown menu: If you click on the Clone or Checkout button, SpiraTeam will display the URL you should use for connecting to Subversion using your SVN client:","title":"Viewing the Repository Tree"},{"location":"Version-Control-Integration/Integrating-with-Subversion/#viewing-file-details","text":"To view the file details, click on a file in the right-hand side of the repository. The file details page displays the details on the selected revision. By default, it will be the HEAD revision, unless you clicked to view the file details from a revision. By clicking on the file name, you can download the specified revision of the file to your local machine. This does not do an SVN checkout; you are merely downloading the file to your local machine. Underneath the file details are tabs that show a preview of the file (with syntax highlighting), a list of all the revisions that this file belongs in, or was committed to, who performed the commit, and the log message for the commit, and a tab that shows any artifact associations. Throughout SpiraTeam, revisions are indicated by the icon:","title":"Viewing File Details"},{"location":"Version-Control-Integration/Integrating-with-Subversion/#revision-details","text":"By clicking on a revision in SpiraTeam, you will be taken to the revision details page. The revision details screen shows the log for the Commit, the commit date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this commit, with their full path and the action that was performed on them for this commit. Possible values are Added, Modified, or Deleted. The Associations tab shows any artifact (Incident, Task, Requirement, Test Case, Test Set, etc.) that the log message references. See Linking Artifacts for information on how to link a revision with a Subversion Commit:","title":"Revision Details"},{"location":"Version-Control-Integration/Integrating-with-Subversion/#linking-artifacts","text":"Linking an artifact is quite simple. To maintain the readability of Subversion's commit messages, we adopted a bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail. If you forget to add the association during the commit, you can use the 'Add Association' option within SpiraTeam to add the association after the fact.","title":"Linking Artifacts"},{"location":"Version-Control-Integration/Integrating-with-Subversion/#troubleshooting","text":"While integration with Subversion is rather complex, as a user you will only receive a couple of errors that will prevent the integration from working: SpiraTeam will not display the login page, and there is an error (either on the page or in the Application Event Log) that says \"Could not load file or assembly.\" Subversion control and library files come in both 32-bit and 64-bit (\" Win32 \" or \" x64 \") versions. If this error occurs, it is most likely that the wrong version of the files were installed. Download the correct version from the Inflectra website, and overwrite the files in the VersionControl folder. SpiraTeam reports that the login information is incorrect. In this case, double check the Version Control settings, both for the Project (which overrides the general settings) and the general settings. Project settings will over-ride the general settings. Be sure to use a user that has access to all nodes in the tree starting from the root repository location. If you are taken back to the repository screen and given a message saying that the requested file was deleted from the system, this means that an attempt was made to view details on a file that is no longer part of the HEAD revision. This can happen when a file is deleted or renamed, and this is a normal condition in the code repository, not necessarily an error with Subversion or SpiraTeam.","title":"Troubleshooting"},{"location":"Version-Control-Integration/Integrating-with-TFS/","text":"Integrating with TFS Microsoft Visual Studio Team System (VSTS) Team Foundation Server (TFS) from Microsoft\u00ae (hereafter referred to as TFS) is a Software Configuration Management (SCM) system that enables users to work on code simultaneously while preserving previous versions by avoiding collisions in code edits. This plug-in will allow users of SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) to be able to browse a TFS repository and view revisions linked to SpiraTeam artifacts. There are separate plug-ins for TFS 2005/2008, 2010 and 2012+. When connecting to a TFS 2010/2012+ repository, the connection URL will also need to be in a different format (see below). While users working on the code will usually have a complete copy of the repository on their local systems, this plug-in will access the TFS repository remotely. The rest of this section outlines how to install and use the plug-in with SpiraTeam. Note: The plug-in will allow users to download and view different revisions of files and view revision logs, but no changes to the repository are allowed through the plug-in. Installing the TFS Plug-In To install the TFS Version Control plug-in, follow these steps: Download the appropriate TFS provider from the Inflectra website ( http://www.inflectra.com/SpiraTeam/Downloads.aspx ) -- there are separate versions for TFS 2005/2008, 2010 and TFS 2012 or later. Copy the following files from the plug-in zip-archive into the \"VersionControl\" sub-folder of the SpiraTeam installation: Microsoft.TeamFoundation.Client.dll Microsoft.TeamFoundation.Common.dll Microsoft.TeamFoundation.Common.Library.dll Microsoft.TeamFoundation.dll Microsoft.TeamFoundation.VersionControl.Client.dll Microsoft.TeamFoundation.VersionControl.Common.dll Microsoft.TeamFoundation.VersionControl.Common.Integration.dll TfsProvider.dll Log in as the Administrator and go into SpiraTeam main Administration page and click on the \"Version Control\" link under System . Click the \"Add\" button to enter the Plug-in details page. The fields required are as follows: Name : The name must be \"TfsProvider\". Description : The description is for your use only, and does not affect operation of the plug-in. Active : If checked, the plug-in is active and able to be used for any project. Connection Info : This field points to the URL used for accessing the Team Foundation Server. Typically TFS runs on website port 8080, but you may need to check with your IT administrator to verify. The exact connection URL will depend on your version of TFS: For TFS 2005 / 2008: http://myservname:8080 For TFS 2010 http://myservname:8080/tfs/projectcollection Where \"projectcollection\" is the name of the project collection you will be connecting to For TFS 2012 or later http://myservname:8080/tfs/projectcollection Where \"projectcollection\" is the name of the project collection you will be connecting to Login / Password : The user id and the password of the user to use while accessing and retrieving information from the TFS repository. If the repository doesn't require a username/password, just use \" anonymous\" as both the username and password. Domain: This is the Windows Domain that the TFS server is a member of. If the machine is not part of a domain, you should just use the TFS server name instead. If you are connecting to a hosted Visual Studio Online (VSO) repository, you should leave the Domain blank. Custom01 -- 05: are not used by the TFS plug-in and can be ignored When finished, click the \"Insert\" button and you will be taken back to the Version Control integration list page, with TfsProvider listed as an available plug-in. Verify that you are in the correct project using the drop-down at top, and click on the \"Project Settings\" link for the TfsProvider. You will get a screen listing all the same configuration settings: Be sure to change the Active field to Yes, or the repository will not be available for the current project. Custom 01: This should contain the name of the equivalent team project in TFS. Custom 02 -- 05: are not used by the TFS plug-in and can be ignored Any other settings entered on this page will override - and have the same use as - the general settings that you created above. You would use these settings if you will have more than one project access different code repositories. Initial setup is complete, click on the \"Source Code\" menu under the Tracking tab to navigate and browse the source code repository. Using TFS with SpiraTeam Whilst being able to browse the source code repository can be useful in itself, the real strength comes from linking artifacts in SpiraTeam - including Incidents, Requirements, and Tasks - to revisions checked into the TFS repository. Viewing the Repository Tree View the source code tree by selecting the \"Source Code\" link under the Tracking tab. You will get a screen similar to: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. Note that this view will always show the most recent revision of the database. The file view will display the filename, the current revision number of the file and the date of the last check-in. You can filter and sort on any of the columns, as well. The page will display the folders and files for the currently selected branch (in the example above \"Main\"), you can change the current branch at any time by selecting it from the dropdown menu: Viewing File Details To view the file details, click on a file in the right-hand side of the repository. The file details page displays the details on the selected revision. By default, it will be the most recent revision, unless you clicked to view the file details from a revision. By clicking on the file name, you can download the specified revision of the file to your local machine. This does not do a TFS checkout; you are merely downloading the file to your local machine. Underneath the file details is a preview of the contents of the source code file (with syntax coloring to make it easier to read). In addition, there are two other tabs that display the list of all the revisions made to this file and any associations with other SpiraTeam artifacts: The revision list will display the name of the revision, who performed the revision, and the log message for the action performed. Throughout SpiraTeam, revisions are indicated by the icon. The association list will display the list of SpiraTeam artifacts that are linked to this specific source code file. You can add a new association by clicking on the 'Add Association' hyperlink. Revision Details By clicking on a revision in SpiraTeam, you will be taken to the revision details page. The revision details screen shows the log for the action performed, the date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this revision, with their full path, latest revision and date of edit. The Associations tab shows any artifact (Incident, Requirement, Test Case, Test Set) that the log message references. See Linking Artifacts for information on how to link a revision with a TFS check-in or other action: Linking Artifacts Linking an artifact is quite simple. To maintain the readability of TFS check-in messages, we adopted a square bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail. If you forget to add the association during the commit, you can use the 'Add Association' option within SpiraTeam to add the association after the fact. Troubleshooting While integration with TFS is rather sophisticated behind the scenes, as a user you will only receive a couple of errors that will prevent the integration from working: SpiraTeam will not display the login page, and there is an error (either on the page or in the Application Event Log) that says \"Could not load file or assembly.\". If this error occurs, it is most likely that the TfsProvider.dll or some of its dependent assemblies were not correctly placed in the VersionControl folder of the SpiraTeam installation. SpiraTeam reports that the login information is incorrect. In this case, double check the Version Control settings, both for the Project (which overrides the general settings) and the general settings. Project settings will over-ride the general settings. Be sure to use a user that has access to all nodes in the tree starting from the root repository location. If you are taken back to the repository screen and given a message saying that the requested file was deleted from the system, this means that an attempt was made to view details on a file that was deleted in TFS. This is a normal condition in the code repository, not necessarily an error with TFS or SpiraTeam. Enforcing Associations with a Custom Policy As described in Linking Artifacts above, you can easily associate check-ins of code in TFS with relevant SpiraTeam artifacts by adding the appropriate artifact identifier in the commit messages. In order to enforce this process, one of our customers has written a custom Visual Studio 2008 and 2010/2012+ Team System check-in policy that will force users to enter at least one SpiraTeam artifact in each of the check-in comments. This policy will also check the IDs of the supplied artifacts to make sure they exist in the appropriate SpiraTeam installation. To install the custom check-in policy, you should download the SpiraPolicySetup.msi (for 2008) or SpiraPolicy.vsix (for 2010+) installation package from the Add-Ons/Downloads section of the Inflectra website ( http://www.inflectra.com/SpiraTeam/Downloads.aspx ) and run the installation package on each workstation that has Visual Studio installed. Once this installation has been completed, you need to tell Visual Studio to add the custom check-in policy: Inside Visual Studio, go to Team > Team Project Settings > Source Control to open up the Source Code extensions dialog box: Click on the Check-in Policy tab to list the various check-in policies: Click on the [Add...] button to add a new check-in policy: Select the SpiraTeam/Plan TFS check-in Policy and click [OK]. This will bring up the SpiraTeam custom policy configuration dialog box: Enter the URL for the SpiraTeam server (you only need the server name and virtual directory portion) as well as a valid login and password. Then click [Connect] to get the list of projects. Select the checkboxes for which artifact types you want to be included in the artifact enforcement and click the [OK] button to confirm the settings. Now when a user checks-in a change to the TFS source code repository, they will be required to enter at least one SpiraTeam artifact, and the system will check to make sure that artifact actually exists in the specified project.","title":"TFS"},{"location":"Version-Control-Integration/Integrating-with-TFS/#integrating-with-tfs","text":"Microsoft Visual Studio Team System (VSTS) Team Foundation Server (TFS) from Microsoft\u00ae (hereafter referred to as TFS) is a Software Configuration Management (SCM) system that enables users to work on code simultaneously while preserving previous versions by avoiding collisions in code edits. This plug-in will allow users of SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) to be able to browse a TFS repository and view revisions linked to SpiraTeam artifacts. There are separate plug-ins for TFS 2005/2008, 2010 and 2012+. When connecting to a TFS 2010/2012+ repository, the connection URL will also need to be in a different format (see below). While users working on the code will usually have a complete copy of the repository on their local systems, this plug-in will access the TFS repository remotely. The rest of this section outlines how to install and use the plug-in with SpiraTeam. Note: The plug-in will allow users to download and view different revisions of files and view revision logs, but no changes to the repository are allowed through the plug-in.","title":"Integrating with TFS"},{"location":"Version-Control-Integration/Integrating-with-TFS/#installing-the-tfs-plug-in-to-install-the-tfs-version-control-plug-in-follow-these-steps","text":"","title":"Installing the TFS Plug-In To install the TFS Version Control plug-in, follow these steps:"},{"location":"Version-Control-Integration/Integrating-with-TFS/#download-the-appropriate-tfs-provider-from-the-inflectra-website-httpwwwinflectracomspirateamdownloadsaspx-there-are-separate-versions-for-tfs-20052008-2010-and-tfs-2012-or-later","text":"","title":"Download the appropriate TFS provider from the Inflectra website (http://www.inflectra.com/SpiraTeam/Downloads.aspx) -- there are separate versions for TFS 2005/2008, 2010 and TFS 2012 or later."},{"location":"Version-Control-Integration/Integrating-with-TFS/#copy-the-following-files-from-the-plug-in-zip-archive-into-the-versioncontrol-sub-folder-of-the-spirateam-installation","text":"Microsoft.TeamFoundation.Client.dll Microsoft.TeamFoundation.Common.dll Microsoft.TeamFoundation.Common.Library.dll Microsoft.TeamFoundation.dll Microsoft.TeamFoundation.VersionControl.Client.dll Microsoft.TeamFoundation.VersionControl.Common.dll Microsoft.TeamFoundation.VersionControl.Common.Integration.dll TfsProvider.dll Log in as the Administrator and go into SpiraTeam main Administration page and click on the \"Version Control\" link under System . Click the \"Add\" button to enter the Plug-in details page. The fields required are as follows: Name : The name must be \"TfsProvider\". Description : The description is for your use only, and does not affect operation of the plug-in. Active : If checked, the plug-in is active and able to be used for any project. Connection Info : This field points to the URL used for accessing the Team Foundation Server. Typically TFS runs on website port 8080, but you may need to check with your IT administrator to verify. The exact connection URL will depend on your version of TFS: For TFS 2005 / 2008: http://myservname:8080 For TFS 2010 http://myservname:8080/tfs/projectcollection Where \"projectcollection\" is the name of the project collection you will be connecting to For TFS 2012 or later http://myservname:8080/tfs/projectcollection Where \"projectcollection\" is the name of the project collection you will be connecting to Login / Password : The user id and the password of the user to use while accessing and retrieving information from the TFS repository. If the repository doesn't require a username/password, just use \" anonymous\" as both the username and password. Domain: This is the Windows Domain that the TFS server is a member of. If the machine is not part of a domain, you should just use the TFS server name instead. If you are connecting to a hosted Visual Studio Online (VSO) repository, you should leave the Domain blank. Custom01 -- 05: are not used by the TFS plug-in and can be ignored When finished, click the \"Insert\" button and you will be taken back to the Version Control integration list page, with TfsProvider listed as an available plug-in. Verify that you are in the correct project using the drop-down at top, and click on the \"Project Settings\" link for the TfsProvider. You will get a screen listing all the same configuration settings: Be sure to change the Active field to Yes, or the repository will not be available for the current project. Custom 01: This should contain the name of the equivalent team project in TFS. Custom 02 -- 05: are not used by the TFS plug-in and can be ignored Any other settings entered on this page will override - and have the same use as - the general settings that you created above. You would use these settings if you will have more than one project access different code repositories. Initial setup is complete, click on the \"Source Code\" menu under the Tracking tab to navigate and browse the source code repository.","title":"Copy the following files from the plug-in zip-archive into the \"VersionControl\" sub-folder of the SpiraTeam installation:"},{"location":"Version-Control-Integration/Integrating-with-TFS/#using-tfs-with-spirateam","text":"Whilst being able to browse the source code repository can be useful in itself, the real strength comes from linking artifacts in SpiraTeam - including Incidents, Requirements, and Tasks - to revisions checked into the TFS repository.","title":"Using TFS with SpiraTeam"},{"location":"Version-Control-Integration/Integrating-with-TFS/#viewing-the-repository-tree","text":"View the source code tree by selecting the \"Source Code\" link under the Tracking tab. You will get a screen similar to: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. Note that this view will always show the most recent revision of the database. The file view will display the filename, the current revision number of the file and the date of the last check-in. You can filter and sort on any of the columns, as well. The page will display the folders and files for the currently selected branch (in the example above \"Main\"), you can change the current branch at any time by selecting it from the dropdown menu:","title":"Viewing the Repository Tree"},{"location":"Version-Control-Integration/Integrating-with-TFS/#viewing-file-details","text":"To view the file details, click on a file in the right-hand side of the repository. The file details page displays the details on the selected revision. By default, it will be the most recent revision, unless you clicked to view the file details from a revision. By clicking on the file name, you can download the specified revision of the file to your local machine. This does not do a TFS checkout; you are merely downloading the file to your local machine. Underneath the file details is a preview of the contents of the source code file (with syntax coloring to make it easier to read). In addition, there are two other tabs that display the list of all the revisions made to this file and any associations with other SpiraTeam artifacts: The revision list will display the name of the revision, who performed the revision, and the log message for the action performed. Throughout SpiraTeam, revisions are indicated by the icon. The association list will display the list of SpiraTeam artifacts that are linked to this specific source code file. You can add a new association by clicking on the 'Add Association' hyperlink.","title":"Viewing File Details"},{"location":"Version-Control-Integration/Integrating-with-TFS/#revision-details","text":"By clicking on a revision in SpiraTeam, you will be taken to the revision details page. The revision details screen shows the log for the action performed, the date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this revision, with their full path, latest revision and date of edit. The Associations tab shows any artifact (Incident, Requirement, Test Case, Test Set) that the log message references. See Linking Artifacts for information on how to link a revision with a TFS check-in or other action:","title":"Revision Details"},{"location":"Version-Control-Integration/Integrating-with-TFS/#linking-artifacts","text":"Linking an artifact is quite simple. To maintain the readability of TFS check-in messages, we adopted a square bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail. If you forget to add the association during the commit, you can use the 'Add Association' option within SpiraTeam to add the association after the fact.","title":"Linking Artifacts"},{"location":"Version-Control-Integration/Integrating-with-TFS/#troubleshooting","text":"While integration with TFS is rather sophisticated behind the scenes, as a user you will only receive a couple of errors that will prevent the integration from working: SpiraTeam will not display the login page, and there is an error (either on the page or in the Application Event Log) that says \"Could not load file or assembly.\". If this error occurs, it is most likely that the TfsProvider.dll or some of its dependent assemblies were not correctly placed in the VersionControl folder of the SpiraTeam installation. SpiraTeam reports that the login information is incorrect. In this case, double check the Version Control settings, both for the Project (which overrides the general settings) and the general settings. Project settings will over-ride the general settings. Be sure to use a user that has access to all nodes in the tree starting from the root repository location. If you are taken back to the repository screen and given a message saying that the requested file was deleted from the system, this means that an attempt was made to view details on a file that was deleted in TFS. This is a normal condition in the code repository, not necessarily an error with TFS or SpiraTeam.","title":"Troubleshooting"},{"location":"Version-Control-Integration/Integrating-with-TFS/#enforcing-associations-with-a-custom-policy","text":"As described in Linking Artifacts above, you can easily associate check-ins of code in TFS with relevant SpiraTeam artifacts by adding the appropriate artifact identifier in the commit messages. In order to enforce this process, one of our customers has written a custom Visual Studio 2008 and 2010/2012+ Team System check-in policy that will force users to enter at least one SpiraTeam artifact in each of the check-in comments. This policy will also check the IDs of the supplied artifacts to make sure they exist in the appropriate SpiraTeam installation. To install the custom check-in policy, you should download the SpiraPolicySetup.msi (for 2008) or SpiraPolicy.vsix (for 2010+) installation package from the Add-Ons/Downloads section of the Inflectra website ( http://www.inflectra.com/SpiraTeam/Downloads.aspx ) and run the installation package on each workstation that has Visual Studio installed. Once this installation has been completed, you need to tell Visual Studio to add the custom check-in policy: Inside Visual Studio, go to Team > Team Project Settings > Source Control to open up the Source Code extensions dialog box: Click on the Check-in Policy tab to list the various check-in policies: Click on the [Add...] button to add a new check-in policy: Select the SpiraTeam/Plan TFS check-in Policy and click [OK]. This will bring up the SpiraTeam custom policy configuration dialog box: Enter the URL for the SpiraTeam server (you only need the server name and virtual directory portion) as well as a valid login and password. Then click [Connect] to get the list of projects. Select the checkboxes for which artifact types you want to be included in the artifact enforcement and click the [OK] button to confirm the settings. Now when a user checks-in a change to the TFS source code repository, they will be required to enter at least one SpiraTeam artifact, and the system will check to make sure that artifact actually exists in the specified project.","title":"Enforcing Associations with a Custom Policy"},{"location":"Version-Control-Integration/Integrating-with-VSS/","text":"Integrating with VSS Visual SourceSafe\u00ae (VSS) from Microsoft\u00ae is a Software Configuration Management (SCM) system that enables users to work on code simultaneously while preserving previous versions by avoiding collisions in code edits. This plug-in will allow users of SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) to be able to browse a VSS database and view revisions linked to SpiraTeam artifacts. While users working on the code will usually have a complete copy of the repository on their local systems, this plug-in will access the VSS database remotely.The rest of this section outlines how to install and use the plug-in with SpiraTeam. Note: The plug-in will allow users to download and view different revisions of files and view revision logs, but no changes to the repository are allowed through the plug-in. Installing the VSS Plug-In To install the VSS Version Control plug-in, follow these steps: Install a copy of Visual SourceSafe on the same server that is running SpiraTeam (if it is already installed on the server, you can disregard this step). Copy the following files from the plug-in zip-archive into the \"VersionControl\" sub-folder of the SpiraTeam installation: VssProvider.dll SourceSafe.Interop.dll Log in as the Administrator and go into SpiraTeam main Administration page and click on the \"Version Control\" link under System . Click the \"Add\" button to enter the Plug-in details page. The fields required are as follows: Name : The name must be \"VssProvider\". Description : The description is for your use only, and does not affect operation of the plug-in. Active : If checked, the plug-in is active and able to be used for any project. Connection Info : This field points to the filepath where the srcsafe.ini file is located (which contains the VSS database information). For example: C:\\VssDatabases\\Project1\\srcsafe.ini Login / Password : The user id and the password of the user to use while accessing and retrieving information from the VSS database. If the repository doesn't require a password, just use \" anonymous\" as the password. Domain: is not used by the VSS plug-in and can be ignored Custom01 -- 05: are not used by the VSS plug-in and can be ignored When finished, click the \"Insert\" button and you will be taken back to the Version Control integration list page, with VssProvider listed as an available plug-in. Verify that you are in the correct project using the drop-down at top, and click on the \"Project Settings\" link for the VssProvider. You will get a screen listing all the same configuration settings: Be sure to change the Active field to Yes, or the repository will not be available for the current project. Any other settings entered on this page will override - and have the same use as - the general settings that you created above. You would use these settings if you will have more than one project access different code repositories. Initial setup is complete, click on the \"Source Code\" menu under the Tracking tab to navigate and browse the source code database. Using VSS with SpiraTeam While being able to browse the source code repository can be useful in itself, the real strength comes from linking artifacts in SpiraTeam - including Incidents, Requirements, and Tasks - to revisions checked into the VSS database. Viewing the Repository Tree View the source code tree by selecting the \"Source Code\" link under the Tracking tab. You will get a screen similar to: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. Note that this view will always show the most recent revision of the database. The file view will display the filename, the current revision number of the file and the date of the last check-in. You can filter and sort on any of the columns, as well. Viewing File Details To view the file details, click on a file in the right-hand side of the repository. The file details page displays the details on the selected revision. By default, it will be the most recent revision, unless you clicked to view the file details from a revision. By clicking on the file name, you can download the specified revision of the file to your local machine. This does not do a VSS checkout; you are merely downloading the file to your local machine. Underneath the file details is a list of all the revisions made to this file, who performed the revision, and the log message for the action performed. Throughout SpiraTeam, revisions are indicated by the icon. Revision Details By clicking on a revision in SpiraTeam, you will be taken to the revision details page. The revision details screen shows the log for the action performed, the date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this revision, with their full path, latest revision and date of edit. The Associations tab shows any artifact (Incident, Requirement, Test Case, Test Set) that the log message references. See Requirements Management > Overview - Scenario for information on how to link a revision with a VSS check-in or other action: Linking Artifacts Linking an artifact is quite simple. To maintain the readability of VSS check-in messages, we adopted a square bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail. Troubleshooting While integration with VSS is rather complex behind the scenes, as a user you will only receive a couple of errors that will prevent the integration from working: SpiraTeam will not display the login page, and there is an error (either on the page or in the Application Event Log) that says \"Could not load file or assembly.\". If this error occurs, it is most likely that the VssProvider.dll or some of its dependent assemblies were not correctly placed in the VersionControl folder of the SpiraTeam installation. SpiraTeam reports that the login information is incorrect. In this case, double check the Version Control settings, both for the Project (which overrides the general settings) and the general settings. Project settings will over-ride the general settings. Be sure to use a user that has access to all nodes in the tree starting from the root repository location. If you are taken back to the repository screen and given a message saying that the requested file was deleted from the system, this means that an attempt was made to view details on a file that was deleted or destroyed in VSS. This is a normal condition in the code repository, not necessarily an error with VSS or SpiraTeam. If you have the VSS database located on a remote file-share on a separate server to SpiraTeam, you will need to modify the identify used by the IIS Application Pool running SpiraTeam. By default the IIS Application Pool will run as the special Windows user \"NETWORK SERVICE\". Whilst this is a secure account with low privileges for normal use of the system, it may not have sufficient permissions to access the VSS repository over your Local Area Network (LAN). We recommend changing the IIS Application Pool to instead run as a Windows Domain user that has permissions to access the remote file-share containing the VSS database.","title":"VSS"},{"location":"Version-Control-Integration/Integrating-with-VSS/#integrating-with-vss","text":"Visual SourceSafe\u00ae (VSS) from Microsoft\u00ae is a Software Configuration Management (SCM) system that enables users to work on code simultaneously while preserving previous versions by avoiding collisions in code edits. This plug-in will allow users of SpiraPlan or SpiraTeam (hereafter referred to as SpiraTeam) to be able to browse a VSS database and view revisions linked to SpiraTeam artifacts. While users working on the code will usually have a complete copy of the repository on their local systems, this plug-in will access the VSS database remotely.The rest of this section outlines how to install and use the plug-in with SpiraTeam. Note: The plug-in will allow users to download and view different revisions of files and view revision logs, but no changes to the repository are allowed through the plug-in.","title":"Integrating with VSS"},{"location":"Version-Control-Integration/Integrating-with-VSS/#installing-the-vss-plug-in-to-install-the-vss-version-control-plug-in-follow-these-steps","text":"","title":"Installing the VSS Plug-In To install the VSS Version Control plug-in, follow these steps:"},{"location":"Version-Control-Integration/Integrating-with-VSS/#install-a-copy-of-visual-sourcesafe-on-the-same-server-that-is-running-spirateam-if-it-is-already-installed-on-the-server-you-can-disregard-this-step","text":"","title":"Install a copy of Visual SourceSafe on the same server that is running SpiraTeam (if it is already installed on the server, you can disregard this step)."},{"location":"Version-Control-Integration/Integrating-with-VSS/#copy-the-following-files-from-the-plug-in-zip-archive-into-the-versioncontrol-sub-folder-of-the-spirateam-installation","text":"VssProvider.dll SourceSafe.Interop.dll Log in as the Administrator and go into SpiraTeam main Administration page and click on the \"Version Control\" link under System . Click the \"Add\" button to enter the Plug-in details page. The fields required are as follows: Name : The name must be \"VssProvider\". Description : The description is for your use only, and does not affect operation of the plug-in. Active : If checked, the plug-in is active and able to be used for any project. Connection Info : This field points to the filepath where the srcsafe.ini file is located (which contains the VSS database information). For example: C:\\VssDatabases\\Project1\\srcsafe.ini Login / Password : The user id and the password of the user to use while accessing and retrieving information from the VSS database. If the repository doesn't require a password, just use \" anonymous\" as the password. Domain: is not used by the VSS plug-in and can be ignored Custom01 -- 05: are not used by the VSS plug-in and can be ignored When finished, click the \"Insert\" button and you will be taken back to the Version Control integration list page, with VssProvider listed as an available plug-in. Verify that you are in the correct project using the drop-down at top, and click on the \"Project Settings\" link for the VssProvider. You will get a screen listing all the same configuration settings: Be sure to change the Active field to Yes, or the repository will not be available for the current project. Any other settings entered on this page will override - and have the same use as - the general settings that you created above. You would use these settings if you will have more than one project access different code repositories. Initial setup is complete, click on the \"Source Code\" menu under the Tracking tab to navigate and browse the source code database.","title":"Copy the following files from the plug-in zip-archive into the \"VersionControl\" sub-folder of the SpiraTeam installation:"},{"location":"Version-Control-Integration/Integrating-with-VSS/#using-vss-with-spirateam","text":"While being able to browse the source code repository can be useful in itself, the real strength comes from linking artifacts in SpiraTeam - including Incidents, Requirements, and Tasks - to revisions checked into the VSS database.","title":"Using VSS with SpiraTeam"},{"location":"Version-Control-Integration/Integrating-with-VSS/#viewing-the-repository-tree","text":"View the source code tree by selecting the \"Source Code\" link under the Tracking tab. You will get a screen similar to: The folder tree of the repository is on the left, and files in the current selected directory will be listed in the right table. Note that this view will always show the most recent revision of the database. The file view will display the filename, the current revision number of the file and the date of the last check-in. You can filter and sort on any of the columns, as well.","title":"Viewing the Repository Tree"},{"location":"Version-Control-Integration/Integrating-with-VSS/#viewing-file-details","text":"To view the file details, click on a file in the right-hand side of the repository. The file details page displays the details on the selected revision. By default, it will be the most recent revision, unless you clicked to view the file details from a revision. By clicking on the file name, you can download the specified revision of the file to your local machine. This does not do a VSS checkout; you are merely downloading the file to your local machine. Underneath the file details is a list of all the revisions made to this file, who performed the revision, and the log message for the action performed. Throughout SpiraTeam, revisions are indicated by the icon.","title":"Viewing File Details"},{"location":"Version-Control-Integration/Integrating-with-VSS/#revision-details","text":"By clicking on a revision in SpiraTeam, you will be taken to the revision details page. The revision details screen shows the log for the action performed, the date and author. At the bottom of the page are two tabs, Files and Associations. The Files tab lists all files that were a part of this revision, with their full path, latest revision and date of edit. The Associations tab shows any artifact (Incident, Requirement, Test Case, Test Set) that the log message references. See Requirements Management > Overview - Scenario for information on how to link a revision with a VSS check-in or other action:","title":"Revision Details"},{"location":"Version-Control-Integration/Integrating-with-VSS/#linking-artifacts","text":"Linking an artifact is quite simple. To maintain the readability of VSS check-in messages, we adopted a square bracket token. The token is in the format of: [<artifact identifier>:<artifact id>] The first half, the Artifact Identifier, is a two-letter code that is used throughout SpiraTeam, and is visible on almost every page in the application. For example, a requirement's identifier is \" RQ \". Incidents are \" IN \", and test cases are \" TC \". The artifact ID is the number of the artifact. So by creating a commit message that reads: SpiraTeam will automatically detect tokens and will include links to them under the Associations tab for a revision detail.","title":"Linking Artifacts"},{"location":"Version-Control-Integration/Integrating-with-VSS/#troubleshooting","text":"While integration with VSS is rather complex behind the scenes, as a user you will only receive a couple of errors that will prevent the integration from working: SpiraTeam will not display the login page, and there is an error (either on the page or in the Application Event Log) that says \"Could not load file or assembly.\". If this error occurs, it is most likely that the VssProvider.dll or some of its dependent assemblies were not correctly placed in the VersionControl folder of the SpiraTeam installation. SpiraTeam reports that the login information is incorrect. In this case, double check the Version Control settings, both for the Project (which overrides the general settings) and the general settings. Project settings will over-ride the general settings. Be sure to use a user that has access to all nodes in the tree starting from the root repository location. If you are taken back to the repository screen and given a message saying that the requested file was deleted from the system, this means that an attempt was made to view details on a file that was deleted or destroyed in VSS. This is a normal condition in the code repository, not necessarily an error with VSS or SpiraTeam. If you have the VSS database located on a remote file-share on a separate server to SpiraTeam, you will need to modify the identify used by the IIS Application Pool running SpiraTeam. By default the IIS Application Pool will run as the special Windows user \"NETWORK SERVICE\". Whilst this is a secure account with low privileges for normal use of the system, it may not have sufficient permissions to access the VSS repository over your Local Area Network (LAN). We recommend changing the IIS Application Pool to instead run as a Windows Domain user that has permissions to access the remote file-share containing the VSS database.","title":"Troubleshooting"}]}